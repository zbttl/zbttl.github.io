<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>施工中</title>
    <url>/shi-gong-zhong/</url>
    <content><![CDATA[<p>想到什么说什么。<br>玩玩什么记什么。<br>正在将大学几年的笔记慢慢搬过来。</p>
]]></content>
  </entry>
  <entry>
    <title>Windows DLNA</title>
    <url>/windows-dlna/</url>
    <content><![CDATA[<p>参考文章：<a href="https://jingyan.baidu.com/article/148a19214c4f770d70c3b14b.html">win10 电脑开启 DLNA 投屏（支持 rmvb/flv 全格式）</a></p>
<p>之前以为 dlna 很难用。。。其实电脑和电视在同一个 wifi 下，通过某种手段把文件投过去就行了。</p>
<p>参考文章说的挺详细了，一般的 mp4 格式其实右键就可以投屏。但主要是 flv 和浏览器这种东西就没法投。除了装 kodi 之类的软件外，还有一种方法就是改造 windows media player。</p>
<p>在媒体流处把启用媒体流和允许本地网络打开，然后就装解码器即可。</p>
<p>文章里推荐的是 <a href="https://www.majorgeeks.com/files/details/win7codecs.html">Shark007 ADVANCED Codecs</a>，这玩意。。。实话说，内含的缩略图拓展 software 做的还不错，但一个是装完以后只是 windows media player 能放 flv 了，但大量 flv 在 media player 里面却还是扫不出来；还有就是难装难卸，难装并不是指我超链接过去下载的 exe 难装，而是它本身在我常用的包管理器 chocolatey 里面有源，但那个源我无论是用实机还是用虚拟机都装不上，换版本也不行，问题十分奇葩；卸载的时候我的 explore.exe 直接崩掉了，甚至没法用任务管理器新建任务拉起来，只能注销。</p>
<p>更推荐我之前在 18.6.22 那个无比详尽的视频日记里面提到过的 k-litecodec，可以直接用 chocolatey 装，也不用装 full 版，装个 basic 就可以了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">choco install -y k-litecodecpackbasic</span><br></pre></td></tr></table></figure>

<p>然后去 media player 里面，把原来的视频库的视频文件夹移除再加回来；或者新建一个文件夹把 flv 放进去再加进视频库里面，就可以了。</p>
]]></content>
      <categories>
        <category>影音</category>
      </categories>
      <tags>
        <tag>DLNA</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 进阶</title>
    <url>/hexo-jin-jie/</url>
    <content><![CDATA[<h2 id="NexT-更新"><a href="#NexT-更新" class="headerlink" title="NexT 更新"></a>NexT 更新</h2><p>光 速 更 新（不是</p>
<p>啊我刚写完上一篇挑博客系统的时候发现 gitment 怎么都不生效，想想是不是 next 有其他的生效方法。。。摸到 next 项目的 md 那边才发现一个惊讶的事实：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201221175721.png"></p>
<p>我上一篇用的是 7.8.0。。。原因啊，毕竟我也是看的人家的教程来学的，然后 clone 人家教程上面的 url 告诉我这个仓库的 NexT 过时了，显示了个新的仓库，我就直接摸过去了，谁知道还有更新的，佛了。</p>
<p>那就老老实实迁移吧，备份主题配置文件，删掉 themes 下的 NexT 主题，clone 新仓库的主题，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp themes&#x2F;next&#x2F;_config.yml themes&#x2F;_config.yml.bak</span><br><span class="line">rm -r themes&#x2F;next</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;next-theme&#x2F;hexo-theme-next.git themes&#x2F;next</span><br></pre></td></tr></table></figure>

<p>然后用 vscode 对一下新 clone 下来的主题配置文件和备份的旧版主题配置文件的差别把改的地方怼过去。。。</p>
<p>慢！</p>
<p>根据 <a href="https://theme-next.js.org/docs/getting-started/configuration.html">Configuration</a>，咱们现在用的 hexo 5.0 已经支持这种新的配置方式了，说人话就是不用再进 <code>themes/next</code> 里面改配置了，只需要在全局主题里面加（并且在这些配置的开头顶上加 <code>theme_config</code> 并给这些配置一个两空格缩进），或者在 hexo 根目录新开一个 <code>_config.next.yml</code> 把要改的配置丢进去就完事了。有点像以前写过的 rime 输入法的 patch 文件。</p>
<p>按上一篇文章的功能来，大部分需要修改主题配置文件的地方我都抽取出来放在了<code>_config.next.yml</code> ，以下是代码参考：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Define custom file paths.</span><br><span class="line"># Create your custom files in site directory &#96;source&#x2F;_data&#96; and uncomment needed files below.</span><br><span class="line">custom_file_path:</span><br><span class="line">  #head: source&#x2F;_data&#x2F;head.njk</span><br><span class="line">  #header: source&#x2F;_data&#x2F;header.njk</span><br><span class="line">  #sidebar: source&#x2F;_data&#x2F;sidebar.njk</span><br><span class="line">  #postMeta: source&#x2F;_data&#x2F;post-meta.njk</span><br><span class="line">  #postBodyEnd: source&#x2F;_data&#x2F;post-body-end.njk</span><br><span class="line">  footer: source&#x2F;_data&#x2F;footer.njk</span><br><span class="line">  bodyEnd: source&#x2F;_data&#x2F;body-end.njk</span><br><span class="line">  #variable: source&#x2F;_data&#x2F;variables.styl</span><br><span class="line">  #mixin: source&#x2F;_data&#x2F;mixins.styl</span><br><span class="line">  style: source&#x2F;_data&#x2F;styles.styl</span><br><span class="line"></span><br><span class="line">creative_commons:</span><br><span class="line">  license: by-sa</span><br><span class="line">  sidebar: false</span><br><span class="line">  post: true</span><br><span class="line">  language:</span><br><span class="line"></span><br><span class="line">menu:</span><br><span class="line">  home: &#x2F; || fa fa-home</span><br><span class="line">  tags: &#x2F;tags&#x2F; || fa fa-tags</span><br><span class="line">  categories: &#x2F;categories&#x2F; || fa fa-th</span><br><span class="line">  archives: &#x2F;archives&#x2F; || fa fa-archive</span><br><span class="line">  #schedule: &#x2F;schedule&#x2F; || fa fa-calendar</span><br><span class="line">  #sitemap: &#x2F;sitemap.xml || fa fa-sitemap</span><br><span class="line">  #commonweal: &#x2F;404&#x2F; || fa fa-heartbeat</span><br><span class="line">  about: &#x2F;about&#x2F; || fa fa-user</span><br><span class="line"></span><br><span class="line">social:</span><br><span class="line">  GitHub: https:&#x2F;&#x2F;github.com&#x2F;zbttl || fab fa-github</span><br><span class="line">  E-Mail: mailto:zbttls@gmail.com|| fa fa-envelope</span><br><span class="line">  #Weibo: https:&#x2F;&#x2F;weibo.com&#x2F;yourname || fab fa-weibo</span><br><span class="line">  #Google: https:&#x2F;&#x2F;plus.google.com&#x2F;yourname || fab fa-google</span><br><span class="line">  #Twitter: https:&#x2F;&#x2F;twitter.com&#x2F;yourname || fab fa-twitter</span><br><span class="line">  #FB Page: https:&#x2F;&#x2F;www.facebook.com&#x2F;yourname || fab fa-facebook</span><br><span class="line">  #StackOverflow: https:&#x2F;&#x2F;stackoverflow.com&#x2F;yourname || fab fa-stack-overflow</span><br><span class="line">  #YouTube: https:&#x2F;&#x2F;youtube.com&#x2F;yourname || fab fa-youtube</span><br><span class="line">  #Instagram: https:&#x2F;&#x2F;instagram.com&#x2F;yourname || fab fa-instagram</span><br><span class="line">  #Skype: skype:yourname?call|chat || fab fa-skype</span><br><span class="line"></span><br><span class="line">footer:</span><br><span class="line">  # Specify the year when the site was setup. If not defined, current year will be used.</span><br><span class="line">  #since: 2020</span><br><span class="line"></span><br><span class="line">  # Icon between year and copyright info.</span><br><span class="line">  icon:</span><br><span class="line">    # Icon name in Font Awesome. See: https:&#x2F;&#x2F;fontawesome.com&#x2F;icons</span><br><span class="line">    name: fa fa-heart</span><br><span class="line">    # If you want to animate the icon, set it to true.</span><br><span class="line">    animated: false</span><br><span class="line">    # Change the color of icon, using Hex Code.</span><br><span class="line">    color: &quot;#ff0000&quot;</span><br><span class="line"></span><br><span class="line">  # If not defined, &#96;author&#96; from Hexo &#96;_config.yml&#96; will be used.</span><br><span class="line">  copyright:</span><br><span class="line"></span><br><span class="line">  # Powered by Hexo &amp; NexT</span><br><span class="line">  powered: false</span><br><span class="line"></span><br><span class="line">  # Beian ICP and gongan information for Chinese users. See: https:&#x2F;&#x2F;beian.miit.gov.cn, http:&#x2F;&#x2F;www.beian.gov.cn</span><br><span class="line">  beian:</span><br><span class="line">    enable: false</span><br><span class="line">    icp:</span><br><span class="line">    # The digit in the num of gongan beian.</span><br><span class="line">    gongan_id:</span><br><span class="line">    # The full num of gongan beian.</span><br><span class="line">    gongan_num:</span><br><span class="line">    # The icon for gongan beian. See: http:&#x2F;&#x2F;www.beian.gov.cn&#x2F;portal&#x2F;download</span><br><span class="line">    gongan_icon_url:</span><br><span class="line"></span><br><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true</span><br><span class="line">  item_text_post: true</span><br><span class="line">  item_text_total: true</span><br><span class="line"></span><br><span class="line">codeblock:</span><br><span class="line">  # Code Highlight theme</span><br><span class="line">  # All available themes: https:&#x2F;&#x2F;theme-next.js.org&#x2F;highlight&#x2F;</span><br><span class="line">  theme:</span><br><span class="line">    light: default</span><br><span class="line">    dark: tomorrow-night</span><br><span class="line">  prism:</span><br><span class="line">    light: prism</span><br><span class="line">    dark: prism-dark</span><br><span class="line">  # Add copy button on codeblock</span><br><span class="line">  copy_button:</span><br><span class="line">    enable: true</span><br><span class="line">    # Available values: default | flat | mac</span><br><span class="line">    style:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">busuanzi_count:</span><br><span class="line">  enable: true</span><br><span class="line">  total_visitors: true</span><br><span class="line">  total_visitors_icon: fa fa-user</span><br><span class="line">  total_views: false</span><br><span class="line">  total_views_icon: fa fa-eye</span><br><span class="line">  post_views: true</span><br><span class="line">  post_views_icon: far fa-eye</span><br><span class="line"></span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # If auto, trigger search by changing input.</span><br><span class="line">  # If manual, trigger search by pressing enter key or search button.</span><br><span class="line">  trigger: auto</span><br><span class="line">  # Show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  # Unescape html strings to the readable one.</span><br><span class="line">  unescape: false</span><br><span class="line">  # Preload the search data when the page loads.</span><br><span class="line">  preload: false</span><br><span class="line"></span><br><span class="line"># cursor_effect:</span><br><span class="line">#   enabled: true</span><br><span class="line">#   type: fireworks  # fireworks：礼花 | explosion：爆炸 | love：浮出爱心 | text：浮出文字</span><br><span class="line">cursor_effect: text</span><br></pre></td></tr></table></figure>

<p>认真看是不是还少了什么？</p>
<p>对了，背景动态火柴棍没了。。。。</p>
<p>记得这个效果是怎么实现的吗？是通过 git clone 本插件到 <code>next/source/lib</code> 中。根据 <a href="https://theme-next.js.org/docs/getting-started/upgrade.html">Upgrade</a> 所说：</p>
<blockquote>
<p>Since v8.0.0, all libraries under the <code>next/source/lib</code> directory was moved out to <a href="https://github.com/next-theme/plugins">@next-theme/plugins</a>. Please see this article for the new 3rd-party libraries installation method: <a href="https://theme-next.js.org/docs/third-party-services/#Adding-Plugins">Adding Plugins</a>.</p>
</blockquote>
<p>但我查了一下这个库，发现也没有 <code>canvas_nest</code>，看来多半是被 delete 了。</p>
<p>没关系，我们还有大力出奇迹！</p>
<p>找到 <code>canvas_nest</code>的 github 库：<a href="https://github.com/theme-next">theme-next</a>/<strong><a href="https://github.com/theme-next/theme-next-canvas-nest">theme-next-canvas-nest</a></strong></p>
<p>按说明行事：</p>
<ol>
<li><p>在 <code>hexo/source/_data</code> 中新建 <code>footer.njk</code>（不是 <code>footer.swig</code> 哦）。</p>
<blockquote>
<p> 由于 NexT 以前使用的 swig 模版引擎停止维护，去年迁移到了 Nunjucks</p>
</blockquote>
</li>
<li><p>加入以下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script color&#x3D;&quot;120,120,120&quot; opacity&#x3D;&quot;0.5&quot; zIndex&#x3D;&quot;-1&quot; count&#x3D;&quot;150&quot; src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;canvas-nest.js@1&#x2F;dist&#x2F;canvas-nest.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>（修改了一下，和原来我们在主题配置文件中实现的效果一致，就是不能单独设置移动端是否显示了）</p>
</li>
<li><p>在 <code>_config.next.yml</code> 解除 <code>footer: source/_data/footer.njk</code> 的注释（上面的参考代码中我已经开了）。</p>
</li>
</ol>
<p>即可。</p>
<p>话说回来记得我们另一个大力出奇迹的功能是啥么？回去复习！（还好我选择了放在 hexo 根目录的方法，否则这个功能也要再折腾一边）</p>
<p>关于其他的更新功能和差异，及迁移方法，可以查阅：</p>
<ul>
<li><a href="https://github.com/next-theme/hexo-theme-next/issues/4">【必读】更新说明及常见问题 #4</a></li>
<li><a href="https://theme-next.js.org/docs/getting-started/upgrade.html">Upgrade</a></li>
</ul>
<p>更新后 NexT 仍自带，可通过编辑配置启用的功能模块：</p>
<ul>
<li><a href="https://theme-next.js.org/docs/third-party-services/#Adding-Plugins">Third-party Services</a></li>
</ul>
<h2 id="评论（临时）"><a href="#评论（临时）" class="headerlink" title="评论（临时）"></a>评论（临时）</h2><p>上次我看了几个评论系统。一开始打算用简单而泛用的 Valine。结果刚开始我发现注册账号需要手机号码而且后续还要实名就感觉这玩意不对，后续在 NexT 更新公告里面看见这么一段：</p>
<blockquote>
<p>Valine 评论系统出现了一些令人担忧的问题：</p>
<ul>
<li>NexT 团队曾多次收到关于 Valine 评论系统存在隐私泄露问题的反馈；</li>
<li>Valine 自 1.4 版本起不再开源，因此 NexT 团队无法对 Valine 评论系统 Debug。并且发布的打包版本中存在未告知用户的百度统计代码；</li>
<li>11 月下旬出现了针对 Valine 评论系统的攻击。</li>
</ul>
<p>考虑到这些问题已经严重影响到 NexT 用户的数据安全，我们决定将其移除，需要继续使用的用户请安装插件： <a href="https://github.com/next-theme/hexo-next-valine">https://github.com/next-theme/hexo-next-valine</a><br>（插件的配置项使用驼峰命名，与 Valine 本身一致，需要注意将 <code>appid</code> 和 <code>appkey</code> 改为 <code>appId</code> 和 <code>appKey</code>）<br>鉴于以上原因，如果在使用 Valine 时出现<em>任何</em>问题，请在这里反馈： <a href="https://github.com/xCss/Valine/issues">https://github.com/xCss/Valine/issues</a><br>迁移到 Disqus： <a href="https://github.com/YunYouJun/valine-to-disqus">https://github.com/YunYouJun/valine-to-disqus</a></p>
</blockquote>
<p>怕了。另外的呢？然后就是上面我说的 gitment，我试了半天没用，开启后文章底下啥都出不来。后来发现这玩意是 2018 年更新的了。。。还有就是，依赖 github Oauth Apps 的评论系统，据我调查可能有安全问题（虽然参考文章都是两年前一年前的了，但配置文件中 secret 显然还是用的明码）：</p>
<ul>
<li><a href="https://henryhou.com/post/gitment_and_gittalk_secure/">评论插件 gitment 和 gittalk 存在安全性问题</a></li>
<li><a href="https://www.v2ex.com/t/535608">建议大家弃用 Gitalk 和 Gitment 等权限过高的 Github OAuth App</a></li>
</ul>
<p>我关注的大佬里面有用 Disqus 的，比如 <a href="https://blog.ichr.me/">ChrAlpha’s Blog</a>：<a href="https://blog.ichr.me/post/use-disqus-conveniently/">在特殊地区科学使用 Disqus 评论系统</a>。不过我瞄了一眼，似乎挺复杂的样子。。。。以后再说。</p>
<p>依赖 github issue 的评论系统虽然有安全问题，但我也有小号啊！在小号上开应该安全许多，这类型的还有另一个选择：gitalk，先用着吧。</p>
<p>参考文章：</p>
<ul>
<li><a href="https://segmentfault.com/a/1190000014085547">为Hexo添加Gitalk评论插件</a></li>
</ul>
<ol>
<li><p>先安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install gitalk</span><br></pre></td></tr></table></figure>
</li>
<li><p>去小号那里创建一个 OAuth Apps</p>
<p>打开 <a href="https://github.com/settings/applications/new">New OAuth App</a>（从头像 -&gt;settings-&gt;Developer settings 这里也可以找到）。</p>
<p>新建一个。（不要慌填错后续还能改）</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201222005052.png"></p>
<p>在稍后的界面获取一个 client secret，和 client id 一起记着待会要用。</p>
</li>
<li><p>打开主题配置文件（现在是 <code>_config.next.yml</code> 啦），新增</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitalk:</span><br><span class="line">  enable: true #用来做启用判断可以不用</span><br><span class="line">  owner: #Github 用户名,填小号的不要填大号的</span><br><span class="line">  repo: #储存评论issue的github仓库名</span><br><span class="line">  admin: #Github 用户名,</span><br><span class="line">  clientID: #&#96;Github Application clientID&#96;</span><br><span class="line">  clientSecret: #&#96;Github Application clientSecret&#96;</span><br><span class="line"> gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  github_id:  # GitHub repo owner，即小号的用户名</span><br><span class="line">  repo:  # Repository name to store issues，储存评论issue的github仓库名</span><br><span class="line">  client_id:  # GitHub Application Client ID，刚获取的</span><br><span class="line">  client_secret:  # GitHub Application Client Secret，刚获取的</span><br><span class="line">  admin_user:  # GitHub repo owner and collaborators, only these guys can initialize gitHub issues，还是填小号的用户名</span><br><span class="line">  distraction_free_mode: true # Facebook-like distraction free mode</span><br><span class="line">  # Gitalk&#39;s display language depends on user&#39;s browser or system environment</span><br><span class="line">  # If you want everyone visiting your site to see a uniform language, you can set a force language value</span><br><span class="line">  # Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span><br><span class="line">  language:ok，</span><br></pre></td></tr></table></figure>
</li>
<li><p>ok，接下来部署到网站后看到文章下面就有评论区了，登录自己的小号就能开启评论区，注意每个文章都需要手动开启。另外连 about 和 tags 那几个界面都有评论区。。。。我们可以在那几个文章的文前代码块里面加上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">comments: false</span><br></pre></td></tr></table></figure>

<p>即可屏蔽掉那些文章的评论区。</p>
</li>
</ol>
<h2 id="hexo-转移到-windows-上部署（临时，吐槽，没完全成功）"><a href="#hexo-转移到-windows-上部署（临时，吐槽，没完全成功）" class="headerlink" title="hexo 转移到 windows 上部署（临时，吐槽，没完全成功）"></a>hexo 转移到 windows 上部署（临时，吐槽，没完全成功）</h2><p>个人习惯，新玩意先在虚拟机上实验，因为之前 windows 上太多开发工具会把机子环境搞乱（比如 sql server 之类的），给后面其他软件的安装带来麻烦。不过观察到现在，hexo 除了安装拿一下影响全局环境，其他情况下都只在自己文件夹内做修改。一直用虚拟机编辑体验不太好（linux 下 vscode 还是挺卡的），索性搬到 windows 上。</p>
<p>然后发现：安装新组件，本地预览啥的没问题。但部署到 github 仓库的时候就出问题了。首先是告诉我，没权限，估计是没 key。</p>
<p>先把 key 导进去看看？</p>
<p>用 ssh-add 命令，报错。</p>
<p>参考 <a href="https://www.cnblogs.com/attackingmilo/p/Windows-ssh-add-error.html">Windows下使用ssh-add报错 Error connecting to agent: No such file or directory</a></p>
<p>先把服务开起来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Set-Service -Name ssh-agent -StartupType Manual</span><br><span class="line">Start-Service ssh-agent</span><br></pre></td></tr></table></figure>

<p>再添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-add .&#x2F;id_rsa</span><br></pre></td></tr></table></figure>

<p>还报错。。。</p>
<p>把密钥放进系统用户目录中</p>
<p>再添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-add C:\Users\zbttl\id_rsa</span><br></pre></td></tr></table></figure>

<p>总算是添加进去了，运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>显示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">warning: agent returned different signature type ssh-rsa (expected rsa-sha2-512)</span><br><span class="line">Hi zbttl! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>

<p>但我再次运行 <code>hexo g -d</code></p>
<p>还报错！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Error: git@github.com: Permission denied (publickey).</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br></pre></td></tr></table></figure>

<p>后面查阅到 <a href="https://github.com/hexojs/hexo/issues/3339">Win10使用ssh的hexo部署到github报错 ＃3339</a>，看起来应该是因为我的 rsa 密钥还带有密码，但 hexo-deployer-git 在 windows 下不会弹密码提示而是自作主张当做没密码的原因。但我既不想去掉密钥的密码，也不想用 git push 提交，所以直接用 windows 提交暂时是不成了。（不过我也没去查阅 hexo-deployer-git 那边有没有解决方案，起码我这边已经用的最新版了）</p>
<p>但有曲线救国的方法，开一个 vmware ubuntu 的共享文件夹，把 hexo 项目放在里面，就可以编辑的时候用 windows typora，部署的时候再用 ubuntu。我感觉用 wsl 也可以，但我没怎么用过那玩意，感兴趣的可以尝试。（wsl2 就算了，我对 hyper-v 印象超差的）</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>xbox 跨区羊毛</title>
    <url>/xbox-kua-qu-yang-mao/</url>
    <content><![CDATA[<p>这都能被我薅到。。。</p>
<p>前情提要：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/j8Upwjz.jpg"></p>
<p>那时候已经 5.16 了，我的毕业论文 5.18 就要答辩了。。。。但神界原罪 2 我一直挺想玩的，主要是听说有同屏可以和朋友愉快玩耍，于是禁不住诱惑从 3 点到 7 点浪费了宝贵的 4 个小时，试图薅到一根羊毛（可都是 deadline 时光！deadline 时光人战斗力很旺盛的，一个小时顶平常一个月呢！）。</p>
<p>然而。。。很遗憾，想想，留一个码吧，起码留点我努力过的痕迹，于是又去另外一家问，10 元买了个码。</p>
<p>后面不甘心又试了试，谷歌搜索找到一堆哥伦比亚的梯子，找到个疑似能用的梯子时候的时候已经晚上 7 点了，听比价助手评论区说 7 点后临时工就被枪毙了，多买的码全废了。。。</p>
<p>但是，过了几个小时听说又能薅了？到了第二天开咸鱼，全部涨价到了 40 ？？？有猫腻。我又做了点尝试，还是提示地区不对，还是不能薅，要继续实验太浪费时间了，搁置，接着肝答辩 ppt。</p>
<p>时间过去一个月，回顾一下 xbox 比价助手的神界原罪评论区。根据比价助手评论区老哥的说法，有的到澳区成功？</p>
<p>澳大利亚的 vps 在 vultr 能开，开一个拿来做点小实验顺手再试试？转眼就开了四天，开一天花一天钱，想想无论如何也要再做尝试把羊毛薅到。</p>
<p>最后确定澳大利亚的 vps 确实没用。然后一个个试哥伦比亚的 ip，还是在老地方试，windows 桌面版商店 app，试到某一个，成功进到领游戏的地方，结果到最后一步点确定提示是在别的区购买的码，无法兑换。</p>
<p>再谷歌看看！看到湾湾 16 年说在网页端能换。反正已经下了个 firefox（方便用来验证 ip 是否可用的），顺手拿这个开微软商店也不费多少时间。众所周知电信晚上 2 点后过了晚高峰，也许好一点。</p>
<p>到了两点，先试了两个 ip，在微软商店处都报错，连领游戏的界面都进不去。网页版点击兑换，标题后面地区始终显示是在香港而不是哥伦比亚，我尝试调了我自己的 xbox 地区到哥伦比亚，又把账单全部调到哥伦比亚，结果进去还是显示香港。。。不管了，开开代理直接输入兑换码，结果。。。等了好一阵成功了，惊了！不过打开 xbox，游戏库里面没刷出来，进入商店找神界原罪 2，显示已购买，直接下载，成了！（激动.jpg）</p>
]]></content>
      <categories>
        <category>xbox</category>
      </categories>
      <tags>
        <tag>跨区</tag>
        <tag>羊毛</tag>
      </tags>
  </entry>
  <entry>
    <title>termux 调校</title>
    <url>/termux-diao-xiao/</url>
    <content><![CDATA[<p>参考文章：</p>
<ol>
<li><a href="https://p3terx.com/archives/termux-tutorial-1.html">Termux 使用教程 #1 - Android 手机安装 Linux</a>：快捷键，ssh</li>
<li><a href="https://p3terx.com/archives/termux-tutorial-2.html">Termux 使用教程（二）：打造手机上的最强终端</a>：自定义扩展输入栏，换源，oh-my-zsh 和插件</li>
<li>国光：<a href="https://www.sqlsec.com/2018/05/termux.html">Termux 高级终端安装使用配置教程</a> 信息安全类的包</li>
<li><a href="https://www.jianshu.com/p/b688c9df69c6">神器Termux的使用记录</a> php+nginx+wordpress</li>
<li><a href="http://www.huangpan.net/posts/ji-ke/2019-08-19-termux.html">Termux 学习笔记</a> hexo，和一些 cli 文件管理工具</li>
</ol>
<h2 id="修改源"><a href="#修改源" class="headerlink" title="修改源"></a>修改源</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi $PREFIX&#x2F;etc&#x2F;apt&#x2F;sources.list</span><br></pre></td></tr></table></figure>

<p>将原来的源注释掉，加入清华源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;termux stable main</span><br></pre></td></tr></table></figure>

<h2 id="安装必须软件"><a href="#安装必须软件" class="headerlink" title="安装必须软件"></a>安装必须软件</h2><p>其中，可选的：</p>
<ul>
<li>pynat 测梯子 udp 连通性和 nat 类型</li>
<li>tldr 命令例子，类似 man</li>
<li>tsu 没有 root 不用装，在 tsu 下既可以获得 su 的权限又不用忍受 su 的界面</li>
<li>supervisor，自启</li>
<li>openssh，后面某些步骤操作比较复杂（特别是自启那个地方），用电脑远程 ssh 连接效率较高（不过平时本来手机就到处带，如果不涉及路径的反复操作意义不大）</li>
<li>neofetch，打开终端时的欢迎界面</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pkg update</span><br><span class="line">pkg install vim tsu tmux python openssh neofetch</span><br><span class="line">pip install pynat tldr</span><br></pre></td></tr></table></figure>



<h2 id="自定义扩展功能按键"><a href="#自定义扩展功能按键" class="headerlink" title="自定义扩展功能按键"></a>自定义扩展功能按键</h2><p>打开相关文档</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim ~&#x2F;.termux&#x2F;termux.properties</span><br></pre></td></tr></table></figure>

<p>将原来的配置注释或删掉，新增一行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extra-keys &#x3D; [[&#39;ESC&#39;,&#39;&#x2F;&#39;,&#39;-&#39;,&#39;HOME&#39;,&#39;UP&#39;,&#39;END&#39;],[&#39;TAB&#39;,&#39;CTRL&#39;,&#39;ALT&#39;,&#39;LEFT&#39;,&#39;DOWN&#39;,&#39;RIGHT&#39;]]</span><br></pre></td></tr></table></figure>

<h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sshd</span><br></pre></td></tr></table></figure>

<p>需要密钥的话参考第二篇文章，在 github 中设置公钥，然后使用一键脚本设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -Ls git.io&#x2F;ikey.sh) -g zbttl</span><br></pre></td></tr></table></figure>

<p>查看一下手机当前的 ip 地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure>

<p>之后使用 xshell 之类的 ssh 工具通过本手机的内网 ip 和密钥连接 8022 （不是 22）端口就行了。</p>
<p>ssh 下，尽管是局域网，输入命令运行时仍会感到明显的延迟。原因不明。</p>
<h2 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h2><h3 id="安装-zsh"><a href="#安装-zsh" class="headerlink" title="安装 zsh"></a>安装 zsh</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pkg i -y zsh</span><br></pre></td></tr></table></figure>

<h3 id="安装-Oh-My-Zsh"><a href="#安装-Oh-My-Zsh" class="headerlink" title="安装 Oh My Zsh"></a>安装 Oh My Zsh</h3><p>使用 curl 下载安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure>

<p>Oh My Zsh 安装完成后会提示你设置 zsh 为默认 shell 。如果没有提示，输入下面的命令进行设置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chsh -s zsh</span><br></pre></td></tr></table></figure>

<h3 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h3><p>直接在 <code>.zshrc</code> 中修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim ~&#x2F;.zshrc</span><br></pre></td></tr></table></figure>

<p>修改这一行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ZSH_THEME&#x3D;&quot;[主题名]&quot;</span><br></pre></td></tr></table></figure>

<p>或者使用命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -i &#39;&#x2F;^ZSH_THEME&#x3D;&#x2F;c\ZSH_THEME&#x3D;&quot;[主题名]&quot;&#39; ~&#x2F;.zshrc</span><br></pre></td></tr></table></figure>

<p>这里推荐两个主题：</p>
<ol>
<li><p>自带的 agnoster</p>
</li>
<li><p><a href="https://github.com/romkatv/powerlevel10k">powerlevel10k</a>，符号全，但需要安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone --depth&#x3D;1 https:&#x2F;&#x2F;github.com&#x2F;romkatv&#x2F;powerlevel10k.git $ZSH_CUSTOM&#x2F;themes&#x2F;powerlevel10k</span><br></pre></td></tr></table></figure>

<p>修改 <code>~/.zshrc</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ZSH_THEME&#x3D;&quot;powerlevel10k&#x2F;powerlevel10k&quot;</span><br></pre></td></tr></table></figure>

<p>重启 termux 后，输入命令进入配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p10k configure</span><br></pre></td></tr></table></figure>

<p>根据自己喜好选择。可以通过输入该命令反复修改。</p>
</li>
</ol>
<h3 id="安装-Oh-My-Zsh-插件"><a href="#安装-Oh-My-Zsh-插件" class="headerlink" title="安装 Oh My Zsh 插件"></a>安装 Oh My Zsh 插件</h3><p>安装 <a href="https://p3terx.com/go/aHR0cHM6Ly9naXRodWIuY29tL3pzaC11c2Vycy96c2gtc3ludGF4LWhpZ2hsaWdodGluZw==">zsh-syntax-highlighting</a>（代码高亮）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting $ZSH_CUSTOM/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure>

<p>安装 <a href="https://p3terx.com/go/aHR0cHM6Ly9naXRodWIuY29tL3pzaC11c2Vycy96c2gtYXV0b3N1Z2dlc3Rpb25z">zsh-autosuggestions</a>（自动建议）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>

<p>安装 <a href="https://p3terx.com/go/aHR0cHM6Ly9naXRodWIuY29tL3pzaC11c2Vycy96c2gtY29tcGxldGlvbnM=">zsh-completions</a>（自动补全）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-completions $ZSH_CUSTOM/plugins/zsh-completions</span><br></pre></td></tr></table></figure>

<p>安装 autojump（快速跳转）（可选）（粗略使用方法为用 <code>j xxx</code> 进入安装 autojump 以后进入过的文件夹。用 <code>j --stat</code> 查看当前 autojump 记录你进过的文件夹）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone git:&#x2F;&#x2F;github.com&#x2F;joelthelion&#x2F;autojump.git</span><br><span class="line">cd autojump</span><br><span class="line">.&#x2F;install.py</span><br></pre></td></tr></table></figure>

<p>运行后会弹出提示，让你加内容到 <code>.zshrc</code> 中。</p>
<p><img src="https://i.imgur.com/XIwtL6V.png"></p>
<p><del>或是直接输入命令</del>（sed 命令一键操作已经执行该内容）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;[[ -s $HOME&#x2F;.autojump&#x2F;etc&#x2F;profile.d&#x2F;autojump.sh ]] &amp;&amp; source $HOME&#x2F;.autojump&#x2F;etc&#x2F;profile.d&#x2F;autojump.sh&quot; &gt;&gt; ~&#x2F;.zshrc</span><br></pre></td></tr></table></figure>

<p>zsh-com­ple­tions 插件还需把 <code>autoload -U compinit &amp;&amp; compinit</code> 添加到<code>.zshrc</code>。输入命令可一键添加：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ -z &quot;`grep &quot;autoload -U compinit &amp;&amp; compinit&quot; ~/.zshrc`&quot; ] &amp;&amp; echo &quot;autoload -U compinit &amp;&amp; compinit&quot; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>把需要启用的插件写入到配置文件中，使用 <code>sed</code> 命令一键操作。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;/^plugins=/c\plugins=(git z zsh-syntax-highlighting zsh-autosuggestions zsh-completions)&#x27; ~/.zshrc</span><br><span class="line"><span class="meta">#</span><span class="bash">加入autojump</span></span><br><span class="line">sed -i &#x27;/^plugins=/c\plugins=(git z zsh-syntax-highlighting zsh-autosuggestions zsh-completions autojump)&#x27; ~/.zshrc</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果你有自己想添加的插件，写在括号内即可，插件名称用空格隔开。</p>
</blockquote>
<p>最后应用配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure>

<h2 id="应用自启"><a href="#应用自启" class="headerlink" title="应用自启"></a>应用自启</h2><p>辅以一个例子：kcptun 客户端打开 termux 时自启，kcptun 二进制文件放在用户根目录 <code>~/</code> 下</p>
<p>原命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;kcptun -l :2580 -r [IP:PORT] -key [PASSWORD] -crypt none -nocomp -datashard 0 -parityshard 0 -conn 4 -mtu 1200 -sndwnd 1024 -rcvwnd 3500 -mode normal</span><br></pre></td></tr></table></figure>

<h3 id="直接写入-bash-文件中"><a href="#直接写入-bash-文件中" class="headerlink" title="直接写入 bash 文件中"></a>直接写入 bash 文件中</h3><p>最便捷的方法。持续运行的命令需要配合重定向命令运行在后台。直接将命令放入 bash 文件中（默认为 <code>.bashsrc</code>，经过我们上面的修改后为 <code>.zshrc</code>)，还可通过重定向命令将输入放在文件中便于查错。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;kcptun -l :2580 -r [IP:PORT] -key [PASSWORD] -crypt none -nocomp -datashard 0 -parityshard 0 -conn 4 -mtu 1200 -sndwnd 1024 -rcvwnd 3500 -mode normal &gt;~&#x2F;kcptun.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<p>另外也可以通过 jobs 指令查看后台已经运行了几个这样的进程。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jobs -l</span><br></pre></td></tr></table></figure>

<p>但缺点时启动多个 termux 窗口或使用终端复用时，每新增一个窗口就会多运行一次这个指令，如果运行的命令没有自动限制自己只能运行一个实例的功能，那么可能会引起冲突和 bug。</p>
<p>实际上，这个功能比较适合需要更换终端窗口时重复运行的程序（比如终端欢迎界面 neofetch），和拥有独立控制，但需要随 termux 自启的 supervisor（这个我们之后讲），对于 kcptun 以及我手机上运行的另一个项目 UnblockNeteaseMusic 来说只是勉强合适，如果不开多终端没问题，开了多个终端以后就算后面又关到只剩一个终端甚至重启 termux 也会发现有项目正在运行或者运行不正常但在 jobs 命令中找不到，只能重启手机或者利用 <code>kill -9</code> 指令强行杀掉。</p>
<p><strong>（20.5.28 更新）</strong> 经过一番研究，可能写在 <code>./.zprofile</code> 中会比较好。因为 profile 文件中的命令只在第一次启动登录时会运行，而 bash 文件会在每一次打开命令行窗口时运行（适合放入系统变量一类的东西）。</p>
<h3 id="termux-services"><a href="#termux-services" class="headerlink" title="termux-services"></a>termux-services</h3><p>参考文章：</p>
<ul>
<li><a href="https://github.com/termux/termux-services/issues/4">how to add self service #4</a></li>
<li><a href="https://wiki.termux.com/wiki/Termux-services">Termux-services</a></li>
<li><a href="https://github.com/termux/termux-packages/blob/53de8cdd264228255c02388f30c38f90d3f9eab2/packages/openssh/build.sh#L87">termux-packages/packages/openssh/build.sh</a></li>
<li><a href="https://blog.csdn.net/diyiday/article/details/78709949">runit 快速入门</a></li>
</ul>
<p>官方推荐的方法。实际上改自 runit，不过日志部分直接通过链接方法获得了。其实前三篇参考文章写的大同小异，不过都有错漏，我就列一起了。</p>
<ol>
<li><p>安装 termux-services</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pkg i termux-services </span><br></pre></td></tr></table></figure>
</li>
<li><p>指定程序名，按自己的喜好起</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tpath&#x3D;&#39;kcptun&#39;</span><br></pre></td></tr></table></figure>
</li>
<li><p>建立 run 文件，down 文件和 log 目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p $PREFIX&#x2F;var&#x2F;service</span><br><span class="line">cd $PREFIX&#x2F;var&#x2F;service</span><br><span class="line">mkdir -p $&#123;tpath&#125;&#x2F;log</span><br><span class="line">vim $&#123;tpath&#125;&#x2F;run</span><br></pre></td></tr></table></figure>

<p>run 文件的内容，仅供参考</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">exec ~&#x2F;kcptun -l :2580 -r [IP:PORT] -key [PASSWORD] -crypt none -nocomp -datashard 0 -parityshard 0 -conn 4 -mtu 1200 -sndwnd 1024 -rcvwnd 3500 -mode normal 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p>给权限，新建 down。down 文件实际上是近期开关，后面 enable 和 disable 的凭据实际上就是目录下存不存在 down 文件，我们建立 down 文件实际意思就是默认先关着。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +x $&#123;tpath&#125;&#x2F;run</span><br><span class="line">touch $&#123;tpath&#125;&#x2F;down</span><br></pre></td></tr></table></figure>
</li>
<li><p>链接 log 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -sf $PREFIX&#x2F;share&#x2F;termux-services&#x2F;svlogger $&#123;tpath&#125;&#x2F;log&#x2F;run</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 <code>sv up $&#123;tpath&#125;</code></p>
<p>查看状态 <code>sv status $&#123;tpath&#125;</code></p>
<p>查看日志 <code>cat $PREFIX/var/log/sv/$&#123;tpath&#125;/current</code></p>
<p>关闭 <code>sv down $&#123;tpath&#125;</code></p>
<p>一切没问题就可以开启自启 <code>sv-enable $&#123;tpath&#125;</code>，开启自启时程序会自动打开</p>
<p>不想用的时候可以关闭自启 <code>sv-enable $&#123;tpath&#125;</code></p>
</li>
</ol>
<h3 id="supervisor"><a href="#supervisor" class="headerlink" title="supervisor"></a>supervisor</h3><p>参考文章：<a href="https://blog.csdn.net/tyy649909457/article/details/99348032">termux 安装supervisor</a></p>
<p>和 runit 相比，supervisor 是 linux 下相对成熟的自启和后台管理方案，命令比 runit 丰富的多。而且相对于 runit 建文件夹控制的方法，supervisor 大部分控制依靠文件配置，需要配置多个自启的时候理论上要更方便。但，因为不是 termux 推荐的方案，导致配置文件里包含的各类文件需要自己创建，且其自启依赖普通 linux 发行版中的 systemd，termux 没有，导致自启还需要放到 bash 文件中，总体易用性其实差一点。</p>
<ol>
<li><p>安装 supervisor</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install supervisor -y</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建一个 supervisord.conf 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd $PREFIX&#x2F;etc</span><br><span class="line">vim supervisord.conf</span><br></pre></td></tr></table></figure>

<p>内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;[unix_http_server]</span><br><span class="line">;file&#x3D;&#x2F;data&#x2F;data&#x2F;com.termux&#x2F;files&#x2F;usr&#x2F;var&#x2F;run&#x2F;supervisor.sock ; the path to the socket file</span><br><span class="line">;chmod&#x3D;0700 ; socket file mode (default 0700)</span><br><span class="line">;chown&#x3D;nobody:nogroup ; socket file uid:gid owner</span><br><span class="line">;username&#x3D;user ; default is no username (open server)</span><br><span class="line">;password&#x3D;123 ; default is no password (open server)</span><br><span class="line"></span><br><span class="line">[inet_http_server] ; inet (TCP) server disabled by default</span><br><span class="line">port&#x3D;127.0.0.1:9001 ; ip_address:port specifier, *:port for all iface</span><br><span class="line">;username&#x3D;user ; default is no username (open server)</span><br><span class="line">;password&#x3D;123 ; default is no password (open server)</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line">logfile&#x3D;&#x2F;data&#x2F;data&#x2F;com.termux&#x2F;files&#x2F;usr&#x2F;var&#x2F;log&#x2F;supervisord.log ; main log file; default $CWD&#x2F;supervisord.log</span><br><span class="line">logfile_maxbytes&#x3D;50MB ; max main logfile bytes b4 rotation; default 50MB</span><br><span class="line">logfile_backups&#x3D;10 ; # of main logfile backups; 0 means none, default 10</span><br><span class="line">loglevel&#x3D;info ; log level; default info; others: debug,warn,trace</span><br><span class="line">pidfile&#x3D;&#x2F;data&#x2F;data&#x2F;com.termux&#x2F;files&#x2F;usr&#x2F;var&#x2F;run&#x2F;supervisord.pid ; supervisord pidfile; default supervisord.pid</span><br><span class="line">nodaemon&#x3D;false ; start in foreground if true; default false</span><br><span class="line">minfds&#x3D;1024 ; min. avail startup file descriptors; default 1024</span><br><span class="line">minprocs&#x3D;200 ; min. avail process descriptors;default 200</span><br><span class="line">;umask&#x3D;022 ; process file creation umask; default 022</span><br><span class="line">;user&#x3D;supervisord ; setuid to this UNIX account at startup; recommended if root</span><br><span class="line">;identifier&#x3D;supervisor ; supervisord identifier, default is ‘supervisor’</span><br><span class="line">;directory&#x3D;&#x2F;tmp ; default is not to cd during start</span><br><span class="line">;nocleanup&#x3D;true ; don’t clean up tempfiles at start; default false</span><br><span class="line">;childlogdir&#x3D;&#x2F;tmp ; ‘AUTO’ child log dir, default $TEMP</span><br><span class="line">;environment&#x3D;KEY&#x3D;“value” ; key value pairs to add to environment</span><br><span class="line">;strip_ansi&#x3D;false ; strip ansi escape codes in logs; def. false</span><br><span class="line"></span><br><span class="line">[rpcinterface:supervisor]</span><br><span class="line">supervisor.rpcinterface_factory &#x3D; supervisor.rpcinterface:make_main_rpcinterface</span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line">;serverurl&#x3D;unix:&#x2F;&#x2F;&#x2F;data&#x2F;data&#x2F;com.termux&#x2F;files&#x2F;usr&#x2F;var&#x2F;run&#x2F;supervisor.sock ; use a unix:&#x2F;&#x2F; URL for a unix socket</span><br><span class="line">serverurl&#x3D;http:&#x2F;&#x2F;127.0.0.1:9001 ; use an http:&#x2F;&#x2F; url to specify an inet socket</span><br><span class="line">;username&#x3D;chris ; should be same as in [_http_server] if set</span><br><span class="line">;password&#x3D;123 ; should be same as in [_http_server] if set</span><br><span class="line">;prompt&#x3D;mysupervisor ; cmd line prompt (default “supervisor”)</span><br><span class="line">;history_file&#x3D;~&#x2F;.sc_history ; use readline history if available</span><br><span class="line"></span><br><span class="line">[include]</span><br><span class="line">files &#x3D; &#x2F;data&#x2F;data&#x2F;com.termux&#x2F;files&#x2F;usr&#x2F;etc&#x2F;supervisor.d&#x2F;*.conf</span><br></pre></td></tr></table></figure>


</li>
</ol>
<p>注意，咱也不想用 <code>/data/data/com.termux/files/usr/</code> 这个这么长的路径的，但 supervisor 这边所有的配置文件都不认 <code>$PREFIX</code>，甚至连 <code>~</code> 都不认。</p>
<ol start="3">
<li><p>新建具体到程序的配置文件</p>
<p>首先获取当前用户的用户名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id</span><br></pre></td></tr></table></figure>

<p>假设是 u0_a999</p>
<p>然后新建文件 kcptun.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tpath&#x3D;&#39;kcptun&#39;</span><br><span class="line">mkdir supervisor.d&#x2F;</span><br><span class="line">vim supervisor.d&#x2F;$&#123;tpath&#125;.conf</span><br></pre></td></tr></table></figure>

<p>内容为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[program:kcptun]</span><br><span class="line">user&#x3D;u0_a999</span><br><span class="line">command&#x3D;&#x2F;data&#x2F;data&#x2F;com.termux&#x2F;files&#x2F;home&#x2F;kcptun -l :2580 -r [IP:PORT] -key [PASSWORD] -crypt none -nocomp -datashard 0 -parityshard 0 -conn 4 -mtu 1200 -sndwnd 1024 -rcvwnd 3500 -mode normal</span><br><span class="line">autostart&#x3D;true</span><br><span class="line">redirect_stderr &#x3D; true</span><br><span class="line">stdout_logfile_maxbytes &#x3D; 1MB</span><br><span class="line">stdout_logfile &#x3D; ~&#x2F;tmp&#x2F;kcptun.log </span><br></pre></td></tr></table></figure>

<p>这里的 logfile，supervisor 自己就不会新建，我们得手动建：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir ~&#x2F;tmp</span><br><span class="line">touch ~&#x2F;tmp&#x2F;kcptun.log</span><br></pre></td></tr></table></figure>

<p>最后启动试试看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">supervisord</span><br><span class="line">supervisorctl</span><br></pre></td></tr></table></figure>

<p>看到 kcptun 这个进程是 running 的就行。</p>
</li>
<li><p>将 supervisord 加入 bash 文件中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;supervisord&quot; &gt;&gt; ~&#x2F;.zshrc</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h2 id="不推荐的配置"><a href="#不推荐的配置" class="headerlink" title="不推荐的配置"></a>不推荐的配置</h2><h3 id="termux-boot"><a href="#termux-boot" class="headerlink" title="termux-boot"></a>termux-boot</h3><p>号称可以开机自启 termux。但需要开启唤醒锁才行，开启后手机的休眠会受到影响，耗电大幅增加（起码在我的 pe 安卓 10 是这样）。</p>
<h3 id="访问外部存储功能"><a href="#访问外部存储功能" class="headerlink" title="访问外部存储功能"></a>访问外部存储功能</h3><p>开启后访问内部储存内容会方便不少，但如果使用钛备份会默认把开启内部储存的几个位置的内容也当成需要备份的资料，生成的资料大小极为感人。</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>termux</tag>
        <tag>zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>windows terminal</title>
    <url>/windows-terminal/</url>
    <content><![CDATA[<p>参考文章：</p>
<ul>
<li><a href="https://poychang.github.io/run-windows-terminal-as-administrator-with-elevated-admin-permissions/">使用系统管理员身分开启Windows Terminal 分页</a></li>
<li><a href="https://printempw.github.io/windows-terminal-setup-guide/">Windows Terminal 安装与配置指南</a></li>
</ul>
<h2 id="添加管理员模式-powershell"><a href="#添加管理员模式-powershell" class="headerlink" title="添加管理员模式 powershell"></a>添加管理员模式 powershell</h2><ol>
<li><p>安装 gsudo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">choco install gsudo -y</span><br></pre></td></tr></table></figure>
</li>
<li><p>新增 json 配置块，点击加号-&gt;settings，在 profiles-&gt;list 中添加。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;guid&quot;: &quot;&#123;0667cbea-6f8d-43d6-b50a-e4f795569d86&#125;&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;Elevated PowerShell&quot;,</span><br><span class="line">    &quot;commandline&quot;: &quot;gsudo.exe PowerShell&quot;,</span><br><span class="line">    &quot;icon&quot;: &quot;C:&#x2F;Users&#x2F;zbttl&#x2F;Pictures&#x2F;powershell_red_scale-200.ico&quot;,</span><br><span class="line">    &quot;hidden&quot;: false,</span><br><span class="line">    &quot;colorScheme&quot;: &quot;AdventureTime&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>其中，icon 里的图标可从参考文章 1 中下载，下载后需要处理，图片像素缩小为 32x32（否则会出现明显的锯齿）。并转为 .ico 格式，主要保留透明度（即保证背景不是黑色的而是透明的），因为后面一步注册表中的参数不认得 ico 格式以为的图片。这些修改都可以用 ifranview 搞掂。</p>
<p>而 colorScheme，可以从这里找：<a href="https://github.com/mbadolato/iTerm2-Color-Schemes/tree/master/windowsterminal">mbadolato/iTerm2-Color-Schemes</a>，选好想要的主题，找到对应的配置文件，将其中的代码加到 schemes 中。修改的目的是让管理员模式和普通用户模式有区分度。</p>
</li>
<li><p>保存后在加号处就能看到该配置了。</p>
</li>
</ol>
<h2 id="添加进右键菜单"><a href="#添加进右键菜单" class="headerlink" title="添加进右键菜单"></a>添加进右键菜单</h2><ol>
<li><p>输入代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$basePath &#x3D; &quot;Registry::HKEY_CLASSES_ROOT\Directory\Background\shell&quot;</span><br><span class="line">New-Item -Path &quot;$basePath\wt&quot; -Force -Value &quot;Windows Terminal&quot;</span><br><span class="line">New-ItemProperty -Path &quot;$basePath\wt&quot; -Force -Name &quot;Icon&quot; -PropertyType ExpandString -Value &quot;X:\path\to\terminal.ico&quot;</span><br><span class="line">New-Item -Path &quot;$basePath\wt\command&quot; -Force -Type ExpandString -Value &#39;&quot;%LOCALAPPDATA%\Microsoft\WindowsApps\wt.exe&quot; -p &quot;Windows PowerShell&quot; -d &quot;%V&quot;&#39;</span><br></pre></td></tr></table></figure>

<p>其中，<code>&quot;X:\path\to\terminal.ico&quot;</code> 修改为上一步通过修改的 ico 文件路径。最后一句中 -p 后面的参数 <code>Windows PowerShell</code> 改成自己配置文件中 powershell 所在代码块的 name。当然如果输错也可以进入注册表中再做修改，键值在 <code>HKEY_CLASSES_ROOT\Directory\Background\shell\wt</code> 中。</p>
</li>
<li><p>上面添加的是在文件管理器中右键以普通用户打开 windows terminal。而以管理员模式打开，还需要再新建键值。在上面代码块的第二句 <code>$basePath\wt</code> 中的 wt 键值需要修改为其他名字，-p 后的代码块也要更换，图标最好也更换一下。打个比方：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">New-Item -Path &quot;$basePath\wtAdmin&quot; -Force -Value &quot;Windows Terminal(Admin)&quot;</span><br><span class="line">New-ItemProperty -Path &quot;$basePath\wtAdmin&quot; -Force -Name &quot;Icon&quot; -PropertyType ExpandString -Value &quot;X:\path\to\terminal.ico&quot;</span><br><span class="line">New-Item -Path &quot;$basePath\wtAdmin\command&quot; -Force -Type ExpandString -Value &#39;&quot;%LOCALAPPDATA%\Microsoft\WindowsApps\wt.exe&quot; -p &quot;Elevated PowerShell&quot; -d &quot;%V&quot;&#39;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h2 id="添加进-win-x-快速链接菜单"><a href="#添加进-win-x-快速链接菜单" class="headerlink" title="添加进 win+x 快速链接菜单"></a>添加进 win+x 快速链接菜单</h2><p>参考文章：</p>
<ul>
<li>[How to Add or Remove Default Items on Win+X Quick Link Menu in Windows 10](How to Add or Remove Default Items on Win+X Quick Link Menu in Windows 10)</li>
<li><a href="https://github.com/riverar/hashlnk">riverar/hashlnk</a></li>
</ul>
<p>很多时候我们要右键打开 powershell 还要退到桌面或是资源管理器处，如果在快速链接菜单（右键 windows 徽标）就能打开 windows terminal 就会方便很多。</p>
<p>右键菜单的结构，取决于 <code>%LocalAppdata%\Microsoft\Windows\WinX</code> 这个目录的结构。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/yipzGkz.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/7aWLpPK.jpg"></p>
<p>总结一下，有这么几个规律：</p>
<ol>
<li><p>里面的项目都是快捷方式，这个应该一眼就能看出来。你看到的文件名并不是真实的文件名，用第三方资源管理器或者用 dir 命令查看就知道</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/2nY5sPB.png"></p>
</li>
<li><p>但修改某项文件名不会使该项消失，而是会改变某项的位置。具体位置取决于真实文件名按名称方式倒序排列后的位置。</p>
<ul>
<li>也就是说，如果你想让新加进来的项目排在 group 的最顶上，其实什么都不用动，因为一般来说程序都是以字母开头，字母开头一定会排在原来这些数字开头程序的上面（倒序）。</li>
<li>反过来，如果你要把新增的项目放在中间，那就要修改其中一个项目的真实文件名，比如你要将新建的项目放在计算机管理的后面，并把计算机管理调到最前，你可以将计算机管理的真实文件名前面的序号改成 11，在新增项目的真实文件名前面加上 <code>03 - </code>；</li>
<li>如果不想调整计算机管理的位置，那么将新增项目的真实文件名前面加上 <code>02b - </code> 应该也可以；如果想把新增项目放在最后，将新增项目的真实文件名前面加上 <code>00 - </code> 就行。</li>
</ul>
<p>另外，因为 group3 项目比较多，所以才用两位数字的前缀，group2 就用的是一个数字的前缀，但原理相同。</p>
</li>
<li><p>不过，新增的项目不会立刻生效，而其前缀也会在资源管理器中表现出来，而不是和原有的项目一样自动将前缀隐藏。原因是，原有的项目在注册表中绑定了，绑定的依据是快捷方式属性中的「目标」这一项。所以你想通过修改原来快捷方式的目标直接让其打开其他程序这个方法是不行的。直接将新增项目放进文件夹里面也不会识别，修改这些原有项目的文件名不会使快捷链接中项目的名字被变更。但反过来，直接删除这些快捷方式的话，是能够生效的。</p>
</li>
<li><p>所以，如果要新增项目的话，就需要用上面参考文章的 hashlnk 这款软件。使用方法也很简单，先把快捷方式放到相应位置，快捷方式的参数也可以进行适当修改。之后，就需要运行命令（powershell 不认 %LOCALAPPDATA%，只能用全名）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hashlnk.exe &#39;C:\Users\[用户名]\AppData\Local\Microsoft\Windows\WinX\Group3\[快捷方式名]&#39;</span><br></pre></td></tr></table></figure>
</li>
<li><p>要修改快捷链接中的名字也可以，在相应项目属性中修改描述就行了。</p>
</li>
</ol>
<p>综上，我们要添加 windows terminal，按以下步骤：</p>
<ol>
<li><p>复制 <code>%LOCALAPPDATA%\Microsoft\WindowsApps\wt.exe</code>，在 <code>%LocalAppdata%\Microsoft\Windows\WinX\Group3</code> 中粘贴<strong>快捷方式</strong>。</p>
</li>
<li><p>修改快捷方式 <code>wt.exe</code> 的属性和文件名。文件名修改成你顺耳的，并且我想让其挨在 powershell 的项目旁边。所以我将名字修改为 <code>00 - windowsTerminal</code>。属性中，目标修改为 <code>&quot;%LOCALAPPDATA%\Microsoft\WindowsApps\wt.exe&quot; -p &quot;Windows PowerShell&quot;</code>，描述修改为 <code>Windows Terminal</code>。</p>
</li>
<li><p>在 hashInk.exe 所在目录运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.\hashlnk.exe &#39;C:\Users\zbttl\AppData\Local\Microsoft\Windows\WinX\Group3\00 - windowsTerminal.lnk&#39;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Uz0jDk6.png"></p>
</li>
</ol>
<p>重启资源管理器即可。</p>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>windows terminal</tag>
        <tag>powershell</tag>
      </tags>
  </entry>
  <entry>
    <title>花式折腾小米推送框架</title>
    <url>/hua-shi-zhe-teng-xiao-mi-tui-song-kuang-jia/</url>
    <content><![CDATA[<p>「人生的坑爹遭遇有很大一部分来源于手贱」</p>
<p>自上个月写完了安卓短信/通讯录/流量信息备份相关的内容，然后我更新完了系统折腾掉所有坑以后，这台狗米 note7pro 可以稳定很久不用动了。然而话是这么说，人不作死就不会死。。。我手贱点开了 tg 的小米推送框架群，看到了新版本，push 和 framework 合在一起了，不过 comments 里面已经有老哥说更新以后会出现推送错误的问题。</p>
<p>管他呢！更新。结果更新完真的就提示注册异常，不过好消息是还能推送。另外新的二合一 app 和原来的 framework app 签名不一样，包名也不一样，原来的 framework app 打开即闪退。</p>
<p>好家伙，不能忍。删除装回原版，发现没有用了。。。注册还是失败。转了一圈尝试了各种方法，得出了一些结论：</p>
<ol>
<li><p>某米服务器那边应该是改了验证机制，导致现在得用一些比较奇葩的方法才能保证应用能够注册上。原来已经注册上的就不受影响，所以如果我用原版没有问题就应该毛事没有。</p>
</li>
<li><p>奇特的方法包括：安装成为系统应用；使用旧版；安装 xposed 欺骗框架；安装 magisk 欺骗框架。</p>
</li>
<li><p>经过我的实验，装 2018 年的版本，无论怎么样应用都没法注册上，连推送出错都没有发生，直接就「使用小米推送，但尚未注册」；而安装最新的二合一版本，就算上了 xposed 欺骗框架 + magisk 欺骗框架 + 安装成系统应用，仍然会弹出推送错误的提示。</p>
</li>
<li><p>在 framework app 中，打开「应用注册时显示通知」 的开关，正常情况下打开支持小米推送的应用，应该会弹出注册推送的 toast。另外第一次注册的应用会在记录中留下四条注册推送成功的讯息（比如下图中的 tx 加速器），少一条都有可能是出了问题的征兆。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/sTMlXGt.png"></p>
</li>
<li><p>无论用什么手段。。。设置里全局伪装为小米设备的开关在关闭 framework apk 重新打开后都会发现被自动关上了。另外 Q&amp;A 中提到的重装 framework app 和 push app 后需要重装注册过的应用才会摆脱「注册异常」的提示，我应用后并没有改善，后续解决该问题也不是靠的重装应用。可能是因为我这台设备本来就是小米，只不过刷了类原生而已。。。</p>
</li>
<li><p>伪装为小米设备有好多种方法。其中，旧版（2018 版）会自动在 xposed 里面装一个 push 模块；旧版的 magisk 里可以下到不需要 riru 的 xposed 欺骗模块；还可以用 magisk props config 手动修改 props 文件（具体修改步骤百度/在酷安搜索）；比较新的两个方法是使用 riru 模块 <a href="https://github.com/MiPushFramework/MiPushFakeForRiru">MiPushFakeForRiru</a>；或者是使用 edxposed 中可以在仓库中搜到的 <a href="https://repo.xposed.info/module/org.meowcat.xposed.mipush">MiPush Framework Enhancement</a>。总而言之让相关应用能够识别出你在用 miui 就成功了。所以强烈推荐其中的 <a href="https://repo.xposed.info/module/org.meowcat.xposed.mipush">MiPush Framework Enhancement</a>，就算没有生效它也能读出你被伪装成什么版本的 miui，伪装到了何种程度（另外这个软件要生效，不仅在 edxposed 中需要启动，打开软件后还要把工作模式设为黑名单，默认的已禁用模式软件也不生效）。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/hGq1EI3.png"></p>
</li>
<li><p>开启 selinux 的情况下也会出现注册异常的状况。但注册成功的应用即使在 selinux 开启的情况下仍然能够正常推送。</p>
</li>
</ol>
<p>回到正题，在我这台类原生 pe 的红米 note7 pro 上，我具体做了这么几部：</p>
<ol>
<li>关闭 selinux。可以用各种终端软件（比如 termux），获取 root 后输入 <code>setenforce 0</code> 即可。也可以用各种 kernel manager，开机自动运行该命令。</li>
<li>安装 200315 版本的 push 和 framework app。</li>
<li>使用 magisk 模块 App Systemizer 将两个应用全部移入 <code>/system/priv-app</code> 中。粗略步骤是安装模块后重启，在终端中获取 su 后输入 systemize，然后按提示操作。注意两个都要移进去，移一个的话我试过一次，照样出错。</li>
<li>安装上文提到的 MiPushFakeForRiru （如果没装过 riru 还得装 riru 模块，不过都装了 xposed，riru 我觉得大家都应该装了）和 MiPush Framework Enhancement，后者记得正确启用。（前者其实不一定有用，但后者一定要装）</li>
<li>打开软件，正确给予权限。</li>
<li>打开支持小米推送的应用，此时回到 framework app 会发现提示注册失败。稍安勿躁，等个几个钟头就会奇迹般的变成注册成功了（</li>
<li>相关的推送还要等半天到一天才会恢复正常。不要指望刚装上应用注册成功就会有推送来找你（</li>
</ol>
<p>大概就是这样。还可以通过 <a href="https://github.com/MiPushFramework/MiPushTester">MiPushTester</a> 来验证推送是不是真的正常了。不过话说回来，第一次我按上面的大概步骤做了以后，正常了几天，后面推送是出来了，点击推送相关应用弹不出来。。。看日志是 intent 卡住了，后来我又重装试了一通新旧版本，再后来我又大概按上面的步骤做了一次，又正常了。。。这次正常使用了十来天，我觉得应该是彻底正常了。所以上面的步骤 1-5，也不用太严格遵守啦，毕竟我没有严格测试过那步放在后面就会 crash，我大概回忆了一下差不多是这样，再严格测试出什么幺蛾子那又麻烦了（</p>
<p>总之不要手贱，能用的就不要东搞西搞（</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>mipush</tag>
        <tag>magisk</tag>
        <tag>xposed</tag>
      </tags>
  </entry>
  <entry>
    <title>powershell 全攻略</title>
    <url>/powershell-quan-gong-lue/</url>
    <content><![CDATA[<p>我一直以为 powershell 没啥好玩的。。。不过最近了解了一下，比 cmd 强很多，特别是 cmd 没有历史记录这点差评，另外还有包管理器什么的，感觉发现了新世界~</p>
<p>参考文章：</p>
<ul>
<li><a href="https://beta.sspai.com/post/52868">告别 Windows 终端的难看难用，从改造 PowerShell 的外观开始</a></li>
</ul>
<h2 id="安装包管理器-chocolatey"><a href="#安装包管理器-chocolatey" class="headerlink" title="安装包管理器 chocolatey"></a>安装包管理器 chocolatey</h2><p>嘛。。。虽然市面上有两个包管理器，另一个叫做 scoop 理论上更合适程序员使用，但是 chocolatey 更合适懒人使用。。。于是我选择后者。</p>
<p>安装方法，一行流：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString(&#39;https:&#x2F;&#x2F;chocolatey.org&#x2F;install.ps1&#39;))</span><br></pre></td></tr></table></figure>

<p>几个常用的命令：</p>
<ol>
<li><p>查找</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">clist xxx</span><br></pre></td></tr></table></figure>

<p>几乎所有开源常用的软件和大多数免费的非商业都有。</p>
</li>
<li><p>找到了以后安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">choco install xxx</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看目前系统中 chocolate 安装的所有应用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">clist -l</span><br></pre></td></tr></table></figure>
</li>
<li><p>套代理（永久）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">choco config set proxy http:&#x2F;&#x2F;127.0.0.1:3081</span><br></pre></td></tr></table></figure>

<p>取消代理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">choco config unset proxy</span><br></pre></td></tr></table></figure>

<p>临时代理（以安装为例）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">choco install --proxy&#x3D;127.0.0.1:3081 xxx</span><br></pre></td></tr></table></figure>
</li>
<li><p>卸载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cuninstall xxx</span><br></pre></td></tr></table></figure>


</li>
</ol>
<p>另外，因为国内网络因素和程序设计影响，chocolatey 不可避免的会遇到下载失败的问题，一般从几个方面去解决：</p>
<ol>
<li>使用<code>--pre</code>参数</li>
<li>下载前一个或后一个版本</li>
<li>使用<code>--checksum64+正确的md5</code>或者是<code>--ignore-checksums</code>参数</li>
</ol>
<p>另外，提一下，还有另一个比较热门的包管理器叫 scoop，我不打算写使用方法了，可以参考下面三篇文章：</p>
<ul>
<li><a href="https://www.jianshu.com/p/50993df76b1c">scoop——强大的Windows命令行包管理工具</a></li>
<li><a href="https://sspai.com/post/52496">「一行代码」搞定软件安装卸载，用 Scoop 管理你的 Windows 软件</a></li>
<li><a href="https://sspai.com/post/52710">给 Scoop 加上这些软件仓库，让它变成强大的 Windows 软件管理器</a></li>
</ul>
<p>和 chocolatey 相比，有几个优点</p>
<ol>
<li>支持 aria2c 进行多线程下载</li>
<li>可以添加个人仓库，github 里面有几个热门仓库，你甚至可以考虑自己做一个</li>
</ol>
<p>但缺点也很多</p>
<ol>
<li>速度仍然堪忧，仍然有可能遭遇哈希值错误</li>
<li>加仓库前还要先装 git</li>
<li>不加仓库的话原有的软件包根本不够用，太少了</li>
<li>就算是加了仓库也不够。。。github 上热门的就前几个仓库，加了仍然找不到小狼毫，而且加仓库的操作不能说不繁琐，仓库软件分布的很分散，甚至连 java 环境都有一个专门的仓库管理，想用还要加那个仓库</li>
<li>search 本来就慢，加仓库更慢</li>
</ol>
<p>中间这两个生态问题，相当致命，除非是有精力自己建仓库，否则不推荐使用。</p>
<h2 id="微软默认-powershell-美化"><a href="#微软默认-powershell-美化" class="headerlink" title="微软默认 powershell 美化"></a>微软默认 powershell 美化</h2><p>默认的 powershell 界面从颜色和字体上看都比较丑。。。有两个方案，一个是美化这个预装版，还有一个是装一个第三方，预装版的优点是加载快，所以先说怎么美化这个预装版。</p>
<h3 id="界面颜色美化"><a href="#界面颜色美化" class="headerlink" title="界面颜色美化"></a>界面颜色美化</h3><p>利用 colortool 这个工具</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">choco install -y colortool</span><br></pre></td></tr></table></figure>

<p>查看有多少种颜色方案</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">colortool -s</span><br></pre></td></tr></table></figure>

<p>然后预览一下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">colortool xxx.itermcolors</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@master/img/iiHvIIn.png"></p>
<p>发现问题了，这颜色咋那么奇怪呢？</p>
<p>原来是 colortool 默认是按 powershell 背景为全黑的时候设计的，当然因为 powershell 现阶段默认背景早已经是蓝色了，所以作者已经把这点当做 bug 在处理了。<a href="https://github.com/microsoft/terminal/issues/1150">Bug Report: ColorTool and changing colours causes strange behaviour since Windows 10 1903 #1150</a></p>
<p>至于临时的解决方案，就是右击窗口，将颜色和默认值都调到第一个颜色上，再用 colortool 命令设置颜色。</p>
<p>而如果要永久设置主题的话，加上 -b 参数，再右键窗口进入默认值和属性中各点一次确定生效。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">colortool -b OneHalfDark.itermcolors</span><br></pre></td></tr></table></figure>

<h3 id="修改字体"><a href="#修改字体" class="headerlink" title="修改字体"></a>修改字体</h3><p>修改字体就麻烦一些。<a href="https://www.zhihu.com/question/36344262">为什么 Windows 下 cmd 和 PowerShell 不能方便地自定义字体？</a>因为 powershell 要求字体需要满足微软规范（否则 powershell 默认值里面根本看不到）和编码代码页语言编码要求（否则等宽字体只能在默认值中看到，属性里面看不到），最好支持 powerline（待会有用），所以一共有三种方法可供使用。</p>
<ul>
<li>安装符合微软规范的等宽字体（符合规范的等宽字体能够在注册表相应项中找到），修改注册表，打上 powerline 补丁</li>
<li>安装符合微软规范的字体，给所有字体打上 powerline 补丁（和当年通过工具撤销系统字体的 graph 优化然后替换是如出一辙的方法）</li>
<li>安装符合微软规范且支持 powerline 的字体</li>
</ul>
<p><del>打 powerline 补丁的方法都很麻烦。。而且如果你安装的字体比较多的话，有些字体没有必要打上补丁的也打上了（打补丁不止会打符合规范的字体而是所有补丁都打），就会浪费时间和空间。</del></p>
<p>而符合微软中文编码规范的字体，找来找去就两种，知乎 belleve 大佬的<a href="https://github.com/be5invis/Sarasa-Gothic">更纱黑体</a>（Inziu Iosevka）和 <a href="https://github.com/Microsoft/BashOnWindows/files/1362006/Microsoft.YaHei.Mono.zip">Microsoft YaHei Mono</a>，后者同样要打上 powerline 补丁。全部支持的就只有更纱黑体，在 powershell 中兼容性相当不错。但是。。。我觉得字形有点丑了，非常扁。（也可能是微软的规范下只能做出那么丑的字形）</p>
<p>当然还有传说中的支持 powerline 却不符合微软规范的字体。。。在这里不适用，看下面。</p>
<p>补充：关于第一个，各种教程都写得很不详细。。。我决定补一下</p>
<p>参考文章：</p>
<ul>
<li><a href="http://www.voidcn.com/article/p-ueteeqcm-bdx.html">Windows 微软雅黑（Microsoft YaHei）+ Monaco 字体整合方案</a></li>
<li><a href="https://www.cnblogs.com/RhinoC/p/4470338.html">修改 cmd 控制台字体、巧用 FontLink 使中英文独立设置</a></li>
<li><a href="https://www.zhihu.com/question/54724102">win10下,cmd,power shell设置默认编码为‘UTF-8’?</a></li>
</ul>
<ol>
<li><p>安装等宽字体。安装时记住名字（字体管理器里面会有写）。然后去注册表里面确认一下名字（<strong>注意！只是确认有没有安装，第二步里面的字体名字以字体管理器的为准，不要用下面注册表的！</strong>），如果是为自己安装的字体名称在<code>HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Fonts</code>，为系统安装或者默认就有的字体在<code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Fonts</code>，有种方法是在<code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Console\TrueTypeFont</code>以名称加 0 的方法添加各新编码字体，但我试了试，根本没用。</p>
</li>
<li><p>记好名字以后，在<code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\FontLink\SystemLink</code>配置中文 fallback。具体来说，新建一个多行字符串值，名称为你选的等宽字体，填入的参数为检测到中文时回退到的字体。比如你决定用<code>Cascadia Code</code>做 powershell 的字体，中文回退到微软雅黑，那么新建一个名字为<code>Cascadia Code</code>的多行字符串值，值为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MSYH.TTC,Microsoft YaHei UI,154,115</span><br><span class="line">MSYH.TTC,Microsoft YaHei UI</span><br></pre></td></tr></table></figure>

<p>这个大小大概按照英文字体<em>比例来写。英文字体基本上是 128\</em>96，而大部分英文字体对雅黑的比例都是 1.6，所以填上面这两个数字。如果你感觉宽了或者窄了，稍微改改也可以。最后让默认值和属性都指向你想用的这个字体，改完以后重启电脑。</p>
</li>
<li><p>进入 powershell，更改编码，默认中文编码为 GBK，改成 GB2312 就能更改为默认字体且正确的显示中文了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chcp 54936</span><br></pre></td></tr></table></figure>

<p>然后去属性里面改成你刚刚改的字体再重启就 ok 了。</p>
<p><del>当然，每次启动前都要打这一串才能转到 gb2312，如果要启动时自动设定的话，需要动一点手脚。</del>（不需要动手脚，每次启动默认出来的就是进入 gb 2312 模式后设置的字体，不过属性面板里面还写着点阵字体而已，如果还要修改需要回到 gb2313 去，写入配置文件中反而会导致中文字体挤在一起，但！1909 后似乎需要这一步）。新建 powershell 的配置文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (!(Test-Path -Path $PROFILE )) &#123; New-Item -Type File -Path $PROFILE -Force &#125;</span><br><span class="line">notepad $PROFILE</span><br></pre></td></tr></table></figure>

<p><del>然后在弹出的 notepad 里面输入：</del></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[System.Console]::OutputEncoding&#x3D;[System.Text.Encoding]::GetEncoding(54936)</span><br></pre></td></tr></table></figure>

<p>就 ok 了。</p>
<p><del>另外，上面的文章 1 里面给了一个文件，是 monako 字体加一个注册表文件，使用完那个注册表文件以后甚至不用该编码。。。原来的 gbk 下的点阵字体直接就变成 monako 了，原因未知。</del>（其实就是进去以后改成了 monako 字体，那个注册表文件只是修改了 monako 的 fontlink）</p>
</li>
</ol>
<h2 id="安装-oh-my-posh-和一些其他的东西"><a href="#安装-oh-my-posh-和一些其他的东西" class="headerlink" title="安装 oh-my-posh 和一些其他的东西"></a>安装 oh-my-posh 和一些其他的东西</h2><p>其实就是 oh-my-zsh 的 windows 版。。。</p>
<p>参考文章：</p>
<ul>
<li><a href="https://blog.csdn.net/itanders/article/details/75305163">PowerShellGet系列(二)：用PowerShellGet管理你的模块包</a></li>
<li><a href="https://blog.csdn.net/WPwalter/article/details/78937346">将美化进行到底，把 PowerShell 做成 oh-my-zsh 的样子</a></li>
<li><a href="https://github.com/JanDeDobbeleer/oh-my-posh">JanDeDobbeleer/oh-my-posh</a></li>
</ul>
<h3 id="先给出一些-powershell-上一些常用的操作"><a href="#先给出一些-powershell-上一些常用的操作" class="headerlink" title="先给出一些 powershell 上一些常用的操作"></a>先给出一些 powershell 上一些常用的操作</h3><ol>
<li><p>安装模块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Install-Module xxx</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看当前模块版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Get-Module xxx</span><br></pre></td></tr></table></figure>
</li>
<li><p>寻找可用模块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Find-Module -Name xxx -AllVersions</span><br></pre></td></tr></table></figure>
</li>
<li><p>卸载模块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">remove-module posh-git</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="主要安装步骤"><a href="#主要安装步骤" class="headerlink" title="主要安装步骤"></a>主要安装步骤</h3><ol>
<li><p>开启策略（注意，如果你的个人文档在 d 盘，系统在 c，重装系统后其实不用再走下面的步骤了，但是要走这一步；如果之前安装了 chocolatey，这一步也不用做了）</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Set-ExecutionPolicy Bypass</span><br><span class="line">#Set-ExecutionPolicy Unrestricted </span><br><span class="line">#使用该策略可能会导致管理员模式下不可安装模块，需要进入普通用户模式安装</span><br></pre></td></tr></table></figure>

<p> （可选）安装模块时候经常遇到提示「不受信任的储存库」，可以按 A 或 Y 跳过，也可以直接关闭检测：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Set-PSRepository -Name PSGallery -InstallationPolicy Trusted</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装依赖模块 posh-git 和 psreadline</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Install-Module posh-git -Scope CurrentUser</span><br><span class="line">Install-Module -Name PSReadLine  -Scope CurrentUser -Force -SkipPublisherCheck                 </span><br></pre></td></tr></table></figure>
</li>
<li><p>安装模块 oh-my-posh</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Install-Module oh-my-posh -Scope CurrentUser</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后按美化 powershell 修改字体里面的第三部新建配置文件（如果建了就不用了），填入</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Import-Module posh-git</span><br><span class="line">Import-Module oh-my-posh</span><br><span class="line">Set-Theme Paradox</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>重启 powershell 生效。</p>
<h3 id="补充注意"><a href="#补充注意" class="headerlink" title="补充注意"></a>补充注意</h3><ol>
<li><p>安装的 posh-git 和 psreadline 都安装的是非最新版，如果要安装最新测试版可以考虑把这两个原版卸掉，然后更新 powershellget（自带的 powershell get 好像无法识别测试版的安装参数），并重启。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">remove-module posh-git</span><br><span class="line">remove-module psreadline</span><br><span class="line">Install-Module -Name PowerShellGet -Force</span><br></pre></td></tr></table></figure>

<p>然后安装最新测试版（版本号可以去 powershell 官网要）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Install-Module -Name PSReadLine -RequiredVersion 2.1.0-beta2 -AllowPrerelease</span><br><span class="line">Install-Module -Name posh-git -RequiredVersion 1.0.0-beta4 -AllowPrerelease	</span><br></pre></td></tr></table></figure>

<p><strong>（20.8.10 更新）</strong> 可以尝试直接强制更新，而不是卸载。关闭所有 powershell 窗口，在 cmd 下运行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">powershell -noprofile -command &quot;Install-Module PSReadLine -Force -SkipPublisherCheck -AllowPrerelease&quot;</span><br><span class="line">powershell -noprofile -command &quot;Install-Module posh-git -Force -SkipPublisherCheck -AllowPrerelease&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自动补全有另一种形式，就是显示出所有候选项的形式，可以通过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Set-PSReadLineKeyHandler -Key Tab -Function Complete</span><br></pre></td></tr></table></figure>

<p>来打开。当然这是暂时的打开，永久打开添加到 $profile 里就行了。</p>
</li>
<li><p><del>然而就算如此，教程里面展现的什么都没调整就能享受到的带方向键的自动补全。。。实在是搞不出来</del></p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/3lMO1jJ.png"></p>
<p>如果要使用方向键式自动补全，修改 2 的语句为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Set-PSReadLineKeyHandler -Key Tab -Function MenuComplete</span><br></pre></td></tr></table></figure>
</li>
<li><p>智能提示。需更新到 2.1.0-beta1 后版本。参考：<a href="https://github.com/PowerShell/PSReadLine/issues/687">Fish-like autocompletion</a></p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set-psreadlineoption -predictionsource history</span><br><span class="line">get-psreadlineoption | % predictionsource</span><br></pre></td></tr></table></figure>
</li>
<li><p> 其他有用的功能。比如上下翻选时根据当前已输入的内容进行筛查而不是安装当前历史记录。可参照配置文件 <a href="https://github.com/PowerShell/PSReadLine/blob/master/PSReadLine/SamplePSReadLineProfile.ps1"><strong>SamplePSReadLineProfile.ps1</strong></a>。需要将其所有内容放到 <code>profile.ps1</code> 的最前端。</p>
</li>
<li><p>如果遭遇 <code>Install-Module : A parameter cannot be found that matches parameter name AllowPrerelease.</code>，先更新 PowerShellGet。参考：<a href="https://evotec.xyz/install-module-a-parameter-cannot-be-found-that-matches-parameter-name-allowprerelease/">Install-Module : A parameter cannot be found that matches parameter name AllowPrerelease.</a></p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Install-Module -Name PowerShellGet -Force</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="powerline-补丁"><a href="#powerline-补丁" class="headerlink" title="powerline 补丁"></a>powerline 补丁</h2><p>oh-my-posh 装好后，使用主题会发现各种乱码，因为主题是靠各种 powerline 字体实现的。</p>
<p>在修改字体那里说过，要么上支持 powerline 的字体要么给字体打补丁。</p>
<p>打补丁的工具叫做 <a href="https://github.com/ryanoasis/nerd-fonts">nerd-fonts</a>，需要在 linux 环境下才能使用。当然，系统比较新的话，可以考虑用 wsl ubuntu。下文就是用这玩意进行补丁的。</p>
<p>参考文章：</p>
<ul>
<li><a href="https://www.hanselman.com/blog/PatchingTheNewCascadiaCodeToIncludePowerlineGlyphsAndOtherNerdFontsForTheWindowsTerminal.aspx">Patching the new Cascadia Code to include Powerline Glyphs and other Nerd Fonts for the Windows Terminal</a></li>
<li><a href="https://coolcode.org/2018/03/16/how-to-make-your-powershell-beautiful/">PowerShell 美化指南</a></li>
</ul>
<ol>
<li><p>安装依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install software-properties-common</span><br><span class="line">sudo add-apt-repository ppa:fontforge&#x2F;fontforge</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install fontforge</span><br><span class="line">sudo apt install python-pip</span><br><span class="line">sudo pip install configparser</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过 git 或者下载源码的方式，主要是将项目目录下的 src 文件夹和 font-patcher 脚本下载到本地</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/phxn8xp.png"></p>
</li>
<li><p>通过<code>explorer.exe .</code>命令，将第二部的文件以及字体全部拖到执行文件夹中。</p>
</li>
<li><p>打补丁</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fontforge -script font-patcher Cascadia.ttf -c</span><br></pre></td></tr></table></figure>

<p>打好补丁的字体会存在执行文件夹中，安装就是了。安装后可能还需要返回修改字体那部对字体的汉字 fallback 进行设置（另外打完补丁的字体名字会发生改变）</p>
</li>
</ol>
<h3 id="已知问题关于每行「〉」符号乱码的解决方法"><a href="#已知问题关于每行「〉」符号乱码的解决方法" class="headerlink" title="已知问题关于每行「〉」符号乱码的解决方法"></a><del>已知问题</del>关于每行「〉」符号乱码的解决方法</h3><p><del>在 powershell 中，尽管字体打完了补丁，但还是有一个符号会显示为方框，就是每行开头的「〉」符号。而且使用更纱黑体，换用其他终端都没问题。已向作者提出 issue：<a href="https://github.com/ryanoasis/nerd-fonts/issues/375">The symbol ‘〉’ can not display in powershell</a>。</del></p>
<p>提问半小时，解决五分钟。。。还是自己解决的，不过还有些小疑点，看看有没有人回我 issue~</p>
<p>简而言之，那个方框符号其实和我猜的差不多，不在 powerline 里面（因为我提问前搜索了一下 powershell 相关的 issue，也有个问题作者回了「你乱码的符号其实不是 powerline 符号」，但和我提问的符号不一样，所以我就开 issue 了」）</p>
<p>那问题出在哪呢？另外两个 terminal 都没问题哦？突然想起，在 terminus 里面看中文和 powershell 里面我配置过 fallback 的中文字形明显不太一样，而且就算我没配过 fallback，terminus 那边的字形也还属于「能看」级别的。</p>
<p>那我大概知道问题在哪了</p>
<ol>
<li>那个符号应该是靠 fallback 到正确字体显示出来的</li>
<li>国外用的是英文 windows 操作系统，和中文操作系统的 fallback 回退可能不太一样，它们回退到了能够正确显示那个符号的字体，而我们大概率是回退到了垃圾宋体</li>
</ol>
<p>那问题就很好解决了，从参考文章第二篇我们可以看到作者这么处理了方框文字：</p>
<blockquote>
<p>在其中新建多字符串值，名称为：<code>Sarasa Term SC</code>，内容为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MICROSS.TTF,Microsoft Sans Serif,108,122</span><br><span class="line">MICROSS.TTF,Microsoft Sans Serif</span><br><span class="line">MINGLIU.TTC,PMingLiU</span><br><span class="line">MSMINCHO.TTC,MS PMincho</span><br><span class="line">BATANG.TTC,Batang</span><br><span class="line">MSYH.TTC,Microsoft YaHei UI</span><br><span class="line">MSJH.TTC,Microsoft JhengHei UI</span><br><span class="line">YUGOTHM.TTC,Yu Gothic UI</span><br><span class="line">MALGUN.TTF,Malgun Gothic</span><br><span class="line">SEGUISYM.TTF,Segoe UI Symbol</span><br></pre></td></tr></table></figure>

<p>这段内容是复制的宋体SimSun的，如果你愿意的话，可以用同样的方法把 <code>Sarasa</code> 系列的都注册一下，如果像我这么懒的话，只修改这一个，然后重启计算机也是可以了。修改之后的效果是这样的：</p>
</blockquote>
<p>当然我们知道，现在最新的 sarasa（更纱黑体）已经解决这个问题了。而是否需要复制这么多的 fallback 呢。。。我尝试了一下，只需要最后一行好像就行了。当然我也不确定这样做后面会有什么新问题，这就是为什么那边的 issue 我想继续开着的原因。</p>
<h2 id="其他黑科技"><a href="#其他黑科技" class="headerlink" title="其他黑科技"></a>其他黑科技</h2><p>以下内容设置完后记得关键指令保存到配置文件里面去~</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">notepad $PROFILE</span><br></pre></td></tr></table></figure>

<h3 id="彩色标记文件"><a href="#彩色标记文件" class="headerlink" title="彩色标记文件"></a>彩色标记文件</h3><p>使用 pscolor 模块。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Install-Module PSColor</span><br><span class="line">#关键指令</span><br><span class="line">Import-Module PSColor</span><br></pre></td></tr></table></figure>

<h3 id="显示全部历史记录"><a href="#显示全部历史记录" class="headerlink" title="显示全部历史记录"></a>显示全部历史记录</h3><p>参考文章：<a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/set-alias?view=powershell-6">Set-Alias</a></p>
<p>默认的<code>history</code>指令只能显示当前窗口的历史记录。如果要显示全部的历史记录，需要输入命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat (Get-PSReadlineOption).HistorySavePath</span><br></pre></td></tr></table></figure>

<p>但这命令太长又不好记，所以用<code>alias</code>简化。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#下面两个都是关键指令</span><br><span class="line">function his &#123;cat (Get-PSReadlineOption).HistorySavePath&#125;</span><br><span class="line">set-alias -name allhistory -value his</span><br></pre></td></tr></table></figure>

<p>往后用 <code>his</code> 或 <code>allhistory</code>就能看到所有的历史记录了。</p>
<h3 id="启动时显示机器信息"><a href="#启动时显示机器信息" class="headerlink" title="启动时显示机器信息"></a>启动时显示机器信息</h3><p>可能会拖慢启动速度，慎用。</p>
<h4 id="screenfetch"><a href="#screenfetch" class="headerlink" title="screenfetch"></a>screenfetch</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Install-Module -Name windows-screenfetch</span><br></pre></td></tr></table></figure>

<p>使用 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#关键指令</span><br><span class="line">screenfetch</span><br></pre></td></tr></table></figure>

<p>启动。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/5nlZs9k.png"></p>
<h4 id="winfetch"><a href="#winfetch" class="headerlink" title="winfetch"></a>winfetch</h4><p>磁盘信息显示没有上面这个全（只会显示系统盘），快一些，但咱不用 scoop，所以安装略微麻烦。有两种安装方法：</p>
<ol>
<li><p>直接通过命令安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Install-Script -Name winfetch</span><br></pre></td></tr></table></figure>

<p>安装出来的是 v1.0 版本，界面和最新版有些差距</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/3znd7v3.png"></p>
</li>
<li><p>通过 <a href="https://github.com/lptstr/winfetch">github</a> 获取</p>
<p><em>根据作者写的 wiki：<a href="https://github.com/lptstr/winfetch/wiki/Installation">Basic Usage</a>，先需要去自己的 github 中添加一个公钥，并将对应的私钥放在自己 git 目录下的 <code>.ssh</code> 文件夹中，最后通过 <code>ssh -vT git@github.com</code> 命令处理后才能运行 wiki 中的第一条命令拷贝库。</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:lptstr&#x2F;winfetch.git winfetch</span><br></pre></td></tr></table></figure>

<p>不过最后验证出来是大费周章。。。直接 git 源库就好了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;lptstr&#x2F;winfetch.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后处理一下，最新版本是 v1.2.0 来着（可选，否则安装的是最新分支的测试版，如果要做第五步的自定义的话这步是必须的，测试版报错，不过经过测试，正式版也可能报错。。。）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd winfetch</span><br><span class="line">git reset --hard v1.2.0</span><br></pre></td></tr></table></figure>

<p>拷贝到 windows powershell script 默认目录下，windows 应该会自动帮你添加到系统路径里面，大概是 <code>C:\Program Files\WindowsPowerShell\Scripts</code>，如果拷进去发现不能运行的话，说明没帮你添加，需要自行添加。</p>
</li>
<li><p>最后运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#关键指令</span><br><span class="line">winfetch</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/So5ntqV.png"></p>
</li>
<li><p>自定义 winfetch 显示内容</p>
<p>参考文章：<a href="https://github.com/lptstr/winfetch/wiki/Configuration">Configuration</a></p>
<p>下载配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">winfetch -genconf</span><br></pre></td></tr></table></figure>

<p>如果报错下载不下来，可以自己创建</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">notepad C:\Users\[用户名]\.config&#x2F;winfetch&#x2F;config.ps1</span><br></pre></td></tr></table></figure>

<p>内容大概是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#x3D;&#x3D;&#x3D;&#x3D;&#x3D; WINFETCH CONFIGURATION &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line"># Remove the &#39;#&#39; from any of the lines in</span><br><span class="line"># this file to **enable** their output.</span><br><span class="line"></span><br><span class="line">@(</span><br><span class="line">    &#39;None&#39;</span><br><span class="line">    &#39;Show_Title&#39;</span><br><span class="line">    &#39;Show_Dashes&#39;</span><br><span class="line">    &#39;Show_OS&#39;</span><br><span class="line">    &#39;Show_Computer&#39;</span><br><span class="line">    &#39;Show_Uptime&#39;</span><br><span class="line">    &#39;Show_CPU&#39;</span><br><span class="line">    &#39;Show_GPU&#39;</span><br><span class="line">    &#39;Show_Memory&#39;</span><br><span class="line">    &#39;Show_Pkgs&#39;    </span><br><span class="line">#    &#39;Show_Terminal&#39;</span><br><span class="line">#    &#39;Show_Disk&#39;</span><br><span class="line">#    &#39;Show_Pwsh&#39;</span><br><span class="line">) -join &#39;,&#39;</span><br></pre></td></tr></table></figure>

<p>将不需要显示的注释掉就好了，默认情况下注释掉了下面三个（如果不创建这个文件的话，其实是全部显示的）。</p>
</li>
</ol>
<h3 id="（20-6-26-更新）proxychains-powershell-版"><a href="#（20-6-26-更新）proxychains-powershell-版" class="headerlink" title="（20.6.26 更新）proxychains powershell 版"></a>（20.6.26 更新）proxychains powershell 版</h3><p>linux 那边（19.11.12）的 proxychains4 在 powershell 这边也有相应的版本，就叫 proxychains。</p>
<p>在这里下载：<a href="https://github.com/shunf4/proxychains-windows/releases">shunf4/proxychains-windows</a></p>
<p>解压后将其中的 exe 和 dll 全部转移到一个好找的文件夹里面，比如 <code>D:\proxychains</code>。</p>
<p>然后将该文件夹添加到系统变量 PATH 中。</p>
<p>再把其中的 <code>proxychains.conf</code> 解压到 <code>%USERPROFILE%\.proxychains\</code> 里面，修改最后一行（其实这行默认适配 ss，如果用的是 ss 默认配置就别改了），改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">socks5 [ip] [端口]</span><br></pre></td></tr></table></figure>

<p>然后添加 alias 简化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#关键指令</span><br><span class="line">set-alias -name  fan -value proxychains_win32_x64</span><br></pre></td></tr></table></figure>

<p>测试（注意用的是命令是 curl.exe 而不是 curl，原因见这里：<a href="https://www.cnblogs.com/sx00xs/p/11478936.html">powershell中调用 curl 的正确方法</a>）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fan curl.exe cip.cc </span><br></pre></td></tr></table></figure>

<h3 id="（20-6-26-更新）curl-中文问题（不完美解决）"><a href="#（20-6-26-更新）curl-中文问题（不完美解决）" class="headerlink" title="（20.6.26 更新）curl 中文问题（不完美解决）"></a>（20.6.26 更新）curl 中文问题（不完美解决）</h3><p>首先</p>
<p>相信上一步运行时，之前没通过 <code>chcp 54936</code> 改编码（其实改了也乱码，要改成 <code>chcp 65001</code> 才有用）的诸位发现问题了。</p>
<p>curl 出来的都是乱码。</p>
<p>除了修改编码，还有一种方法能够解决。但必须进入 cmd，在 powershell 下除非临时改编码否则暂时无解。</p>
<p>参考文章：<a href="https://blog.csdn.net/aganliang/article/details/84403923">CURL 中文乱码解决方法</a></p>
<p>进入 <a href="http://gnuwin32.sourceforge.net/packages/libiconv.htm">LibIconv for Windows</a> 下载 <a href="https://sourceforge.net/projects/gnuwin32/files/libiconv/1.9.2-1/libiconv-1.9.2-1.exe/download?use_mirror=netix&download=">Complete package, except sources</a>，安装。</p>
<p>增加系统变量（以默认的安装位置来说）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Program Files (x86)\GnuWin32\bin</span><br></pre></td></tr></table></figure>

<p>进入 cmd，然后运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmd</span><br><span class="line">proxychains_win32_x64 curl cip.cc| iconv -f utf-8 -t gbk</span><br></pre></td></tr></table></figure>











]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>zsh</tag>
        <tag>powershell</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 入门</title>
    <url>/hexo-ru-men/</url>
    <content><![CDATA[<blockquote>
<p>罗马不是一日建成的。</p>
</blockquote>
<p>但我的博客可以！:dog:</p>
<p>0202 年了，要写博客选择很多，远古时期发展来的 wordpress 配置相对复杂，但发展那么多年是这里面最成熟的选择了；年中我为了续费阿里云学生机曾经快速过过一遍主页那些小教程，玩了一下里面的 vuepress 感觉也不错；还有好像挺多大佬用 typecho 的？不过作为萌新，先从当前最成熟最简单的开始，就 hexo + Next 了。</p>
<p>hexo 网上教程烂大街了，所以步骤我介绍的很简单，详细步骤参见相应的参考文章，我只介绍大概步骤和一些坑。（说是最成熟最简单，我这个撞坑大王还是遇到不少坑</p>
<p>使用的软件版本：</p>
<p>nodejs 和 hexo 运行平台：Ubuntu 19.10（话说我现在才发现这个系统过期导致 apt update 失灵，等我解决了还可以水一篇文章）</p>
<p>nodejs（linux）：v14.6.0 <code>nodejs -v</code></p>
<p>hexo（linux）：5.2.0 <code>cd hexo</code> <code>hexo -v</code></p>
<p>hexo-next（linux）：7.8.0（可以在 <code>themes/next/package.json</code>内查到）</p>
<p><a href="https://github.com/Molunerfinn/PicGo">pic-go</a>（windows）：2.3.0-beta.3</p>
<p>另外先附上我们两个主角的官方中文文档：</p>
<ul>
<li><a href="https://hexo.io/zh-cn/docs/">hexo 文档</a></li>
<li><a href="https://theme-next.iissnan.com/getting-started.html">NexT 开始使用</a></li>
</ul>
<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>参考文章：</p>
<ul>
<li><a href="https://blog.ichr.me/post/set-up-hexo-on-github-page/">Github Page + Hexo 免费搭建个人博客教程</a></li>
<li><a href="http://blog.fujian.show/2019/05/11/hexo-github-build-blog/">史上最完整教程！Hexo + GitHub page免费搭建个人博客</a></li>
</ul>
<ol>
<li><p>装 nodejs 和 git</p>
</li>
<li><p>全局安装 hexo，新建个目录作为 <strong>hexo 根目录</strong>，在里面初始化 hexo，安装组件，生成文件。未来所有以 hexo 和 npm 开头的命令都需要在 hexo 文件夹下执行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br><span class="line">mkdir hexo &amp;&amp; cd hexo</span><br><span class="line">hexo init</span><br><span class="line">npm install</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure>
</li>
<li><p>装 NexT 主题（许多教程里面的 next 还用的是 iissnan/hexo-theme-next 的这个旧版，用旧版运行时会报错，且运行的时候有提示让你更新新版）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next.git themes&#x2F;next</span><br></pre></td></tr></table></figure>

<p>修改 hexo 根目录中的 <code>_config.yml</code>，将其中的 theme 改为 next。（注意，如果此处修改后运行报错参考<a href="https://www.jianshu.com/p/861307262429">搭建博客遇到Plugin load failed: %s hexo-theme-landscape错误</a>删除 <code>package.json</code> 中原主题 landscape 的依赖即可）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<p>此时就可以打开本地预览看看效果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
</li>
<li><p>建文章。本地预览中显示的这篇文章 <code>source/_posts/hello_world.md</code> 中。第一篇文章可以修改这个文件，也可以删掉重新建一个。通过终端建立新文章的方法参考<a href="https://hexo.io/zh-cn/docs/writing.html">写作</a>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new post &lt;title&gt; title.md</span><br></pre></td></tr></table></figure>

<p>文件名称（也就是 title.md）不影响在博客中显示的效果。但 title 影响。</p>
<p>这么建文章有个问题。。。我之前写的日记，我想按我日记上的日期显示在博客里咋整？</p>
<p>那我们可以手动对 <code>source/_posts</code> 里的 md 文件进行一些修改。</p>
<p>原来写的日记，如果是普通的文本请改成 markdown 格式（这里不再展开），好在我原来写的日志就是 md 格式的，仿照 <code>hello-world.md</code> 在全文前面加上代表 title 和初始日期的代码块就行了。这个代码块里面还可以指定本文的分类、tag、是否置顶等属性，这个我们之后再说。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201220025108.png"></p>
<p>另外，之前文章的总标题我都用一级标题的形式书写的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201220025319.png" alt="比如这样"></p>
<p>而刚刚代码块里面的 title 在文章中显示出来的大小和一级标题一模一样，看起来重复了。所以还要把一级标题删掉，直接放到 title 上。</p>
</li>
<li><p>修整一下 hexo 全局配置文件 <code>_config.yml</code> 和 next 主题的配置文件 <code>themes/next/_config.yml</code>中的相应项目。全局配置文件中，网站基本描述（修改这里的时候注意，这些参数原来冒号后面跟的是单引号，别当双引号看了，最好一开始就直接删掉那些引号，这里的参数值就算是汉字也不需要用引号括起来）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Bao&#39;s 备忘录</span><br><span class="line">subtitle: </span><br><span class="line">description: 玩点好玩的</span><br><span class="line"># keyword:</span><br><span class="line">author: zbttl</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: Asia&#x2F;Shanghai</span><br></pre></td></tr></table></figure>

<p>可引用外部图片</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure>

<p>next 主题配置文件中，主页需要需要启用菜单功能（我这里多启用了关于、标签、种类三个功能）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F; || fa fa-home</span><br><span class="line">  tags: &#x2F;tags&#x2F; || fa fa-tags</span><br><span class="line">  categories: &#x2F;categories&#x2F; || fa fa-th</span><br><span class="line">  archives: &#x2F;archives&#x2F; || fa fa-archive</span><br><span class="line">  #schedule: &#x2F;schedule&#x2F; || fa fa-calendar</span><br><span class="line">  #sitemap: &#x2F;sitemap.xml || fa fa-sitemap</span><br><span class="line">  #commonweal: &#x2F;404&#x2F; || fa fa-heartbeat</span><br><span class="line">  about: &#x2F;about&#x2F; || fa fa-user</span><br></pre></td></tr></table></figure>

<p>（多嘴一句，后面美化主题新加功能的时候少不了折腾这两个文件，特别是 next 主题的配置文件，英语过关的话认真看里面已经写了很多插件功能了，装好模块删掉注释就能开）</p>
</li>
<li><p>把自己之前的一些文章转换好在本地看完效果后，发布。本来是想发布到自己的服务器和域名上，想想算了。。。毕竟那个东西，是用来干一些（咳咳</p>
<p>那就托管到 github.io 好了。在 github 上建一个名为你的用户名 .github.io 的仓库。放（或者建）一个 ssh key 到 github 里面。（玩 vps 的 ssh key 这玩意应该人手一个吧）</p>
<p>搞定以后再次修改全局配置文件 <code>_config.yml</code>的相应内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 刚刚建的仓库的域名</span><br><span class="line">url: https:&#x2F;&#x2F;xxx.github.io&#x2F;</span><br><span class="line">root: &#x2F;</span><br><span class="line">#permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;</span><br><span class="line">permalink: :title&#x2F;</span><br><span class="line">...</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:xxx&#x2F;xxx.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>

<p>repository 这项不清楚的话，打开你的项目下面，点击那个绿色的下载按钮 code-&gt;ssh</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201220033031.png"></p>
<p>配置 git 用户和邮箱：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;Your Name&quot;</span><br><span class="line">git config --global user.email &quot;email@example.com&quot; </span><br></pre></td></tr></table></figure>

<p>把自己 ssh key 中的私钥 <code>id_rsa</code> 放到自己 linux 用户目录的 <code>.ssh</code> 文件夹里面，改权限为 0600。</p>
<p>安装 hexo-github 插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git </span><br></pre></td></tr></table></figure>

<p>提交！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>

<p>一会儿访问 xxx.github.io 就能看到自己的博客了。</p>
</li>
</ol>
<h2 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h2><p>参考文章：</p>
<ul>
<li><a href="https://blog.csdn.net/tangyb828/article/details/110389851">PicGo+GitHub 你的最佳免费图床选择！</a></li>
<li><a href="https://blog.csdn.net/weixin_43571641/article/details/106448498">[教程] PicGo+GitHub 免费图床搭建</a></li>
</ul>
<p>其实凑合一点存在项目内也不是不行。不过我的文章先在另一台设备的 typora 里面写完再上传到博客的，这样显然不太行。</p>
<p>如果不考虑国内访问，存在 imgur 就可以了，还有 shareX 这种工具能够方便的截图上传。</p>
<p>如果坚信自己的图片能够过审核！那可以存在 sm.ms。（我本来打算存那儿的，结果就那么几张为了实验找出来的图我还给敏感部位打了码最后还是被 delete 了两张）</p>
<p>最后决定先存 github 吧。虽然 github 的 raw.githubusercontent.com 今年由于某个原因变得不稳定了起来，但偶尔还能用，而且还有 cdn 加速勉强撑着。和上面两个图床相比还有一个优势就是上传上去的图片文件名不会变。未来无论是重新下回来还是上传到其他也不会改文件名的图床都会方便一些（批量改域名就可以）。</p>
<p>如果有 vps 而且流量多的话，可以考虑在 vps 中开一个图床，这里就不详细探究了。</p>
<ol>
<li><p>在 github 新建一个默认创建 README.md 的 public 仓库。（话说我有点害怕 github 来查我水表，于是我新开了了一个小号）</p>
</li>
<li><p>获取一个 github Personal access tokens，只需要 repo 权限。</p>
</li>
<li><p>在 picgo 中填写相应参数。坑来了：现在已经是 0202 年了，新项目没有 master 分支这个说法了。。。我踩进去半天才反应过来。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201218041918.png"></p>
<p>仓库名填 [ 账号名 ]/[ 仓库名 ]。</p>
<p>自定义域名，可以用 github 源 url。不排除未来 github 的源 url 再次更改，没关系，项目里面不是默认有个 README.md 吗？点开他，下面有个 raw，点开以后显示的域名去掉 README.md 就是我们要往自定义域名填的东西。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;[用户名]&#x2F;[仓库名]&#x2F;[分支名]</span><br></pre></td></tr></table></figure>

<p>或者用加速 cdn <a href="https://www.jsdelivr.com/?docs=gh">jsdelivr</a>。version 这里填分支名。后面带上 README.md 访问一下就知道自己有没有改对 url 了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;user&#x2F;repo@version</span><br></pre></td></tr></table></figure>

<p><strong>（20.12.23 更新）</strong> 今天传图片的时候遇到问题了。传了一张 50k 的图片，在 typora 中没显示出来。用浏览器打开一看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Package size exceeded the configured limit of 50 MB. Try https:&#x2F;&#x2F;github.com&#x2F;zbpicture&#x2F;picture&#x2F;tree&#x2F;main&#x2F;img&#x2F;iiHvIIn.png instead.</span><br></pre></td></tr></table></figure>

<p>问题是这个图片那么小是怎么超过 50M 的？而且后面又传了两个图片，没问题。打开 github，上面三张图片都在。</p>
<p>原因未知但有解决方法：参考<a href="https://blog.shiyunhong.com/3353.html">记一下JsDelivr踩的坑</a>。</p>
<p>把链接中的 main 改成 master 就能显示出来了。</p>
<p>问题和解决方法都一样神秘的说。</p>
<p><strong>(21.1.1 更新)</strong> 发现一张图片码没打全，去 github 那边手动删掉重新上传，但发现 cdn 那边还是没有更新的样子？看来只能手动更新了。参考文章：<a href="https://www.cnblogs.com/UncleZhao/p/13753723.html">jsdelivr CDN 使用和缓存刷新 - 易波叶平 - 博客园</a></p>
<p>打开那张图片的 url，将其中的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;</span><br></pre></td></tr></table></figure>

<p>切换为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;purge.jsdelivr.net&#x2F;</span><br></pre></td></tr></table></figure>

<p>即可。</p>
</li>
</ol>
<h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><h3 id="添加标签和分类"><a href="#添加标签和分类" class="headerlink" title="添加标签和分类"></a>添加标签和分类</h3><p>参考文章：</p>
<ul>
<li><a href="https://www.zhihu.com/question/29017171">hexo 下的分类和表签无法显示，怎么解决？</a></li>
<li><a href="https://aiellochan.com/2018/02/13/hexo/Hexo-%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%A4%9A%E4%B8%AA-categories/">Hexo 一篇文章多个 categories</a></li>
</ul>
<p>添加相应的文件夹：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;tags&quot;</span><br><span class="line">hexo new page &quot;categories&quot;</span><br></pre></td></tr></table></figure>

<p>然后在 <code>source/</code> 相应文件夹下会看到一个 <code>index.md</code>，打开在代码块里面新增一个 type，type 的值就放相应的功能名。如果你不知道相应的功能名叫什么的话，去 next 配置文件里面 menu 那个地方看，或者直接往上翻，我曾经提到过。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201220065728.png"></p>
<p>之后就可以在对应博文的代码块中加入 categories 和 tags 属性了。要注意，如果要设置多个标签，格式是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tags: [tag1,tag2]</span><br></pre></td></tr></table></figure>

<p>但如果要设置多个种类，格式是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line"> - [category1]</span><br><span class="line"> - [category2]</span><br></pre></td></tr></table></figure>

<p>还要注意，此时如果你边开着本地预览边改，需要重启一遍 <code>hexo s</code> 才会生效。</p>
<h3 id="添加火柴棒动态背景"><a href="#添加火柴棒动态背景" class="headerlink" title="添加火柴棒动态背景"></a>添加火柴棒动态背景</h3><p>参考文章：<a href="https://lvxuefei.top/%E5%88%A9%E7%94%A8Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89-%E4%BC%98%E5%8C%96-%E5%90%84%E7%A7%8Dtips%E3%80%81%E9%BB%91%E7%A7%91%E6%8A%80%EF%BC%8C%E4%B8%8D%E6%96%AD%E6%9B%B4%E6%96%B0/">利用 Hexo+Next 搭建个人博客（三）—— 优化 (各种 tips、黑科技，不断更新)</a>)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd themes&#x2F;next</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;theme-next-canvas-nest source&#x2F;lib&#x2F;canvas-nest</span><br></pre></td></tr></table></figure>

<p>在主题配置文件中新增：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">canvas_nest:</span><br><span class="line">  enable: true			# 是否显示true|false</span><br><span class="line">  onmobile: true 		# 是否在移动端展示true|false</span><br><span class="line">  color: &quot;120,120,120&quot; 	# 线条的颜色（RGB表示）, 用 &#96;,&#96; 隔开</span><br><span class="line">  opacity: 0.5 			# 线条头透明度: 0~1</span><br><span class="line">  zIndex: -1 			# 用于控制线条所在层的位置, 默认:-1。值越大，显示的层面离用户越近。</span><br><span class="line">  count: 150			# 线条的总条数</span><br></pre></td></tr></table></figure>

<h3 id="添加鼠标点击特效"><a href="#添加鼠标点击特效" class="headerlink" title="添加鼠标点击特效"></a>添加鼠标点击特效</h3><p>有两种实现方法，第一种参考<a href="Hexo%E5%8D%9A%E5%AE%A2+Next%E4%B8%BB%E9%A2%98%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB%E7%89%B9%E6%95%88">Hexo博客+Next主题鼠标点击特效</a>，是老版本在 <code>/themes/next/layout/_custom/custom.swig</code> 调用第三方 js，虽然新版本已经不存在 <code>/themes/next/layout/_custom/</code>这个文件夹了，但仍可以通过手工创建并在  <code>/themes/next/layout/_layout.swig</code> body 中用 include 引入生效。</p>
<p>但我更推荐新方法：</p>
<p>参考文章：<a href="https://dongguagua.gitee.io/archives/6f944b02.html">NexT 主题自定义样式</a></p>
<p>相比上面的旧方法，新方法热切换鼠标点击效果的时候本地预览不会突然崩掉。</p>
<p>在主题配置文件中找到 <code>custom_file_path:</code>，取消下面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bodyEnd: source&#x2F;_data&#x2F;body-end.swig</span><br></pre></td></tr></table></figure>

<p>这行的 # 号注释。</p>
<p>编辑（新建） <code>source/_data/body-end.swig</code>，加入下面的内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;# 鼠标点击特效 #&#125;</span><br><span class="line">&#123;% if theme.cursor_effect &#x3D;&#x3D; &quot;fireworks&quot; %&#125;</span><br><span class="line">  &lt;script async src&#x3D;&quot;&#x2F;js&#x2F;cursor&#x2F;fireworks.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&#123;% elseif theme.cursor_effect &#x3D;&#x3D; &quot;explosion&quot; %&#125;</span><br><span class="line">  &lt;canvas class&#x3D;&quot;fireworks&quot; style&#x3D;&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;&#x2F;canvas&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;&#x2F;&#x2F;cdn.bootcss.com&#x2F;animejs&#x2F;2.2.0&#x2F;anime.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script async src&#x3D;&quot;&#x2F;js&#x2F;cursor&#x2F;explosion.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&#123;% elseif theme.cursor_effect &#x3D;&#x3D; &quot;love&quot; %&#125;</span><br><span class="line">  &lt;script async src&#x3D;&quot;&#x2F;js&#x2F;cursor&#x2F;love.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&#123;% elseif theme.cursor_effect &#x3D;&#x3D; &quot;text&quot; %&#125;</span><br><span class="line">  &lt;script async src&#x3D;&quot;&#x2F;js&#x2F;cursor&#x2F;text.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>然后打开 <code>source/js</code>，新建 <code>cursor</code> 文件夹。进入其中用 wget 下载四个 js 文件，对应四种特效：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;zbpicture&#x2F;picture@main&#x2F;explosion.min.js</span><br><span class="line">wget https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;zbpicture&#x2F;picture@main&#x2F;fireworks.js</span><br><span class="line">wget https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;zbpicture&#x2F;picture@main&#x2F;love.min.js</span><br><span class="line">wget https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;zbpicture&#x2F;picture@main&#x2F;text.js</span><br></pre></td></tr></table></figure>

<p>最后在主题配置文件中放入一行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cursor_effect: text # fireworks：礼花 | explosion：爆炸 | love：浮出爱心 | text：浮出文字</span><br></pre></td></tr></table></figure>

<p>即可</p>
<p>才怪。你会发现除了 text 以为的特效都正常，但使用 text 时，什么都没发生？按下 f12，弹出这么个错误：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201219211715.png"></p>
<p>查了半天不知道什么问题，干脆大力出奇迹。在 <code>source/_data/body-end.swig</code> 最顶上加一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot; https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;jquery@3&#x2F;dist&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>搞定。</p>
<h3 id="添加置顶"><a href="#添加置顶" class="headerlink" title="添加置顶"></a>添加置顶</h3><p>参考文章：<a href="https://www.cnblogs.com/lqerio/p/11117467.html">HEXO添加置顶功能</a></p>
<p>卸载旧模块安装新模块：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-generator-index</span><br><span class="line">npm install hexo-generator-index-pin-top</span><br></pre></td></tr></table></figure>

<p>在需要置顶的博文的开头代码块中加入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">top: true</span><br></pre></td></tr></table></figure>

<p>即可。</p>
<h3 id="去除-hexo-支持信息与主题版本信息，侧边栏社交信息链接，添加代码块复制按钮，权利声明"><a href="#去除-hexo-支持信息与主题版本信息，侧边栏社交信息链接，添加代码块复制按钮，权利声明" class="headerlink" title="去除 hexo 支持信息与主题版本信息，侧边栏社交信息链接，添加代码块复制按钮，权利声明"></a>去除 hexo 支持信息与主题版本信息，侧边栏社交信息链接，添加代码块复制按钮，权利声明</h3><p>参考文章：<a href="https://lvxuefei.top/%E5%88%A9%E7%94%A8Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89-%E4%BC%98%E5%8C%96-%E5%90%84%E7%A7%8Dtips%E3%80%81%E9%BB%91%E7%A7%91%E6%8A%80%EF%BC%8C%E4%B8%8D%E6%96%AD%E6%9B%B4%E6%96%B0/">利用 Hexo+Next 搭建个人博客（三）—— 优化 (各种 tips、黑科技，不断更新)</a>)</p>
<p>都是内置功能。</p>
<p>可以在主题配置文件里面找到相应内容。</p>
<p>支持信息和主题版本搜索 <code>powered</code> 和 <code>theme</code> 字段。</p>
<p>社交信息链接搜索 <code>social</code> 字段。</p>
<p>代码块复制按钮搜索 <code>codeblock</code> 字段，修改其中的 <code>copy_button</code> 功能。</p>
<p>权利声明修改 <code>creative_commons</code> 字段，其中的 <code>license</code> 参数决定你使用那种权利声明，参考<a href="https://zhuanlan.zhihu.com/p/154075043">怎样为自己的文章添加合适的许可（共用许可证-Creative Commons licenses）</a>，我觉得既然咱们决定用这玩意那最少也用个 by-sa。</p>
<h3 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h3><p>参考文章：<a href="https://lvxuefei.top/%E5%88%A9%E7%94%A8Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89-%E4%BC%98%E5%8C%96-%E5%90%84%E7%A7%8Dtips%E3%80%81%E9%BB%91%E7%A7%91%E6%8A%80%EF%BC%8C%E4%B8%8D%E6%96%AD%E6%9B%B4%E6%96%B0/">利用 Hexo+Next 搭建个人博客（三）—— 优化 (各种 tips、黑科技，不断更新)</a>)</p>
<ol>
<li>安装 <a href="https://links.jianshu.com/go?to=https://github.com/flashlab/hexo-generator-search">hexo-generator-searchdb</a> 插件</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>打开全局配置文件，在下面添加</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 搜索</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>打开主题配置文件找到 <code>Local search</code>，将 <code>enable</code> 设置为 <code>true</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  trigger: auto				# trigger若为auto, 通过改变输入触发搜索</span><br><span class="line">  							# trigger若为manual, 通过按下enter键或者点击搜索按钮触发搜索</span><br><span class="line">  top_n_per_article: 1 		# 展示每篇文章的前n个结果，如果想要展示所有结果，设置为-1</span><br><span class="line">  unescape: false			# 将html字符串转义为可读的字符串。</span><br><span class="line">  preload: false			# 当加载页面时预加载搜索结果</span><br></pre></td></tr></table></figure>

<h3 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h3><p>安装 <code>hexo-symbols-count-time</code> 模块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time</span><br></pre></td></tr></table></figure>

<p>其实就能用了。但相应的参数还可以改一下。</p>
<p>打开主题配置文件找到 <code>symbols-count-time</code> 字段。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true</span><br><span class="line">  item_text_post: true</span><br><span class="line">  item_text_total: true</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br></pre></td></tr></table></figure>

<p>然后做一次清理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>避免出现不生效的 bug。（参考<a href="https://github.com/theme-next/hexo-symbols-count-time/issues/53">The symbols count is undefined and reading time is NaN:aN. #53</a>）</p>
<h3 id="统计访问量"><a href="#统计访问量" class="headerlink" title="统计访问量"></a>统计访问量</h3><p>参考文章：<a href="https://lvxuefei.top/%E5%88%A9%E7%94%A8Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89-%E4%BC%98%E5%8C%96-%E5%90%84%E7%A7%8Dtips%E3%80%81%E9%BB%91%E7%A7%91%E6%8A%80%EF%BC%8C%E4%B8%8D%E6%96%AD%E6%9B%B4%E6%96%B0/">利用 Hexo+Next 搭建个人博客（三）—— 优化 (各种 tips、黑科技，不断更新)</a>)</p>
<p>使用<a href="http://ibruce.info/2015/04/04/busuanzi/">不蒜子</a></p>
<p>打开主题配置文件找到 <code>busuanzi_count</code> 字段，将 <code>enbale</code> 设置为 <code>true</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  enable: true                #是否显示计数ture|false</span><br><span class="line">  total_visitors: true		  #访客数，uv的方式，单个用户连续点击n篇文章，只记录1次访客数</span><br><span class="line">  total_visitors_icon: user</span><br><span class="line">  total_views: true           #访问量，pv的方式，单个用户连续点击n篇文章，记录n次访问量</span><br><span class="line">  total_views_icon: eye</span><br><span class="line">  post_views: true            #是否显示每篇文章的访问次数ture|false</span><br><span class="line">  post_views_icon: eye</span><br></pre></td></tr></table></figure>

<h3 id="文章自动折叠"><a href="#文章自动折叠" class="headerlink" title="文章自动折叠"></a>文章自动折叠</h3><ol>
<li><p>安装插件 <code>hexo-excerpt</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-excerpt</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改全局配置文件，新增以下内容（话说好多参考文章甚至是官方文档用的 <code>auto_excerpt</code> 在我这不生效，不知道啥原因）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">excerpt:</span><br><span class="line">  depth: 3</span><br><span class="line">  excerpt_excludes: []</span><br><span class="line">  more_excludes: []</span><br><span class="line">  hideWholePostExcerpts: true</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><p>一顿操作，不免装了一些没用模块，用些命令清理一下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm prune</span><br><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>现在博客只搞了最基础的美化，以及我觉得有必要实现的功能。其他高级一点的功能再说吧，比如 rss 啊，评论啊，说回来我评论不怎么想开（玻璃心），但想着能发动人民群众给我挑错误也还不错。不过听说评论还有好多种不同的实现方式，研究研究再说。（实在是受不了我就开个类似的东西，比如点赞？hexo 支持这玩意么）</p>
<h2 id="其他优秀参考文章集合"><a href="#其他优秀参考文章集合" class="headerlink" title="其他优秀参考文章集合"></a>其他优秀参考文章集合</h2><ul>
<li><a href="https://www.jianshu.com/p/9f0e90cc32c2">Hexo-NexT配置超炫网页效果</a></li>
<li><a href="https://tding.top/archives/567debe0.html">本博客当前使用的插件总结</a></li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>玩一下 imagemagick</title>
    <url>/wan-yi-xia-imagemagick/</url>
    <content><![CDATA[<p>imagemagick，在我这里大概有两大类用途：</p>
<ol>
<li>没有 ps，下个 ps 贼大，怎么办？命令行修图吧。。。</li>
<li>gif 加速（配合 ffmpeg）</li>
</ol>
<p>不过这玩意那是相当复杂。。。以下是一些入门教程：</p>
<ul>
<li><a href="https://www.jianshu.com/p/310d833d9a25">ImageMagick 入门教程</a></li>
<li><a href="http://www.charry.org/docs/linux/ImageMagick/ImageMagick.html">我的 ImageMagick 使用心得</a></li>
<li><a href="http://www.pooy.net/category/os/imagemagick-os">璞玉（POOY）Category: Imagemagick</a></li>
<li><a href="https://blog.csdn.net/ihtml5/article/details/88084364">ImageMagick 高级教程整理</a></li>
<li><a href="http://www.360doc.cn/userhome.aspx?userid=1947337">ImageMagick 使用经验</a></li>
</ul>
<p>文档：</p>
<ul>
<li><a href="https://imagemagick.org/script/command-line-processing.php">官方文档</a></li>
<li><a href="https://imagemagick.org/script/command-line-options.php">官方参数文档</a></li>
<li><a href="http://www.imagemagick.com.cn/command_line_options.html">中文（看起来有一定机翻）参数文档</a></li>
<li><a href="https://legacy.imagemagick.org/Usage/">Examples of ImageMagick Usage</a></li>
</ul>
<p>请注意，本文完成时所使用的 Imagemagick 版本为 7.0.10-48 Q16 x64 2020-12-10（windows），修复了 Imagemagick 无法直接将 mp4 转换为 gif 的问题，可通过 chocolatey 安装并通过 <code>magick -version</code> 查看版本；在 Linux 上还安装了老版本的 Imagemagick，版本为 6.9.10-23 Q16 x86_64 20190101，通过 ubuntu 19.10 的 apt 安装指令安装，可通过 <code>convert -version</code> 查询版本。</p>
<h2 id="图像配字"><a href="#图像配字" class="headerlink" title="图像配字"></a>图像配字</h2><p>适用场景：表情包制作（x</p>
<p><code>-gravity</code>：文字位置，可选东西南北中（</p>
<p><code>-fill</code> 和 <code> -stroke</code>：文字颜色和边框</p>
<p><code>-pointsize</code>：文字大小，必填</p>
<p><code>-kerning</code>：文字间隔</p>
<p><code>-font</code>：如果你要写中文的话。。。就得指定中文字体</p>
<p><code>-annotate</code>：偏移，一般表情包的字也不会放最边边，还是要往中间偏点点~</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">magick .\0.jpg -gravity south -fill white -pointsize 400 -kerning 600  -stroke black -font &#39;SimSun-&amp;-NSimSun&#39; -annotate +0+150 &#39;[内容]&#39;   0_des.jpg</span><br></pre></td></tr></table></figure>

<h2 id="马赛克（伪）"><a href="#马赛克（伪）" class="headerlink" title="马赛克（伪）"></a>马赛克（伪）</h2><p>后面的举例图有 nsfw 内容！我暂时还不知道怎么给图片打多边形马赛克 / 模糊。。。只能简单用白色多边形遮一下。</p>
<p><code>draw</code>：后面跟的 polygon 是多边形的意思，要裁其他图形的话参考这里 <a href="https://imagemagick.org/script/command-line-options.php#draw">draw</a>。后面的参数是多边形的座标，具体座标挺多画图软件能查看的（比如 irfanview），甚至 magick 自带工具 display 命令都可以。后面座标就按单向连通图的顺序，顺时针逆时针都可以。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">magick .\0raw.jpg -fill white  -draw &#39;polygon 342,2031 125,2274 330,2809 677,2851 652,2470&#39; .\0.jpg</span><br></pre></td></tr></table></figure>

<h2 id="纠偏-裁剪"><a href="#纠偏-裁剪" class="headerlink" title="纠偏 + 裁剪"></a>纠偏 + 裁剪</h2><p>经常收壁纸，有的画集是有外框的，我有强迫症要把外框剪掉（而且有外框做壁纸也不好看）。另外，有的画集是扫描的，但扫描的时候没有彻底放正，导致剪裁的时候会发现有一点点歪。通常我会使用 photoshop 的透视剪裁来处理这类图片，不过这次 magick 有比较自动化的命令，来试试效果怎么样。</p>
<p>样张（不要吐槽这是张色图，我暂时懒得找又歪又有边框的图了，扫了一眼手机的图册就只有这张，而且这张图片和外框相接触的部分还带有一些彩边，非常适合检测算法的能力）：</p>
<p><img src="https://raw.githubusercontent.com/zbpicture/picture/main/img/005.jpg"></p>
<p>另外，下面的样图因为图床大小限制原因被我转成 jpg，但我操作的时候用的是原图 png。</p>
<h3 id="方法-1：用-photoshop-裁剪工具（不纠偏）"><a href="#方法-1：用-photoshop-裁剪工具（不纠偏）" class="headerlink" title="方法 1：用 photoshop 裁剪工具（不纠偏）"></a>方法 1：用 photoshop 裁剪工具（不纠偏）</h3><p>手工裁剪，尽量保留最大方形可见面积，且几乎不容忍任何解析度较低的彩边。</p>
<p>最后得到 2427x3429 大小的图片。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/005_ps1.jpg"></p>
<h3 id="方法2：用-photoshop-透视裁剪工具（顺便纠偏）"><a href="#方法2：用-photoshop-透视裁剪工具（顺便纠偏）" class="headerlink" title="方法2：用 photoshop 透视裁剪工具（顺便纠偏）"></a>方法2：用 photoshop 透视裁剪工具（顺便纠偏）</h3><p>手工像素级裁剪，尽量保留最大方形可见面积，且几乎不容忍任何解析度较低的彩边。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/005_ps2.jpg"></p>
<p>最后得到 2441x3434 大小的图片。目前最标准和完美的结果，也是下面操作的基准目标。</p>
<h3 id="方法3-直接使用-magick-自动检测"><a href="#方法3-直接使用-magick-自动检测" class="headerlink" title="方法3: 直接使用 magick 自动检测"></a>方法3: 直接使用 magick 自动检测</h3><p><code>-fuzz</code> 模糊检测因子，越大容忍度越低，裁掉的内容也就越多</p>
<p><code>-border</code> 边框最小尺寸</p>
<p><code>+repage</code> 消除位移属性（可有可无）</p>
<p><code>-trim</code> 进行裁剪</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">convert 005.png  -fuzz 73% -border 1x1 +repage -trim 005_magick1.png</span><br></pre></td></tr></table></figure>

<p>显然裁少了一截。最后只得到 2410x3293 尺寸的图片。fuzz 参数也没有调整余地了，调小成 72 右上角的字就消不掉。右上角的字和头发颜色相仿似乎使 magick 识别出现了混乱。另外右下角还有显而易见没裁掉的白边。</p>
<p>加一个代表指定边框颜色的 <code>-bordercolor</code> 参数，fuzz 参数就要提高到 85。color 具体能填什么，参考这里：<a href="https://imagemagick.org/script/color.php#usage">Color Name</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">convert 005.png -bordercolor &#39;#ffffff&#39; -fuzz 85% -border 1x1 +repage -trim 005_magick1.png</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/005_magick1.jpg"></p>
<p>分辨率变成 2412x3294。问题依旧。</p>
<p>去掉 <code>-boader</code> 参数。fuzz 可以降低到 60 多，但此时裁掉的像素就太多。差出数量级，这里就不给数据了。</p>
<h3 id="方法-4：自动旋转后使用-magick-检测拼接"><a href="#方法-4：自动旋转后使用-magick-检测拼接" class="headerlink" title="方法 4：自动旋转后使用 magick 检测拼接"></a>方法 4：自动旋转后使用 magick 检测拼接</h3><p><code>-deskew</code> 是自动倾斜校正参数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">convert 005.png -background white -deskew 40% 005_tem.png</span><br></pre></td></tr></table></figure>

<p>然后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">convert 005_tem.png  -fuzz 73% -border 1x1 +repage -trim +repage 005_magick2.png</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/005_magick2.jpg"></p>
<p>分辨率变成 2412x3269。仍然不完美，但白边没那么明显了。另外我尝试过 <code>-deskew 100%</code> 这个参数，结果二次处理后白边更大，效果不好。</p>
<h3 id="方法-5：magick-检测拼接，然后再自动旋转"><a href="#方法-5：magick-检测拼接，然后再自动旋转" class="headerlink" title="方法 5：magick 检测拼接，然后再自动旋转"></a>方法 5：magick 检测拼接，然后再自动旋转</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">convert 005.png  -fuzz 50% -border 1x1 +repage -trim +repage 005_tem.png   </span><br><span class="line">convert 005_tem.png -background white -deskew 40% 005_tem2.png</span><br><span class="line">convert 005_tem2.png  -fuzz 73% -border 1x1 +repage -trim +repage 005_magick3.png </span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/005_magick3.jpg"></p>
<p>虽说分辨率甚至是图像和方法 4 出来的几乎都一模一样，不过 tem2 和 tem 两张图对比，后者有明显的纠偏痕迹了。但究竟是 magick3 trim 的时候又纠回来了还是之前的 trim 带了纠偏效果我就看不出来了。</p>
<h3 id="方法6（magick-7-专用）"><a href="#方法6（magick-7-专用）" class="headerlink" title="方法6（magick 7 专用）"></a>方法6（magick 7 专用）</h3><p>参考文章：<a href="https://imagemagick.org/discourse-server/viewtopic.php?f=4&t=35579">Enhanced -trim operator</a></p>
<p>注意这里的 <code>-define trim:percent-background=15%</code>，含义和上面的 <code>-fuzz</code> 完全相反，越小裁掉的内容越多。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">magick 005.png  -define trim:percent-background&#x3D;15% -define trim:background-color&#x3D;&#39;#ffffff&#39; -trim 005_tem.png</span><br></pre></td></tr></table></figure>

<p>分辨率 2440x3431。接近手工调整的结果了，但看起来还是有白边。特别是纠偏以后：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">convert 005_tem.png  -background white -deskew 40%  005_tem1.png</span><br></pre></td></tr></table></figure>

<p>尝试使用纯粹的 trim 方法（也就是方法 3），发现无论如何都剪不掉那些细小的白边。甚至把 <code>-fuzz</code> 参数调到 80 了，把图片上部剪掉一些了结果右侧的细小白边也还没被剪掉。</p>
<p>继续用本方法裁一遍</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">magick 005_tem1.png  -define trim:percent-background&#x3D;15% -define trim:background-color&#x3D;&#39;#ffffff&#39; -trim 005_magick4.png</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/005_magick4.jpg"></p>
<p>极限了，还是有肉眼可见的白边，但再把 <code>-define trim</code> 参数调小就又影响画面了。白边的大小，相比只纠偏以后的效果，勉强是可以接受的。此时分辨率为 2437x3429。</p>
<h3 id="方法7：将白色边框中的多余的部分用-gui（画图-ps）剪掉，再处理"><a href="#方法7：将白色边框中的多余的部分用-gui（画图-ps）剪掉，再处理" class="headerlink" title="方法7：将白色边框中的多余的部分用 gui（画图 / ps）剪掉，再处理"></a>方法7：将白色边框中的多余的部分用 gui（画图 / ps）剪掉，再处理</h3><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/0054.jpg"></p>
<p>既然纠偏和裁剪顺序定下来了，那我们顺便把命令也集成在一起。</p>
<p>看起来虽然剪掉了多余的部分让 <code>-fuzz</code> 和 <code>-define trim:percent-background</code> 不需要那么高（低）就能识别出真正边框的大致轮廓；但要确定下具体轮廓，好像还是不行（意思是还是有白边），看起来应该是纠偏没有办法纠的太正？</p>
<p><code>-fuzz</code> 下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">convert 0052.png   -deskew 40% -fuzz 70% -bordercolor white -border 1x1 +repage -trim 005_magick5.png</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/005_magick5.jpg"></p>
<p>分辨率 2448x3434。这次本方法能剪出一个比较完整的图像而不会把头发的一部分都给当框削了。</p>
<p><code>-define trim:percent-background</code> 下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">magick 0052.png  -define trim:percent-background&#x3D;15% -define trim:background-color&#x3D;&#39;#ffffff&#39; -trim -background white -deskew 40% -define trim:percent-background&#x3D;15% -define trim:background-color&#x3D;&#39;#ffffff&#39; -trim 005_magick6.png</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/005_magick6.jpg"></p>
<p>分辨率 2439x3431。白边反而还比 <code>-fuzz</code> 那边要大了，效果还比没有用 gui 修改前的还差。。。（也许是我命令写的有问题，但我感觉就算命令写的没问题白框也削不掉）</p>
<h3 id="方法-8：去除噪点"><a href="#方法-8：去除噪点" class="headerlink" title="方法 8：去除噪点"></a>方法 8：去除噪点</h3><p>就这样放弃了吗？不！我又查到了一篇新的参考文章：<a href="https://superuser.com/questions/1219030/trimming-exterior-empty-space-with-imagemagick-does-not-work-on-scanned-document">Trimming exterior empty space with ImageMagick does not work on scanned documents</a>，说是扫描件的噪点会干扰软件的判断。</p>
<p>那就试试先去噪点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">convert 0052.png -write MPR:source -morphology close rectangle:3x4 -morphology erode square    MPR:source -compose Lighten -composite -morphology erode square    MPR:source -composite -morphology erode square    MPR:source -composite -morphology erode square    MPR:source -composite -morphology erode square    MPR:source -composite -morphology erode square    MPR:source -composite -morphology erode square    MPR:source -composite -morphology erode square    MPR:source -composite -morphology erode square    MPR:source -composite 0053.png</span><br></pre></td></tr></table></figure>

<p>再用 <code>-fuzz</code>。合起来的命令效果不如分开的，那就保险起见用分开的命令。<code>-fuzz</code>需要进一步调低。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">convert 0053.png -background white -deskew 40% 005_tem.png</span><br><span class="line">convert 005_tem.png  -fuzz 50% -border 1x1 +repage -trim +repage 005_magick7.png</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/005_magick7.jpg"></p>
<p>分辨率 2445x3434。仍有白边。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">magick 0053.png  -define trim:percent-background&#x3D;15% -define trim:background-color&#x3D;&#39;#ffffff&#39; -trim 005_tem.png</span><br><span class="line">magick 005_tem.png  -background white -deskew 40%  005_tem1.png</span><br><span class="line">magick 005_tem1.png  -define trim:percent-background&#x3D;15% -define trim:background-color&#x3D;&#39;#ffffff&#39; -trim 005_magick8.png</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/005_magick8.jpg"></p>
<p>分辨率 2737x3429，有白边。</p>
<hr>
<p>结论：在这个时间点，不好用。</p>
<h2 id="图像拼接"><a href="#图像拼接" class="headerlink" title="图像拼接"></a>图像拼接</h2><p>多张表情包合成（x</p>
<p><code>-append</code>：竖着拼。如果是 <code>+append</code> 就是横着拼。</p>
<p><code>-resize</code>：几张图中如果不是尺寸一致一定就会有的图长有的图短。这就要看个人考量了，比如要竖着拼的话，是把窄的图等比缩放到和宽得一样宽，还是把宽的图缩放到和最窄的一样窄，那就在要缩放的图后面加 <code>-resize</code>。<code>resize</code> 的参数是 <code>长x宽</code>，如果有其中一个参数不用改动可以留空，但是要保留 x 号。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">convert a.jpg  b.jpg -resize 814x -append   0.jpg</span><br></pre></td></tr></table></figure>

<h2 id="tgs-转换与加速"><a href="#tgs-转换与加速" class="headerlink" title="tgs 转换与加速"></a>tgs 转换与加速</h2><p>tgs 是 telegram 内动态表情包的专用格式。telegram 内的表情包可以通过机器人 <a href="https://t.me/Stickerdownloadbot">@Stickerdownloadbot</a> 导出单张或批量导出一整个表情包系列的图片，对于静态图片 bot 会同时导出为包含三种不同格式内容的压缩包；但对于动态图片就只会导出为一个内含 tgs 格式文件的压缩包，后续就还需要通过以下方法进行转换才能在其他地方使用。</p>
<h3 id="tgs-转换"><a href="#tgs-转换" class="headerlink" title="tgs 转换"></a>tgs 转换</h3><h4 id="lottie"><a href="#lottie" class="headerlink" title="lottie"></a>lottie</h4><p>桌面平台，python 里面一个叫 <a href="https://pypi.org/project/lottie/">lottie</a> 的包，建议在 Linux 下使用，windows 下安装繁琐；</p>
<p>linux：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install lottie</span><br><span class="line">sudo pip3 install --upgrade pip</span><br><span class="line">pip3 install cairosvg opencv-python</span><br><span class="line">pip3 install lottie</span><br><span class="line">lottie_convert.py 0.tgs 0.gif</span><br></pre></td></tr></table></figure>

<p>windows：</p>
<p>参考<a href="https://weasyprint.readthedocs.io/en/stable/install.html#windows">https://weasyprint.readthedocs.io/en/stable/install.html#windows</a>，先安装 <a href="https://github.com/tschoonj">tschoonj</a>/<strong><a href="https://github.com/tschoonj/GTK-for-Windows-Runtime-Environment-Installer">GTK-for-Windows-Runtime-Environment-Installer</a></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install cairosvg pillow</span><br><span class="line">pip install opencv-python</span><br><span class="line">python -m pip install --upgrade pip setuptools</span><br><span class="line">python -m pip install WeasyPrint</span><br><span class="line">pip3 install lottie</span><br><span class="line">python lottie_convert.py 0.tgs 0.gif</span><br></pre></td></tr></table></figure>

<h4 id="shu"><a href="#shu" class="headerlink" title="shu"></a>shu</h4><p>ios 上的 shu，美区有售。可将 tgs 批量导出为各种格式，如 webp、gif、pngs 等。</p>
<h4 id="tgs-to-gif-12-14-更新"><a href="#tgs-to-gif-12-14-更新" class="headerlink" title="tgs-to-gif (12.14 更新)"></a>tgs-to-gif <strong>(12.14 更新)</strong></h4><p>上面两个软件，前者免费但容易出现各类错误，且安装繁琐；后者需要付费但效果尚可。</p>
<p>最近又出现一个新的 tgs 转换工具 <a href="https://github.com/ed-asriyan">ed-asriyan</a>/**<a href="https://github.com/ed-asriyan/tgs-to-gif">tgs-to-gif</a>**，前面两个工具转换一些 tgs 会出现重影（经过测试不是下面我 gif 速度优化的锅，而是转换出来的帧里面本身就有重影的帧出现），这个工具基本解决了重影的问题，且大部分 gif 也不存在速度过慢的问题。缺点是转换出来的 gif 质量低于前面两个软件，且在 windows 的 irfanview 下播放会出现花屏现象，原因不明。</p>
<p>在 pc 和虚拟机上上使用建议借助 nodejs 安装；在国外 vps 上使用建议借助 docker 安装。</p>
<p>原因嘛，docker 方便但因为网络原因安装速度可能会很慢，docker 内部比较难上代理，docker 加速器在这里无效因为跑 docker 的时候我发现这个东西不仅拉镜像还在跑 apt；但 vps 上用 nodejs 还需要非 root 账号，因为本项目用到了 puppeteer，还不一定成功，我在两台 debian 的机子上都掉坑一台找不到 browser 另一台装不上 gifski，找不到 browser 那一回 nodejs 我用了 15，后面发现 15 不行；装不上 gifski 是因为 cargo 都装不上，掉进新坑用命令 <code>rustup install stable</code> 运行到一般就被 kill 了估计是内存都不够了，也不想划虚拟内存了，懒得爬出来了。</p>
<p>另外 nodejs 运行时的运行目录必须在项目内（但 tgs 文件不需要放在项目内），docker 不需要但写 tgs 文件夹路径的时候得写绝对路径，各有各的麻烦。</p>
<p>nodejs：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;sh.rustup.rs -sSf | sh #并 ctrl+d</span><br><span class="line">curl -sL https:&#x2F;&#x2F;deb.nodesource.com&#x2F;setup_14.x | bash - #目前不支持15</span><br><span class="line">apt-get install -y nodejs</span><br><span class="line">cargo install gifski</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;ed-asriyan&#x2F;tgs-to-gif.git</span><br><span class="line">cd tgs-to-gif</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>即可使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#转换多个 tgs</span><br><span class="line">node cli.js 0.tgs 1.tgs...</span><br><span class="line">#转换整个文件夹</span><br><span class="line">node cli.js &#x2F;home&#x2F;zbttl&#x2F;tgs</span><br></pre></td></tr></table></figure>

<p>docker：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;ed-asriyan&#x2F;tgs-to-gif.git</span><br><span class="line">cd tgs-to-gif</span><br><span class="line">docker build -t tgs-to-gif .</span><br></pre></td></tr></table></figure>

<p>即可使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --rm -v &lt;文件夹绝对路径&gt;:&#x2F;source tgs-to-gif</span><br></pre></td></tr></table></figure>

<p><strong>（12 月 23 日更新）</strong> docker 版和 nodejs 效果居然不一样。。。。docker 版出来的效果需要加速，所以只推荐 nodejs 版。至于为什么效果会不一样。。。我猜测是因为 gifski 版本的原因，docker 里面 gifski 版本还是 0.10.4，我在实机中安装的版本已经是 1.22 了。但话说回来，issue 里面刚好就有个人吐槽长度宽度参数不生效[The –height HEIGHT –width WIDTH don’t work #25](The –height HEIGHT –width WIDTH don’t work #25)，作者给的意见是更换喂 gifski 旧版。。。。另外一点，托之前忘记安装 gifski 的福，我看到了部分运行命令：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201223071937.png"></p>
<p>合着这质量还只有百分之 80。。。但我在项目中完全查不到这些个帧数质量啥的在哪调，所以没辙。</p>
<p>先说一下踩进去的坑，不想看的可以跳过下面这一段：</p>
<h3 id="鉴坑扯淡"><a href="#鉴坑扯淡" class="headerlink" title="鉴坑扯淡"></a>鉴坑扯淡</h3><p>样张：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/1gGuvCbBVJqMRtj.gif"></p>
<p>用 shu 转完后，发现发出去的图片在 qq 中播放速度相当慢 。</p>
<p>肯定是啥参数不对。。。查参数的软件，我一开始只记得查视频用的 mediainfo，打开一看，这玩意就不是用来看 gif 参数的。。。只有一个图像格式 87a 和我手上其他 gif 不同，其他 gif 是 89a（后来的后来经过调查，87a 和 89a 的差别，是 87a 是旧标准，不支持半透明参数）。不过还是尝试转一下吧。</p>
<p>按<a href="https://blog.mutoo.im/2015/01/gif-87a-vs-89a/">检测 GIF 版本的方法</a>，图片确实变成 89a 了，但是出现了严重的重影。。。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Zv9YCok1ql784Hi.gif"></p>
<p>后续我用了各种类型的软件转换和测试，大概的测试结果如下图：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>张数</th>
<th>码率</th>
<th>fps</th>
<th>tbr</th>
<th>duration</th>
<th>delay</th>
<th>irfanview 5s（循环次）</th>
<th>windowsqq 10s</th>
<th>androidqq（10s）</th>
<th>张数/时间</th>
<th>张数/时间+delay</th>
</tr>
</thead>
<tbody><tr>
<td>ps转视频再改回gif</td>
<td>11</td>
<td>1646</td>
<td>33.33</td>
<td>33.33</td>
<td>0.33</td>
<td>0.03</td>
<td>16</td>
<td>16</td>
<td>20</td>
<td>0.03</td>
<td>0.06</td>
</tr>
<tr>
<td>ezgif（从webp转换）</td>
<td>13</td>
<td>1691</td>
<td>20</td>
<td>20</td>
<td>0.65</td>
<td>0.05</td>
<td>7</td>
<td>13</td>
<td>15</td>
<td>0.05</td>
<td>0.1</td>
</tr>
<tr>
<td>源</td>
<td>23</td>
<td>2395</td>
<td>33.33</td>
<td>33.33</td>
<td>0.69</td>
<td>0.03</td>
<td>8</td>
<td>8</td>
<td>12</td>
<td>0.03</td>
<td>0.06</td>
</tr>
<tr>
<td>ezgif（加速）</td>
<td>23</td>
<td>3481</td>
<td>50</td>
<td>50</td>
<td>0.46</td>
<td>0.02</td>
<td>8</td>
<td>8</td>
<td>12</td>
<td>0.02</td>
<td>0.04</td>
</tr>
<tr>
<td>ps改帧数</td>
<td>12</td>
<td>646</td>
<td>14</td>
<td>28</td>
<td>0.84</td>
<td>0.07</td>
<td>6</td>
<td>15</td>
<td>11</td>
<td>0.07</td>
<td>0.14</td>
</tr>
<tr>
<td>ps改帧数改延迟</td>
<td>12</td>
<td>452</td>
<td>10</td>
<td>10</td>
<td>1.2</td>
<td>0.01</td>
<td>25</td>
<td>15</td>
<td>9</td>
<td>0.1</td>
<td>0.11</td>
</tr>
<tr>
<td>imageonline</td>
<td>23</td>
<td>716</td>
<td>10</td>
<td>10</td>
<td>2.3</td>
<td>0</td>
<td>15</td>
<td>4</td>
<td>4</td>
<td>0.1</td>
<td>0.1</td>
</tr>
</tbody></table>
<ol>
<li><p>上面这些转换方法转出来的图片都是没有重影的；</p>
</li>
<li><p>前面的这些参数来自 ffprobe 和 imagemagick 的 identify 工具，ffmpeg 的 tbr/duration 参数含义参考这里：<a href="http://ffmpeg-users.933282.n4.nabble.com/What-does-the-output-of-ffmpeg-mean-tbr-tbn-tbc-etc-td941538.html">What does the output of ffmpeg mean? tbr tbn tbc etc?</a>；</p>
<blockquote>
<p>FFmpeg中的时间戳有三种不同的时基。实际打印的 值是这些值的倒数，即1 / tbr，1 / tbn和1 / tbc。<br>我认为tbn是AVStream中来自容器的时基 。它用于所有AVStream时间戳。<br>tbc是AVCodecContext中用于特定流的编解码器的时基 。它用于所有AVCodecContext和相关时间戳。<br>tbr是从视频流中推测出来的，它是用户在寻找视频帧速率时希望看到的值 ，只是有时由于场速率与帧速率的关系，它是预期值的两倍 。</p>
<p>时基：确定帧定时的依据；avstream：音频/视频顺序数据；容器：可以包含音频/视频数据通道的文件格式，例如avi，mp4或mkv；</p>
<p>我想他们选择报告TBR，是因为ffmpeg对帧率实际是最好的猜测。在许多容器上，fps字段（更具体地说AVStream.avg_frame_rate是）不可用，因此不能真正依靠它。</p>
</blockquote>
<p>以及：<a href="https://stackoverflow.com/questions/43333542/what-is-video-timescale-timebase-or-timestamp-in-ffmpeg">What is video timescale, timebase, or timestamp in ffmpeg?</a>]</p>
</li>
<li><p>有的情况下帧数越高播放速度反而越慢，不同平台下同样的两种图片有可能速度表现完全相反。这跟 gif 下的 fps 定义和各软件对 gif 定义的理解有关；</p>
</li>
<li><p>综合比较 ps 转视频加速改回 gif 效果是最好的。（又是 ps，ps 万能）</p>
</li>
</ol>
<p>另外，shu 也可以把 tgs 换成其他多种格式，但直接能动的就两种：gif 和 webp。上面我用 ezgif 讲 webp 转成 gif，发现速度大体正常，综合参数，我提出一个大胆的假设：应该蛮多软件不看 <code>delay</code> 而是直接以张数作为播放速度的依据。至于为什么不看延迟？可能跟所谓 <a href="https://legacy.imagemagick.org/Usage/anim_basics/#zero">gif 零延迟</a>有关：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">好吧，它们很重要，那又是什么呢？因为许多应用程序不喜欢它们，或者处理不当。他们认为“零延迟帧”是一件坏事，即使您出于某种原因故意将它们添加到动画中也是如此。</span><br><span class="line">这是我了解或被告知“做错事”的应用程序的摘要...</span><br><span class="line">金普	不会保存“零延迟帧”，它们总是向具有零时延的任何帧添加最小的时延。:-(</span><br><span class="line"> </span><br><span class="line">火狐	在这样的帧上会稍有非零的停顿。大概是这样，根本没有时间延迟的动画会耗尽所有计算机的CPU周期。但是firefox，如果动画的总显示时间为非零，则“ ”仍不能放松该限制。</span><br><span class="line"> </span><br><span class="line">IE浏览器	最小时间延迟为6厘秒，并且忽略小于此时间的任何延迟。</span><br><span class="line">如果任何图像帧超出了第一帧设置的动画范围，Internet Explorer 8版本也会失败（立即重新启动循环）。我将其归类为主要错误。</span><br></pre></td></tr></table></figure>

<p>因为 0 延迟可能报错，所以干脆就不用延迟来计算了。。。。</p>
<p>如同这篇文章：<a href="https://www.easeus.com/amp/video-editing-tips/gif-speed-changer.html">Top 10 Best GIF Speed Changers: How to Speed up or Slow down GIF Easily</a> 给出的所有手段几乎都是在 gif 的 delay 参数上动手脚，而 delay 参数又似乎和 fps 挂钩（参考这里：<a href="https://superuser.com/questions/1449366/do-60-fps-gifs-actually-exist-or-is-the-maximum-50-fps">Do 60 FPS GIF’s actually exist? Or is the maximum 50 FPS?</a>)，但如果软件不认可你的 delay 参数，那自然就没有用。那么 gif 就会按照 timebase，也就是 0.04s 一张这个速度进行播放。另外为什么说 delay 似乎和 fps 挂钩呢？因为 delay 设置为 2 和 3 的时候，ffprobe 显示帧数分别为 50fps 和 33.33fps。但！delay 设置为 1 的时候，ffprobe 又显示帧数只有 10fps。。。可能是因为触发了 ffprobe 的最小延迟机制（要求最小延迟为 2，只能显示 50fps）。其实不止 ffprobe，还有许多看图软件的最小延迟也设定为 2。如果 delay 写 1 的话 gif 显示速度反而会变慢。</p>
<p>本次转换的主要目的是 tgs 转换的 gif 在 qq 上播放较慢。不过后续测试发现是部分 gif 调整 delay 后播放速度没有改观；而本身 delay 较大的 gif 修改 delay 后明显感觉播放速度加快。至于那部分能够修改 delay 加速的 gif 有没有 delay 阈值我倒是没有认真进行过测试。但减少帧数是一定能奏效的（</p>
<p>另外除了重影，某些软件转换到 gif 过程中会导致背景从透明变为白色，这也是要解决的问题。</p>
<p>减少 gif 张数，我目前得知两种方法：</p>
<ol>
<li><p>抽取关键帧（Image.n_frames），关键帧的概念参见：<a href="https://buildmedia.readthedocs.org/media/pdf/pillow/latest/pillow.pdf">Pillow (PIL Fork) Documentation</a></p>
<blockquote>
<p>Image.n_frames:  intThe number of frames in this image.This attribute is only defined by image plugins that support animated images.  Plugins may leave this attributeundefined if they don’t support loading animated images, even if the given format supports animated images.Given that this attribute is not present for all images usegetattr(image, “n_frames”, 1)to checkthe number of frames that Pillow is aware of in an image regardless of its format</p>
</blockquote>
<p>但只对那些优化过的 gif 有用（优化过的 gif 是啥意思？参考压缩 gif 一文中的参考文章 3 gif modification）</p>
</li>
<li><p>转换成其他格式（比如视频）然后加速后再转回去。上面用 ps 处理过一次，但 ps 是个 gui，批量转换肯定不能用 ps。</p>
</li>
</ol>
<p>另外，对于修改 delay，也建议使用 imagemagick 而不是那些原理不明的工具。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">convert -delay 2 0.gif 0_change.gif</span><br></pre></td></tr></table></figure>

<p>具体修改到什么程度可以参考以下两篇文章：</p>
<ol>
<li><p><a href="https://superuser.com/questions/1449366/do-60-fps-gifs-actually-exist-or-is-the-maximum-50-fps">Do 60 FPS GIF’s actually exist? Or is the maximum 50 FPS?</a> 上面引用过了，另外这篇文章里面还有个「暴论」</p>
<blockquote>
<p>这意味着，对于100 FPS的图像速率，最小值为1（在大多数显示器上很难呈现…），对于50 FPS的图像速率，其下一个最小值为2，而对于下一个值为3图像速率为33.3 FPS。因此，完全不可能达到60 FPS。</p>
<p>请注意，此扩展是针对少数几秒钟延迟的帧（最大延迟约为600秒），因此1/100秒的分辨率就足够了。这当然不是视频的意思，这就是为什么该字段编码延迟而不是帧速率的原因。</p>
<p>制作视频GIF确实是对规范的滥用（即使现在如此普遍，以至于大多数人可能没有意识到这一点，就像大多数人没有意识到GIF和JPEG使用不同类型的压缩一样，并且应该被使用）在不同种类的图像上）。</p>
</blockquote>
</li>
<li><p><a href="https://davidwalsh.name/how-to-change-animated-gif-speed">How to Change Animated GIF Speed</a></p>
</li>
</ol>
<p>转换后听说还可能遭遇再次转回 mp4 出错的问题，可以参考这篇文章：<a href="https://my.oschina.net/u/4404738/blog/3412123">（原）关于使用imagemagick将gif叠加到图片或者画布上的方法，以及疑难杂症</a>（我一开始解决重影问题也是看得这篇文章，后面发现下面正文的参考文章中有更详细的理解，就是比较长）</p>
<p>除此之外还有很多神秘问题，比如转换后最后一帧和第一帧之间有停顿，闪屏，花屏等，某些问题可以看压缩 gif 一文中的参考文章 3 gif modification。</p>
<hr>
<h3 id="转换为-tgs-后可能会出现的问题"><a href="#转换为-tgs-后可能会出现的问题" class="headerlink" title="转换为 tgs 后可能会出现的问题"></a>转换为 tgs 后可能会出现的问题</h3><p>回到正题。总结一下 tgs 转换到 gif 后，要让转换的 gif 达到能看的级别，需要解决：</p>
<ol>
<li>转换前动画速度过慢</li>
<li>转换后的重影</li>
<li>转换后透明度丢失</li>
</ol>
<p>操作后建议用一些工具检测一下参数（比如 delay、张数等）</p>
<ol>
<li><p>ffprobe（ffmpeg 随附，可显示码率、tbr/duration、fps）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffprobe 0.gif</span><br></pre></td></tr></table></figure>
</li>
<li><p>imagemagick 中的 identify 工具（magick7 以后的版本都要以 magick 命令打头）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(magick) identify 0.gif</span><br></pre></td></tr></table></figure>

<p>identify 主要用来看延迟的，那么可以修改一下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">identify -verbose 0.gif  | grep Delay</span><br></pre></td></tr></table></figure>

<p>或者用 identify 自身的通配符（参考：<a href="https://imagemagick.org/script/escape.php">Percent Escape Handling</a> 和 <a href="https://m.656463.com/wenda/ImagemagickGraphicsMagicktxywzml_607">Imagemagick GraphicsMagick image mean command</a>）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">identify -format &quot;%m:%f %wx%h %T\n&quot; .\0.gif</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://legacy.imagemagick.org/Usage/scripts/gif_anim_montage">gif_anim_montage</a> 脚本。可将每帧的形状，处理方式和延迟以顺序的方式集合到一张图片中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;gif_anim_montage 0.gif 0.jpg</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看视频 / gif 总帧数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffprobe -v error -count_frames -select_streams v:0  -show_entries stream&#x3D;nb_read_frames -of default&#x3D;nokey&#x3D;1:noprint_wrappers&#x3D;1 0.gif </span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="转换为-tgs-后对于动画速度较慢的处理方法"><a href="#转换为-tgs-后对于动画速度较慢的处理方法" class="headerlink" title="转换为 tgs 后对于动画速度较慢的处理方法"></a>转换为 tgs 后对于动画速度较慢的处理方法</h3><h4 id="ps-转换加速法"><a href="#ps-转换加速法" class="headerlink" title="ps 转换加速法"></a>ps 转换加速法</h4><p>就是我一开始说的方法，因为效果不错先放上来。</p>
<ol>
<li><p>安装相同年度版本的 ps 和 media encoder，可能要装 pr（因为经过试验 2019 ps cc 无法唤起 2020 ps pr）</p>
</li>
<li><p>在 ps 中打开 gif，点击窗口 -&gt; 时间轴</p>
</li>
<li><p>点击时间轴右下角的“转换为视频时间轴”按钮</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/FEsgkbz2OBZC9xd.jpg"></p>
</li>
<li><p>点击“渲染视频”（转换为视频时间轴成功后这个按钮就在附近），渲染为有 alpha 通道的 quicktime 视频（否则透明背景就会强制被白的背景填充）。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Y8mt1nDfcKizoZC.png"></p>
</li>
<li><p>打开导出的视频，点击时间轴上面的小箭头，调整至相应速度（比如加速两倍，调整为 200%）</p>
<p><img src="https://i.loli.net/2020/12/10/7PpRFV624QdyA8Z.jpg" alt="小箭头.jpg"></p>
</li>
<li><p>文件-&gt;导出-&gt;存储为 web 可用格式，按自己的习惯调整参数即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/BxqDHbuKkhpwVnM.gif" alt="0.gif"></p>
<p>用命令 4 解析出来显示 23 张，和原视频相比没少？但用命令 3 解开就会发现实际上是实施了优化。虽然张数增多了，但实际大小应该是降低的。</p>
</li>
</ol>
<h4 id="ps-直接加速法"><a href="#ps-直接加速法" class="headerlink" title="ps 直接加速法"></a>ps 直接加速法</h4><ol>
<li>在 ps 中打开 gif，点击窗口 -&gt; 时间轴</li>
<li>点击时间轴右下角的“转换为视频时间轴”按钮</li>
<li>点击时间轴窗口右上角，选择设置时间轴帧速率功能</li>
<li>降低帧率。然后修改延迟</li>
<li>导出即可</li>
</ol>
<p>帧数减少的同时 delay 参数也会增加。另外这个方法其实没法准确控制最后获得的张数，要慢慢调，好处就是不用导出到视频。</p>
<h4 id="webp-转换法"><a href="#webp-转换法" class="headerlink" title="webp 转换法"></a>webp 转换法</h4><p>需要 imagemagick 7+</p>
<p><code>-coalesce</code>：把 gif 每帧拆分出来</p>
<p><code>-set dispose background</code>：让下一帧显示时先清空上一帧显示的所有内容（把上一帧被描绘的像素统统删成透明） 。不使用这个参数就会造成重影。也可以把这个参数写在输入文件的前面，并改成 <code>-dispose background</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">magick  &quot;(&quot; 0.webp -coalesce &quot;)&quot;  -set dispose background -loop 0 .&#x2F;0.gif</span><br></pre></td></tr></table></figure>

<p>但在 windows 下最新版本好像可以直接转了。。。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">magick 0.webp 0.gif</span><br></pre></td></tr></table></figure>

<p>最后成品帧数只有 13。</p>
<h4 id="借助-ffmpeg-转换加速"><a href="#借助-ffmpeg-转换加速" class="headerlink" title="借助 ffmpeg 转换加速"></a>借助 ffmpeg 转换加速</h4><p><code>setpts=0.5*PTS</code>：加速两倍</p>
<p><code>-vcodec qtrle</code>：一个支持 argb（带透明通道）的编码。也可以换为 <code>-vcodec png</code>（rgba 编码，没有本质上区别）和 <code>-vcodec rawvideo</code>（体积很大，可能还要配合 <code>-pix_fmt rgba</code>）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -i 0.gif -movflags faststart -vcodec qtrle -vf &quot;scale&#x3D;trunc(iw&#x2F;2)*2:trunc(ih&#x2F;2)*2&quot; -filter:v &quot;setpts&#x3D;0.5*PTS&quot; 0.mov</span><br></pre></td></tr></table></figure>

<p>然后使用 magick，<code>-delay</code> 需要用 ffprobe 查一下原 gif 的还原进去。不过光是 qq 用不管也可以。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">convert -dispose background -quiet -delay 3 0.mov 0_change.gif</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/tiRkpv5cmNV2Cq4.gif" alt="01.gif"></p>
<p>如果遭遇最后一帧和第一帧直接有卡顿，需要加上 <code>-deconstruct</code> 参数。要注意使用此参数后动画速度可能进一步提高（原因不明），需要把 <code>-delay</code> 值拉大。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">convert -dispose background -deconstruct -quiet -delay 5 0.mov 0_change.gif</span><br></pre></td></tr></table></figure>

<p>此时输出的 gif 已经足够小，没有必要再使用优化参数进行优化（另一个原因是我使用 <code>-layers optimize</code> 参数后部分文件大小反而增加了）。</p>
]]></content>
      <categories>
        <category>影音</category>
      </categories>
      <tags>
        <tag>imagemagick</tag>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>路由器跑分 &amp;&amp; 刷机</title>
    <url>/lu-you-qi-pao-fen-shua-ji/</url>
    <content><![CDATA[<p>本来是为了对比一下旧路由（小新 new wifi mini，padavan）和极路由 2 （官方系统）和华硕 ac86u （官方系统）的性能。顺便物尽其用，给 newifi mini 刷个 openwrt。</p>
<h2 id="跑分工具"><a href="#跑分工具" class="headerlink" title="跑分工具"></a>跑分工具</h2><h3 id="linux-内置浮点分数显示"><a href="#linux-内置浮点分数显示" class="headerlink" title="linux 内置浮点分数显示"></a>linux 内置浮点分数显示</h3><p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;proc&#x2F;cpuinfo</span><br></pre></td></tr></table></figure>

<p>其中的 bogomips 大概就是核心的浮点分数。</p>
<p><img src="https://i.imgur.com/oicnOOy.png"></p>
<p>极路由得分：385.84</p>
<p>ac86u 得分：100 （这个显然不正常）</p>
<p>由于不是实时跑分，所以准确性也最差。</p>
<h3 id="coremark"><a href="#coremark" class="headerlink" title="coremark"></a>coremark</h3><p>来自：<a href="https://github.com/eembc">eembc</a>/<strong><a href="https://github.com/eembc/coremark">coremark</a></strong></p>
<p>不过遗憾的是，我只成功在 ubuntu 下编译了 linux 版，在 windows 下使用 cygwin 和 在 linux 下尝试交叉编译 windows 版本均未成功。</p>
<p>不过 padavan 和许多 openwrt 固件下附带有本测试工具，也不用我编译了。</p>
<h3 id="dhrystone"><a href="#dhrystone" class="headerlink" title="dhrystone"></a>dhrystone</h3><p>来自：<a href="https://www.openwrtdl.com/wordpress/%E6%9D%A5%E6%B5%8B%E6%B5%8B%E8%B7%AF%E7%94%B1%E5%99%A8cpu%E6%80%A7%E8%83%BD%E8%B7%91%E5%88%86">[源码]来测测路由器cpu性能跑分</a></p>
<p>另一个二进制跑分工具。其中的二进制文件 <code>gcc_dry2-mt7621</code> 在 mt7620A 路由极路由 2 原版系统下可以直接运行。但在 newifi mini padavan 下运行结果报 0。而另一个含有 mt7620 的二进制文件 <code>dhrystone_2.1-1_ramips_1004kc_mt7621.ipk</code> 在两个设备上运行都报错（毕竟原本就应该是在 openwrt 下安装运行的） 。另外 x86 二进制在 linux 下不能运行，另外也没有 ac86u 用的版本（bcm4903）。但不知道其他固件是否附带有相应版本。</p>
<h2 id="刷机（mt7620-gt-openwrt）"><a href="#刷机（mt7620-gt-openwrt）" class="headerlink" title="刷机（mt7620-&gt;openwrt）"></a>刷机（mt7620-&gt;openwrt）</h2><p>直接编译上面那几个工具不管用。</p>
<p>看来只能刷点大众版本然后从库里面找看看。先刷 newifi mini / 极路由 2。这两款路由同样是 mt7620A 方案，128m ram，8m flash。区别只有 newifi mini 的无线方案是 <a href="https://www.mediatek.cn/products/broadbandWifi/mt7612e">MediaTek | MT7612E</a>（参数来源：<a href="https://www.igao7.com/news/201501/2krIHZXzLCFRAVLO.html">迷你也满血，联想新路由newifi mini评测 | 爱搞机</a>），极路由的无线方案是 <a href="https://www.mediatek.com/products/broadbandWifi/mt7610e">MediaTek | MT7610E</a>（参数来源：<a href="https://www.zhihu.com/question/21971379/answer/19977583">如何评价极路由公司 2013 年 11 月发布的「极贰」路由器？ - 张导的回答 - 知乎</a>)。前者是 2x2，后者弱一些 1x1（但 5g wifi 速度同样是 433mhz）。还有！极路由 2 刷机前请用 breed 事先备份好 key，就在固件备份里面有一个单独的选项（我直接掉坑里爬不出来了，但到后面人家直接把这条路都铲了。。。详情可以看月底的后日谈）。</p>
<p>注意：刷 breed 和 breed 怎么操作这个东西，本文不涉及，百度吧。</p>
<p>在 breed 下，这两台机子显示的参数都一模一样：</p>
<p>newifi mini：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/chrome_sdRzlaQ63w.png"></p>
<p>极路由 2:</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/chrome_Wek4pLE69b.png"></p>
<p>openwrt 的话，选择大佬的 <a href="https://github.com/coolsnowwolf/lede">coolsnowwolf/lede: Lean’s OpenWrt source</a>。我们面前有两条路线：</p>
<ol>
<li><p>直接上 linux 编译</p>
<p>参考文章：</p>
<ul>
<li><a href="https://sspai.com/post/61463">看完这篇，自定义 OpenWrt/LEDE 路由固件不求人 - 少数派</a></li>
<li><a href="https://p3terx.com/archives/openwrt-compilation-steps-and-commands.html">OpenWrt 编译步骤与命令详解 - P3TERX ZONE</a></li>
<li><a href="https://davidli.fun/useful_note/2485/">编译 Lean 的 Openwrt 固件全攻略 - 😊Welcome</a></li>
</ul>
</li>
<li><p>借助 github action。参考文章：<a href="https://p3terx.com/archives/build-openwrt-with-github-actions.html/comment-page-1">使用 GitHub Actions 云编译 OpenWrt - P3TERX ZONE</a></p>
</li>
</ol>
<p>前者步骤繁琐倒是其次，最大的障碍是网络和空间。必须要有可靠的科学工具，以及 10 多 G 的空余空间（最后我的项目文件夹大概有 12g，也就是最少需要 13g 才能编译成功，剩余空间少于 1g 就会强行停止编译）。后者只需要大概 1g 不到的空间，完成 menuconfig 文件的生成即可（不过还是会用到 linux），但，前者一旦编译成功，后续修改 menuconfig 内容再次编译耗费的时间就会大幅缩短（视修改内容的多少，一般 5-10 分钟即可），而后者每次都需要等待 1 个半小时左右的时间。因为后者步骤中的一部分包括在前者中，所以我两个都谈一下。</p>
<h3 id="Linux-编译"><a href="#Linux-编译" class="headerlink" title="Linux 编译"></a>Linux 编译</h3><p>Linux 编译需要较多空间，我本地的虚拟机 ubuntu 只分了 30g 根本不够我又不想扩容（因为扩容要删快照，扩容后想还原还挺麻烦）。所以我索性在 tx 的轻量云上操作了。不过按我的习惯（不知道是不是大家也有这样的习惯）远程的 vps 默认情况下都是以 root 用户登录，而不是像桌面端一样用非 root 用户（毕竟 ubuntu 桌面端默认不创建 root 用户）。所以我还得新建一个非 root 用户，添加 sudo 授权，<a href="https://zbttl.github.io/2020/2%E6%9C%8824%E6%97%A5%EF%BC%88%E5%AF%92%E5%81%87%E7%AC%AC%E5%9B%9B%E5%8D%81%E4%B8%89%E5%A4%A9%EF%BC%89/#zsh">换用 zsh</a>，加虚拟内存（尽管轻量云内存已达 2g 但编译过程中还是报内存不够，我又加了 2g 虚拟内存才行），这些我就不详细谈了。</p>
<ol>
<li><p>安装相关依赖（许多教程里面没有 rsync，但我这边编译的时候报错就因为没装这个东西所以我加上了）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3.5 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget swig rsync</span><br></pre></td></tr></table></figure>
</li>
<li><p>克隆项目，下源码和软件包（这一步需要科学工具）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;coolsnowwolf&#x2F;lede</span><br><span class="line">cd lede</span><br><span class="line">.&#x2F;scripts&#x2F;feeds update -a</span><br><span class="line">.&#x2F;scripts&#x2F;feeds install -a</span><br></pre></td></tr></table></figure>
</li>
<li><p>重点，调整 Open­Wrt 系统组件。毕竟自己编译就是为了只添加自己想要的功能。第一次编译建议只选择相应框架，因为第一次编译成功后后续增添删除组件再次编译所需时间会大幅缩短。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></table></figure>

<p>后续怎么调整组件？可以参考下面这两篇文章：</p>
<ul>
<li><a href="https://www.right.com.cn/forum/thread-1237348-1-1.html">【2020-01-14 更新】OpenWrt入门编译 make menuconfig配置参考说明与自动生成脚本 - OPENWRT专版 - 恩山无线论坛 - Powered by Discuz!</a></li>
<li><a href="https://www.right.com.cn/forum/thread-344825-1-1.html">OpenWrt 编译 LuCI-&gt; Applications 添加插件应用说明 - L 大【2020.11.1】 - OPENWRT 专版 - 恩山无线论坛 - Powered by Discuz!</a></li>
</ul>
<p>我这里也给一张表格，大致说明一下我在默认配置的基础上改了哪里。我认为是接近最简的配置。</p>
<p>注意，许多功能可以不直接集成到固件中而是单单编译为模块。因为使用主流的 <code>squashfs</code> 固件格式的话，集成到固件的功能是删不掉的，而模块（ipx）可以通过 opkg 随意安装和卸载（就是可能遇到依赖问题，装一个功能可能得同时装几个模块）。能这么做的功能，按空格第一次显示为 M，是编译为模块；再按一次显示为 * 则为集成到固件中。至于该选那个大家自己抉择。</p>
<p>下面表格参数尾部有 - 号标记代表我并未做改动但有些东西需要提醒；编译 x 说明这是原来开着我关掉的内容。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210102073119.png"></p>
<p>自定义的时候注意，除了 luci 以外的东西都是在 web gui 外生效的。啥意思？你精简了一个 luci 以外的功能，打开路由器 web 管理界面是看不到什么区别的；反之，你想在 luci 添加什么功能也不用考虑该功能是不是在其他地方有依赖。</p>
<p>编辑完后用下面的 save 保存为 <code>.config</code>，待会编译的时候就会读取这个文件的配置。</p>
</li>
<li><p>开始编译（如果上面这步添加了许多功能，则需要开科学工具）。轻量服务器只有一个核心，所以 <code>-j1</code>，如果用物理机则看自己的配置改了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make -j1 V&#x3D;s</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译成功的固件和模块，在 <code>lede/bin/targets/ramips/mt7620</code> 里面，注意，如果按默认配置编译了 squashfs 版本的话，里面的 bin 应该有两个版本，一个叫 <code>xxxx.initramfs-kernel</code>，一个叫 <code>xxxxx.squashfs-sysupgrade</code>，记得刷后者！前者是只读的，我看后者有个 upgrade 还以为是更新专用第一次应该刷前一个，刷完以后我还纳闷软件包怎么可用空间为 0 重启后配置重置了，折腾了两天居然是这里出了问题-_-</p>
</li>
<li><p>刷完以后看看剩余空间，5g wifi，usb 驱动有没有问题（这几个地方容易出问题）。</p>
</li>
</ol>
<h3 id="github-action"><a href="#github-action" class="headerlink" title="github action"></a>github action</h3><p>参考文章：<a href="https://p3terx.com/archives/build-openwrt-with-github-actions.html/comment-page-2#comments">使用 GitHub Actions 云编译 OpenWrt - P3TERX ZONE</a></p>
<p>作者说的很清楚了。先做 linux 编译的前三步，获得 <code>.config</code> 文件。</p>
<p>然后照抄作者的步骤：</p>
<blockquote>
<ul>
<li>进入 <a href="https://p3terx.com/go/aHR0cHM6Ly9naXRodWIuY29tL1AzVEVSWC9BY3Rpb25zLU9wZW5XcnQ=">P3TERX/Actions-OpenWrt</a> 项目页面，点击页面中的 Use this template（使用这个模版）按钮。</li>
<li>填写仓库名称，然后点击 <code>Create repository from template</code>（从模版创建储存库）按钮。</li>
<li>经过几秒钟的等待，页面会跳转到新建的仓库，内容和我的项目是相同的。然后点击<code>Create new file</code>（创建新文件）按钮。</li>
<li>文件名填写为 <code>.config</code>，把生成的 <code>.config </code></li>
<li>文件的内容复制粘贴到下面的文本框中。</li>
<li>翻到页面最下方，点击 <code>Commit new file</code>（提交新文件）按钮。</li>
<li>在 Actions 页面选择<code>Build OpenWrt</code>，然后点击<code>Run Workflow</code>按钮，即可开始编译。</li>
</ul>
</blockquote>
<p>嗯。。。增加几个注意小事项（当然作者的文章里也提到过了，方便我自己查阅而已）：</p>
<ol>
<li><p>点 <code>Build OpenWrt</code> 弹出的框框里，<code>SSH connection to Actions</code> 如果你没有 ssh 连接需求的话不要开启，会编译失败。</p>
</li>
<li><p>默认只会生成 rom 压缩文件。如果你之前有功能做成了模组，那你还得修改项目的 <code>.github/workflows/build-openwrt.yml</code> 文件，把 <code>UPLOAD_BIN_DIR</code> 值改为 <code>true</code>。</p>
</li>
<li><p>可以修改默认网关地址。在 <code>diy-part1.sh</code> 中把</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Modify default IP</span><br><span class="line">#sed -i &#39;s&#x2F;192.168.1.1&#x2F;192.168.2.1&#x2F;g&#39; package&#x2F;base-files&#x2F;files&#x2F;bin&#x2F;config_generate</span><br></pre></td></tr></table></figure>

<p>第二句前面的注释符号取消，<code>192.168.2.1</code> 改为其他网关即可。我一开始是改的，因为我家的拓扑结构是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">光猫（192.168.1.1）-&gt;ac86u（192.168.x.1）-（无线）-&gt;笔记本</span><br></pre></td></tr></table></figure>

<p>刷路由时，路由跟笔记本用有线的方式连接，显然路由默认地址  <code>192.168.1.1</code> 和光猫网关地址冲突。不过，后面我发现路由的默认网关地址能稳定覆盖住光猫的网关地址，也就是说我不用断开无线就可以直接进要刷的路由的 breed，以及刷完后路由的配置界面；反而是如果我改了网关的话，就得断掉无线或者连上路由的无线才能配置了。可能是 dhcp 的锅？</p>
</li>
</ol>
<h2 id="刷机（asus-官方-gt-asus-梅林）"><a href="#刷机（asus-官方-gt-asus-梅林）" class="headerlink" title="刷机（asus 官方-&gt;asus 梅林）"></a>刷机（asus 官方-&gt;asus 梅林）</h2><p>ac86u 刷机就简单了，也不用刷什么 breed，起码对于我现在官方-&gt;梅林arm384 来说直接在固件升级里面把新版固件怼上去就行，最多最多刷前重置一下。</p>
<p>ac86u 目前有三个品种的第三方固件，分别是官改，arm380，arm384。我在官方下载站还看到有 arm386，但文件夹是空的。</p>
<p>官改可以理解为官方版 + 软件中心。而 arm380 和 arm384，官方是这么说的：</p>
<blockquote>
<h5 id="1-从-arm380-升级到-arm384-固件会失去什么"><a href="#1-从-arm380-升级到-arm384-固件会失去什么" class="headerlink" title="1. 从 arm380 升级到 arm384 固件会失去什么"></a>1. 从 arm380 升级到 arm384 固件会失去什么</h5><ol>
<li>网件、linksys、华为这些机型，非常大概率不会有 arm384 固件，目前 arm384 仅有华硕机型；</li>
<li>arm384 固件没有 arm380 固件的 wifi 全信道 + 高功率了，以后要高功率就老实澳大利亚 + 固定信道吧；</li>
<li>arm384 固件没有 multiPPP support（单线多拨）功能；</li>
<li>arm384 固件的首页没有温度、网速等信息的状态显示；</li>
<li>arm384 固件的内存占用率将会比 arm380 系列高得多；</li>
</ol>
<h5 id="2-从-arm380-升级到-arm384-固件能得到什么"><a href="#2-从-arm380-升级到-arm384-固件能得到什么" class="headerlink" title="2. 从 arm380 升级到 arm384 固件能得到什么"></a>2. 从 arm380 升级到 arm384 固件能得到什么</h5><ol>
<li>AiMesh ；</li>
<li>1.5 代的软件中心；</li>
<li>更多的安全更新和功能更新；</li>
</ol>
</blockquote>
<p>具体的固件下载，注意事项，刷机流程可以参考：</p>
<ul>
<li><a href="https://koolshare.cn/thread-164857-1-1.html#f-arm384ml%E6%94%B9%E7%89%88-%E5%88%B7-%E5%8E%9F%E5%8E%82%E5%9B%BA%E4%BB%B6">【新提醒】【20200703】华硕ARMv7系列 384.18_0 改版固件 - 华硕固件 - KoolShare - 源于玩家 服务玩家</a></li>
<li><a href="https://koolshare.cn/forum.php?mod=viewthread&tid=127878">【新提醒】【20200821】RT-AC86U_384.19_0 改版固件 - 华硕固件 - KoolShare - 源于玩家 服务玩家</a></li>
</ul>
<p>刷完以后进系统管理，开启 <code>Format JFFS partition at next boot</code> 和 <code>Enable JFFS custom scripts and configs</code> 再重启一遍。</p>
<p>重启后软件中心上线，就能安装华硕这边的 dhrystone 了！</p>
<p>参考：<a href="http://firmware.koolshare.cn/binary/dhrystone/">Index of /binary/dhrystone/ - KoolShare 固件下载服务器</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;koolshare&#x2F;bin</span><br><span class="line">wget http:&#x2F;&#x2F;firmware.koolshare.cn&#x2F;binary&#x2F;dhrystone&#x2F;dhrystone_hnd </span><br><span class="line">chmod +x dhrystone_hnd</span><br><span class="line">dhrystone_hnd</span><br></pre></td></tr></table></figure>

<h2 id="跑分结果"><a href="#跑分结果" class="headerlink" title="跑分结果"></a>跑分结果</h2><h3 id="coremark-1"><a href="#coremark-1" class="headerlink" title="coremark"></a>coremark</h3><p>newifi padavan：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/newifi%20padavancoremark.png"></p>
<p>newifi openwrt：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/newifi%20openwrt%202020.png"></p>
<p>极路由 2 openwrt：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/hc5761%20coremark%20openwrt.png"></p>
<p>极路由 2 和 newifi 相同的配置，newifi 性能略占优势。但不同的系统差距有点大喔。</p>
<p>华硕的梅林既没有预装也没有软件包，没法测。</p>
<h3 id="dhrystone-1"><a href="#dhrystone-1" class="headerlink" title="dhrystone"></a>dhrystone</h3><p>极路由原厂系统：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E6%9E%81%E8%B7%AF%E7%94%B1.png"></p>
<p>newifi openwrt pandora：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/newifi%20pandorabox.png"></p>
<p>newifi openwrt 2016（这张图截歪了，但数字能看个大概）：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/newifi%20openwrt%202016.png"></p>
<p>有请终极 boss ac86u：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/bcm4906.png"></p>
<p>7620A 那几个菜鸡互啄，感觉不同系统差距不大？nono，其实我还测出过 280 多分忘记截图了，不记得是哪个拉跨系统了。。。但这几个比较正一点的系统看起来速度都还差不多。但到 ac86u 这里画风突变，10 倍杀。。。</p>
<h2 id="其他参考文章和小发现"><a href="#其他参考文章和小发现" class="headerlink" title="其他参考文章和小发现"></a>其他参考文章和小发现</h2><ol>
<li><p>openwrt 目前还有几个小问题处理不掉，比如 ssh 中会突然出现乱码，特别是想按 tab 自动不全的时候，前面的命令可能就会突然冒出几个符号导致最后整条命令都错了。极路由 2 装上 openwrt 已联网提示灯亮不起来了。</p>
</li>
<li><p>有没有发现 dhrystone 7620a 测试的系统画风有点不太对？因为我都用的留着的 16 年左右的旧系统测试的，极路由在 18 年也停更了，所以能跑的出分数。最新编译的 openwrt 已经无法运行当年编译好的 dhrystone 了，可能是库问题，运行二进制告诉我 no found；ipk 文件发现本身的框架是 <code>ramips_24kec</code>，而 opkg.conf 里面没有这个框架，按照<a href="https://github.com/dafeiyoung/sguclient/wiki/%E4%BF%AE%E6%94%B9opkg.conf%E8%A7%A3%E5%86%B3incompatible-with-the-architectures-configured%E9%97%AE%E9%A2%98">修改 opkg.conf 解决 incompatible with the architectures configured 问题・dafeiyoung/sguclient Wiki</a>记载的方法强行安装，仍然提示 no found；直接通过 ash（没错，openwrt 默认不带 bash，只有 ash）运行，则报那个非常常见的哪行哪行 <code>（</code> expected 的 error。我还想过编译（作者在 github 页面<a href="https://github.com/siasjack/dhrystone4OP">siasjack/dhrystone4OP: dhrystone for openwrt package</a>记载了编译方法），结果带上 sdk 编译出来的固件就 30m 了，路由器根本装不了（16m rom），更别谈装上后再编译了。</p>
</li>
<li><p>除了 lede 版本的 openwrt，还有一个 lieno 版本的 <a href="https://github.com/Lienol/openwrt">Lienol/openwrt: Lienol’s Modified OpenWrt source</a>，暂时没研究。</p>
<p>其他关于 openwrt 的参考文章：</p>
</li>
</ol>
<ul>
<li><p>官方文档：<a href="https://openwrt.org/zh-cn/doc/howto/build">[OpenWrt Wiki] OpenWrt编译 – 说明</a></p>
</li>
<li><p>常用配置路径<a href="https://www.529i.com/archives/344.html">LEDE编译教程 - 憶の年</a></p>
</li>
<li><p><a href="https://www.jinbo123.com/7672.html">编译 Lean 大神的 OpenWrt (x86_x64) 固件教程汇总 | 佐仔志添加Passwall插件|</a></p>
</li>
<li><p><a href="https://www.bilibili.com/read/cv1820955/">7620 k2 openwrt固件的编译(WSL,Ubuntu18.04) - 哔哩哔哩</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>路由器</category>
      </categories>
      <tags>
        <tag>padavan</tag>
        <tag>openwrt</tag>
        <tag>merlin</tag>
      </tags>
  </entry>
  <entry>
    <title>玩一下 FFmpeg</title>
    <url>/wan-yi-xia-ffmpeg/</url>
    <content><![CDATA[<p>因为最近有两件事情，所以要研究一下这玩意：把 capoo 那个动画分割成动图，还有就是 vps 上下的动画，直接用 filebroswer 播不了，需要稍微转一下码才行。</p>
<p>总参数参考：<a href="https://ffmpeg.org/ffmpeg.html">ffmpeg Documentation</a></p>
<h2 id="capoo-分割"><a href="#capoo-分割" class="headerlink" title="capoo 分割"></a>capoo 分割</h2><p>关键词：帧内编码（intra）</p>
<p>参考文章：<a href="https://www.jianshu.com/p/cf1e61eb6fc8">FFMPEG 视频分割和合并</a></p>
<p>不过这篇文章没有将一个参数，to，to 是裁剪到时间节点而 t 是裁剪自开始以来的一段时间长度，这里为了方便我很明显是要用 to 的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -ss 00:00.00 -to 00:00.01 -i capoo.mp4 -vcodec copy -acodec copy &quot;C:\Users\zbttl\OneDrive - go.Stockton.edu\Desktop\capoo\ capoo1.mp4&quot;</span><br></pre></td></tr></table></figure>

<p>不过发到 telegram 上当 gif 的 mp4 不能带音频，所以索性再改一下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -ss 00:00.00 -to 00:00.01 -i capoo.mp4 -vcodec copy -an &quot;C:\Users\zbttl\OneDrive - go.Stockton.edu\Desktop\capoo\ capoo1.mp4&quot;</span><br></pre></td></tr></table></figure>

<p>顺便附带一个文件夹内批量转换为无声 mp4 的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for i in *.mp4; do ffmpeg -i $i -vcodec copy -an &quot;&#x2F;home&#x2F;zbttl&#x2F;capoo&#x2F;$&#123;i%%.*&#125;.mp4&quot;;done</span><br></pre></td></tr></table></figure>

<p>参数里可以加上 <code>-avoid_negative_ts</code> 移动关键帧使其与要剪辑的位置相符。</p>
<h3 id="使用-gui（不成熟）"><a href="#使用-gui（不成熟）" class="headerlink" title="使用 gui（不成熟）"></a>使用 gui（不成熟）</h3><p>也可以使用 gui 工具 <a href="https://github.com/mifi/lossless-cut">LosslessCut</a>。gui 可以通过视频中的 Intra（I 帧，关键帧）识别转场，操作上便捷许多。不过很多视频由于参数原因（I 帧过多会增大视频体积），所以 I 帧和真正的转场不一定完全符合，可能还要通过 ffmpeg 转一下码。</p>
<p>参考：</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/28008666">FFmpeg精准时间切割视频文件</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/85895180">FFmpeg视频抽帧那些事</a></li>
<li><a href="%5Bhttps://weichao.io/2018/05/27/FFmpeg-%E8%BD%AF%E7%BC%96%E7%A0%81-H264%E3%80%81H265/%5D(https://weichao.io/2018/05/27/FFmpeg-%E8%BD%AF%E7%BC%96%E7%A0%81-H264%E3%80%81H265/)">FFmpeg 软编码 H264、H265</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/36109778">ffmpeg和H264视频的编解码</a></li>
</ul>
<p>加入以下参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-keyint_min #Intra最小间隔时间，可设置为 0。</span><br><span class="line">-g #group of picture，Intra最大间隔时间。设置为 1 就全部都是关键帧。全部设置为关键帧有助于手动切割。</span><br><span class="line">-sc_threshold #(scenecut)设置场景更改检测的阈值。可设置为 0-无限。</span><br></pre></td></tr></table></figure>

<p>比较有用的就是这三个参数。我还实验了 <code>-profile</code>、<code>-preset</code> 两个参数。<code>profile</code> 在文档中有 <code>extended</code> 这个选项可能对关键帧切换有帮助，但实际使用起来选项无法使用；<code>preset</code> 只要不设置成比较快的那些选项，使用 <code>slow</code> 和什么都不用出来的 I 帧数量和分布没有区别。</p>
<p>ffmpeg 使用非 copy 模式转码会显示 I/P/B 帧的数量和占比。也可以使用 <code>elecard streameye tools</code> 查看 I/P/B 的数量和分布（但要花钱，破解找不到，要不就只能试用）。</p>
<p>转码的时候也不要加入 <code>-c:a copy</code> 参数，可能导致时间轴误差。</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -y -i &#39;.\capoo.mp4&#39;  -preset slow -keyint_min 1 -sc_threshold 60 &#39;.&#x2F;capoo_1.mp4&#39;</span><br></pre></td></tr></table></figure>

<p>再用得到的新视频文件在 gui 内裁剪。</p>
<p>然而实际使用时发现在每个关键帧处还要往上倒三帧否则就会包含下个场景的画面。原因是这个 gui 命令里面用了 <code>-c copy</code> 参数。。。目前还无解。而且除了这个，有时候导出的某些视频还会出现只剪了后面没剪前面的情况，貌似是因为放在桌面，桌面的路径里面有中文（onedrive 的锅）。。。。</p>
<p>还有其他的 gui 工具，比如 <a href="https://sourceforge.net/projects/ffmpegyag/">ffmpegyag</a>。但这就没有根据 Intra 帧在时间轴上快捷指向的功能了（虽然还是能识别处 I/P/B 帧）。而且不能直接使用（点 OK 就卡住），生成脚本后运行倒是没问题。</p>
<h3 id="配合-opencv"><a href="#配合-opencv" class="headerlink" title="配合 opencv"></a>配合 opencv</h3><p>门槛有点高。给两篇参考文章，先挖个坑。</p>
<ul>
<li><a href="https://www.cnblogs.com/dskit/p/10003722.html">基于opencv+ffmpeg的镜头分割</a></li>
<li><a href="https://yuyujunjun.github.io/segmentation-keyframe-extraction">视频镜头分割和关键帧提取</a></li>
</ul>
<h2 id="vps-动画转码"><a href="#vps-动画转码" class="headerlink" title="vps 动画转码"></a>vps 动画转码</h2><p>为什么播不了？我想估计是位深太大了，使用 ffmpeg x264 默认参数转一下就好了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg  -i &quot;[Sakurato.sub][Nande Koko ni Sensei ga!][01][GB][1080P].mp4&quot; -vcodec libx264 -acodec copy  test.mp4</span><br></pre></td></tr></table></figure>

<p>不过转出来感觉略微有点不太对，windows potplayer 缩略图显示不出东西来。。。原因不明，排除了 10bit 不兼容原因（原案是 10bit，可显示）和 hevc（h265）与 avc（h264）原因（用哪个编码器都转不出来）。</p>
<p>另外，x264 编译器还有很多奇奇怪怪的参数，参考这里：<a href="https://trac.ffmpeg.org/wiki/Encode/H.264">H.264 Video Encoding Guide</a></p>
<h3 id="显卡加速"><a href="#显卡加速" class="headerlink" title="显卡加速"></a>显卡加速</h3><p>参考文章：<a href="https://www.jianshu.com/p/59da3d350488">使用GPU硬件加速FFmpeg视频转码</a></p>
<p>ffmpeg 还支持显卡加速<del>，不过嘛。。。参数很麻烦，没什么可靠的参考（因为 ffmpeg 的参数经常有顺序限制的，上面那篇文章的参考我试了一下，失败），下面这个，我转起来速度比较快（不过也有是用 8bit 的原因），而且 potplayer 识别了缩略图，另外显卡也工作了（不过占用只有百分之8。。。。）</del>（未加 <code>-hwaccel cuda</code>，虽然是硬解但仍然经过内存。但下面的命令仅硬解码，且仅 h265）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg  -hwaccel cuda  -c:v h265_cuvid -i &quot;[Sakurato.sub][Nande Koko ni Sensei ga!][01][GB][1080P].mp4&quot; -pix_fmt yuv420p test.mp4</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://developer.nvidia.com/zh-cn/blog/nvidia-ffmpeg-transcoding-guide/">NVIDIA FFmpeg 转码指南</a></p>
<p>拿来转部落战视频用的，因为 ipad 录的视频码率高，而且带了旋转属性（很诡异，是写在 ffmpeg 参数里面的，也就是说对于支持的播放器打开后会自动转正变成横屏，但其实视频硬属性是竖着的），因为有这个自动旋转所以网上写的大部分硬件转码无法使用（不支持关掉自动旋转并摆正视频），但是我试了一个新的，还凑合，而且 gpu 打满。原理是硬解硬编码，下面的方框部分是指定使用最广泛的 h264 硬解，记得如果原来就是 h265 视频需要把这个参数换掉（<code>hevc_cuvid</code>）或关掉。硬编码的部分也可以换成 <code>h264_nvenc</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -y -vsync 0 -hwaccel cuda [-c:v h264_cuvid]  -i xxx.MP4 -vcodec hevc_nvenc -b:v 3000k xxx.mp4</span><br></pre></td></tr></table></figure>

<p>hwaccel 也有被称为 cuvid 的参数。但我用 cuvid 代替 cuda 时会报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Pixel format &#39;yuvj420p&#39; is not supported</span><br></pre></td></tr></table></figure>

<p>原因未知。cuvid 和 cuda 的区别我也没发现有参考资料能解释。</p>
<p>对于其他硬解方式，可以参考这篇文章：<a href="https://www.bilibili.com/read/cv4579978/">（三+1）用显卡加速视频转码压制之ffmpeg、media coder、shana encoder</a></p>
<p>查看解码方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -decoders</span><br></pre></td></tr></table></figure>

<p>查看编码方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -encoders</span><br></pre></td></tr></table></figure>

<p>上面提到的 <code>cuda</code> 和 <code>h264_cuvid</code> 就在解码方法里面，而 <code>hevc_nvenc</code> 就在编码方法里面。对于 intel 系来说，硬解应该是 <code>qsv</code> 后缀一类的方法；而 amd 是 <code>amf</code> 后缀一类的方法。我仔细看了看最新版 ffmpeg，发现起码对于 amd，只找到了编码方法（比如 <code>h264_amf</code>）而没有找到解码方法。。。好在我平常操作的视频都是解码不怎么费劲的视频，解码费劲的 4k 编码起来必然更慢，暂时不属于我手上硬件能触及的范围了。。。</p>
<p>另外，文章提到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -hwaccels</span><br></pre></td></tr></table></figure>

<p>能查看当前硬件和 ffmpeg 支持的硬解，但我看结果感觉扯淡。。。我用 amd 的机子能查出来 intel 和 cuda，却没有 amf，就 tm 离谱（当然文章里面也提到了这个方法不准就是了）。</p>
<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>参考文章：<a href="https://blog.csdn.net/educast/article/details/81866749">ffmpeg 多线程转码</a></p>
<p>通过写在 <code>-i</code> 参数前的 <code> -threads [线程数]</code> 可以指定 ffmpeg 使用的线程。不过经过测试比较新的 ffmpeg 都会用完 cpu 的所有线程，所以除非要限制 cpu 功率否则这个参数没必要动。</p>
<h2 id="mkv-内挂字幕嵌入-mp4"><a href="#mkv-内挂字幕嵌入-mp4" class="headerlink" title="mkv 内挂字幕嵌入 mp4"></a>mkv 内挂字幕嵌入 mp4</h2><p>参考文章：<a href="http://andrew-reynolds-bootcamp.com/questions/2027/ffmpeg-mkvdao-mp4zhuan-huan-shi-qu-liao-zi-mu">題 FFMPEG mkv到mp4轉換失去了字幕</a></p>
<p>内挂字幕的 mkv 在 filebroswer 里面看不到字幕啊。。。于是要想办法提取字幕出来，再把字幕直接内嵌进去。</p>
<p>有两种方法：</p>
<ol>
<li><p>不靠谱方法，很快，但是不一定能识别</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mkv -c copy -c:s mov_text output.mp4</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新编码的方法。一定能识别，但是慢过爹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mkv -vf subtitles&#x3D;input.mkv output.mp4</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h2 id="mp4-批量转换-gif"><a href="#mp4-批量转换-gif" class="headerlink" title="mp4 批量转换 gif"></a>mp4 批量转换 gif</h2><p>参考文章：<a href="http://blog.pkh.me/p/21-high-quality-gif-with-ffmpeg.html#content">High quality GIF with FFmpeg</a></p>
<p>以 centos 为例，先编辑个小脚本：</p>
<p>change.sh</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">palette&#x3D;&quot;.&#x2F;palette.png&quot;</span><br><span class="line"></span><br><span class="line">filters&#x3D;&quot;fps&#x3D;15,scale&#x3D;-1:-1:flags&#x3D;lanczos&quot;</span><br><span class="line"></span><br><span class="line">ffmpeg -v warning -i $1 -vf &quot;$filters,palettegen&quot; -y $palette</span><br><span class="line">ffmpeg -v warning -i $1 -i $palette -lavfi &quot;$filters [x]; [x][1:v] paletteuse&quot; -y $2                                                                                     </span><br></pre></td></tr></table></figure>

<p>然后把需要转换的 mp4 文件放到目录中，执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for i in *.mp4; do .&#x2F;change.sh $i &quot;$&#123;i%%.*&#125;.gif&quot;;done</span><br></pre></td></tr></table></figure>

<p>这条命令会把所有的 mp4 的后缀名去掉，换成 gif。</p>
<p>另外，windows 端也可以通过修改成两个 bat 文件做到类似的效果（不过第二部我不知道怎么把原 mp4 文件夹的所有后缀替换成 gif，只能直接加 gif），要批量转换的时候运行第二个 bat 就 ok 了</p>
<p>change.bat</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">cd &#x2F;d %~dp0 </span><br><span class="line">set palette&#x3D;&quot;palette.png&quot;</span><br><span class="line"></span><br><span class="line">set filters&#x3D;&quot;fps&#x3D;15,scale&#x3D;-1:-1:flags&#x3D;lanczos&quot;</span><br><span class="line"></span><br><span class="line">ffmpeg -v warning -i %1 -vf &quot;%filters%,palettegen&quot; -y %palette%</span><br><span class="line">ffmpeg -v warning -i %1 -i %palette% -lavfi &quot;%filters% [x]; [x][1:v] paletteuse&quot; -y %2       </span><br></pre></td></tr></table></figure>

<p>change2.bat</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">for %%i in (*.mp4) do change.bat &quot;%%i&quot; &quot;%%i.gif&quot;</span><br></pre></td></tr></table></figure>

<h2 id="合并音视频"><a href="#合并音视频" class="headerlink" title="合并音视频"></a>合并音视频</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -i xxx -i xxx -c:v copy -c:a copy output.mp4</span><br></pre></td></tr></table></figure>



<h2 id="mp4-转音频"><a href="#mp4-转音频" class="headerlink" title="mp4 转音频"></a>mp4 转音频</h2><p>对于大部分 mp4，可以直接提取其中的音频，速度很快：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -i .\test.mp4 -acodec copy -vn test.mp3</span><br></pre></td></tr></table></figure>

<p>不过，这条命令是直接把 mp4 封装中的音频部分提取出来，如果音频部分不是 mp3 格式就会出错：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/6zkXFjh.png"></p>
<p>从日志里面，我们可以观察到原来封装里面是什么格式的，比如这里就是 aac 的：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/mtmQeQT.png"></p>
<p>这时候就需要把命令中的格式从 mp3 改成 aac：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -i .\test.mp4 -acodec copy -vn test.aac</span><br></pre></td></tr></table></figure>

<p>如果需要转换其他格式，可以使用 <code>c:a</code> 参数替代 <code>acodec</code>，比如转换为当前较先进的 opus 格式（当然速度就慢多了）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -i .\test.mp4 -c:a libopus -vn test.opus</span><br></pre></td></tr></table></figure>

<h2 id="下载-m3u8"><a href="#下载-m3u8" class="headerlink" title="下载 m3u8"></a>下载 m3u8</h2><p>参考文章：<a href="https://stackoverflow.com/questions/50455695/why-does-ffmpeg-ignore-protocol-whitelist-flag-when-converting-https-m3u8-stream">Why does ffmpeg ignore protocol_whitelist flag when converting https m3u8 stream?</a></p>
<p>某些视频网站和 ios 软件用的视频地址抓出来是 m3u8 的。比如机核的视频。可以用 chrome 插件<a href="https://chrome.google.com/webstore/detail/%E7%8C%AB%E6%8A%93/jfedfbgedapdagkghmgibemcoggfppbb">猫抓</a>获取 m3u8 文件。然后，加入相关参数，注意需要紧跟在 ffmpeg 命令后面：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -protocol_whitelist file,http,https,tcp,tls,crypto -i xxxx.m3u8 xxxx.xxx</span><br></pre></td></tr></table></figure>

<p>xxxx.xxx 指的是你需要输出的视频名字和格式，因为 m3u8 流切下来一般是 h264 的，封装格式需要你自己来确定，ffmpeg 会帮你把所有切片合并。</p>
<h2 id="自动裁切黑边"><a href="#自动裁切黑边" class="headerlink" title="自动裁切黑边"></a>自动裁切黑边</h2><p>参考文章：<a href="https://www.bogotobogo.com/FFMpeg/ffmpeg_cropdetect_ffplay.php">CROPDETECT AND FFPLAY - 2020</a></p>
<p>先检测黑边：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -i .\test.mp4 -vcodec copy -acodec copy cropdetect&#x3D;24:16:0 test1.mp4</span><br></pre></td></tr></table></figure>

<p>24:16:0 是默认参数，一般如果要调也只调第一个参数（黑边阈值）。</p>
<p>输出的日志中会有类似于</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Parsed_cropdetect_0 @ 0x3704360] x1:0 x2:639 y1:43 y2:317 w:640 h:272 x:0 y:46 pts:181320 t:181.320000 crop&#x3D;640:272:0:46</span><br></pre></td></tr></table></figure>

<p>其中有用的就是 w、h、x、y 四个参数，分别放入新命令的相应位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -i .\test.mp4 -vcodec copy -acodec copy -vf crop&#x3D;640:272:0:46 test1.mp4</span><br></pre></td></tr></table></figure>

<p>即可。（虽然经过我测试默认参数检测还是有点偏差，但稍微手动调一下 w 和 h 的值效果就令人满意了）</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>参考文章：<a href="https://linux.cn/article-10932-1.html">给新手的 20 多个 FFmpeg 命令示例</a></p>
<p>比较有用的几个地方：</p>
<h3 id="转换格式时不压缩视频"><a href="#转换格式时不压缩视频" class="headerlink" title="转换格式时不压缩视频"></a>转换格式时不压缩视频</h3><p>使用<code>-qscale 0</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ffmpeg -i input.webm -qscale 0 output.mp4</span><br></pre></td></tr></table></figure>

<h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><p>ffmpeg windows 端出了新的编译版：<a href="https://github.com/BtbN/FFmpeg-Builds">BtbN/FFmpeg-Builds</a>。release 中有许多不同版本。lgbl 和 gbl 应该是许可证之间的不同，但大小也有区别，我个人认为是为了 lgbl 剔除了一些东西；shared 和不带 shared 的版本，区别是运行库合并进了 ffmpeg 中。最关键的是 vulkan 版本，带有 vulkan 版本需要比较新的独显和新的驱动才能使用，我的 965m 运行都会报错 <code>Lossless encoding not supported</code>。</p>
]]></content>
      <categories>
        <category>影音</category>
      </categories>
      <tags>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>桌面版 ubuntu &amp; debian 踩坑</title>
    <url>/zhuo-mian-ban-ubuntu-debian-cai-keng/</url>
    <content><![CDATA[<h2 id="debian-安装时"><a href="#debian-安装时" class="headerlink" title="debian 安装时"></a>debian 安装时</h2><p>是否使用网络安装一定要选是，然后选 163 源，否则后面安装虽然说默认从本地 iso 安装但 kde 之类的东西实际上还是远程安装，默认的国外源非常慢。</p>
<h2 id="debian-安装-vmware-tools"><a href="#debian-安装-vmware-tools" class="headerlink" title="debian 安装 vmware-tools"></a>debian 安装 vmware-tools</h2><ol>
<li><p>先到 <code>etc/apt/sources.list</code> 里面把光盘源删掉，并保证里面剩余的源来自 163。</p>
</li>
<li><p>安装编译其他依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install autoconf automake binutils cpp gcc linux-headers-$(uname -r) make psmisc</span><br></pre></td></tr></table></figure>
</li>
<li><p>点击 vmware 外界面中的「安装 vmware tools」，弹出文件夹后以命令行方式运行 <code>vmware-install.pl</code>，一路回车，重启搞掂。</p>
</li>
</ol>
<h2 id="python-版本问题"><a href="#python-版本问题" class="headerlink" title="python 版本问题"></a>python 版本问题</h2><p>ubuntu 的 python2 和 python3 是共存的，带来一系列问题</p>
<ol>
<li><p>要用 python3 需要写 <code>python3</code> 而不是 python，有点麻烦，可以通过 alias 解决。</p>
</li>
<li><p>某些 python3 下的模块用 pip3 装以后不能直接用，因为 python3 不在用户变量里面，需要加进去</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH&#x3D;&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;:$PATH</span><br></pre></td></tr></table></figure>

<p>然后用 pip 装模块的时候需要在前面加 sudo。</p>
</li>
</ol>
<h2 id="语言问题"><a href="#语言问题" class="headerlink" title="语言问题"></a>语言问题</h2><p>ubuntu 可以直接在设置里面换源。换源之后再添加语言，添加后退出一遍就能看到。</p>
<p>设置为中文后会提示你要不要把用户文件夹里的子文件夹改成中文。最好不要。</p>
<h2 id="root-用户问题"><a href="#root-用户问题" class="headerlink" title="root 用户问题"></a>root 用户问题</h2><p>桌面版的 debian&amp;&amp;ubuntu 默认都没有开启 root 用户，取而代之的是给当前用户 sudo 的权限。</p>
<p>想要开启 root 用户可以直接 sudo passwd root 搞定。不过即使这样登录的时候也不能直接用 root 而是只能在登录普通用户后用 <code>su</code> 切换。</p>
<p>另外还有一个问题，那就是系统变量/alias。只有 root 用户的话写在 <code>/root/.bashrc</code> 或 <code>/root/.profile</code> 下就好了。而现在应该写在具体用户目录下的这两个文件内，即 <code>%HOME/.bashrc</code> 或 <code>%HOME/.profile</code>，但此时一旦使用 <code>sudo</code> 或者用 <code>su</code> 切换到 root 下时，这两个系统变量就会失效。解决方法是把内容写到 <code>/etc/bashrc</code> 或 <code>/etc/profile</code> 下，这两个目录下的文件名前面没有 <code>.</code>，也就是不隐藏的。</p>
<p>sudo 很麻烦但非常常用，许多命令不用 sudo 的话会报错和显示找不到（特别是新装了个新软件结果发现敲命令提示 no found，不是没装好而是没用 sudo），比如 <code>ifconfig</code> 和 <code>service</code>，还有 <code>make install</code> 也需要 sudo 才能顺利安装。</p>
<p>因为帐号一开始就有 sudo 权限，实际上在 debian 中帐号已经写入 <code>visudo</code> 中了。如果需要 sudo 不设密码的话，直接加 <code>NOPASSWD:</code>，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zbttl ALL&#x3D;(ALL:ALL) NOPASSWD:ALL</span><br></pre></td></tr></table></figure>

<p>另外还有些 gui 下的软件需要 root 模式下启动（比如 vscode），可以用 <code>sudo [软件名] &amp;</code> 启动，比如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo wireshark &amp;</span><br></pre></td></tr></table></figure>

<p>如果不知道软件名，可以打开后用 top 查看。</p>
<p>另外，还有特殊一点的，vscode 的某些插件需要 root 下才能生效（比如换背景那个插件），但使用 sudo 打开的话，没办法读取当前用户的配置，就没法生效。正确的办法是：<a href="https://github.com/vscode-extension/vscode-background-cover/issues/28">参考文章</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown -R 你的用户名  &#x2F;usr&#x2F;share&#x2F;code</span><br><span class="line">#insiders 版本</span><br><span class="line">chown -R 你的用户名  &#x2F;usr&#x2F;share&#x2F;code-insiders</span><br></pre></td></tr></table></figure>



<h2 id="文件浏览器-root-开启"><a href="#文件浏览器-root-开启" class="headerlink" title="文件浏览器 root 开启"></a>文件浏览器 root 开启</h2><p>没有 root 模式的话很多文件没法直接复制粘贴。</p>
<p>ubuntu：安装 nautilus-admin</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nautilus-admin</span><br></pre></td></tr></table></figure>

<p>刷新一遍 natuilus</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nautilus -q</span><br></pre></td></tr></table></figure>

<p>然后就可以右键管理员模式打开文件夹了。</p>
<h2 id="wireshark-安装"><a href="#wireshark-安装" class="headerlink" title="wireshark 安装"></a>wireshark 安装</h2><p>参考文章：<a href="https://www.itdaan.com/tw/9a3a0e3fe1182c4af85ac6fb42c54cc6">【Tools】Wireshark 在 Linux 系統下的安裝及使用</a></p>
<p>wireshark 可以通过 apt 安装旧版，也可以通过 ppa 安装新版。安装时会出现弹窗，大概意思是要不要授予非 root 用户监听权限，选 yes。</p>
<p>之后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;group</span><br></pre></td></tr></table></figure>

<p>找到 wireshark 这一行，冒号后面添加当前用户，比如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wireshark:x:124:</span><br></pre></td></tr></table></figure>

<p>改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wireshark:x:124:zbttl</span><br></pre></td></tr></table></figure>

<p>重启即可。</p>
<h2 id="vscode-点击关闭按钮整个界面卡死"><a href="#vscode-点击关闭按钮整个界面卡死" class="headerlink" title="vscode 点击关闭按钮整个界面卡死"></a>vscode 点击关闭按钮整个界面卡死</h2><p>20.7.2 在 code-insiders 可复现。</p>
<p>解决方法：</p>
<ol>
<li><p>先关掉 code-insiders。通过其他 tty 或者 ssh 链接，使用命令 <code>top</code>，一般前两个 cpu 占用大户，即 code-insider 和 gnome-shell，是本次卡死问题的主角，记住他们的进程号（pid）。</p>
</li>
<li><p>强行关闭 code-insiders。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kill -9 [code-insiders pid]</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取 gnome-shell 重启指令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ef | grep gnome-shell </span><br></pre></td></tr></table></figure>

<p>一般会出好几条，找到对的上上面卡死的 gnome-shell pid 的那条，一般是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;bin&#x2F;gnome-shell</span><br></pre></td></tr></table></figure>
</li>
<li><p>干掉 gnome-shell</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kill -9 [gnome-shell pid]</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;bin&#x2F;gnome-shell</span><br></pre></td></tr></table></figure>

<p>此时如果用的 xshell，估计会叫你下载 xmanager，不用管，取消就好。然后实际那边应该就能动了。</p>
</li>
</ol>
<h2 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h2><p>直接参考 19.4.14 的 termux 文章。。。</p>
<p>结果发现不太对，很多细节对不上，重写吧。那篇文章详细写的部分我就一笔带过。</p>
<p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install zsh -y</span><br><span class="line">zsh</span><br></pre></td></tr></table></figure>

<p>第一次打开会弹出欢迎界面（仅桌面端），提醒你对 zsh 进行一些设置</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/q6xrR3g.png"></p>
<p>当然你可以选 1 看看，但由于后面我们装了 Oh My Zsh 后这些设置就没用了，所以推荐选 2 就行了。</p>
<h3 id="坑-1：修改默认-shell"><a href="#坑-1：修改默认-shell" class="headerlink" title="坑 1：修改默认 shell"></a>坑 1：修改默认 shell</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chsh -s zsh</span><br></pre></td></tr></table></figure>

<p>提示需要输入密码。如果是 vps，这时别不输入密码就退出了！否则 ssh 和 vnc 都进不来了。。。只能重装。（另外，也可以执行完下面的步骤再来运行这个指令）。</p>
<p>但输入密码后大概率会提示 zsh 无效。</p>
<p>参考这里的解决方案：<a href="https://askubuntu.com/questions/812420/chsh-always-asking-a-password-and-get-pam-authentication-failure">chsh always asking a password , and get <code>PAM: Authentication failure</code></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;pam.d&#x2F;chsh</span><br></pre></td></tr></table></figure>

<p>将</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auth       required   pam_shells.so</span><br></pre></td></tr></table></figure>

<p>改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auth       sufficient   pam_shells.so</span><br></pre></td></tr></table></figure>

<p>或者直接运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo sed s&#x2F;required&#x2F;sufficient&#x2F;g -i &#x2F;etc&#x2F;pam.d&#x2F;chsh </span><br></pre></td></tr></table></figure>

<p>如果仍然错误（提示 shell 不存在 <code>chsh: Warning: zsh does not exist</code>），查看一下 shell 列表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;shells</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IigBKYQ.png"></p>
<p>然后使用 <code>which zsh</code> 看一眼。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/qK0mouw.png"></p>
<p>看起来得改改命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chsh -s &#x2F;usr&#x2F;bin&#x2F;zsh zbttl</span><br></pre></td></tr></table></figure>

<p>再去 <code>/etc/passwd</code> 看看，或者用下一个命令刷新生效（也许还需要重启，vps 一般直接用 root，所以断开重连就行，<strong>下面再涉及这个操作，我都用重连来替代</strong>）后使用 <code>echo $shell</code>，确认已经在使用 zsh 了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source ~&#x2F;.zshrc</span><br></pre></td></tr></table></figure>

<p>安装 oh my zsh，更换主题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;master&#x2F;tools&#x2F;install.sh)&quot;</span><br><span class="line">git clone --depth&#x3D;1 https:&#x2F;&#x2F;github.com&#x2F;romkatv&#x2F;powerlevel10k.git $ZSH_CUSTOM&#x2F;themes&#x2F;powerlevel10k</span><br><span class="line">sed -i &#39;&#x2F;^ZSH_THEME&#x3D;&#x2F;c\ZSH_THEME&#x3D;&quot;powerlevel10k&#x2F;powerlevel10k&quot;&#39; ~&#x2F;.zshrc</span><br><span class="line">source ~&#x2F;.zshrc</span><br></pre></td></tr></table></figure>

<p>转换为 zsh 后，之前的 bash 里的历史记录不再显示，但可以迁移过来。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;gist.githubusercontent.com&#x2F;goyalankit&#x2F;a1c88bfc69107f93cda1&#x2F;raw&#x2F;ed58ae6b8929021353001b1826694780c033291a&#x2F;bash_to_zsh_history.rb</span><br><span class="line">ruby bash_to_zsh_history.rb</span><br></pre></td></tr></table></figure>

<h3 id="坑-2：字体支持"><a href="#坑-2：字体支持" class="headerlink" title="坑 2：字体支持"></a>坑 2：字体支持</h3><p>之后重连，进入 p10k 设置界面，来了。这个坑在 vps 端和桌面端都有。vps 端，只要 vps 控制端（windows，windows 下字体相当好装）装好 powerline 的字体，问题都不大。但 vps 端本身也有问题，问题出在 xshell 等 terminal 上：xshell 在 powerlevel10k 的设置中无法进入 prompt style 这项中（一路下一步你发现没有这项），最后设置完效果是纯字符型的，不好看；但如果从能够弹 prompt stlye 的地方设置好了，再从 xshell 进入你会发现显示没问题（我在本地端的 debian 上开开 ssh 然后用 xshell 链接发现了这个问题）。</p>
<p>那么 vps 远程端没办法实机登录（vnc 下字体不好设）怎么办呢，换个 terminal 就好了。windows terminal 并未出现这个问题。</p>
<p>单纯的桌面端，debian 下安装字体比较麻烦。直接从字体管理器安装字体会直接卡死，得手动命令行装。将字体放到某一个文件夹中，在文件夹内打开终端。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir &#x2F;usr&#x2F;share&#x2F;fonts&#x2F;truetype&#x2F;CustomizedFonts</span><br><span class="line">sudo cp *.ttf &#x2F;usr&#x2F;share&#x2F;fonts&#x2F;truetype&#x2F;CustomizedFonts</span><br><span class="line">sudo chmod 777 -R &#x2F;usr&#x2F;share&#x2F;fonts&#x2F;truetype&#x2F;CustomizedFonts </span><br><span class="line">cd &#x2F;usr&#x2F;share&#x2F;fonts&#x2F;truetype&#x2F;CustomizedFonts</span><br><span class="line">sudo mkfontscale</span><br><span class="line">sudo mkfontdir</span><br><span class="line">sudo fc-cache</span><br></pre></td></tr></table></figure>

<p>重启后在终端启用新字体即可。另外字体可以从我以前写的 powershell 攻略中的 nerd fonts github 项目内获取。我也尝试过用那个方法手工做的 Cascadia Code，后来发现会导致错位，还是直接用官方的好。</p>
<p>另外字体以显示（控制）端为准，也就是即使 vps 远程端装好了字体，控制端没装好也是乱码；反之亦然。</p>
<h3 id="坑-3：系统-用户变量-alias"><a href="#坑-3：系统-用户变量-alias" class="headerlink" title="坑 3：系统 / 用户变量 /alias"></a>坑 3：系统 / 用户变量 /alias</h3><p>参考文章：</p>
<ul>
<li><a href="https://superuser.com/questions/183870/difference-between-bashrc-and-bash-profile">Difference between .bashrc and .bash_profile</a></li>
<li><a href="https://askubuntu.com/questions/566399/why-isnt-profile-sourced-when-opening-a-terminal">Why isn’t .profile sourced when opening a terminal?</a></li>
</ul>
<p>其实也不能算个坑，可以说是个 feature。</p>
<p>我们先了解一下 linux 这个系统变量是怎么整的：</p>
<ol>
<li>用户变量：只对当前用户有效，放在用户目录下，文件以隐藏形式呈现（前面加.）<ol>
<li>rc 文件：启动终端时加载，如默认的 <code>.bashrc</code>，zsh 的 <code>.zshrc</code>。一般放快捷路径（alias）。</li>
<li>profile 文件：登录后第一次打开终端加载，如默认的 <code>.profile</code>，zsh 的 <code>.zprofile</code>。一般放懒得使用 systemd 或 supervisor 启动的自启程序，以及系统/用户变量（export xxx）。but，从图形界面运行的终端默认不加载这个文件，如果要加载，需要在终端中找到类似「以登录 shell 方式运行命令」的选项。当然有种说法，这么干会搞乱登录环境，那么对于这些变量，也可以直接写在 rc 文件中（后果是反复用 source 或者打开多个终端的时候，查看变量的话会发现重复加载了若干个写在 rc 文件中的变量，但并没有什么严重的后果；而自启程序就用 systemd 等替代就好了）。</li>
</ol>
</li>
<li>系统变量。对所有用户起效。放在 <code>/etc/</code> 目录下，不一定是某一个文件（默认文件名和系统有关），也不一定直接位于<code>/etc</code> 下（zsh 就位于 <code>/etc/zsh</code> 下）。和用户变量不同，不需要隐藏。<ol>
<li>rc 文件。默认的可能是 <code>bash.bashsrc</code>；zsh 固定为 <code>zshrc</code>；</li>
<li>profile 文件：默认为 <code>profile</code>；zsh 为 <code>zprofile</code>。</li>
</ol>
</li>
</ol>
<p>所以，接下来我所讲的部分变量设置我将以放在 <code>/etc/zshrc</code> 处写命令，而重连则使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo source &#x2F;etc&#x2F;zsh&#x2F;zshrc</span><br></pre></td></tr></table></figure>

<h3 id="坑-4-：zsh-下-ssh-键位错误"><a href="#坑-4-：zsh-下-ssh-键位错误" class="headerlink" title="坑 4 ：zsh 下 ssh 键位错误"></a>坑 4 ：zsh 下 ssh 键位错误</h3><p>参考：<a href="https://www.jianshu.com/p/f867f786b584">zsh 中加入 home end，以及小键盘的支持</a></p>
<p>小键盘区和功能键区在 zsh 下功能错误。这次就不是 xshell 的锅了，ssh 过去的都这个毛病。解决方法有两种：</p>
<ol>
<li><p>通过 xshell。在属性中，选择终端-&gt;终端类型，改为 linux。</p>
</li>
<li><p>在 <code>/etc/zsh/zshrc</code> 中加入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># key bindings</span><br><span class="line">bindkey &quot;\e[1~&quot; beginning-of-line</span><br><span class="line">bindkey &quot;\e[4~&quot; end-of-line</span><br><span class="line">bindkey &quot;\e[5~&quot; beginning-of-history</span><br><span class="line">bindkey &quot;\e[6~&quot; end-of-history</span><br><span class="line"># for rxvt</span><br><span class="line">bindkey &quot;\e[8~&quot; end-of-line</span><br><span class="line">bindkey &quot;\e[7~&quot; beginning-of-line</span><br><span class="line"># for non RH&#x2F;Debian xterm, can&#39;t hurt for RH&#x2F;DEbian xterm</span><br><span class="line">bindkey &quot;\eOH&quot; beginning-of-line</span><br><span class="line">bindkey &quot;\eOF&quot; end-of-line</span><br><span class="line"># for freebsd console</span><br><span class="line">bindkey &quot;\e[H&quot; beginning-of-line</span><br><span class="line">bindkey &quot;\e[F&quot; end-of-line</span><br><span class="line"># completion in the middle of a line</span><br><span class="line">bindkey &#39;^i&#39; expand-or-complete-prefix</span><br><span class="line"># Fix numeric keypad  </span><br><span class="line"># 0 . Enter  </span><br><span class="line">bindkey -s &quot;^[Op&quot; &quot;0&quot;</span><br><span class="line">bindkey -s &quot;^[On&quot; &quot;.&quot;</span><br><span class="line">bindkey -s &quot;^[OM&quot; &quot;^M&quot;</span><br><span class="line"># 1 2 3  </span><br><span class="line">bindkey -s &quot;^[Oq&quot; &quot;1&quot;</span><br><span class="line">bindkey -s &quot;^[Or&quot; &quot;2&quot;</span><br><span class="line">bindkey -s &quot;^[Os&quot; &quot;3&quot;</span><br><span class="line"># 4 5 6  </span><br><span class="line">bindkey -s &quot;^[Ot&quot; &quot;4&quot;</span><br><span class="line">bindkey -s &quot;^[Ou&quot; &quot;5&quot;</span><br><span class="line">bindkey -s &quot;^[Ov&quot; &quot;6&quot;</span><br><span class="line"># 7 8 9  </span><br><span class="line">bindkey -s &quot;^[Ow&quot; &quot;7&quot;</span><br><span class="line">bindkey -s &quot;^[Ox&quot; &quot;8&quot;</span><br><span class="line">bindkey -s &quot;^[Oy&quot; &quot;9&quot;</span><br><span class="line"># + - * &#x2F;  </span><br><span class="line">bindkey -s &quot;^[Ol&quot; &quot;+&quot;</span><br><span class="line">bindkey -s &quot;^[Om&quot; &quot;-&quot;</span><br><span class="line">bindkey -s &quot;^[Oj&quot; &quot;*&quot;</span><br><span class="line">bindkey -s &quot;^[Oo&quot; &quot;&#x2F;&quot;</span><br></pre></td></tr></table></figure>

<p>重连生效。</p>
</li>
</ol>
<p>接着装一堆插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install python</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-syntax-highlighting $ZSH_CUSTOM&#x2F;plugins&#x2F;zsh-syntax-highlighting</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-autosuggestions $ZSH_CUSTOM&#x2F;plugins&#x2F;zsh-autosuggestions</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-completions $ZSH_CUSTOM&#x2F;plugins&#x2F;zsh-completions</span><br><span class="line">git clone git:&#x2F;&#x2F;github.com&#x2F;joelthelion&#x2F;autojump.git</span><br><span class="line">cd autojump</span><br><span class="line">.&#x2F;install.py</span><br><span class="line">cd</span><br><span class="line">[ -z &quot;&#96;grep &quot;autoload -U compinit &amp;&amp; compinit&quot; ~&#x2F;.zshrc&#96;&quot; ] &amp;&amp; echo &quot;autoload -U compinit &amp;&amp; compinit&quot; &gt;&gt; ~&#x2F;.zshrc</span><br><span class="line">sed -i &#39;&#x2F;^plugins&#x3D;&#x2F;c\plugins&#x3D;(git z zsh-syntax-highlighting zsh-autosuggestions zsh-completions autojump)&#39; ~&#x2F;.zshrc</span><br><span class="line">source ~&#x2F;.zshrc</span><br><span class="line">#实际上不需要，除非是单独安装的autojump，sed那条命令已经包含了下面这条命令的功能。</span><br><span class="line">#echo &quot;[[ -s $HOME&#x2F;.autojump&#x2F;etc&#x2F;profile.d&#x2F;autojump.sh ]] &amp;&amp; source $HOME&#x2F;.autojump&#x2F;etc&#x2F;profile.d&#x2F;autojump.sh&quot; &gt;&gt; ~&#x2F;.zshrc</span><br><span class="line">#不一定需要，如果使用中输入cd经常报错 _z_dirs:2: no such file or directory:&#x2F;root&#x2F;.z 就运行一句</span><br><span class="line">#wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;rupa&#x2F;z&#x2F;master&#x2F;z.sh -O ~&#x2F;.z</span><br></pre></td></tr></table></figure>

<h3 id="坑-5：因不正常关机导致-zsh-history-报错"><a href="#坑-5：因不正常关机导致-zsh-history-报错" class="headerlink" title="坑 5：因不正常关机导致 zsh history 报错"></a>坑 5：因不正常关机导致 zsh history 报错</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp .zsh_history zsh_history</span><br><span class="line">rm -f .zsh_history </span><br><span class="line">strings zsh_history&gt;.zsh_history</span><br><span class="line">fc -R .zsh_history</span><br></pre></td></tr></table></figure>

<p>最后一句是仅存在于zsh中的fc语句，意思是从某文件中读取历史记录</p>
<p>另外 zsh 还有个 feature（但不一定每一次都能触发），复制粘贴多行的时候并不会和传统 bashrc 一行行运行而是堆在一起，回车时才会一起运行。好处是如果是几句常用的命令，利用上下方向键找历史记录时会直接找到拼成一块的这几个语句；坏处是利用 history 查看历史的时候看见这些句子被拼成一句，中间用 <code>\n</code> 做间隔，直接复制出来没法用，得自己处理。</p>
<h2 id="debian-和-ubuntu-显著区别（以及-debian-ppa-使用）"><a href="#debian-和-ubuntu-显著区别（以及-debian-ppa-使用）" class="headerlink" title="debian 和 ubuntu 显著区别（以及 debian ppa 使用）"></a>debian 和 ubuntu 显著区别（以及 debian ppa 使用）</h2><ol>
<li><p>debian 的内核比较旧而稳定，ubuntu 通常用的是最新内核。旧内核也有好处，bbr 和锐速，以及 fullcone 的那个内核组件比较好装。</p>
</li>
<li><p>debian 以下操作均只能通过命令完成：</p>
<ul>
<li>换源</li>
</ul>
</li>
<li><p>ubuntu 在非 root 状态下使用的命令若尚未安装，会给一句 apt 命令提示告诉你应该装啥。</p>
</li>
<li><p>ubuntu 的文件管理器的地址栏切换为可复制的文字路径的方法很隐蔽，需要快捷键 ctrl+L。当然也有办法让其一直工作在可复制文件路径下。需要先安装 dconf-editor。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install dconf-editor -y</span><br></pre></td></tr></table></figure>

<p>搜索应用程序 dconf，就能看到 dconf 系统配置编辑器。打开后从 org –&gt; gnome –&gt; nautilus –&gt; preferences 进入就能看到相关选项了。</p>
</li>
<li><p>debian 没有 ppa 功能，虽然也能用，但比较麻烦（但因为 ubuntu 内核新 ppa 里面有些内容也很新，所以 debian 死活装不上，比如最新的 wireshark，<del>而旧版 wireshark 无法探测到本地的网卡，导致其实没法用</del>。debian 下 ppa 的具体使用方法参考这里：<a href="https://blog.skk.moe/post/add-ppa-to-debian/">在 Debian 上添加 PPA 并安装软件包</a>。文章中有一部比较难以理解：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo sed -i &#39;s&#x2F;disco&#x2F;bionic&#x2F;g&#39; &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;lazygit-team-ubuntu-daily-disco.list</span><br></pre></td></tr></table></figure>

<p>实际上就是进入 <code>/etc/apt/sources.list.d</code>，在上一步 ppa 中会下载两个跟你要装的软件相关的源文件，里面的系统名太新了（比如我下到的就是 groovy，而上面那行代码是 bionic，作者选择替换成当时最新的 lts bionic 系统）可以 <a href="https://zh.wikipedia.org/wiki/Ubuntu">wiki 查看</a>，选择一个合适的版本。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/vKqB7kT.png"></p>
<p>另外也可以通过软件 ppa 页面，查看当前版本是否有相关的包，比如 <a href="https://launchpad.net/~wireshark-dev/+archive/ubuntu/stable?field.series_filter=">wireshark 界面</a>：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/xZwC5zQ.png"></p>
<p>很明显确实没有最新的 groovy 版本，而只有上一个版本 focal 版，那么我们可以改成 focal 或者直接复制粘贴图中的两行代码。</p>
<p>另外也可以翻翻 sid 包，有没有相关的包，我反正翻到 sid 包里面也有 <a href="https://packages.debian.org/sid/amd64/wireshark/download">wireshark 的最新版本</a>。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/rPP1F98.png"></p>
<p>从这里找一个最近的源，比如 <a href="http://ftp.cn.debian.org/debian%EF%BC%8C%E6%8C%89%E7%BD%91%E9%A1%B5%E9%A1%B6%E4%B8%8A%E7%9A%84%E8%A6%81%E6%B1%82%E6%8B%BC%E6%8E%A5%E4%B8%80%E4%B8%8B%E3%80%82%E4%B8%BA%E4%BA%86%E9%81%BF%E5%85%8D%E5%92%8C%E6%AD%A3%E5%B8%B8%E6%BA%90%E6%B7%B7%E5%9C%A8%E4%B8%80%E8%B5%B7%EF%BC%8C%E6%88%91%E4%BB%AC%E6%96%B0%E5%BC%80%E4%B8%80%E4%B8%AA%E6%BA%90%E6%96%87%E4%BB%B6%EF%BC%8C%E5%91%BD%E5%90%8D%E4%B8%BA">http://ftp.cn.debian.org/debian，按网页顶上的要求拼接一下。为了避免和正常源混在一起，我们新开一个源文件，命名为</a> sid.list。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo sh -c &#39;printf &quot;deb http:&#x2F;&#x2F;ftp.cn.debian.org&#x2F;debian sid main &quot; &gt; &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;sid.list&#39;</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt -t sid install wireshark -y</span><br></pre></td></tr></table></figure>

<p>但很遗憾，无论用 ppa 直接安装，ppa 直接编译还是 sid 源的方法安装 wireshark 都报错，依赖不对，估计手动编译也是一样的结果。</p>
</li>
</ol>
<h2 id="（12-22-更新）-过期的-ubuntu"><a href="#（12-22-更新）-过期的-ubuntu" class="headerlink" title="（12.22 更新） 过期的 ubuntu"></a><strong>（12.22 更新）</strong> 过期的 ubuntu</h2><p>虚拟机的 ubuntu 是去年才装的。</p>
<p>看了一下 ubuntu 有普通版和 long-term 版，long-term 版？应该是和 windows ltsb / ltsc 一个性质的东西吧。</p>
<p>「装在虚拟机里面的东西要什么 long-term，给我来最新的」然后我就装了 19.10。</p>
<p>结果最近 apt update 总是报错，说是什么</p>
<blockquote>
<p>仓库 “<a href="http://mirrors.tuna.tsinghua.edu.cn/ubuntu">http://mirrors.tuna.tsinghua.edu.cn/ubuntu</a> eoan-updates Release” 没有 Release 文件。</p>
</blockquote>
<p>是不是清华的源又整活了？用「软件与更新」换个源看看。</p>
<p>结果选择最佳服务器的时候就告诉我网络有问题（肯定不是网络原因，科学和 dns 这些我熟的很），退出的时候整个软件直接崩了。。。</p>
<p>兜兜转转我得出一个结论：这个 ubuntu 版本今年 7 月过期，连着源一块过期访问不到了。（这比 windows 10 版本寿命还短）</p>
<p>怎么办？尝试升级，好在和 window 不一样，普通版本也能升到 lt 版，升到 lt 版不折腾了。</p>
<p>关键是升级前要 apt update 的啊，这 apt update 都运行不了怎么办？</p>
<h3 id="apt-update-失效"><a href="#apt-update-失效" class="headerlink" title="apt update 失效"></a>apt update 失效</h3><p>参考 <a href="https://www.digitalocean.com/community/questions/unable-to-apt-update-my-ubuntu-19-04">Unable to ‘apt update’ my Ubuntu 19.04</a>，旧的源过期了不过会存档起来，但网址也改了。但我用的是镜像源，镜像源我猜不会改网址而是直接删库。。。保险起见找一下初始源。结果没找到官方的，找到一个这样的：<a href="https://gist.github.com/malikalichsan">malikalichsan</a>/<a href="https://gist.github.com/malikalichsan/860b8134a74c65a394efe09711d0b95f">sources.list</a></p>
<p>瞄了下大概的地址格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb http:&#x2F;&#x2F;id.archive.ubuntu.com&#x2F;ubuntu&#x2F; eoan main restricted</span><br></pre></td></tr></table></figure>

<p>用 vscode 把 archive 批量替换为 old-releases</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb http:&#x2F;&#x2F;id.old-releases.ubuntu.com&#x2F;ubuntu&#x2F; eoan main restricted</span><br></pre></td></tr></table></figure>

<p>update 一看，找不到仓库。对比一下网上的其他源地址，我们这个地址前面的 id 好突兀，删掉</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb http:&#x2F;&#x2F;old-releases.ubuntu.com&#x2F;ubuntu&#x2F; eoan main restricted</span><br></pre></td></tr></table></figure>

<p>成了。</p>
<h3 id="do-release-upgrade-也失效"><a href="#do-release-upgrade-也失效" class="headerlink" title="do-release-upgrade 也失效"></a>do-release-upgrade 也失效</h3><p>ubuntu 也有专属的系统更新命令，那就是 <code>sudo do-release-upgrade</code>。然后我运行了一边，又告诉我没网络了。。。。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Failed to connect to https:&#x2F;&#x2F;changelogs.ubuntu.com&#x2F;meta-release. Check your Internet connection or proxy settings</span><br></pre></td></tr></table></figure>

<p>继续问谷歌：<a href="https://askubuntu.com/questions/1200494/failed-to-connect-to-http-changelogs-ubuntu-com-meta-release-lts-after-upgrade">Failed to connect to http://changelogs.ubuntu.com/meta-release-lts after upgrade</a></p>
<p>说是删掉 <code>/var/lib/ubuntu-release-upgrader/release-upgrade-available</code> 这个文件，然后用 <code>/var/lib/ubuntu-release-upgrader/release-upgrade-motd</code> 这个程序再获取一遍地址。</p>
<p>没用，甚至运行这个 <code>release-upgrade-motd</code> 直接报错无网络。</p>
<p>算了，直接大力出奇迹好了。用 debian 的更新方法。</p>
<p>但话说 ubuntu 最新 lts 的版本缩写在 url 内怎么表示？等等上面那个报错信息里面不是有个网址。</p>
<p>打开看看。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201222235724.png"></p>
<p>很好，直接换：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp  &#x2F;etc&#x2F;apt&#x2F;sources.list &#x2F;etc&#x2F;apt&#x2F;sources.list.bak</span><br><span class="line">sudo sed -i &#39;s&#x2F;eoan&#x2F;focal&#x2F;g&#39; &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br></pre></td></tr></table></figure>

<p>更新：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt update&amp;&amp;sudo apt upgrade&amp;&amp;sudo apt dist-upgrade</span><br></pre></td></tr></table></figure>

<p>收工。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>debian</tag>
      </tags>
  </entry>
  <entry>
    <title>2020，这一年，xbox 新玩家的一年</title>
    <url>/2020-zhe-yi-nian-xbox-xin-wan-jia-de-yi-nian/</url>
    <content><![CDATA[<p>今年对世界是艰难的一年，不过对我这个宅来说。。。可能算是「波澜壮阔」的一年（用词不当警告）。</p>
<p>该总结的事情很多，我毕业了，而且后续应该不打算再读研究生啥的（数学太烂），放下了陪伴我接近 20 年的学生身份；毕业这一年我也没认真找工作，毕竟计算机这边我还有好多东西想玩清楚；今年因为种种原因在家里的时间是我这二十几年来最长的，也写了大学四年来最多的日记，最后我鼓起勇气开了个博客慢慢把日记放上来。诸如此类等等等。</p>
<p>但如果让我选今年对我影响最大的东西，那应该还是这台 xbox one S。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20201231_155252913.jpg"></p>
<p>这台东西是去年双十二买的，当时的背景是我姨妈给了我一张 5000 大洋的购物卡让我换掉大学期间的这台电脑，当时我妈还想着要是钱不够还可以给我填点，毕竟大学用的暗影 2 是 6000 元级的，我妈以为毕业后预算可能还要再高点。但我大学期间感受最深的是笔记本的便携性真的很重要。。。。后续我的暗影 2 都待在家里插着显示器当台式机用，我去年买了个更大更高的桌子放显示器，而那个更矮更小的桌子就插在大桌子下面，笔记本就合盖放在小桌子上（为了散热我还会垫几个瓶盖在 b 和 c 面之间），然后接上鼠标键盘 hub hdmi 啥的。除非是要线下打游戏才会扛出去，如果是有编程任务，我宁愿带我高中买的 500 大洋的 windows 平板出去，毕竟大学的课业编程任务并不需要很好的硬件。就算用得着我也选择开个远程，毕竟要把暗影 2 带过来要拔一大堆线，回来还要重新把小桌子拉出来，把机子摆上去插好线开好机再塞回去（</p>
<p>所以我当时就打定主意买轻薄本了。既然是买轻薄本，当时市场上最棒的选择就是小新 pro13，那玩意才 4499。虽然最后被京东坑了一笔，我看双十二之前就有付 200 定金然后双十二发货的事了，结果双十二的时候尾款不可以用礼品卡付，后面放弃定金在当天买照样 4499 立刻发货。。。。</p>
<p>那剩下的 500（被坑了一笔只剩 300 了），想了想我 10 月份才买了 3 个月的 xgp 试用，看着主机库比 pc 库多一大堆游戏；我那时候还蛮想继续玩地平线 4，但对每次开游戏都要关一堆程序甚至重启一遍电脑否则就要吃掉帧警告这件事感到疲倦，有了 xbox 自然就没这个问题了；还有 8 月份趁极限竞速 6 下架 34 大洋薅的全 dlc 包（我当时是考虑到以后可能买 xbox，做梦都没有想到年底就能买，更没有想到有了 xbox 这一年这游戏我也没开几次）。还有，我 18 年买的 ns 分期一年，到 12 月刚好还完，xbox one S 纯数字版那时候 1k3 扣掉 300 还有 1000，六期还完每期也就 200 不到，在我每月接受范围之内。</p>
<p>然后就是日常的喜新厌旧流程。。。买到 xbox 的这一年我的日常游戏平台从 ns 基本转向 xbox，最常玩的两个游戏，从年初到年中的 cod15 多人 + 僵尸；三月份开始持续一整年的 cod16。cod15 僵尸较 cod12 僵尸难度降低不少，还有机器人队友，以我的实力能打到奇迹武器出来了；16 的季票制毁誉参半，但 yysy 托季票的福我有动力肝了，枪几乎都满级了，还有十月份那一波穿墙 bug 说起来是很讨人嫌但玩着那是真香啊。。。话说回来这两个游戏我都有 pc 版还都是买的首发，但因为 pc 的配置问题以及 pc 端没有同屏没人陪我玩，完全没动力玩。特别是 cod 16 我买的首发却错过了前三个赛季这点。。。虽然都玩的挺爽，但值得吐槽的地方也不少：cod15 的锁 ping，才出了一年我就匹配不到吃鸡了，甚至想匹配到多人都要挑好时间（凌晨有人几率降低）选好节点（亚洲，美国匹配不到）；16 的阴间图，后期的匹配崩坏和最后一个赛季不得善终，作为一款里程碑式的游戏落得这样一个下场，令人唏嘘。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201231175932.png"></p>
<p>除了最主要的这两个，中间还穿插着玩了挺多游戏：年初的地平线 4，年中定了三年 xgp 后玩的皇牌空战 7，趁出 xgp 库前玩的鬼泣 5，dlc 都入了库的命运 2；ea play 进 xgp 后玩的战地 4，还有早就买了但最后才玩的 cod14，没钱买疯狂打试玩的 cod17 等等。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201231173039.png"></p>
<p>（没想到只打人机的我，dota2 还是游戏时间最长的游戏，不过起码有 50 小时左右的时长我是挂机挂出来的，那时候用人机实验一天究竟能打几只斧王，搞了满地图的斧王哈哈哈；战地 1 实打实的肝出了所有枪，cod16 时间应该更多，毕竟我在战网上也有玩，gog 统计不到；鬼泣 5 和皇牌空战 7 一个起码 10 小时一个起码 50 小时，应该是因为我玩的时候不想联网的原因，离线状态下的游戏时间没有算进去）</p>
<p>线下同屏部分，主机上的大作同屏能力完爆 pc，cod 每一作都能同屏，僵尸模式离线状态下甚至能四人同屏，pc 上只有 12 勉强能双人同屏，而且还只能访客模式同屏；微软这边的两个重量级独占作品，光环和战争机器，除了光环 5 那是作作都能同屏过剧情，战争机器 5 甚至能三人同屏（343 你看看人家，鬼面兽警告）；borderland 在 pc 上同屏你得有配置运行几个游戏，在主机上同时开四个号完全没有压力，遗憾的是 borderland 本世代作品没有中文，因为我在 pc 端玩中文比较熟了就切成两个朋友比较熟悉的日文来玩；borderland3 开始有中文但在 xbox one 上只能最多双人，但在已经到来的次时代机型上可以四人，不过 3 目前还是贵，等一个骨折，或者入xgp（ 今年的线下部分，因为疫情的原因我家附近的两个初中同学并不用回武汉和福建，趁年初把 borderland 2 刷到三周目，把战争机器系列和光环系列都通了。而偶尔和我高中同学进行的线下聚会，最令人惊喜的是的是细胞分裂黑名单，有中文，有老司机带，玩起来节目效果爆炸 2333。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201231190158.png"></p>
<p>（单机通关列表，刚好一页）</p>
<p>当然，作为「坑王」，这一年有不少挖坑入坑出坑回坑的瞬间，而且有不少时候让人感叹「好险没掉进去」：</p>
<p>年初几天趁 xgp 还在，趁金会员价买了 cod14、15，学会了跨巴西区买便宜的 cod，但那时还不知道怎么用手上的信用卡，只能在淘宝买礼品卡。cod16 最后三月份我在港服买的，那时候巴西区比港区便宜接近 50 元，但 cod16 那时候大概 160 雷亚尔，只有 50、100、200 雷亚尔额度的礼品卡，200 雷亚尔大概 320 左右，手上现金不够（穷啊）。1 月底的时候我奶奶住院我要去看着，下了战地 1 和战地 5 进小新 pro13，战地 1 降点解析度居然还能玩（amd yes！），战地 5 就不太行，但更关键的是我确定了雷神加速器完全不彳亍，uu 又太贵（而且两年前我玩 cod12 出现频繁断线问题最后确认是 uu 的锅，换成海豚就没问题，所以我一直对 uu 印象不太好），最后用网络条件比较需求苛刻的 cod16 大战场验证了一下没问题（有问题就会频繁丢包卡顿，雷神就这样），趁 1 月特惠以一年价格上车了腾讯加速器一年半会员（那时候主机加速还是免费的）。</p>
<p>虽然带上一年前买的手柄和买 xbox one 送的手柄我手上有两个手柄，但经常晚上和我线下的两个初中同学加起来得三个手柄，就在月中暂时找我高中同学借了一个。借完了以后试了试四人同屏，发现 cod15 本身可以线下四人，可连接第三个手柄了以后花式卡机闪退。去 reddit 转了一圈发现大把人出这个问题，遂到微软商店给差评。但到现在都还没有修。所以线下两人以上的大作只剩下 borderland2 和后来买的 cod12（gears5 在月初就打通了）。</p>
<p>一月底我把机器带到我同学家的时候开机提示进入救援模式，没法复原，最后只能初始化。还好游戏没丢，初始化完不用重下。后面我才知道 xbox 默认关机键其实是待机，正式的关机方法是在菜单那边找完全关机这个选项。待机的时候断点可能就会进救援模式出不来只能初始化，后面我就注意了。要是这事发生在锁区后那就鬼故事了。。。</p>
<p>二三月份，大号 xgp 到期，我尝试用小号续了一份三个月的 xgp，登录小号后设置机子为常用主机（也就是常说的 home），成功让大号也能正常网战玩 xgp 游戏（唯一不太行的地方就是领金会员免费游戏，只能领在小号上）。不过此时国服还没彻底锁死，我发现国服的网络似乎比外服好，还经常用 u 盘大法切回去，如果下游戏或者领会免就又切回来。</p>
<p>三月底我的手柄 rt 键频繁按键时发出呲呲呲的声音，我想着反正买的国行找京东算账，结果京东说南宁有维修点叫我过去修。我想了想等我的两个同学会学校再说吧，修的久了就没法线下了。结果到最后人也没回学校，手柄自己不响了，到了过保都没修。。。但我闲的无聊和我爸去看了一眼维修点，也不远，但居然和我高中同学修微星笔记本是同一个维修点（关键是他的笔记本没修好，最后还出了大问题），这就。。。。微软爸爸这样真的好么？</p>
<p>四月，borderland 出 xgp 库，不过那时我们才打到二周目，我想了想趁特价买下来吧，这回跑到阿根廷区去买。阿根廷锁区，这次得从网上找代理，拿着码进 windows 商店一个个换可用代理知道把码换成功为止。不过 borderland 2 的豪华版缺一个莉莉斯 dlc（去年 8 月免费送过），更要命的是我关注了一年，愣是没打折。。。</p>
<p>光环基本通关，准备玩战争机器，发现 2 和 3 还只有 xbox 360 版。但 3 在商店里找不到？研究了一圈发现只有美区有，而且只有繁体下才显示中文。另外玩这些个单机的时候发现连着网不开加速器等 n 久还可能进不去游戏，折腾了半天断网秒进。</p>
<p>五月份，小号的 xgp 也到期了。这回我不想又开个新小号了，xgp 游戏我也不常玩，常玩的 cod 主要是网战需要金会员，尝试用国服金会员顶着，没问题。但 cod16 阴了我一手：cod16 新赛季要玩多人，需要下两个数据包。国服商店找不到这两个数据包，切到外服没有金会员根本进不去在线模式，直接在商店里又找不到这两个数据包，必须从在线模式的设置里跳转到商店才能看见。固然可以买 14 天的金会员然后下这两个包，可再下个赛季怎么办？我看了看时间，这台 xbox 分六期，下个月还完；大号 xgp 过期超过 3 个月了。于是我果断淘宝三年金会员 627，进商店一看果然有 10 港币活动，3 年金会员打满留在外区。没成想还没 10 天 xbox 国服冬窗事发，留在国区的跑不掉了，好险！</p>
<p>同样在五月份，毕业论文答辩的前一天，发生了神界原罪羊毛事件。详情我单独写成了一篇文章，一个月后我用阿根廷区换点卡同样的方法薅到羊毛。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201231235143.png"></p>
<p>五月买完 xgpu 开始皇牌空战和腐烂国度，发现这两个玩意一个只能在繁体显示中文一个只能在简体显示中文。皇牌空战难度是有点高，打剧情废了我半天事，而且我在战地 1 里开飞机看大佬都不用追逐视角而用固定视角，想着什么时候学一下，结果玩完皇牌空战好吧彻底改不过来了。打剧情我全程断网，估计就因为这个没算我时间（不过连上网倒是把成就都补给我了）。</p>
<p>六月份腾讯宣布主机加速收费和增加 svip，原有的 vip 自动升级成 svip，svip 一年要 240 多，好耶， 白嫖（不过半年国区没发现 svip 有啥用，该速度起不来的游戏还是起不来，而且自动选择节点每次都给我选择 vip 而不是 svip 节点）。但主机加速收费这个就很讨厌了，我大学同学来我家玩，cod 战区不能同屏，但我不是 pc 有一份 xbox 有一份么，cod 16 开始能跨平台，所以我只要开小新 pro13 来加速就可以了。收费后，虽然我有 svip 但一个账号不可以两地登。不过正好我初中同学剩下一台 ac86u，我试了一下，能用路由加速功能，600 大洋分 6 期我就抬走了。不过用了一段时间，有 bug，开了加速过了一两天主机就连不上网了，得重启路由，有点烦。另外，我同学剩下 ac86u 的原因就是他家换 ax88u 了，ax88u 并不在下面的表里面，但我试过也可以加速，到他家玩就不需要再多带一台电脑了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201231232143.png"></p>
<p>七月份。那出远门线下呢？华硕网件太贵，从小米和极路由挑。小米 1 小米 2 带硬盘的，二手也很贵；极路由 3 之后体积又大性能又差，1s 没有 5g；最后剩下极路由 2 和小米 mini，极路由 2 用的是 micro-usb 供电而不是 3.5mm 线！用不着为了他再找一个电源插头，插在 xbox 上就好了。拿回来解绑原来的账号，开启 root，更新固件，顺利启用。后面偶然发现了更意外的事情：我的路由器放在房间里面，而 xbox 放在客厅。cod16 大战场开了加速器还是偶尔丢包，我以为是 tx 的问题，直到我在国贸开开手机热点给极路由 2 然后因为网络情况复杂不得已只能用网线把 xbox 和极路由连起来，发现不怎么丢包了。回到家我尝试也用无线中继，结论相同。原来 xbox 的无线性能这么烂，还不如 40 大洋的二手路由器。。。。</p>
<p>八月份。我 19 年 1 月到的工行 visa 卡，吐槽了一年半，每次付款都告诉我余额不足。结果这时我突然会用了，原来要去结售汇先换成对应货币（如果没有对应货币就先换成美元，到时候会自动转的）。怎么发现的？给我的俄罗斯服务器续费的时候，刚买的时候可以用支付宝，从 8 月开始不能用了，也没有 visa，我硬着头皮本来说不能续费就算了，结果用信用卡就真给我续上了。能用 visa 的话我就不用买礼品卡了！靠这张信用卡我还完成了 xbox 360 转区 （转区转了半天失败，结果一觉醒来告诉我转成功了），再过一个月左右，微软就停售礼品卡了。。。阿根廷区成为绝唱，巴西区礼品卡大幅涨价。。。</p>
<p>八月底，听说鬼泣 5 出库，还没打通关的我火速断网，时间往后倒，成功的在出库后十来天打通关了。这时我发现，没断网的话，打到一半关机不关游戏，唤醒机器有一定可能从游戏中退出；但不断网绝对没事，唤醒后你关机前在那关机后还在那。另外鬼泣这个只有亚洲版有中文，亚洲版不打折，后续还出究极版不知道能不能继承记录的操作，也算是惊到我了，真有你的卡婊婊！后面我连上网，鬼泣五下角的 xgpu 标志光速消失，这时就算我再断网时间往回调，也进不去了。</p>
<p>不过后续我试用了三天 uu，这三天没出像 tx 一样重启断网的 bug，唤醒机器从游戏中退出的问题也没见过，看起来 uu 的路由加速技术肯定能甩 tx 几条街。不过 uu 一台路由只能加速两个设备，而绑定后你想在另一台路由加速还要先手动解绑。最后一天用 uu 的时候还出现了游戏闪退然后重新打开游戏打不开的问题，重启路由没用但重启 xbox 有用，就不知道是网易的锅还是微软的锅了。</p>
<p>年尾。ea-play 加入 xgpu。然后就是令人爆笑的战地 4 豪华版不在 xgpu 里的「真相」。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/2020-12-31_23-54-21.PNG"></p>
<p>还有昨天发生的事，极路由的官网彻底炸了，以为加速不成功是因为机子坏了的我盲目刷机导致 key 丢失，想再买一台极路由 2 结果上了恩山发现原来是这事。再后面发现大学毕业宿舍剩下的 newifi 能刷小米 mini 固件，虽然是 3.5 dc 口用的 12V 1A 电源，但我尝试用高中便携风扇的 dc 转 usb 口给 newifi 和 xbox 接上，能亮！经过一段复杂的折腾（root+更新），发现 android 端的 app 加速不上，显示 ssh 未开启。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Screenshot_20201231-053505.png"></p>
<p>快死心了，换上 ios 再试，结果装上了。。。意思是可以带出去了？别急，我发现小米的固件显然有问题，不能 nat 中继（中继的时候 newifi 和我的 ac86u 在同一子网，而总网关也就是 192.168.xxx.1是华硕的路由器），导致如果无线中继手机读取到的是 ac86u。只有通过极路由中继，然后用一根网线接极路由的 wan 和 newifi 的 lan 让 newifi 自己做一个子网出来才行。。。还好当年没有买小米 mini。凑合着用。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/2020-12-31%2005.34.47.png"></p>
<p>总结：都什么乱七八糟的坑，印度程序员出来挨打！</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/HupuBBS_201231081453-1242822577.png"></p>
<p>要说新年有啥目标。。。年底这一波，看来又得物色路由器了。或者换个新的加速方法？去年就喊着买 xss 和便携显示器的我，现在都还没买。等我找到工作，就把 xss 便携显示器和 cod17 都买了（怒）！</p>
<p>就这样吧。祝各位看官新年快乐！</p>
]]></content>
      <categories>
        <category>game</category>
      </categories>
      <tags>
        <tag>game</tag>
        <tag>xbox</tag>
        <tag>流水账</tag>
      </tags>
  </entry>
</search>
