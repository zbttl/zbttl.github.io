<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2202 年如何正确的在浏览器内打开 flash 网页？？</title>
    <url>/2202-nian-ru-he-zheng-que-de-zai-liu-lan-qi-nei-da-kai-flash-wang-ye/</url>
    <content><![CDATA[<p>flash 垃圾玩意，怎么还没淘汰！就算是打死我我也不会写相关教程~</p>
<p>（眨眨眼）</p>
<p>参考文章：<a href="https://sspai.com/post/64500">Flash 时代落幕，偶尔要访问的老网站怎么办？ - 少数派</a></p>
<p>参考文章其实说的已经很明白了，但我还是忍不住补充点细节：</p>
<h2 id="Ruffle-目前不堪大用"><a href="#Ruffle-目前不堪大用" class="headerlink" title="Ruffle 目前不堪大用"></a>Ruffle 目前不堪大用</h2><p>试了一下 ruffle 在几个内网生产环境的 flash 应用下都会报错。</p>
<h2 id="如何验证-chrome-系-flash（ppapi）是否生效-可用？"><a href="#如何验证-chrome-系-flash（ppapi）是否生效-可用？" class="headerlink" title="如何验证 chrome 系 flash（ppapi）是否生效/可用？"></a>如何验证 chrome 系 flash（ppapi）是否生效/可用？</h2><p>网上有许多参考文章建议在地址栏中输入 <code>chrome://flash</code>，但这玩意其实很早之前就被删掉啦。在地址栏中输入 <code>chrome://about</code> 命令，能看到当前浏览器所有有效的地址栏命令（包括某些魔改过的国产浏览器，即使通过其他的 <code>chrome://xxx</code> 地址报错，但 <code>chrome://about</code>这个地址一般都是能用的）。</p>
<p>之后点击其中的 <code>chrome://version</code>，v87 以前的版本就会有 flash 这一栏，v88 以后就没了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220220134749.png"></p>
<p>如果正确的加载了 flash，flash 这里就会显示出加载的 dll 的路径。所以参考文章中的[自行编译、定制 Flash 功能 国内浏览器不太放心](<a href="https://sspai.com/post/64500#:~:text=%E8%87%AA%E8%A1%8C%E7%BC%96%E8%AF%91%E3%80%81%E5%AE%9A%E5%88%B6">https://sspai.com/post/64500#:~:text=自行编译、定制</a> Flash,国内浏览器不太放心)一节原理也就是无需安装过时的 ppapi 版 flash，直接让 chrome 读取相应路径的 dll。</p>
<ol>
<li><p>下载最后一个 v87 版本：<a href="https://github.com/Hibbiki/chromium-win32/releases/tag/v87.0.4280.141-r812852">Release v87.0.4280.141-r812852 · Hibbiki/chromium-win32</a></p>
</li>
<li><p>按少数派的参考文章来</p>
<blockquote>
<p>下载下来的 Archive 包 应该是一个 7z 压缩包，解压缩之后的文件夹应该是内含 <code>Chrome-bin</code> 文件夹，这里我们新建一个 <code>ChromePortable</code> 的文件夹，在这个文件夹中再新建一个名为 <code>App</code> 文件夹，将解压缩后的 <code>Chrome-bin</code> 文件夹全部拷贝到 <code>App</code> 文件夹中。</p>
<p>之后在 <a href="https://portableapps.com/apps/internet/google_chrome_portable">portableapps</a> 中下载绿色版 Chrome 启动器 <strong>Google Chrome Portable</strong>，将下载下来的安装包使用 7zip 解压缩后，将里面的 <code>GoogleChromePortable.exe</code> 复制出来并拷贝到前面新建的 <code>ChromePortable</code> 文件夹中。</p>
</blockquote>
</li>
<li><p>关于 flash 的修改版，我在 52 上找了一个最新的 ppapi 安装版，会在 <code>C:\Windows\SysWOW64\Macromed\Flash</code> 下放入一个 32 位的 <code>pepflashplayer64_34_x_x_xxx.dll</code>，在 <code>C:\Windows\System32\Macromed\Flash</code> 下放入一个 64 位的 dll。提取出来，由于我们刚刚下载的是 64 位的 chrome，所以用 64 位这个。</p>
</li>
<li><p>在 <code>ChromePortable</code> 处新建一个文件夹，名为 <code>plugin</code> 把 dll 放入刚刚新建的文件夹中，重命名为 <code>pepflashplayer64.dll</code>。在 <code>ChromePortable</code> 下新建一个批处理文件，内容为</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">cd /d %~dp0</span><br><span class="line">start GoogleChromePortable.exe --ppapi-flash-path="%~dp0\plugin\pepflashplayer64.dll" --ppapi-flash-version="34.0.0.192" --allow-outdated-plugins</span><br></pre></td></tr></tbody></table></figure>

<p>可能要修改一下 <code>version</code> 参数，修改为和提取出来的 flash dll 对应。（不过是不是真的影响使用我没有认真测试过，目前感觉这里写的数字只跟后续测试时显示的版本号有关，写什么就显示什么）</p>
<p>但 <code>pepflashplayer64.dll</code> 别放错，因为如果放成 32 位的后续是什么提示的，只是测试时候会不生效而已。</p>
</li>
<li><p>打开批处理，可通过下列两个网址测试：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">https://www.sioe.cn/xinqing/flash/</span><br><span class="line">http://www.7k8k.com/flash/39919_1.htm</span><br></pre></td></tr></tbody></table></figure>

<p>第一个网址能显示出版本好</p>
<p>第二个网址能显示出错误「请到4399小游戏官网开始游戏」就算成功。</p>
<p>第一次打开有 flash 的页面时，flash 处会显示 flash 已被屏蔽。此时需要点击地址栏右侧如下图的按钮，点管理</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220220152113.png"></p>
<p>在弹出的页面中打开「禁止网站运行 flash」的开关。这行描述就会变成「先询问」。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220220152246.png"></p>
<p>之后再刷新页面，已被屏蔽这行字就会变成「点击即可启用 adobe flash player」。</p>
<p>但对于一些页面（比如上面的测试页面 1），并没有任何提示给我们点，是因为 flash player 生效在了整个网页的子页面中，这时浏览器就不会弹出提示。</p>
<p>此时我们点击地址栏左侧刷新旁边的按钮，可以看到里面有 flash 相关选项，设为「允许」即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220220152708.png"></p>
</li>
</ol>
<h2 id="安装版不生效-为什么大于-v88-的-chrome-也会生效呢？"><a href="#安装版不生效-为什么大于-v88-的-chrome-也会生效呢？" class="headerlink" title="安装版不生效/为什么大于 v88 的 chrome 也会生效呢？"></a>安装版不生效/为什么大于 v88 的 chrome 也会生效呢？</h2><p>一般情况下，不生效的原因，可能是：</p>
<ol>
<li>浏览器是绿色版，未能正确识别 flash dll 的路径，一般再装一次浏览器就行了；</li>
<li>安装了非修改版/非国产特供版 flash。</li>
</ol>
<p>有的时候会发现大于 v88 版本的 chrome 也可以正常使用 flash，原因很简单，因为你把支持 flash 的 chrome 设为了默认浏览器。。。。。</p>
<h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><p>能不能不用快捷方式 / 批处理做出来的浏览器直接打开就能支持 flash？而且手工做出来的浏览器每次打开都提示「自 2020 年 12 月起 flash player 将不再受支持，好烦诶」</p>
<p>。。。。。。</p>
<p>一些国产的浏览器（比如搜狗），默认就修改了自己的 flash 路径识别位置，并且安装后就会把已经修改好的 dll 放到指定的位置，此时只要使用他们的极速模式就能正常使用 flash 了。但国产浏览器嘛。。。。</p>
<p>更正统的方法！编译时加入适当的参数，直接修改 flash 的默认识别路径。另外编译时还可以动点小手脚，让浏览器支持 hevc 视频播放。但这个嘛，挖个坑，以后填。</p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>流水账</tag>
        <tag>chrome</tag>
        <tag>flash</tag>
      </tags>
  </entry>
  <entry>
    <title>一代代的，改过不啦——钝评战地2042</title>
    <url>/yi-dai-dai-de-gai-guo-bu-la-dun-ping-zhan-di-2042/</url>
    <content><![CDATA[<p>想当年出第一个预告片的时候，那真是一片好评，预告片里各种玩梗和标志性的 bgm（不仅是咚咚咚，而是另外一个背景声，类似战地 1 时代，那个经典的<del>李云龙</del>预告片1），相较上一代战地 5 那个被钉在耻辱柱上的播片，真是高下立判。加上和上一代战地 5 相隔 3 年，为史上最长两作间间隔时间（之前最长为 2 年），一想到因年货制而搞得手忙脚乱，近期差评如潮的隔壁，又赢了（</p>
<p>诸多因素加载一起，很难不得出「我感觉 EA 又行了」的结论~</p>
<p>唯一的一片乌云，就是预告片 2 公布的时候，感觉 ui 怎么如此战地 4，没有近几年游戏的高级感？</p>
<p>结果试玩的时候就发现了，这动作流畅度和打击感，好像就是大号战地 4 诶 ~ 枪械数量少得可怜，地图布局也不合理，不过那是试玩，总不可能正式发布的时候，还是那点枪，然后就只有那张图吧？</p>
<p>结果，现在这个样子，大家也看到了，看来，预告片什么的，都是虚的，你永远可以相信 ea（雾</p>
<p>好在我没有预购，没钱，上一次预购都是 cod 16 的事情了。不过我想着，就算做成试玩那种样子，玩家也不会怨声载道成这个样子吧？好在我还有 xgpu 附赠的 ea play 带来的 10 小时体验游戏的机会，相较于全价预购玩家的愤怒，我尽量以一个白嫖战地菜鸡玩家的角度（很菜鸡，战地 1 0.6 的 kd 玩了几百个小时），尝尝这坨巧克力味的*究竟是啥味道的（</p>
<h2 id="我的搜索呢？我那么大一个搜索呢？"><a href="#我的搜索呢？我那么大一个搜索呢？" class="headerlink" title="我的搜索呢？我那么大一个搜索呢？"></a>我的搜索呢？我那么大一个搜索呢？</h2><p>战地老玩家都知道，和近年来的几个友商 fps 只有靠匹配进游戏不同，战地系列主要是通过搜索并筛选房间进入服务器，类似于当年 cs 的「搜房间」方法。虽然这样削弱了厂商通过技术匹配平衡房间内玩家水平的能力（所以捞薯条这个名词才会频频出现在战地圈内），但其一战地模式的精髓是征服，征服需要的玩家数量和前些年游戏多见的 tdm（cod）/ 爆破（r6）要多的多了，匹配有可能很久都搜不到人（当然近年大热的吃鸡类游戏人数也很多，但匹配体验也不错，我的理解是各类吃鸡游戏迭代都比 cod / 战地要慢，而且吃鸡这边也有个例子：black out）；其二，自由进入房间让玩家不需要切换其他加速器就能自由选择进入的地区，同时还催生了私服的玩法，所以这个功能，那是无比的适合战地。</p>
<p>所以，我翻了一大圈，ea 你就把这功能给砍了？只剩匹配了？只有门户模式才有筛选服务器的选项，主流的征服，只能通过匹配进入，而且筛选里面的选项。。。。和前几作相比，显然也摆了（</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E3%80%8A%E6%88%98%E5%9C%B0%E9%A3%8E%E4%BA%91%E2%84%A2%202042%E3%80%8BXbox%20Series%20XS-tuya2.png"></p>
<p>而且匹配就算了，突破征服还要分两个匹配池？至于新加的危险区域 hazard zone。。。。反正我已经开了跨平台，但匹配了半天，看起来是又一个火线冲突罢了。。。</p>
<h2 id="COD：2042-行动？"><a href="#COD：2042-行动？" class="headerlink" title="COD：2042 行动？"></a>COD：2042 行动？</h2><p>2042 职业公布的时候就有人说好像 cod 15 的专家，现在看来，确实很像。。。。</p>
<p>战地 5 的时候把滑铲加进来了，2042 本作又把战术冲刺再拿过来；主动标记还是没有回归，仍然是只能按区域标点（不过按区域标点这个 cod17 也抄过去了，等于现在两个游戏都是只支持区域标记）。还有一个地方也是被吐槽颇多，那就是地图和复活点设计，虽说吐槽的方向刚好相反：近年 cod 的地图设计被吐槽颇多（阴间），复活点从 cod16 开始就放飞自我；本来战地的地图设计一向是没啥槽点的，这作虽然参战人数增加了，但配上空旷的地图，突然就感觉怪怪的，一半的地方什么人都没有，少数地方又都是人；场景破坏愈发退步，现在怕是连先锋都不如了，话说最近我还玩了会 control，那玩意才叫真正的场景破坏~</p>
<p>但，为啥 cod 那流畅的动作就没抄过来呢？</p>
<h2 id="BUG-横飞，内容不足"><a href="#BUG-横飞，内容不足" class="headerlink" title="BUG 横飞，内容不足"></a>BUG 横飞，内容不足</h2><p>这才是去年两只卧龙凤雏被喷的根本原因：bug 多得没法玩，尤其是 2042~</p>
<p>虽说我也见怪不怪了。。。战地不是年货，似乎从 4 开始，「最好的战地是上一作」，这件事好像就成定势了？</p>
<p>不过这作偷工减料，也过头了吧~</p>
<p>满打满算，主武器枪械就 10 来把？</p>
<p>10 小时的时间开载具就开出两次 bug，不过都感觉是祖传寒霜引擎的锅，见怪不怪：</p>
<iframe src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/bug-cg.mp4" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" height="600" width="800"> 
</iframe>

<p>但其他的 bug，包括游戏卡死，无法持久化，蹲下后不能跑，开车后下车跑步枪械开不了镜子，这些就是 dice 自己优化的问题了。</p>
<p>另外，手柄改键后显示的还是原来的键位；我熟悉了战术跳跃的手柄键位，也就是跳改成 LB/L1，更换配件改成 A/x，但四个配件分别使 XYAB 来切换，这四个键是不能改的，然后我每次更换镜子/弹夹/消音器配件（XYB）时都会自动切换一下前握把（A)。</p>
<p>还有满天飞的 VVV，我一开始以为是故意设计的，但越看越不对劲，告诉我，是 BUG 吧？</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E3%80%8A%E6%88%98%E5%9C%B0%E9%A3%8E%E4%BA%91%E2%84%A2%202042%E3%80%8BXbox%20Series%20XS%20(3)-tuya2.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E3%80%8A%E6%88%98%E5%9C%B0%E9%A3%8E%E4%BA%91%E2%84%A2%202042%E3%80%8BXbox%20Series%20XS%20(2)-tuya2.png"></p>
<h2 id="骨头里挑鸡蛋"><a href="#骨头里挑鸡蛋" class="headerlink" title="骨头里挑鸡蛋"></a>骨头里挑鸡蛋</h2><p>加入了 ai 和 ai 模式，虽然被吐槽 ai 很傻，但如果实在没有人，还能和 ai 打一打的嘛~而且打 ai 居然还可以顺便刷枪，起码可以挨过枪械没有装备的空窗期。</p>
<p>门户模式应该说还是做的不错的，以前私服似乎是要钱的吧，现在是不是直接建就行了？（待确认）</p>
<p>任务少，没有那种逼肝的每日任务，这是优点还是缺点呢？</p>
<p>不过唯一的每周任务，进了游戏以后都不知道任务进度到那里了，这是毋庸置疑的缺点。</p>
<hr>
<p>离 10 小时体验时间结束还剩 20 多分钟，反正我是不打算玩了，感觉还不如玩战地 4，起码战地 4 还有个监狱可以玩。。。</p>
]]></content>
      <categories>
        <category>game</category>
      </categories>
      <tags>
        <tag>流水账</tag>
        <tag>battlefield</tag>
      </tags>
  </entry>
  <entry>
    <title>telegram 更换字体的正确姿势</title>
    <url>/telegram-geng-huan-zi-ti-de-zheng-que-zi-shi/</url>
    <content><![CDATA[<p>telegram 经过数次版本迭代后，从去年开始的版本已经不能注入 dll 了。常用的两个注入 dll 插件，其中一个 Anti Revoke Plugin 已于上月停更，所以现在只有换字体的 <a href="https://github.com/ysc3839/FontMod">FontMod</a> 仍在更新。虽然本身也不是专为 telegram 打造的，所以在现在版本的 tg 上用起来还要费一番功夫。</p>
<p>参考文章：<a href="https://github.com/ysc3839/FontMod/issues/70#issuecomment-882069692">ysc3839（项目作者）的issue</a></p>
<ol>
<li><p>下载 telegram 微软商店版</p>
</li>
<li><p>在 <a href="https://github.com/ysc3839/FontMod">FontMod</a> 的 release 页面中下载 FontMod64.dll （无需改名）并放入任意文件夹中。</p>
</li>
<li><p>fork <a href="https://github.com/ysc3839/AppXLauncher">ysc3839/AppXLauncher</a>，在其中任意添加一个文件后，actions 就会自动进行构建，等待约半小时，构建好后下载其中的 AppXLauncher64.exe，放入和 FontMod64.dll 同一文件夹中。</p>
</li>
<li><p>在同一文件夹中新建 <code>AppXLauncher.json</code></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	"PackageFamilyName": "TelegramMessengerLLP.TelegramDesktop_t4vj0pshhgkwm",</span><br><span class="line">	"AppId": "Telegram.TelegramDesktop.Store",</span><br><span class="line">	"InjectDll": "FontMod64.dll",</span><br><span class="line">	"Persistent": true,</span><br><span class="line">	"KillRunning": false</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>在同一文件夹中新建 <code>FontMod.yaml</code>，里面写上要替换的字体的配置。以下是我的配置，仅供参考：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">style: &amp;style</span><br><span class="line"># Remove '#' to override font style</span><br><span class="line">#  size: 0</span><br><span class="line">#  width: 0</span><br><span class="line">#  weight: 0</span><br><span class="line">#  italic: false</span><br><span class="line">#  underLine: false</span><br><span class="line">#  strikeOut: false</span><br><span class="line">#  charSet: 0</span><br><span class="line">#  outPrecision: 0</span><br><span class="line">#  clipPrecision: 0</span><br><span class="line">#  quality: 0</span><br><span class="line">#  pitchAndFamily: 0</span><br><span class="line"></span><br><span class="line">fonts:</span><br><span class="line">  microsoft yahei: &amp;zh-cn-font # Chinese (Simplified) fallback font</span><br><span class="line">    # replace: 更纱黑体 SC</span><br><span class="line">    # replace: 文泉驿微米黑</span><br><span class="line">    replace: Sarasa UI SC</span><br><span class="line">    &lt;&lt;: *style</span><br><span class="line">  microsoft jhenghei ui: # Chinese (Traditional) fallback font</span><br><span class="line">    replace: Sarasa Gothic TC</span><br><span class="line">    &lt;&lt;: *style</span><br><span class="line">  # PMingLiU: # Chinese (Traditional) fallback font</span><br><span class="line">  #   replace: Microsoft JhengHei UI</span><br><span class="line">  #   &lt;&lt;: *style</span><br><span class="line">  # MS UI Gothic: # Japanese fallback font</span><br><span class="line">  #   replace: Yu Gothic UI</span><br><span class="line">  #   &lt;&lt;: *style</span><br><span class="line">  # Gulim: # Korean fallback font</span><br><span class="line">  #   replace: 맑은 고딕</span><br><span class="line">  #   &lt;&lt;: *style</span><br><span class="line">  # Open Sans: </span><br><span class="line">  #    replace: HelveticaNeue</span><br><span class="line">  Arial: &amp;monospace-font </span><br><span class="line">     replace: CascadiaCode Nerd Font</span><br><span class="line">  &lt;&lt;: *style</span><br><span class="line">  Consolas: *monospace-font # English Monospace default font</span><br><span class="line">  SimSun: *zh-cn-font # Chinese Monospace fallback font</span><br><span class="line">  Segoe UI: *zh-cn-font</span><br><span class="line">  Segoe UI Semibold: &amp;zh-cn-bold</span><br><span class="line">    replace: 更纱黑体 SC Bold</span><br><span class="line">  DAOpenSansRegular: *zh-cn-font</span><br><span class="line">  DAOpenSansRegularItalic: *zh-cn-font</span><br><span class="line">  DAOpenSansSemiboldItalic: *zh-cn-font</span><br><span class="line">  DAOpenSansSemibold: *zh-cn-bold</span><br><span class="line"></span><br><span class="line">fixGSOFont: true # true is to use system UI font</span><br><span class="line">#fixGSOFont: *zh-cn-font # Or replace with user defined font</span><br><span class="line">debug: false</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>安装配置中的字体。旧版本中可以把字体放到同一文件夹下的 fonts 子文件夹下，但现在不行了，必须要安装。如果少哪个字体没装的话，telegram 的字体就会使用默认的等宽字体（宋体），非常难看。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>fonts</tag>
        <tag>telegram</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 工作中常用的性能检查 - 结果导出 - 文本处理</title>
    <url>/linux-gong-zuo-zhong-chang-yong-de-xing-neng-jian-cha-jie-guo-dao-chu-wen-ben-chu-li/</url>
    <content><![CDATA[<p>emmm。。。我这 18 线城市的运维，经常得对服务器进行性能检查，并把结果进行导出。大多数时候服务器都是没啥问题的，所以时间都费在复制粘贴上了，如果把那些持续运行的命令结果直接导出，然后全部合并在一起以格式化输出不就省事了？</p>
<h3 id="cpu-性能检查——top-与-ps-之争！"><a href="#cpu-性能检查——top-与-ps-之争！" class="headerlink" title="cpu 性能检查——top 与 ps 之争！"></a>cpu 性能检查——top 与 ps 之争！</h3><p>top 可以看 cpu 占用率这个大家应该都知道。但 ps 其实也可以看。因为当我们运行 <code>ps aux</code> 的时候：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220103215039.png"><br>这一排 cpu 占用率实际上是可以利用起来的：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ps aux|sed 1d|awk '{a+=$3}END{print a"%"}'</span><br></pre></td></tr></tbody></table></figure>

<p>这一行命令下去，就可以直接得出当时的 cpu 占用率了，相比从茫茫的 top 运行屏幕中把结果摘出来，是不是方便了不少？</p>
<p>且慢！</p>
<p>实际上，当你用多了这个命令，不难发现几个奇怪的地方：</p>
<ol>
<li>当负载起来以后，如果恰好你的机器是多核心的话。。。就会发现，出来的数字怎么就大于 100% 了呢？</li>
<li>负载下去以后，发现出来的数字并没有马上降下去，但是多敲几次命令的话，会发现越到后面数字越低，但很长一段时间都不会是低负载时的哪个占用率，奇怪，此时 cpu 占用率应该已经接近 0 了呀？</li>
<li>发现 root 下运行出来的结果和非 root 下运行的结果居然差了 10 个百分点？</li>
</ol>
<p>实际上，这几个问题的答案，就能充分反映出 ps 和 top 两个命令之间的机制差异：</p>
<ul>
<li><p>top 的 cpu 最大值是 100，而 ps 统计出来的 cpu 最大值上限是 100xCPU 核心总数的值。假设一台机器有两个 cpu，每个 cpu 有四个核心，那么 <code>ps aux</code> 统计出的 cpu 最大值上限就是 100*2*4=800；</p>
</li>
<li><p>参考<a href="https://superuser.com/questions/643331/ps-and-top-give-different-cpu-usage">linux - ps and top give different CPU usage - Super User</a></p>
<blockquote>
<p>from man top:</p>
<blockquote>
<ol>
<li>%CPU – CPU Usage The task’s share of the elapsed <strong>CPU time since the last screen update</strong>, expressed as a percentage of total CPU time.</li>
</ol>
</blockquote>
<p>from man ps:</p>
<blockquote>
<p>CPU usage is currently expressed as the percentage of <strong>time spent running during the entire lifetime of a process</strong>.</p>
</blockquote>
</blockquote>
<p>翻译成人话就是：top 的结果更即时，严格反映出当前时间点的 cpu 占用；而 ps 中进程的 cpu 占用率是当前进程全生命时间占用率的平均值。</p>
</li>
<li><p>在非 root 账户下 ps 输出的结果不包含 root 状态下运行进程的 cpu 占用。</p>
</li>
</ul>
<p>所以嘛，平时对服务器的检查究竟用哪个比较合适呢？</p>
<p>思来想去，我觉得其实都可以。虽然 ps 不包含 root 下的进程，但企业用的服务器为了安全着想，本就不会在 root 下运行高占用的进程；而平时 cpu 占用率检查的意义，一个是查看当前时间点的 cpu 占用率是否过高（突发负载），更重要的目的，或许还是判断当前 cpu 是否能胜任所负担的工作（平均负载）。这么说，两个命令应该配合着使用才对呀，不过，检查要填的单子里面只用填一个 cpu 占用率数据，所以嘛。。。</p>
<p>对于 ps，只要把上面的命令处理一下，除一下核心数就好了：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ps aux|sed 1d|awk -v cpu=$(cat /proc/cpuinfo| grep "processor"| wc -l) '{a+=$3/cpu}END{print a"%"}'</span><br></pre></td></tr></tbody></table></figure>

<p>对于 top，也可以通过 <code>-n1</code> 只运行 1s，然后通过 sed 和 awk 摘出里面的 cpu 占用数据：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">top -n1|sed -n '3p'|awk '{print $2}'</span><br></pre></td></tr></tbody></table></figure>

<h3 id="拼接结果：大显神通的-paste-和拦路虎-ansi-字符"><a href="#拼接结果：大显神通的-paste-和拦路虎-ansi-字符" class="headerlink" title="拼接结果：大显神通的 paste 和拦路虎 ansi 字符"></a>拼接结果：大显神通的 paste 和拦路虎 ansi 字符</h3><p>几个命令之间当然也可以通过 <code>&amp;&amp;</code> 来拼接起来，只不过输出不在同一行；而用 paste 的话，不仅输出在同一行，而且命令与命令之间的输出中间会自动插入一个制表符，粘贴到表格里面刚好就会变成两格，简直就是懒人的福音！</p>
<p>但是嘛。。。我这边还有一个需求，那就是把 top 第一行后面这些带时间的内容输出出来，也就是这串：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220104012407.png"></p>
<p>按理来说，配合 sed 就可以了，顺便剪掉前面的 top：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">top -n1|sed -n '1p'|sed 's/top - //g'  </span><br></pre></td></tr></tbody></table></figure>

<p>然后我发现，运行完以后会莫名其妙的做一次清屏。这样复制粘贴就不方便了。</p>
<p>原因也挺简单的。里面混有 ansi 字符，输出出来：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">top -n1|sed -n '1p'|sed 's/top - //g'  &gt; ansi.txt</span><br></pre></td></tr></tbody></table></figure>

<p>用 vim 看一眼：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220103135642.png"></p>
<p>拖下来再用 vscode 看一眼：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220103135359.png"></p>
<p>好家伙显示出来的效果都不同。。。</p>
<p>不过原理都差不多，vscode 这里的  ESC 就等效于上面 vim 的 <code>^[</code>，同时还等效于<code>\x1B</code>。但使用 sed 命令去处理的话，只有 <code>\x1B</code> 能成功匹配到这些个 ensi 符号。所以我们可以先把这些符号给转成可见性比较好的英文字符，参考：<a href="https://blog.csdn.net/Fu_Tianshu/article/details/80589289">用 sed 去除文件中的 ASCII 控制字符乱码_Fu_Tianshu的博客-CSDN博客</a></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">top -n1|sed -n '1p'|sed 's/top - //g'|sed -r  -e 's/\x00/[NUL]/g' -e 's/\x01/[SOH]/g' -e 's/\x02/[STX]/g' -e 's/\x03/[ETX]/g' -e 's/\x04/[EOT]/g' -e 's/\x05/[ENQ]/g' -e 's/\x06/[ACK]/g' -e 's/\x07/[BEL]/g' -e 's/\x08/[BS]/g' -e 's/\x0A/[LF]/g' -e 's/\x0B/[VT]/g' -e 's/\x0C/[FF]/g' -e 's/\x0D/[CR]/g' -e 's/\x0E/[SO]/g' -e 's/\x0F/[SI]/g' -e 's/\x10/[DLE]/g' -e 's/\x11/[DC1]/g' -e 's/\x12/[DC2]/g' -e 's/\x13/[DC3]/g' -e 's/\x14/[DC4]/g' -e 's/\x15/[NAK]/g' -e 's/\x16/[SYN]/g' -e 's/\x17/[ETB]/g' -e 's/\x18/[CAN]/g' -e 's/\x19/[EM]/g' -e 's/\x1A/[SUB]/g' -e 's/\x1B/[ESC]/g' -e 's/\x1C/[FS]/g' -e 's/\x1D/[GS]/g' -e 's/\x1E/[RS]/g' -e 's/\x1F/[US]/g' -e 's/\x7F/[DEL]/g'|</span><br></pre></td></tr></tbody></table></figure>

<p>认真去看的话，要提取的字符串前后都有乱七八糟的 ansi 字符和搭配生效的 ansi 命令：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">^[[?25l^[[?1c^[[H^[[J^[[m^Otop - 02:37:10 up 132 days, 19:05,  1 user,  load average: 0.00, 0.03, 0.00^[[m^O^[[39;49m^[[m^O^[[39;49m^[[K</span><br></pre></td></tr></tbody></table></figure>

<p>我稍微了解了一下，上面这些 ansi 命令的意思：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">^[[?25l光标不可见</span><br><span class="line">^[[?1c 在^[[?25l后执行确保在执行序列时不会有光标闪烁Linux 控制台</span><br><span class="line">^[[H回到页首</span><br><span class="line">^[[J从光标擦除到页尾</span><br><span class="line">^[[m^O重置字体颜色</span><br><span class="line">^[[39;49m使用默认颜色  </span><br></pre></td></tr></tbody></table></figure>

<p>其中其决定作用的自然是那个<code>^[[H</code>和<code>^[[J</code>了，就是这两个联合起来才让 top 命令达成了清屏的效果。现在就把他们都干掉！前面，用长长的那一串语句做转换后，要提取的字符串前后的 ansi 字符组变成了下面这样的两串东西：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[ESC][?25l[ESC][?1c[ESC][H[ESC][J[ESC][m[SI]</span><br><span class="line">[ESC][m[SI][ESC][39;49m[ESC][m[SI][ESC][39;49m[ESC][K</span><br></pre></td></tr></tbody></table></figure>

<p>复制到 vscode 后，按 ctrl+H，vscode 就能自动的把这两串东西转义成正则表达式形式，真方便。整理一下，放到上面用过的表达式中做处理：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">top -n1|sed -n '1p'|sed 's/top - //g'|sed -r  -e 's/\x00/[NUL]/g' -e 's/\x01/[SOH]/g' -e 's/\x02/[STX]/g' -e 's/\x03/[ETX]/g' -e 's/\x04/[EOT]/g' -e 's/\x05/[ENQ]/g' -e 's/\x06/[ACK]/g' -e 's/\x07/[BEL]/g' -e 's/\x08/[BS]/g' -e 's/\x0A/[LF]/g' -e 's/\x0B/[VT]/g' -e 's/\x0C/[FF]/g' -e 's/\x0D/[CR]/g' -e 's/\x0E/[SO]/g' -e 's/\x0F/[SI]/g' -e 's/\x10/[DLE]/g' -e 's/\x11/[DC1]/g' -e 's/\x12/[DC2]/g' -e 's/\x13/[DC3]/g' -e 's/\x14/[DC4]/g' -e 's/\x15/[NAK]/g' -e 's/\x16/[SYN]/g' -e 's/\x17/[ETB]/g' -e 's/\x18/[CAN]/g' -e 's/\x19/[EM]/g' -e 's/\x1A/[SUB]/g' -e 's/\x1B/[ESC]/g' -e 's/\x1C/[FS]/g' -e 's/\x1D/[GS]/g' -e 's/\x1E/[RS]/g' -e 's/\x1F/[US]/g' -e 's/\x7F/[DEL]/g'|sed -r -e 's/\[ESC\]\[\?25l\[ESC\]\[\?1c\[ESC\]\[H\[ESC\]\[J\[ESC\]\[m\[SI\]//g' -e 's/\[ESC\]\[m\[SI\]\[ESC\]\[39;49m\[ESC\]\[m\[[SI\]\[ESC\]\[39;49m\[ESC\]\[K//g'  </span><br></pre></td></tr></tbody></table></figure>

<p>这样出来的结果就不会有问题了。。。</p>
<hr>
<p>但是，但是！用 paste 去把这个语句和上面测量 cpu 占用率的两个语句组起来，就会莫名其妙的卡住，原因不明。。。</p>
<p>但解决方法也很简单，这时我才发现 top 里有个参数叫 -b，可以自动把这些 ansi 字符干掉。。。</p>
<p>所以我绕了一大圈是为了什么呢？？？？？</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">paste &lt;(top -b -n1|sed -n '3p'|awk '{print $2}'|sed 's/us//g') &lt;(top -b -n1|sed -n '1p'|sed 's/top - //g') </span><br></pre></td></tr></tbody></table></figure>





]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>top</tag>
        <tag>ps(command)</tag>
        <tag>paste</tag>
      </tags>
  </entry>
  <entry>
    <title>换用 zplug</title>
    <url>/huan-yong-zplug/</url>
    <content><![CDATA[<p>最近要搬几个服务器，想把迁移服务器时配置环境的这些步骤搞简单一点。自从用上了 zsh 和各种插件后，不装这玩意就浑身难受，但配置 zsh 的各种插件又相当费事。之前了解过 zplug 这玩意，今天就研究一下怎么切上去。</p>
<p>参考文章：<a href="https://www.jkg.tw/p2965/">zsh + zplug 快速部屬你的 Shell 工作環境 | jkgtw’s blog </a></p>
<p>之前配置 zsh，参考 <a href="https://zbttl.github.io/zhuo-mian-ban-ubuntu-debian-cai-keng/">桌面版 ubuntu &amp; debian 踩坑 | Bao’s 备忘录</a>，大概步骤是：</p>
<ol>
<li>安装 zsh </li>
<li>切换默认终端为 zsh </li>
<li>安装 oh-my-zsh </li>
<li>安装 p10k </li>
<li>配置 oh-my-zsh 和安装相应插件（这一步要 git clone 各种插件，挺麻烦的）</li>
<li>配置 p10k</li>
<li>一些 bug 的解决（比如字体不能显示，小键盘不能用等等）</li>
<li>导入历史记录 </li>
</ol>
<p>使用 zplug 可以精简掉其中的 3-6 步，之后只要装好 zplug 后，把 <code>.zshrc</code> 和 <code>.p10k.zsh</code> 考过来，用 source 或者重启一下就能自动搞定了。</p>
<h2 id="具体的说："><a href="#具体的说：" class="headerlink" title="具体的说："></a>具体的说：</h2><ol>
<li><p>安装 zplug</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh | zsh</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>修改原有的 <code>.zshrc</code> 文件</p>
<p>在 zshrc 最上面加上一行 source 启用 zplug</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">source ~/.zplug/init.zsh</span><br></pre></td></tr></tbody></table></figure>

<p>在 zshrc 最下面加上以下代码，作用是每次重载 zsh 检查 <code>.zshrc</code> 相关代码中是否有新的插件需要安装。</p>
 <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Install plugins if there are plugins that have not been installed</span></span><br><span class="line"><span class="keyword">if</span> ! zplug check --verbose; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"Install? [y/N]: "</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">read</span> -q; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span>; zplug install</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Then, source plugins and add commands to $PATH</span></span><br><span class="line">zplug load</span><br></pre></td></tr></tbody></table></figure>

<p> 剩下的这几行代码，写在中间。</p>
<p> 插件声明语句，就是上面说的相关代码，格式类似这样：</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">zplug "romkatv/powerlevel10k", as:theme, depth:1</span><br></pre></td></tr></tbody></table></figure>

<p> 双引号中的内容就是 <code>git clone</code> 那些插件时的插件的作者和库名，都在 url 的后半段里面。像我之前装的那些插件，大概就需要写这几行：</p>
 <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#zplug "romkatv/powerlevel10k", as:theme, depth:1</span></span><br><span class="line">zplug romkatv/powerlevel10k, as:theme, depth:1</span><br><span class="line">zplug <span class="string">'zplug/zplug'</span>, hook-build:<span class="string">'zplug --self-manage'</span></span><br><span class="line">zplug <span class="string">"zsh-users/zsh-completions"</span></span><br><span class="line">zplug <span class="string">"zsh-users/zsh-history-substring-search"</span></span><br><span class="line">zplug <span class="string">"zsh-users/zsh-autosuggestions"</span></span><br><span class="line">zplug <span class="string">"wting/autojump"</span></span><br></pre></td></tr></tbody></table></figure>

<p> <strong>（21.8.29 更新）</strong> 原来的 <code>zplug "romkatv/powerlevel10k", as:theme, depth:1</code> 这行容易在 zsh 启动时报警告，大概是：</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Change the way Powerlevel10k is loaded from ~/.zshrc</span><br></pre></td></tr></tbody></table></figure>

<p> 根据提示查了查<a href="https://github.com/romkatv/powerlevel10k/blob/master/README.md#zplugin">文档</a>，换成了没有冒号的这个命令。</p>
<p> 由于不需要单独安装 oh-my-zsh 了，相关代码注释掉</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#export ZSH="/root/.oh-my-zsh"</span><br><span class="line"></span><br><span class="line">#source $ZSH/oh-my-zsh.sh</span><br></pre></td></tr></tbody></table></figure>

<p> 同样，因为没有 oh-my-zsh 了，我们得声明一段代码，启用历史记录功能：</p>
 <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># History config</span></span><br><span class="line">HISTSIZE=10000</span><br><span class="line">SAVEHIST=10000</span><br><span class="line">HISTFILE=~/.zsh_history</span><br></pre></td></tr></tbody></table></figure>

<p> 最后重载 zsh 即可。</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h2 id="注意-acme-sh"><a href="#注意-acme-sh" class="headerlink" title="注意 acme.sh"></a>注意 acme.sh</h2><p>acme.sh 安装时会写入变量到 .zshrc 中。如果有 zplug，会写下如下两条命令：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">zplug load. "/root/.acme.sh/acme.sh.env"</span><br><span class="line">. "/root/.acme.sh/acme.sh.env"</span><br></pre></td></tr></tbody></table></figure>

<p>但这么写每次打开的时候都会报警。需要手动改成</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">zplug load</span><br><span class="line">. "/root/.acme.sh/acme.sh.env"</span><br></pre></td></tr></tbody></table></figure>

<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>最后推荐两篇文章，可以参考里面的内容，添加更多有趣的插件（不过加载时间也会因此变慢，自己抉择）</p>
<ul>
<li><a href="https://macosdoc.googo.cc/enivironment/zhong-jian-kai-fa-huan-jing">iTerm2 + zsh + oh-my-zsh - macOS Setup</a></li>
<li><a href="https://guojing.io/posts/zplug/">zplug 武装 zsh · 郭靖 I/O</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>萌新的 linux qt 程序编译实战</title>
    <url>/meng-xin-de-linux-qt-cheng-xu-bian-yi-shi-zhan/</url>
    <content><![CDATA[<p>事情的来源，是两个月前和朋友讨论啥软件界面又好看「学术网站」又快界面又漂亮。clash 虽然漂亮，但支持的协议少了点。</p>
<p>这时候我就提了一嘴「qv2ray 新界面呀，不是挺漂亮的吗，只是要编译，又不麻烦」</p>
<p>前半句是对的，确实挺漂亮的：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/QQ%E5%9B%BE%E7%89%8720210517003751.jpg"></p>
<p>但为了圆后半句，我花了两个月时间。。。不要小看编译啊 kora！</p>
<p>环境：ubuntu 20.04 桌面端，否则没有 opengl 支持，没法试还报错</p>
<h2 id="标准编译步骤——借助-ubuntu-内置的-apt-安装依赖并直接编译"><a href="#标准编译步骤——借助-ubuntu-内置的-apt-安装依赖并直接编译" class="headerlink" title="标准编译步骤——借助 ubuntu 内置的 apt 安装依赖并直接编译"></a>标准编译步骤——借助 ubuntu 内置的 apt 安装依赖并直接编译</h2><h3 id="初步安装依赖"><a href="#初步安装依赖" class="headerlink" title="初步安装依赖"></a>初步安装依赖</h3><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install git openssl -y</span><br><span class="line">#编译所需工具</span><br><span class="line">sudo apt install autoconf automake libtool build-essential -y</span><br><span class="line"># qv2ray 和 grpc 编译所需的 ssl 库</span><br><span class="line">sudo apt install libssl-dev -y</span><br></pre></td></tr></tbody></table></figure>

<h3 id="安装-qt5（通过官方在线安装包）"><a href="#安装-qt5（通过官方在线安装包）" class="headerlink" title="安装 qt5（通过官方在线安装包）"></a>安装 qt5（通过官方在线安装包）</h3><p>参考文章：<a href="https://forum.qt.io/topic/72009/how-do-i-move-qt-to-usr-local-share-qt">How do I move ~/Qt to /usr/local/share/Qt? | Qt Forum</a></p>
<p>需要保持网络通畅！</p>
<p>下载：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">wget http://qt.mirror.constant.com/archive/online_installers/4.1/qt-unified-linux-x86_64-4.1.0-online.run</span><br><span class="line">chmod +x ./qt-unified-linux-x86_64-4.1.0-online.run</span><br><span class="line">./qt-unified-linux-x86_64-4.1.0-online.run</span><br></pre></td></tr></tbody></table></figure>

<p>根据提示，注册并安装 qt 5.12.5 。我就直接装在默认路径，<code>/home/zbttl/xxx</code> 下了。另外程序默认会安装 Ninja 和 cmake，这两个后面都会用得上。</p>
<p>将 qt 和 cmake 路径加到 root 和在进行操作的用户的环境变量中（后续如果不装到系统目录中，也可以省去吧路径加到的 root 下的命令，即第一条命令）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">echo "export PATH=/home/zbttl/Qt/5.15.2/gcc_64/bin:/home/zbttl/Qt/Tools/CMake/bin/:/home/zbttl/Qt/Tools/Ninja/:$PATH"|sudo tee /etc/bash.bashrc</span><br><span class="line"></span><br><span class="line">echo "export PATH=\$HOME/Qt/5.15.2/gcc_64/bin:\$HOME/Qt/Tools/CMake/bin/:\$HOME/Qt/Tools/Ninja/:\$PATH" &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></tbody></table></figure>

<p>测试：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cmake -version</span><br><span class="line">qmake -v</span><br></pre></td></tr></tbody></table></figure>

<p>都有输出的话则正常。</p>
<p>还需要添加 qt 的动态链接库：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cd /etc/ld.so.conf.d</span><br><span class="line">echo -e "/home/zbttl/Qt/5.15.2/gcc_64/lib\n/home/zbttl/Qt/Tools/QtCreator/lib/qtcreator"|sudo tee qt-5.15.2-x86_64.conf</span><br><span class="line">sudo ldconfig</span><br><span class="line">cd</span><br></pre></td></tr></tbody></table></figure>

<h3 id="安装-grpc、protobuf-、opengl-库"><a href="#安装-grpc、protobuf-、opengl-库" class="headerlink" title="安装  grpc、protobuf 、opengl 库"></a>安装  grpc、protobuf 、opengl 库</h3><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get install libprotobuf-dev protobuf-compiler libgrpc-dev libgrpc++-dev protobuf-compiler-grpc -y</span><br><span class="line">sudo apt install mesa-common-dev -y</span><br></pre></td></tr></tbody></table></figure>

<h3 id="编译-qv2ray-发行版"><a href="#编译-qv2ray-发行版" class="headerlink" title="编译 qv2ray 发行版"></a>编译 qv2ray 发行版</h3><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">git clone https://github.com/Qv2ray/Qv2ray.git --recursive</span><br><span class="line">cd Qv2ray</span><br><span class="line">mkdir build; cd build;</span><br><span class="line">cmake -DCMAKE_INSTALL_PREFIX=/home/zbttl/q2 -DCMAKE_BUILD_TYPE=Release -GNinja ..</span><br><span class="line">#如果没装Ninja，也可以不用Ninja，Ninja编译时是显示编译到多少个包，普通编译则是显示百分比</span><br><span class="line">#cmake -DCMAKE_INSTALL_PREFIX=/home/zbttl/q2 -DCMAKE_BUILD_TYPE=Release ..</span><br><span class="line">cmake --build . --parallel $(nproc)</span><br><span class="line">#装到系统路径中的话，要配合 sudo</span><br><span class="line">#sudo -s</span><br><span class="line">cmake --install .</span><br></pre></td></tr></tbody></table></figure>

<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cd /home/zbttl/q2/bin/</span><br><span class="line">./qv2ray</span><br></pre></td></tr></tbody></table></figure>

<p>有可能会报错哦。需要安装 xcb 库。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install libxcb-xinerama0 -y</span><br></pre></td></tr></tbody></table></figure>

<h2 id="未曾设想的道路（雾）"><a href="#未曾设想的道路（雾）" class="headerlink" title="未曾设想的道路（雾）"></a>未曾设想的道路（雾）</h2><h3 id="换用-qt6-编译-dev-版"><a href="#换用-qt6-编译-dev-版" class="headerlink" title="换用 qt6 编译 dev 版"></a>换用 qt6 编译 dev 版</h3><p>新界面只有 dev 版支持。编译 dev 版则需要安装 qt6。</p>
<p>需要多装一个库：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get install libcurl4-openssl-dev -y</span><br></pre></td></tr></tbody></table></figure>

<p>和装 qt5 的步骤接近，除了通过安装程序安装时选择 qt 6.1.2 外，还有编译的参数要做出修改：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">git clone -b dev-v3 https://github.com/Qv2ray/Qv2ray.git --recursive</span><br><span class="line">cd Qv2ray</span><br><span class="line">mkdir build; cd build;</span><br><span class="line">#如果是编译dev版可省略-DQV2RAY_QT6=ON参数，编译发行版必须加入（不过也有可能加上都编译不了，所以编译发行版建议用qt5）</span><br><span class="line">cmake -DCMAKE_INSTALL_PREFIX=/home/zbttl/q2 -DCMAKE_BUILD_TYPE=Release -GNinja -DQV2RAY_QT6=ON ..</span><br><span class="line">cmake --build . --parallel $(nproc)</span><br></pre></td></tr></tbody></table></figure>

<hr>
<p>但到这里，我还有一个小目标：</p>
<p>编都编了，干脆能手动编译的都手动编译吧！apt 装的版本虽然能用，但确实有点旧了。</p>
<p>大概有四样东西可以手动编译，分别是 openssl，grpc+protobuf、cmake 和 qt，这几样东西更新快且编译新软件的时候经常对他们有版本号上的需求。严格意义说，opengl 和 ninja 也是能手工编译的，但这两样东西似乎比较稳定，没啥必要手工编译。</p>
<h3 id="手工编译-openssl"><a href="#手工编译-openssl" class="headerlink" title="手工编译 openssl"></a>手工编译 openssl</h3><p>可以替换上面用到的 <code>libcurl4-openssl-dev</code>、<code>libssl-dev</code> 两个库。（但不要去卸载 openssl，否则使用 wget 等命令时就会报警证书错误。不敲 <code>sudo rm -r /usr/local/ssl/certs&amp;&amp;sudo ln -s /etc/ssl/certs /usr/local/ssl</code> 这个命令也会造成证书报警，但如果卸了 openssl，敲了这个命令也没用。）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt remove libcurl4-openssl-dev libssl-dev -y</span><br></pre></td></tr></tbody></table></figure>

<p>下载的版本是 1.1.1f，现在应该还有更新的版本，但别用 3 开头的 alpha 版。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">wget https://www.openssl.org/source/openssl-1.1.1i.tar.gz --no-check-certificate</span><br><span class="line">tar xzvf openssl-1.1.1i.tar.gz </span><br><span class="line">cd openssl*/</span><br><span class="line">./config</span><br><span class="line">make</span><br><span class="line">make test</span><br><span class="line">sudo make install</span><br><span class="line">sudo ldconfig</span><br><span class="line">sudo rm -r /usr/local/ssl/certs&amp;&amp;sudo ln -s /etc/ssl/certs /usr/local/ssl</span><br><span class="line">cd</span><br></pre></td></tr></tbody></table></figure>

<p>安装完确认一下</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">openssl version</span><br><span class="line"></span><br><span class="line">pkg-config --libs openssl</span><br></pre></td></tr></tbody></table></figure>

<p>应有类似输出：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">OpenSSL 1.1.1f  31 Mar 2020</span><br><span class="line"></span><br><span class="line">-L/usr/local/lib -lssl -lcrypto</span><br></pre></td></tr></tbody></table></figure>

<h3 id="手动安装-cmake"><a href="#手动安装-cmake" class="headerlink" title="手动安装 cmake"></a>手动安装 cmake</h3><p>qt6 必须要 cmake 3.16 以后版本才能编译，好死不死 apt 里带的版本是 3.15。之前用了 qt 官方的在线安装程序，安装的是 3.19，这才勉强能用。新版 grpc 也强制要求使用 cmake 而不是 make 了，本来想和 qt 编译写在一起，现在把这个步骤提前到这里。</p>
<p>cmake 官方直接给了最新的安装脚本，我们直接用就好了，懒得编译了。</p>
<p>可以到 <code>https://github.com/Kitware/CMake/releases</code> 获取最新 release 版本号：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#参考https://sobaigu.com/shell-get-lastest-version-from-github.html命令行直接获取版本号</span><br><span class="line">cmake_new_ver=$(wget -qO- -t1 -T2 "https://api.github.com/repos/Kitware/CMake/releases/latest" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g'|sed 's/[a-z]*//g')</span><br><span class="line">#或者是 cmake_new_ver=$(wget -qO- -t1 -T2 "https://api.github.com/repos/Kitware/CMake/releases/latest" | jq -r '.tag_name'|sed 's/[a-z]*//g')</span><br></pre></td></tr></tbody></table></figure>

<p>下载运行</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt remove cmake -y</span><br><span class="line">wget https://github.com/Kitware/CMake/releases/download/v${cmake_new_ver}/cmake-${cmake_new_ver}-linux-x86_64.sh</span><br><span class="line">chmod +x cmake-${cmake_new_ver}-linux-x86_64.sh</span><br><span class="line">sudo bash cmake-${cmake_new_ver}-linux-x86_64.sh --prefix=/usr/ --exclude-subdir</span><br></pre></td></tr></tbody></table></figure>

<p>如果在使用 ubuntu 且不在意空间的话，也可以通过 snap 安装：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo snap install cmake</span><br></pre></td></tr></tbody></table></figure>

<h3 id="手工编译-grpc-和-protobuf"><a href="#手工编译-grpc-和-protobuf" class="headerlink" title="手工编译 grpc 和 protobuf"></a>手工编译 grpc 和 protobuf</h3><p>参考文章</p>
<p>官方文档：</p>
<ul>
<li><a href="https://github.com/grpc/grpc/blob/master/BUILDING.md">grpc/BUILDING.md at master · grpc/grpc</a></li>
<li><a href="https://grpc.io/docs/languages/cpp/quickstart/">Quick start | C++ | gRPC</a></li>
</ul>
<p>其他使用者的使用心得：</p>
<ul>
<li><a href="https://github.com/grpc/grpc/blob/70ce9e21df4f6a18fbcfbb2103d1e89987125f4a/test/distrib/cpp/run_distrib_test_cmake.sh">grpc 正确安装 grpc/run_distrib_test_cmake.sh at 70ce9e21df4f6a18fbcfbb2103d1e89987125f4a · grpc/grpc</a></li>
<li><a href="https://blog.csdn.net/u012182853/article/details/106243399/">ubuntu16.04 grpc安装_u012182853的博客-CSDN博客_cares安装</a></li>
<li>多版本 grpc 安装、国内镜像、需要编译出的 c 版本组件列出 ：<a href="https://www.cnblogs.com/52fhy/p/11110704.html">gRPC入坑记 - 飞鸿影 - 博客园</a></li>
<li><a href="https://www.jianshu.com/p/3479272f90bb">gRPC 和 protobuf 的安装 - 简书</a></li>
</ul>
<p>代替了 <code>libprotobuf-dev</code>、<code>protobuf-compiler</code>、<code>libgrpc-dev</code>、<code>libgrpc++-dev</code> 四个包。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt remove libprotobuf-dev protobuf-compiler libgrpc-dev libgrpc++-dev -y</span><br><span class="line">sudo apt install zlib1g-dev -y</span><br></pre></td></tr></tbody></table></figure>

<p>protobuf 包含在 grpc 中，所以一起拿下来就好了。cmake 这里，如果全部都手动编译的话，先参考下面手工安装 cmake 章节（因为 grpc 并不要求 cmake 版本，所以用 apt 版本的 cmake 也可以）。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">git clone --recurse-submodules https://github.com/grpc/grpc</span><br><span class="line"></span><br><span class="line">cd grpc/third_party/protobuf/</span><br><span class="line">git submodule update --init --recursive</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure --prefix=/usr</span><br><span class="line">make -j $(nproc)</span><br><span class="line">sudo make install </span><br><span class="line">sudo ldconfig</span><br><span class="line">cd ../..</span><br><span class="line">cd third_party/abseil-cpp</span><br><span class="line">cmake -DCMAKE_INSTALL_PREFIX=/usr \</span><br><span class="line">      -DCMAKE_POSITION_INDEPENDENT_CODE=TRUE</span><br><span class="line">make -j $(nproc)</span><br><span class="line">sudo make install</span><br><span class="line">cd ../..</span><br><span class="line">cmake -DgRPC_INSTALL=ON \</span><br><span class="line">      -DgRPC_BUILD_TESTS=OFF \</span><br><span class="line">      -DCMAKE_INSTALL_PREFIX=/usr \</span><br><span class="line">      -DgRPC_SSL_PROVIDER=package</span><br><span class="line">make -j $(nproc)</span><br><span class="line">sudo make install</span><br><span class="line">cd ..</span><br></pre></td></tr></tbody></table></figure>

<p>安装完确认一下</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">protoc --version</span><br></pre></td></tr></tbody></table></figure>

<p>应有输出</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">libprotoc 3.15.8</span><br></pre></td></tr></tbody></table></figure>

<p>另外还可以通过运行 example 测试，可参照参考文章 4。</p>
<h3 id="编译安装-qt6"><a href="#编译安装-qt6" class="headerlink" title="编译安装 qt6"></a>编译安装 qt6</h3><p>说实话，实操后感觉并不推荐大家去单独编译 qt，坑又多，空间占用又大（大概要 17g 左右），编译时间又久，纯属自己好奇，活该（</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210720004656.png"></p>
<p>先装依赖。由于没有 <code>cmake clean</code> 这种类似的命令，因为编译时间比较久，万一哪个依赖没装导致编译中出错，就得删掉整个文件夹重新编译，得不偿失，所以依赖尽量装全一点；除了上面文章提到的依赖（openssl、cmake，grpc 和 protobuf 可以不用），还装了以下这些：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install  libgl1-mesa-dev libxcb*-dev libfontconfig1-dev libxkbcommon-x11-dev python libgtk-3-dev mesa-common-dev libglu1-mesa-dev -y</span><br></pre></td></tr></tbody></table></figure>

<p>到 <a href="download.qt.io/archive/qt/">qt 官网</a>寻找对应版本的源码包，这里我下了 6.1.0 single 目录下的 zip 版本：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210719225612.png"></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">wget https://download.qt.io/archive/qt/6.1/6.1.0/single/qt-everywhere-src-6.1.0.zip</span><br><span class="line">sudo apt install unzip -y</span><br><span class="line">unzip qt-everywhere-src-6.1.0.zip </span><br><span class="line">cd qt-everywhere-src-6.1.0</span><br></pre></td></tr></tbody></table></figure>

<p>但这时如果直接 configure 会报错，因为下下来的 zip 文件里换行符似乎是 windows 格式的 CFLR。。。</p>
<p>应该下 tar.xz 包的，算了，下都下了，搞个工具转换一下吧：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install dos2unix -y</span><br><span class="line">find . -type f -print0 | xargs -0 dos2unix</span><br></pre></td></tr></tbody></table></figure>

<p>编译安装：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">./configure -openssl --prefix=/usr/local/qt6</span><br><span class="line">export PATH=/usr/local/qt6/bin:$PATH</span><br><span class="line">cmake --build . --parallel $(nproc)</span><br><span class="line">sudo cmake --install .</span><br><span class="line"></span><br><span class="line">echo "export PATH=/usr/local/qt6/bin:\$PATH" &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br><span class="line"></span><br><span class="line">cd /etc/ld.so.conf.d</span><br><span class="line">echo -e "/usr/local/qt6/lib"|sudo tee qt-6-x86_64.conf</span><br><span class="line">sudo ldconfig</span><br><span class="line">cd</span><br></pre></td></tr></tbody></table></figure>

<p>此时输入</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">qmake -v</span><br></pre></td></tr></tbody></table></figure>

<p>应有输出</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">QMake version 3.1</span><br><span class="line">Using Qt version 6.1.0 in /usr/local/qt6/lib</span><br></pre></td></tr></tbody></table></figure>

<h2 id="安全绳"><a href="#安全绳" class="headerlink" title="安全绳"></a>安全绳</h2><p>如果你看完了上面的内容才来到这里，有两种可能：</p>
<ol>
<li>你很幸运，一次过了；</li>
<li>你在云，根本没动手！</li>
</ol>
<p>保守估计有起码一半的人会在半路跳进坑里，那你就得在这里找绳子啦~</p>
<h3 id="关于-grpc-和-protobuf-的版本问题"><a href="#关于-grpc-和-protobuf-的版本问题" class="headerlink" title="关于 grpc 和 protobuf 的版本问题"></a>关于 grpc 和 protobuf 的版本问题</h3><p>估计有一部分人（包括我）之前接触过 go 版本的 grpc 和 protobuf，刚开始就会心生疑问：这俩玩意用 go 或者 pip 装不是更快吗？</p>
<p>很遗憾。。。并不行，必须用 c 版本的，还得编译出 lib 版本的库装到系统中才能正常使用。</p>
<h3 id="ssl-错误"><a href="#ssl-错误" class="headerlink" title="ssl 错误"></a>ssl 错误</h3><p>常见于 qv2ray 和 qt6 编译中出现。</p>
<p>qv2ray 编译中出现，一般是因为</p>
<ol>
<li>版本不匹配，比如自己编译了 openssl，又安装了 <code>libssl-dev</code></li>
<li>编译 grpc 的时候没有加参数 <code>-DgRPC_SSL_PROVIDER=package</code>，参见 <a href="https://github.com/Qv2ray/Qv2ray/discussions/1509">编译到最后一步报错 · Discussion #1509 · Qv2ray/Qv2ray</a></li>
</ol>
<p>在 qt 编译中出现，大概率是 <code>libssl-dev</code> 没装或者是 configure 后补装的。</p>
<p>另参考：</p>
<ul>
<li><a href="https://github.com/grpc/grpc/issues/15054">static link grpc lib not working · Issue #15054 · grpc/grpc</a></li>
</ul>
<h3 id="库错误"><a href="#库错误" class="headerlink" title="库错误"></a>库错误</h3><p>最大的坑。严格意义上上面的 ssl 错误也可以归类为库错误的范畴。</p>
<p>原因有：</p>
<ol>
<li>新编译软件的库没有放到 ldconfig 中；</li>
<li>没装库</li>
<li>库装晚了（常见于 qt 编译）</li>
<li>既用了 apt 装库也编译安装了一份，apt 装的优先被读取但编译其他东西的时候用的是编译安装的库因此运行时报错。 </li>
</ol>
<p>有那么几个检查方法：</p>
<ol>
<li><p>编译时报错。可用 <code>pkg-config</code> 命令，类似</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">pkg-config --libs openssl</span><br><span class="line">pkg-config --libs xcb</span><br></pre></td></tr></tbody></table></figure>

<p>有输出证明库正常安装，没有就是缺了。</p>
</li>
<li><p>运行时报错。比如常见的运行 qv2ray 二进制时报 xcb 相关的错误，可使用 ldd 命令：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ldd ./qv2ray</span><br></pre></td></tr></tbody></table></figure>

<p>如果有库没找到 / 没装，会有提示。 </p>
</li>
</ol>
<p>解决方法就是使用 <code>sudo find / -name </code> 命令搜查相关文件确定原因，然后根据原因对症下药：</p>
<ol>
<li>加入相关路径到 ldconfig（可参考上面 qt 安装和编译的文章）</li>
<li> apt 装库或者编译库</li>
<li> 装库后删除已编译部分重新编译，或者删除整个项目并重新拉取。</li>
<li>配置 LD_LIBRARY_PATH 变量。参考 qt 错误第一条。</li>
</ol>
<h3 id="多线程编译错误"><a href="#多线程编译错误" class="headerlink" title="多线程编译错误"></a>多线程编译错误</h3><p>在使用类似</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">make -j $(nproc)</span><br></pre></td></tr></tbody></table></figure>

<p>这类命令时，有可能出现各种编译错误问题，例如这个报错：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">lib error: relink 'libprotoc.la' with the above command before installing it</span><br></pre></td></tr></tbody></table></figure>

<p>解决方法有：</p>
<ol>
<li>如果可能，使用 <code>make clean</code> 命令后重新 make；没有 <code>make clean</code> 命令的话就只能重新拉取项目代码；</li>
<li>使用单线程或手动指定进程数而不是使用 <code>$(nproc)</code> 变量。注意，不要指定过大的线程数或者不指定线程数（比如直接使用 <code>make -j</code> 命令），错误的进程数可能消耗过大的内存导致系统卡死。</li>
</ol>
<h3 id="qt-错误"><a href="#qt-错误" class="headerlink" title="qt 错误"></a>qt 错误</h3><p>qt 有可能遭遇编译错误；也有可能编译安装成功后发现 qv2ray 运行不了，因为编译的 qt 组件不全。</p>
<h4 id="自编译-qt-后不慎在-apt-内安装了对应包导致报错"><a href="#自编译-qt-后不慎在-apt-内安装了对应包导致报错" class="headerlink" title="自编译 qt 后不慎在 apt 内安装了对应包导致报错"></a>自编译 qt 后不慎在 apt 内安装了对应包导致报错</h4><p>报错代码类似于 <code>version 'Qt_5.15' not found (required by xxxx)</code>。</p>
<p>解决方法是配置 <code>LD_LIBRARY_PATH</code>。让自编译的 qt 库优先被使用。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">echo "export LD_LIBRARY_PATH=/home/zbttl/Qt/5.15.2/gcc_64/lib"|sudo tee /etc/bash.bashrc</span><br><span class="line"></span><br><span class="line">echo "export LD_LIBRARY_PATH=\$HOME/Qt/5.15.2/gcc_64/lib" &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></tbody></table></figure>

<h4 id="防止-configure-时库不全"><a href="#防止-configure-时库不全" class="headerlink" title="防止 configure 时库不全"></a>防止 configure 时库不全</h4><p>运行 <code>./configure</code> 命令后，会在 qt 目录下生成一个 <code>CMakeCache.txt</code> 文件，里面就是本次 qt 编译所支持的功能。如果此时环境内依赖不全，就会导致组件缺失。这里放出我自己测试能够成功运行 qv2ray 的 <a href="https://1drv.ms/t/s!AoMoC9XTgpEsmc4Pi5-M08cQCoWicg?e=hpV7d9">qt6 编译组件清单文件</a>，出问题的话可以用 vscode 对一下。</p>
<p>另外使用 <code>./configure</code> 命令时，可以考虑带上 <code>-openssl</code> 和 <code>-opengl</code> 等参数（上面的教程例子中已经带上了 <code>-openssl</code>），如果找不到相应的库，就会直接报错告诉你差这些而不是各种一闪而过告诉你准备完成。</p>
<h4 id="已编译安装的-qt6-测试"><a href="#已编译安装的-qt6-测试" class="headerlink" title="已编译安装的 qt6 测试"></a>已编译安装的 qt6 测试</h4><p>可以写一个小测试项目，因为目前我遇到的安装后的 qt 方面的三个问题，分别对应 openssl、opengl、xcb 三个问题，而我编的这个小程序要是能够正常编译运行，就证明不存在那三个问题。</p>
<ol>
<li><p>新建一个文件夹，文件夹里面放上名为 <code>test.cpp</code> 的文件，写入以下内容：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#include &lt;QApplication&gt;</span><br><span class="line">#include &lt;QLabel&gt;</span><br><span class="line">#include &lt;QDebug&gt;</span><br><span class="line">#include &lt;QSslSocket&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc,char *argv[])</span><br><span class="line">{</span><br><span class="line">QApplication app(argc,argv);</span><br><span class="line">//qDebug()&lt;&lt;QSslSocket::sslLibraryBuildVersionString();</span><br><span class="line">QLabel *Label = new QLabel(QSslSocket::sslLibraryBuildVersionString());</span><br><span class="line">Label-&gt;show();</span><br><span class="line">return app.exec();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>生成 pro 文件</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">qmake -project</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>生成 stash 文件</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">qmake</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>修改 pro 文件，加入</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">QT       += widgets \</span><br><span class="line">            network</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>编译</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>运行</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">./test</span><br></pre></td></tr></tbody></table></figure>

<p>如果没问题就会弹出带有当前系统 openssl 版本号的弹窗。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210720010314.png"></p>
<p>后续如果想要显示其他内容，修改 <code>test.cpp</code> 内容并 <code>make</code> 就可以。不要执行 <code>qmake</code>，否则 pro 文件里这行就要重新写了。</p>
</li>
</ol>
<h4 id="运行后报错，查看具体信息"><a href="#运行后报错，查看具体信息" class="headerlink" title="运行后报错，查看具体信息"></a>运行后报错，查看具体信息</h4><p>输入</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">export QT_DEBUG_PLUGINS=1</span><br></pre></td></tr></tbody></table></figure>

<p>此时再运行 qt 程序就会弹出更详细的错误信息。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210720010945.png"></p>
<h3 id="qv2ray-官方部署参考文章和其他参考文章"><a href="#qv2ray-官方部署参考文章和其他参考文章" class="headerlink" title="qv2ray 官方部署参考文章和其他参考文章"></a>qv2ray 官方部署参考文章和其他参考文章</h3><ul>
<li>qv2ray 的 github actions 配置 <a href="https://github.com/Qv2ray/Qv2ray/blob/master/.github/workflows/build-qv2ray-cmake.yml">Qv2ray/build-qv2ray-cmake.yml at master · Qv2ray/Qv2ray</a></li>
<li>官方文档 <a href="https://qv2ray.net/lang/zh/hacking/manuallybuild.html">手动构建 Qv2ray 项目 | Qv2ray</a></li>
<li>超全的 qt 笔记：<a href="https://github.com/wangwenx190/notes/blob/master/qt.zh.cn.md">notes/qt.zh.cn.md at master · wangwenx190/notes</a></li>
</ul>
<hr>
<h2 id="二号坑"><a href="#二号坑" class="headerlink" title="二号坑"></a>二号坑</h2><p>总算是搞定了。。。可是等一下，新界面呢？</p>
<p>还有怎么没有中文，按下插件按钮时报错？（似乎只有 qt5 编译的发行版没有发生这种错误）</p>
<p>另外编译出来的东西怎么打包呢。。。</p>
<p>没有新界面是编译过程有问题吗？但后来我在 tg 群中发现，其实如果只是 ubuntu 下想要装新版本，qv2ray 官方搞了这个东西：<a href="https://qv2ray.net/debian-dev/">Qv2ray Debian Repository (Nightly) | debian-dev</a>，装这个就好了。。。。但这里面的新版本界面我也没调出来。</p>
<p>嘛，看来，还得折腾。</p>
<p><strong>（21.8.9 更新）</strong> 在项目的 <a href="https://github.com/Qv2ray/Qv2ray/actions">github action</a> 里面看到了各种不同版本的 qv2ray（所以是实际上，要下载最新版本的 qv2ray，应该去 action 里面找而不是到 release 里面）。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210811231413.png"></p>
<p>里面这些中，windows 专用的就 <code> Qv2ray Windows Installer</code>、<code>Qv2ray build matrix - cmake</code>、<code> Qv2ray build matrix - cmake</code>，只有最后一个是用 qt6 编译的新版；点开，果然有 qml 和 qwidget 两种，分布对应着新界面和旧界面；版本间还有 <code>RelWithDebInfo</code> 和 <code>release</code> 两种编译模式上的区别，把前者当做性能更好的 debug 版本就行了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210811232614.png"></p>
<p>不过嘛。。。。一个是，这几个包解压后，打开里面的 qv2ray 可执行文件会报错 openssl 不存在，需要先用 chocolatey 装一个；其次就是，qml 版本双击后一点反应也没有。最后翻了一下群记录，发现</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@master/img/20210808153749.png"></p>
<p>意思是。。。白干了？</p>
<p><strong>（21.8.17 更新）</strong></p>
<p>业 界 冥 灯</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210817225647.png"></p>
]]></content>
      <categories>
        <category>Complier</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>qt5</tag>
        <tag>qt6</tag>
        <tag>grpc</tag>
        <tag>openssl</tag>
        <tag>cmake</tag>
        <tag>Ninja</tag>
      </tags>
  </entry>
  <entry>
    <title>凑合用呗，还能砸了咋滴？————老旧的 ipad AIR2 搭配键鼠使用体验</title>
    <url>/cou-he-yong-bai-huan-neng-za-liao-zha-di-lao-jiu-de-ipad-air2-da-pei-jian-shu-shi-yong-ti-yan/</url>
    <content><![CDATA[<p>之前说过，我的笔记本这周送修了。</p>
<p>于是我这周就没有外出的笔记本用了。。。难不成我摸鱼的时候就只能呆呆的看几本杂志？我拒绝！</p>
<p>家里还有一台非常非常旧的酷比魔方 windows 平板（本来想说买了小新以后就刷成 linux 继续用，结果发现这玩意是 64 位的 bios 刷 32 位的系统，而 64 位系统又刷不上去，所以就搁置了），以及一台 ipad air2。我的需求很简单，就是能远程回家操作家里的电脑 + 中午休息的时候看看番。看着 windows 平板那寒酸的 720p 屏幕，以及回想起当年果果吹得天花乱坠的口号「你的下一台电脑，何必是电脑」，决定了，就带 ipad 出门吧！</p>
<p>虽然说。。。那个口号并不是喊给 AIR2 这种老古董用的。。。而且为了努力达成口号里的目标（作作样子），苹果钦（ying）定（dian）了两个左膀右臂——妙控键盘和 apple pencil。嗯。。。我怎么可能有这俩玩意嘛（贫穷的眼神）</p>
<p>不过我倒是有个蓝牙键盘（5 年前买的 BOW 经典三折叠款，型号我忘了，就是给 windows 平板配的），和刚买不久的罗技 m336（就是给 ipad 买的，我家无线鼠标挺多但都是 2.4g，ipad 又没有 usb 口，只能买个蓝牙的凑合用），凑个乞丐版体验应该不成问题吧。。。</p>
<p>于是乎上周日晚我下好了 zerotier 和几个远程软件，用 document 通过 ftp 从家里的电脑拖几部番剧进来，第二天我就这样开开心心的出门了。不得不说，这几样东西加在一起无论从体积上还是重量上确实比小新这种笔记本还要轻的多，但。。。这也是这套组合唯一的优点了。</p>
<h2 id="键鼠使用体验和设置"><a href="#键鼠使用体验和设置" class="headerlink" title="键鼠使用体验和设置"></a>键鼠使用体验和设置</h2><p>一连上鼠标，我就感觉到了果果满满的恶意——且不说这神秘的吸附感，这鼠标加速也太诡异了，根本没有 windows 上那种指哪打哪的感觉。当然，微软那边也有类似的东西，叫做「提升鼠标准确度」</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210705023746.png"></p>
<p>打游戏的同学应该对这东西有印象，因为无数游戏操作入门教程都会在比较开头的位置告诉你：</p>
<p>关！掉！他！</p>
<p>这是让你肌肉记忆丧失的坏东西！</p>
<p>然而偏偏果果那边就关不掉。。。。</p>
<p>另一个坑爹的地方是名为自然滚动的东西，在通用-&gt;触控板与鼠标中，这玩意开启后，向上向下滚轮就完全反过来了。关键问题是，即使关掉它，有好多情景下滚动方向还是反的。。。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_1579.jpg">来到通用-&gt;键盘-&gt;实体键盘里面，关掉讨厌的首字母大写，以及使用大写键切换语言。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_1578.jpg"></p>
<p>然后来到辅助功能，指针控制这里，关掉自动隐藏指针和指针动画，这俩苹果觉得 cool 的东西，普通键盘和鼠标用起来简直就是灾难。。。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_1580.jpg">最后到辅助功能键盘这个位置，这里有个七伤拳——全键盘控制。开启以后可以用键盘上的组合键开启 dock，回到桌面，开启多任务界面等等。但是！开启以后，shift、tab、caplocks、方向键这些按键原来的功能全部失效，如果不用 rdp，我可能还会选择把这个功能打开，但在 rdp 下这个功能会导致体验极其糟糕。。。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_1581.jpg">关闭后，我的 bow 键盘还能支持通过 fn+ 快捷键完成回到桌面调节音量等功能，仅仅是进入多任务界面要在我屏幕上划一下手指而已。另外还要多记一下的就是 ctrl + 空格切换输入法的快捷键，在远程桌面这几个猪队友的衬托下，这个快捷键变得无比的重要。</p>
<h2 id="菜鸡互啄——ios-上体验糟糕的远程桌面们"><a href="#菜鸡互啄——ios-上体验糟糕的远程桌面们" class="headerlink" title="菜鸡互啄——ios 上体验糟糕的远程桌面们"></a>菜鸡互啄——ios 上体验糟糕的远程桌面们</h2><p>由于我的主机是 windows，加上我后台也只运行多一个 teamviewer，所以第三方的远程应用我就只多测试一个 teamviewer。</p>
<h3 id="微软官方-rdp"><a href="#微软官方-rdp" class="headerlink" title="微软官方 rdp"></a>微软官方 rdp</h3><p>首先就得吐槽两个大问题：</p>
<ol>
<li><p>没法指定分辨率和主机那边一致，虽然保证了画面的解析度，但无论是连过去还是晚上回到家，第一次点亮屏幕后看见那错乱的桌面布局都会让人血压升高——</p>
</li>
<li><p>远程回去然后套娃 vmware Ununtu，ubuntu 里的 terminal 对整个键盘的映射都会出问题，只有少数的几个键按下去会在 terminal 出出反应，而且显示出来的字符和在键盘上敲得还不是同一个。。。只能在 Ubuntu 里面通过复制粘贴输入命令，或者开启 openssh 后用 xshell 之类的连上去。谷歌了一下，居然已经是个陈年老 bug 了。。。现在还没修！</p>
<p><a href="https://remotedesktop.uservoice.com/forums/265183-remote-desktop-client-for-ios/suggestions/8780344-fix-keyboard-issue-when-using-virtualbox-pidgin">Fix keyboard issue when using VirtualBox, Pidgin, and other VM software – Feedback for Microsoft Remote Desktop Clients</a></p>
</li>
</ol>
<p>其他一些小问题，包括只能用平板自己的输入法，主机自己的输入法不能用。</p>
<p>官方 rdp，唯一的优点就是快和便于连接，不过这个优点就够了，因为另外两个工具因为这点，根本就没法好好用。。。</p>
<h3 id="teamviewer"><a href="#teamviewer" class="headerlink" title="teamviewer"></a>teamviewer</h3><p>首先，在 windows 那边就有的问题：如果之前在主机这边锁屏了（自己锁了，或者用过 rdp 连接），那么连接过去后还要用 win+L 快捷键锁一次屏幕输入一次密码才能进去，然而。。。ios 下 win 键是废的，所以，没用。另外，本地的 ip 也没法保存到连接历史里面，每次都要输一遍 ip；掉线重连也基本连不上。远程体验。。。好歹有自定义分辨率，vmware 也正常；和 rdp 相反，用平板自己的输入法时主机自己的输入法也会工作，所以最好的办法是将平板输入法切换到英文。teamviewer 的远程光标很碍事，也要关掉；鼠标滚轮在 teamviewer 中不生效。</p>
<p>其实能用是能用，但锁屏后连不上这点直接就 pass 了。</p>
<h3 id="remote-desktop-manager"><a href="#remote-desktop-manager" class="headerlink" title="remote desktop manager"></a>remote desktop manager</h3><p>支持多种协议，包括 ssh，rdp 等等。其实协议清单里面也有 teamviewer，但。。。也就能记个账号密码，没法连接。</p>
<p>跟官方的 rdp 应用比，这玩意能自定义分辨率；但实际用起来，最主要的问题就是：慢！画面好久才能刷新出来，按一下反应半天。同样是 rdp 协议，怎么你就这么拉跨呢？</p>
<hr>
<p>而其他的工具，我能想到的包括 moonlight、steam 等等，但都需要后台另外装/开东西，我就没试，以后有机会再说吧。</p>
<p>总结两个字：垃圾！</p>
]]></content>
      <categories>
        <category>IOS</category>
      </categories>
      <tags>
        <tag>rdp</tag>
        <tag>teamviewer</tag>
        <tag>键鼠</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记本送修记</title>
    <url>/bi-ji-ben-song-xiu-ji/</url>
    <content><![CDATA[<p>故事要从四个月前说起。</p>
<p>睡前惯例玩一下笔记本。二三月份的南宁阴气还很重，所以我蒙着被子趴着敲键盘，然后不知不觉就睡着了。</p>
<p>睡梦中迷迷糊糊听见「啪」一声，我一下就爬了起来，发现自己压在笔记本上面，这时候笔记本还开着盖，估计是自己翻了个身导致这玩意开合过度发生异响，感觉没啥大问题我就没在意。</p>
<p>彻底睡醒以后发现笔记本合不稳了，转轴那里缝隙变大了，盲猜可能是转轴裂了。这种人为的事故估计联想不保吧。。。那就先凑合着用。</p>
<p>结果随着时间推移，转轴的裂缝越来越大，到了上周屏幕右下角因为外壳开裂受到挤压都变黄了一块，再这么下去整块屏幕都要赔进去，没办法，想办法修一下吧。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210625_093019119.jpg"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210625_093012086-tuya2.jpg"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210625_064558539-tuya2.jpg"></p>
<p>先确认了一下，小新 pro13 是整机两年保修，不确定的话在联想微信小程序「联想会员中心」里面注册一下机器就能看到了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Screenshot_20210706-001110.png"></p>
<p>虽说是半人为的损坏（还是要狡辩一下 2333，小新 pro13 的转轴强度确实不高而且开合角度小，要是换成我同学那个 16 年的联想 air，我在床上这一通操作估计没啥问题，那台开合角度比我这个大多了），我还是祈望在保修期内减免一定的维修费用，如果不是整机保修而是类似我 hp 暗影精灵那种主要部件保修两年，那我不如直接交给电科。虽然那台暗影精灵不是因为外壳而是因为烧了主板和硬盘，离保修期 2 年结束还有两个月享受到了免费售后，我的电子设备们真是命运多舛啊2333</p>
<p>另外我还搜到了这篇文章：<a href="https://post.smzdm.com/p/754042/">如何修复摔坏的笔记本，换壳、换屏、升内存、加固态——联想小新潮5000_笔记本内存_什么值得买</a></p>
<blockquote>
<p>检测完毕后，可以<strong>咨询</strong>下JD的小姐姐，京东买的笔记本有个特点，保修是<strong>按部件</strong>保的，打个比方即使我的屏幕是因为自己摔坏的，<strong>其他部件</strong>日后出现非人为故障，<strong>仍然可以进行保修</strong>。大致了解了一下，屏幕这么明显的人为损坏肯定是保不了，但是外壳的损伤，对方可以为我做个免费更换。某宝查了下价格，同类型的外壳大概<strong>50</strong>一个面，JD自己保修估计成本更低，看来京东方面应该是在计算成本后做了顺水人情，同时争取给客户留个好印象<img src="https://res.smzdm.com/images/emotions/189.gif" alt="如何修复摔坏的笔记本，换壳、换屏、升内存、加固态——联想小新潮5000"> 。</p>
<p><strong>PS.**外壳保修要注意千万</strong>不能脱落<strong>，只要外壳部分还是</strong>完整<strong>的一个整体，就可以按</strong>变形<strong>走</strong>免费保修<strong>，如果一不小心</strong>分离<strong>了，那么就只能走</strong>付费维修**，一个面大概150，有一定动手能力的建议某宝买自己来换，这个东西没什么技术含量。</p>
</blockquote>
<p>我这个从外观看也只是变形的说。</p>
<p>接着，先在京东 app 上填售后单。2 小时后就收到了东哥的客服电话，比较值得在意的地方就是客服小姐姐让我选是送回京东还是在当地的联想授权维修点维修。上一次 hp 的售后我就直接交给了南湖的 hp 授权维修部，但这次。。。我判断这种半人为的损伤现场送修的话联想可能就直接开价了，如果我拒绝了估计就让我直接扛回家；而走京东的话，毕竟我已经送过去了，来来回回的，可能他就懒得开价或者不会开价那么高？总之是我的臆测，正好第二天我有东哥的快递，客服答应让快递员顺手免费送这一程，等于我去的半程运费也免了，那就这样吧。</p>
<p>送过去是上周六，虽然只是机子有问题，但客服叫我把电源也送回去，正好我手里箱说全，干脆一起塞进去。送修前先拍张照，录个视频，说明这台电脑屏幕大概是好的，万一送过去屏幕炸了，那可不是我的锅（</p>
<p>然后开始了漫长的等待，到了前天（周五），终于给我来了电话，开口就说已经修好了，绝口没有提钱的事，nice！然后到了今天，这台电脑就送回来了。</p>
<p>检查了一下，确实修好了，不过只修了 a 面加转轴，我之前以为 c、d 面也会换的（有点点变形）。转轴那里的胶都没撕，屏幕部分变黄的那一块也恢复了，万幸并没有被压到漏液。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210705_170755605-tuya2.jpg"></p>
<p>来来回回，送过去 5 天，送回来 2 天，加起来七天。值得一提的是，我爸之前的某米老人机屏幕坏了送回京东修，也是七天送回来。所以，七天这个时间跨度，是不是可以命名为「京东速度」（</p>
]]></content>
      <categories>
        <category>流水账</category>
      </categories>
      <tags>
        <tag>流水账</tag>
        <tag>lenovo</tag>
      </tags>
  </entry>
  <entry>
    <title>xbox series S 使用体验 </title>
    <url>/xbox-series-s-shi-yong-ti-yan/</url>
    <content><![CDATA[<p>半个月前买的小钢炮，新特性也摸得得差不多了，就写一下使用体验呗。</p>
<p>在本地的店铺以 2750 入手的，加上花呗的一个点提现费，差不多花了 2777（分期给马老板的钱就不算进去了）。虽然说差不多这个时候买的话国行也应该到手了，2300 还免息便宜不少呢，而且还提前把后门放回来了，但上次 xbox one s 当国行勇士的体验实在是太提心吊胆了，所以这次就算贵一点也认了（总不能还能当外服勇士吧）。</p>
<h2 id="初体验"><a href="#初体验" class="headerlink" title="初体验"></a>初体验</h2><p>拿到手。。。感觉盒子还是挺大的，比 xbox one S 的盒子小一点点而已。体积是小挺多，但也没有我想象中可以随便带出去这种程度，比我的联想小新 pro13 还略重一点。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210628_144035928-tuya2.jpg"></p>
<p>刚开机就感觉加载速度起飞，特别是开 apex，那个动画速度，一瞬就过去了。。。。apex 还是装在外置硬盘里的。</p>
<h2 id="游戏表现"><a href="#游戏表现" class="headerlink" title="游戏表现"></a>游戏表现</h2><p>到目前为止我的游戏体验：</p>
<ol>
<li><p>有飞跃性提升的：cod15（xo 版）、<del>cod17（xs 版）</del>极限竞速地平线 4</p>
<p>cod17 本世代的分屏是个灾难（武器贴图消失，甚至瞄准的时候枪模都没了；画面模糊简直重返上上世代），而购买了次时代版本以后，分屏变为可玩，且有了光追后画面体验感大幅上升；cod15 我曾经吐槽过三人无法分屏，但放到次时代主机上就可以了。但注意，cod17 只有 xs 强化版有这种飞跃，普通版表现和在 xbs 上半斤八两。另外似乎从普通版升级到次时代版要比直接买次时代版便宜（欧元区买升级包只需花费 40 元左右，而 10 美元的差价约合人民币 60 元）。**(7.4 更新）**将 fh4 得分上调！因为 fh4 加载上时间的缩短感知太明显了，xos 上冷加载差不多要五分钟，而 xbs 上差不多一分钟就好了，更别提还有快速恢复功能的加持，fh4 这种开放性赛车游戏我就喜欢趁思考的碎片时间玩一下，这种情况下加载时间缩短给体验上的提升是飞跃性的。</p>
</li>
<li><p>大幅提升，但有遗憾：apex（xo 版）、cod17</p>
<p>apex 到现在都没有出 xs 专版，但可以明显感受到加载速度的提升，贴图质量也有大幅改善，但是。。。apex 第九赛季开始的时候，曾经有帧数和延迟面板显示字体错位的问题，在我 xbox series S 到手之前，本世代那边就已经修复了；但我把硬盘插上次时代主机这边，这个 bug 就又出现了，直到现在都还没修。**(7.4 更新）** 我把 cod17 的 xs 评级下调了，因为分屏下天空闪屏和准心消失的问题还是时长发生，比 xbox one 版好得多，但相比前几个版本的 cod，毋庸置疑的有退步。另外 cod17 也是少见的几个不支持 xbox 快速恢复的游戏。 </p>
</li>
<li><p>有 xs 版，但感知没那么强：<del>极限竞速地平线 4、</del>命运 2</p>
<p>命运 2 我感受不到啥提升（可能帧数有提升，但非竞技类 fps，我感受不到）；地平线 4 的贴图感受其实是有大幅进步的（毕竟 xos 显存很少），但其实草地的模糊感还是可以感受得出来；另一点就是光追，实际上，上一代主机上 fh4 就实现了效果不错的软光追，因此本身感知很强的光追到 fh4 这里感受就没那么强了。</p>
</li>
<li><p>没有 xs 版，依靠机能和技术有提升，但感知没那么强：tf2</p>
<p>tf2 吃到了 fps boost 的红利。但重生对游戏的优化很到位，导致我并不太感受得出差距。</p>
</li>
<li><p>完全没有改善：cod16</p>
<p>现在的 cod16 bug 成堆，大战场要删一堆数据包才能玩；分屏武器枪模消失，换到 xss 上没有任何改观。</p>
</li>
</ol>
<h2 id="外置硬盘、智能分发"><a href="#外置硬盘、智能分发" class="headerlink" title="外置硬盘、智能分发"></a>外置硬盘、智能分发</h2><p>接下来是「一捧一踩」：</p>
<p>好的是，经过上时代 xbox 分区处理后的固态硬盘，可以直接插到新的次时代主机上使用，兼容性良好，里面原来有的游戏「一些」也可以直接打开玩。fps boost 和自动 hdr 功能也可以照常开启。</p>
<p>为啥说是「一些」呢？</p>
<p>这就要大批特批软软的「智能分发」了：</p>
<p>如果这个游戏你有买 xs 版，或者你是 xgp 会员且这个游戏有次时代版的话，就会提示你更新，不更新就进不去游戏。</p>
<p>但 xs 版只能在内置空间内装啊！或者买微软的死贵储存卡。300 多 g 的空间，已经很拮据了，就想着把一些 xs 版感知不强的游戏用本世代版替换，放在外接 ssd 里面，还可以 xos 和 xss 一起用，结果这下一搞，没辙了。</p>
<h2 id="快速恢复"><a href="#快速恢复" class="headerlink" title="快速恢复"></a>快速恢复</h2><p>又是一个值得表扬的功能。</p>
<p>令人惊叹的并不只是快速恢复带来的加载时间上的缩短，更重要的是快速恢复适用性极广，无论是放在内置硬盘还是外置普通 ssd，是 xo 版游戏还是 xs 版游戏，都可以吃到快速恢复带来的红利；甚至之前预测到「快速恢复可能是利用内存，所以彻底关机后快速恢复功能就会失效」，最后实验出来结果并不是这样，除非是加载出错，否则关不关机都不影响快速恢复功能的启动。</p>
<p>但，我这个月还是遇到过几次，快速恢复出来的游戏，几个按键失灵（比如快速恢复出来的 fh4，打不开地图）。但出现概率并不高，这得微软还得继续做适配。</p>
<p>而且在如此广泛的支持下，还是有几个游戏不支持快速恢复，比如说 cod，这就完全是厂商的锅了，动视出来挨打！</p>
<h2 id="配套设备"><a href="#配套设备" class="headerlink" title="配套设备"></a>配套设备</h2><p>我同学家的 x9100h 就基本能完美支持 xss 120fps、hdr 这些特性了。但要注意几点：</p>
<ol>
<li>要插到 hdmi 3 口上才能支持完整特性；</li>
<li>要开启一些选项才能选到 120fps；</li>
<li>xss 无法把 120fps 和 4k 选项一起开启，只能二选一；因此，其实一根 hdmi 2.0 线足矣，不需要最新标准 hdmi 2.1 的线。</li>
</ol>
<p>具体操作，可以参考<a href="https://www.bilibili.com/video/BV1qV41127QY">索尼X9000H更新HDMI2.1固件，4K120Hz/eARC等功能一览，含X9088H/X9100H_哔哩哔哩_bilibili</a>。</p>
<h2 id="其他优缺点"><a href="#其他优缺点" class="headerlink" title="其他优缺点"></a>其他优缺点</h2><ol>
<li>因为内存大了，某些游戏打不动字（打字很卡）的问题也解决了。</li>
<li>我购买的是日版，听说有手柄信号和 5g wifi 冲突的问题，但我并没有遇到（我家路由器是 ac86u）。不过有一次手柄确实无法响应主机，接着我把旧的 xos 手柄连接新主机，这个旧手柄倒是能正常操作；然后我重启了一下机子，用 type-c 线把新手柄接到 xss 上，过了一会，好了，很玄学。</li>
<li>但无线网卡相比 xos 那个弱鸡网卡好了不少，起码无线状态下开加速器我打 cod16 战区没遇到其妙的丢包问题了。</li>
</ol>
<hr>
<p>总体来说，大体满意，我的几个需求 xss 大体都能满足，就是体积再小一点就更好了。</p>
<p>另一个我好奇的地方是，xs 版和 xbox one X 强化是两个不同的概念，之前有几个游戏 bug 在 xss 这边测试出来就应该是 xos 配置不足的锅，换成 xox 应该也能解决，何况 xox 更便宜，自带的硬盘也更大。去掉光追这一点，如果不是追求便携性，以及这两年少的可怜的独占，xox 和 xss 谁会是更好的选择呢？</p>
]]></content>
      <categories>
        <category>Game</category>
      </categories>
      <tags>
        <tag>xbox</tag>
        <tag>xbox Series S</tag>
        <tag>评测</tag>
      </tags>
  </entry>
  <entry>
    <title>斐讯 n1 折腾记录</title>
    <url>/fei-xun-n1-zhe-teng-ji-lu/</url>
    <content><![CDATA[<p>本来想等自己有钱的时候再买一个性能强悍啥都能干的 x86 软路由的。。。</p>
<p>然而最近折腾加速器，实在受不了这帮硬路由的憨憨性能了：明明 ac86u 性能还凑合但内存只有 512m 结果刷了梅林各种问题各种崩，其他 mt7621 就更不用说了。我也考虑其他设备，比如 r2s，s905x 盒子之类的，但</p>
<ul>
<li>r2s 体积小但性能比 n1 还要差；</li>
<li>s905x 盒子就只能做软路由，做电视盒子差点。</li>
</ul>
<p>所以最后决定还是先买个 n1 顶着。以后换成高端一线的虚拟机软路由，再拿来当电视盒子。</p>
<h2 id="开箱"><a href="#开箱" class="headerlink" title="开箱"></a>开箱</h2><p>购入渠道有两个，拼夕夕和转转（淘宝系禁 fx），我同学 1 月初在转转买了个仅拆箱的 k2p a1 才用了 180 搞得我有点心动（现在这玩意最少要 220 起步，也是个理财产品），但我看了一眼转转的 n1 ，当时没有同城同省，而且成色不知道，带不带码可能也不知道，算了，省省直接拼夕夕了，带盒子不带遥控器准新机 155 到手。</p>
<p>买到手的时候才二月份，但那时一直没得空研究，所以一直拖到现在。现在到同一家店看，涨到 165 了。。。真-理财产品。</p>
<p>到手的 n1 成色尚可</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210402_143256218.jpg"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210402_143305864.jpg"></p>
<p>不过还是有两个令人遗憾的地方：</p>
<ol>
<li><p>盒子上没有 s/n 码，也就无法验证是否三码合一了：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210402_143321918.jpg"></p>
</li>
<li><p>带的电源是 12v 1.5a 的，肯定不是 n1 原装，多半是 k2p a2 原装。</p>
</li>
</ol>
<p>当时这俩不大不小的问题搞得我想退了。。。算了，先试试，跑个分备个份，就算后续要退也有办法还原。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>相比于刷路由器，刷 n1 要准备的东西多多了~</p>
<ol>
<li>hdmi 线</li>
<li>显示器</li>
<li>笔记本 / 台式机 / 平板</li>
<li>一个口为 USB-A 的线</li>
<li>网线一根</li>
<li>（可选）一个中继路由</li>
<li> 一到两个 U 盘 / tf + 读卡器，一个容量最好是 8g（可选），另一个要 16g 以上</li>
<li>（可选，要备份系统的话必选）usb hub</li>
<li>鼠标和键盘</li>
</ol>
<p>「一个口为 USB-A 的线」是因为 n1 上的 usb 接口是两个 USB-A 口。而这根线的另一头是啥就取决于你的笔记本 / 台式机 / 平板有什么口。大多数笔记本 / 台式机都只有 USB-A 口，这就是许多卖家捆绑销售双头 USB-A 的原因；但新一代的笔记本，特别是轻薄本都标配了两个 usb type-c 口；而旧一点的平板用的是 micro-usb 口，这两种线大家手上都不少，这种情况下就不用买卖家的双公口 USB 线了。不过平板有可能遭遇供电不足的情况，不太建议使用；有种说法是最好用 usb 2.0 线刷，但我用 type-c 3.1 口刷也没问题。</p>
<p>用中继路由的原因是我的笔记本都是靠无线连接路由器的，路由器本身离设备比较远无法通过有线连接；而进入 fastboot 的时候又需要 n1 和笔记本在同一个子网，所以就需要一个中继路由才能实现。</p>
<p>还有这个 hub，在一种情况下是必选的，待会我会提到。</p>
<h2 id="刷点啥呢"><a href="#刷点啥呢" class="headerlink" title="刷点啥呢"></a>刷点啥呢</h2><p>n1 可以刷那么几个 rom：</p>
<ul>
<li>openwrt</li>
<li>armbian</li>
<li>yyf</li>
<li>等等等</li>
</ul>
<p>主要是我只用得着我提到的这三个。</p>
<p>前两个可以通过 u 盘直接引导。yyf 只能直接刷入。</p>
<p>yyf 主要用来看电视，openwrt 是做软路由，armbian 则是做纯粹的 linux 开发系统。</p>
<p>openwrt 能拿来跑个分，armbian 能拿来备份 rom。</p>
<p>所以我们大致的刷机路线就是先刷 openwrt 做测试，如果盒子发热不严重并且跑分正常，那就暂时不退了，直接用 armbian 做个备份，之后刷入 yyf 玩一会电视功能，最后刷入 openwrt 做软路由。</p>
<h2 id="测试-备份"><a href="#测试-备份" class="headerlink" title="测试 + 备份"></a>测试 + 备份</h2><h3 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h3><p>要想从 u 盘启动，必须先把机器降级到 2.19 版本。我的 n1 拿到手就是 2.22 版本，铁定得降级。</p>
<p>推荐使用<a href="https://www.right.com.cn/forum/thread-340279-1-1.html">[2018-9-28]斐讯T1和N1降级恢复线刷功能 , adb脚本工具 - 斐讯无线路由器以及其它斐迅网络设备 - 恩山无线论坛 - Powered by Discuz!</a>，这玩意可以通过网络进行降级，不需要因为驱动问题大费周章。不过得安装 adb，请出老伙计 chocolatey：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">choco install adb -y</span><br></pre></td></tr></tbody></table></figure>

<p>给 n1 插上鼠标，通过中继路由或者在 n1 界面中登录无线网络，点击四次版本号开启开发者模式，因为此时在官方系统中可以直接通过 wifi 连接自己的路由器，所以还暂时用不到中继路由。</p>
<p>n1 和电脑同时连上路由后，按提示降级即可。降级完毕后，官方系统中显示的估计版本还是 2.22，但实际上内部固件版本已降级。</p>
<p>之后，去 <a href="https://t.me/tony_cn">Tony 的交流群</a>中，找一个叫做「N1盒子激活U盘启动」的软件，解压密码就是 Tony。按照提示开启 u 盘启动即可。</p>
<h3 id="给-u-盘刷入-openwrt"><a href="#给-u-盘刷入-openwrt" class="headerlink" title="给 u 盘刷入 openwrt"></a>给 u 盘刷入 openwrt</h3><p>有三个工具可以用</p>
<ul>
<li>etcher</li>
<li>USB Image Tool（usbit）</li>
<li>Win32DiskImager</li>
</ul>
<p>这几个都能通过 chocolatey 安装。etcher 的界面不错，另外就算 img 打包在压缩文件中，它也能准确识别并刷入。但这玩意有个 bug，挺多时候进度条跑完会报错，但其实已经刷进去了。</p>
<p>usbit 需要手动用解压 img.xz 压缩包的内容（内容是一个 img 文件），而且需要先 reset 再刷入。但好处是不会报错，而且刷写速度还比 etcher 快。</p>
<p>Win32DiskImager 有中文。</p>
<p>自己选择吧。</p>
<p>openwrt 的镜像可以从这些地方获取：</p>
<ul>
<li><a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=981406&amp;extra=page=1&amp;filter=typeid&amp;typeid=21">[2020-10-18]★46+o版， S905x3、N1、贝壳云、我家云等op固件 - 斐讯无线路由器以及其它斐迅网络设备 - 恩山无线论坛 - Powered by Discuz!</a></li>
<li><a href="https://www.right.com.cn/forum/thread-4055451-1-1.html">[2021-01-31] 52+、52+O S905x3(含x2)、S922x、贝壳云、我家云、微加云等OP固件 - OPENWRT专版 - 恩山无线论坛 - Powered by Discuz!</a></li>
<li><a href="https://www.right.com.cn/forum/thread-4076037-1-1.html">[2021-03-28] 56+、56+O S905x3、S922x、贝壳云、我家云、微加云等OP固件 - OPENWRT专版 - 恩山无线论坛 - Powered by Discuz!</a></li>
</ul>
<p>固件有 +o 和 + 两种版本，不同地方在 +o 用的是旧版本 5.4.93 内核，新版本用的是 5.10 新版本内核（以前还有个区别，那就是 +o 用的 flow offloading 加速而 + 版本用 sfe 加速，但现在统一都用 flow offloading 加速了）。新版本内核有个弊端：</p>
<blockquote>
<ol>
<li>amlogic已支持 5.10内核，但是需要从 u盘或 tf卡启动，可以刷入emmc(仅数据分区），boot分区还是只能在 u盘或tf卡上面。</li>
<li>  5.10内核的副作用是 905x3、922x等机型 hdmi 绿屏、启动时间较长、mac地址会发生变化等</li>
</ol>
</blockquote>
<p>还有 + 版本似乎界面炫酷一点。。。不在意界面的话用 +o 版本就好了（虽然下面测试的截图我用的是 + 版本）。</p>
<h3 id="进入-openwrt-web-并跑分"><a href="#进入-openwrt-web-并跑分" class="headerlink" title="进入 openwrt web 并跑分"></a>进入 openwrt web 并跑分</h3><p>刷入后，开 n1 前插入 u 盘启动，顺利的话屏幕显示是这样子的</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210212_203219240.jpg"></p>
<p>此时敲一下回车就会进入熟悉 linux 命令提示界面。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210403_193142103.jpg"></p>
<p>同时能看到一个叫 openwrt 的 wifi 信号被发射出来，连接上去，并进入 192.168.1.1，就能看到 openwrt 的 web 界面。</p>
<p>but。。。这里有一个非常神秘的现象会出现：</p>
<p><strong>如果你刷入 openwrt 的 u 盘大小不是 8g 的话，就没法正常的启动</strong>，具体表现在：</p>
<ul>
<li>不断弹出 <code>reset high-speed xxx</code> 的错误提示；</li>
<li>linux 命令提示界面的提示符后面带一个 none 的标记</li>
<li>没有 wifi 信号被发射出来</li>
</ul>
<p>具体界面类似于这样：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210213_091609125.jpg"></p>
<p>我估计是因为 n1 的 rom 是 8g 的所以也要求启动 u 盘的容量也是 8g。。。</p>
<p>但，其实还有一个解决方案，那就是搭配 usb-hub 使用。hub 接上 n1，u 盘再接上 hub 就能正常识别了。话说回来，我想到 hub 的原因，源自于我一开始以为是供电问题，于是拿了一个带供电口的 hub 接上。果然 16g 和  32g 的 u 盘就都能正常启动 openwrt，后续拔掉供电后反复启动都能够正常工作，拔掉 hub 就立即歇菜。甚至就算是 8g 卡，第一次进入可能也要和 usb-hub 配合连接才能成功进入。具体原因我到现在都还没想清楚。。。</p>
<p>在 web 来到系统 -&gt; ttyd 终端，或者直接在 n1 的 linux cli 中输入测试指令都可以。</p>
<p>测试命令参照 <a href="https://www.youtube.com/watch?v=utWlY8_rpLg&amp;t=223s">(50) 2021今年买啥软路由？新年度软路由测试总结与推荐！！！ - YouTube</a>，一共有两个：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">coremark</span><br><span class="line">openssl speed -evp aes-256-gcm</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/chrome_j3W1VqCOim.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/chrome_QH3Ptg9jk9.png"></p>
<p>对下效果：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210404021521.png"></p>
<p>差不多哦。。。</p>
<p>而且持续运行时机子并没有严重发热。看起来没啥问题。</p>
<p>最后最好使用 <code>poweroff</code> 命令关机，再进行下一步。</p>
<h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>备份就需要刷 armbian 了，因为 openwrt 里面没带有全盘备份工具。</p>
<p>因为是做全盘备份，所以 8g 的 u 盘那肯定是木大了，就必须得 16g u 盘 + usb-hub 一起上。</p>
<p>armbian 参考文章：</p>
<ul>
<li><a href="https://yuerblog.cc/2019/10/23/%E6%96%90%E8%AE%AFn1-%E5%AE%8C%E7%BE%8E%E5%88%B7%E6%9C%BAarmbian%E6%95%99%E7%A8%8B/">斐讯 N1 - 完美刷机 Armbian 教程 | 鱼儿的博客</a></li>
<li><a href="https://www.right.com.cn/forum/thread-510423-1-1.html">Armbian-5.77 on N1 , so far so good - 斐讯无线路由器以及其它斐迅网络设备 - 恩山无线论坛 - Powered by Discuz!</a></li>
</ul>
<p>备份 - ddbr 参考文章：</p>
<ul>
<li><a href="https://luotianyi.vc/1346.html">斐讯 N1 探索手记 #2 – 使用 ddbr 恢复官改系统 – Luminous’ Home</a></li>
</ul>
<p>同样，armbian 有这么几个版本可选：</p>
<ul>
<li>参考文章的 5.77 版</li>
<li>上面提到的 openwrt 网盘中的 5.4 和 5.10 内核两种（两种内核的区别我在 openwrt 那里提过了）</li>
</ul>
<p>另外还有 dtb 上的讲究。dtb 可以视为 armbian 驱动一类的东西，使用正确的 dtb 能让 armbian 系统获得更好的性能。不过既然我们只是用来备份系统的，其实没啥讲究，可以略过。dtb 有两种选择：参考文章 2 的 <code>meson-gxl-s905d-phicomm-n1-xiangsm.dtb</code> 和 openwrt 那边的 <code>N1_35+o_dtb_fixspeed</code>。使用方法参见参考文章 2，放入改名指向，一气呵成：</p>
<blockquote>
<ol start="4">
<li>此时，armbian 用的是 kdahas-vim 开发板的 dtb，所以不完全适配 n1，一些设备不工作，这是正常的，我们只需修改 /boot/uEnv.ini 指向 n1 的 dtb 即可。<pre><code>\- 修改前的 uEnv.ini：    dtb_name=/dtb/meson-gxl-s905x-khadas-vim.dtb
\- 修改后的 uEnv.ini：    dtb_name=/dtb/meson-gxl-s905d-phicomm-n1.dtb</code></pre>
</li>
</ol>
</blockquote>
<p>刷写好接上 hub 和 u 盘开机。如果一切顺利的话，需要先新建一个密码和用户名才能成功进入系统。然后输入 ddbr，按照提示备份：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210404_194952826.jpg"></p>
<p>备份完输入 <code>poweroff</code> 关机。把 u 盘插回电脑，下载并打开 diskgenius，在 rootfs 分区的 ddbr 文件夹里找到备份拖出，保存即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210405020131.png"></p>
<p>话说回来，如果第一次进入系统因为各种原因报错，可能需要重新制作 armbian u 盘，因为刚开始制作完后 rootfs 其实只分到 1g 多一点大小，只有成功第一次启动成功才会把分区扩大到整个 u 盘，没有成功执行这一步的话，后面再怎么启动可能都无法成功执行了（</p>
<h2 id="刷入-yyf-系统"><a href="#刷入-yyf-系统" class="headerlink" title="刷入 yyf 系统"></a>刷入 yyf 系统</h2><p>用 win7 成功几率会高的多，而且 vmware 可以指定使用 usb2.0 的驱动，usb2.0 口刷机成功概率更高。不过我最后还是在 win10 实机下用 usb3.0 的线刷成功了（</p>
<p>参考文章：</p>
<ul>
<li><a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=318044&amp;extra=page=1&amp;filter=typeid&amp;typeid=21">斐讯天天链 N1 刷机小白教程，大神请无视….. - 斐讯无线路由器以及其它斐迅网络设备 - 恩山无线论坛 - Powered by Discuz!</a></li>
<li><a href="https://www.jianshu.com/p/105f12a6cecb">斐讯N1盒子开箱、降级、刷YYF固件全记录 - 简书</a></li>
<li><a href="https://www.jianshu.com/p/87e9813f923f">N1盒子无法进入刷机模式解决办法 - 简书</a></li>
</ul>
<ol>
<li><p>下载 YYFROM-N1-无语音实用版 190420 刷机包。这东西在官网网盘已经失效了，所以我备份了一份到网盘，放到文末；</p>
</li>
<li><p>安装 Amlogic_USB_Burning_Tool，建议不要装太新的版本，装 2.16 就好了：<a href="https://androiddatahost.com/mte3d">Amlogic_USB_Burning_Tool_v2.1.6.zip - Android Data Host</a>。2.16 中的一个  libsub-win32 在安装时会附带安装，但需要手动添加到设备管理器：</p>
<blockquote>
<p>打开设备管理器，随便选择一个设备。</p>
<p>操作 - 添加过时硬件</p>
<p>安装我手动从列表选择的硬件</p>
<p>选择 libsub-win32 Usb Devices，一路下一步即可</p>
</blockquote>
</li>
<li><p>通过前面提到的降级软件，按照提示进入 bootloader （线刷）模式。在进入 fastboot 前如果接上屏幕的话，会看到画面定格在 n1 的开始画面中。将 usb 线接入靠近 hdmi 一端的 usb 口，连接电脑会发现一个新硬件名为 usb download gadget，但这东西驱动没法自己安装。下一个驱动精灵之类的软件，检查后根据提示安装相应的 Android adb Interface，安装完再接上 n1 的话，会发现在设备管理器中 n1 被命名为 Lemobile Android Device。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-04-06%20032913.png"></p>
</li>
<li><p>接下来严格按照步骤走！</p>
<ol>
<li>打开 Amlogic_USB_Burning_Tool，加载刷机包，擦除 FLASH 和擦除 Bootloader 前面的 √ 去掉，加载完成点击开始；</li>
<li>确保 n1 和电脑已通过 usb 线连接</li>
<li>通过降级软件，进入线刷模式。如果顺利的话，设备已经开始刷写了。稍微晚一点，或者线没接好，Amlogic_USB_Burning_Tool 都可能识别不到设备。</li>
</ol>
</li>
<li><p>刷写成功就可以直接关闭关键拔线重启了。后续可以通过鼠标跳过初始流程，登录家中 wifi 后用刷机包里带的斐讯 app 控制盒子。</p>
</li>
</ol>
<h2 id="盒子资源体验"><a href="#盒子资源体验" class="headerlink" title="盒子资源体验"></a>盒子资源体验</h2><p>再说</p>
<h2 id="openwrt-刷入-emmc-和体验"><a href="#openwrt-刷入-emmc-和体验" class="headerlink" title="openwrt  刷入 emmc 和体验"></a>openwrt  刷入 emmc 和体验</h2><p>再说</p>
<h2 id="其他参考文章"><a href="#其他参考文章" class="headerlink" title="其他参考文章"></a>其他参考文章</h2><ul>
<li><a href="https://pockies.github.io/2019/03/07/phicomm-n1/">我购买了斐讯 N1 做电视盒子，发现它远比想象的… - Pockies | 博客</a></li>
<li><a href="https://github.com/zisen123/N1-box-bypass-router-tutorial/blob/master/N1-box-bypass-router-tutorial.md">N1-box-bypass-router-tutorial/N1-box-bypass-router-tutorial.md at master · zisen123/N1-box-bypass-router-tutorial</a></li>
<li><a href="https://post.smzdm.com/p/akm7vk38/">贫民种草指北 篇二：N1 盒子：不谈刷机，只谈使用！_电视盒子_什么值得买</a></li>
<li><a href="https://www.leeyiding.com/archives/48/">斐讯 N1 烧录 yyf 和 OpenWrt 固件 - LeeYD・Blog</a></li>
<li><a href="https://ethanblog.com/tips/tv-box-firmware-for-n1.html">N1 刷电视盒子的固件选择 | Ethan’s Blog - 记录和思考</a></li>
<li><a href="https://www.321002.com/117.html">斐讯 N1 折腾记：降级及刷入官改</a></li>
<li><a href="https://www.kuqutan.com/1132.html">斐讯 N1 折腾记：运行 Linux 及优化 - 酷趣谈</a></li>
<li><a href="https://1drv.ms/u/s!AoMoC9XTgpEslq9HsaFw8qlnT0QQ9Q?e=Kg3a9Z">本文资源</a></li>
</ul>
]]></content>
      <categories>
        <category>路由器</category>
      </categories>
      <tags>
        <tag>羊毛</tag>
        <tag>openwrt</tag>
        <tag>yyf</tag>
        <tag>n1</tag>
      </tags>
  </entry>
  <entry>
    <title>windows 开启 openssh-server</title>
    <url>/windows-kai-qi-openssh-server/</url>
    <content><![CDATA[<p>这篇文章是从<a href="https://zbttl.github.io/azure-yang-mao-er/">azure 羊毛（二） | Bao’s 备忘录</a>这里分离出来的。因为我发现给 windows server 2012 开 openssh 的坑远不及于此，这篇按官方教程来的小实践只能算个引子，于是干脆独立出来。</p>
<p>在 windows 10 专业版上部署通过。</p>
<p>参考文章：</p>
<ul>
<li><a href="https://docs.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse">Installation of OpenSSH For Windows Server | Microsoft Docs</a></li>
<li><a href="https://stackoverflow.com/questions/16212816/setting-up-openssh-for-windows-using-public-key-authentication/50502015#50502015">ssh - Setting up OpenSSH for Windows using public key authentication - Stack Overflow</a></li>
</ul>
<h2 id="安装，配置服务"><a href="#安装，配置服务" class="headerlink" title="安装，配置服务"></a>安装，配置服务</h2><p>安装</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Add-WindowsCapability -Online -Name OpenSSH.Server</span><br></pre></td></tr></tbody></table></figure>

<p>配置自启</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Set-Service -Name sshd -StartupType 'Automatic'</span><br></pre></td></tr></tbody></table></figure>

<p>配置防火墙（其实我一开始是像 rdp 这边用图形界面配置的，结果软软的教程居然给了命令，学到了，主要是写教程方便不用截图 - -）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">New-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 999</span><br></pre></td></tr></tbody></table></figure>

<p>如果用的是默认 22 端口不改其实可以略过这步。咱不习惯用默认端口就是。</p>
<p>更改默认命令行程序为 powershell</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">New-ItemProperty -Path "HKLM:\SOFTWARE\OpenSSH" -Name DefaultShell -Value "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe" -PropertyType String -Force</span><br></pre></td></tr></tbody></table></figure>

<h2 id="修改-sshd-config"><a href="#修改-sshd-config" class="headerlink" title="修改 sshd_config"></a>修改 sshd_config</h2><p>sshd_config 位于 <code>C:\ProgramData\ssh\sshd_config</code></p>
<p>修改端口</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#Port 22</span><br><span class="line">Port 999</span><br></pre></td></tr></tbody></table></figure>

<p>注释掉旧版密钥路径</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#Match Group administrators</span><br><span class="line">#       AuthorizedKeysFile __PROGRAMDATA__/ssh/administrators_authorized_keys</span><br></pre></td></tr></tbody></table></figure>

<p>关闭密码登录</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">PasswordAuthentication no</span><br></pre></td></tr></tbody></table></figure>

<h2 id="放入密钥"><a href="#放入密钥" class="headerlink" title="放入密钥"></a>放入密钥</h2><p>将公钥放到 <code>C:\Users\zbttl\.ssh</code>里面，改名为<code>authorized_keys</code>。别说你看到这里都还没公钥。。。</p>
<p>可能还要修复公钥的权限。微软官方文章使用的是 opensshutils 这个软件，但这个软件去年就被标记为 deprecated，实在要装只能手动安装，可以参考<a href="https://stackoverflow.com/questions/62873521/powershell-opensshutils">openssh - PowerShell OpenSSHUtils - Stack Overflow</a>，而且参考文章 2 中写明不建议装。</p>
<p>另外两种方法：</p>
<ol>
<li><p>直接用 gui 修改权限。右键<code>authorized_keys</code> -&gt; 属性 -&gt; 安全 -&gt; 高级 -&gt; 禁用继承，在弹出的对话框选择「将已继承权限转换」。然后删掉多余权限，留下 system 和自己目前所用账号的权限就行。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210318041441.png"></p>
</li>
<li><p>使用命令</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">get-acl C:\Users\zbttl\.ssh\authorized_keys | fl</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<p>我也不知道哪个好用，因为我几年前从 linux 那边生成的公钥文件貌似没有权限问题。。。</p>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>启动服务</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Start-Service sshd</span><br></pre></td></tr></tbody></table></figure>

<p>记得登录的是用户名不是 root 而是当前微软账号或者微软本地用户名。</p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>openssh</tag>
      </tags>
  </entry>
  <entry>
    <title>通过 telegram bot 监控设备的远程登录情况</title>
    <url>/tong-guo-telegram-bot-jian-kong-she-bei-de-yuan-cheng-deng-lu-qing-kuang/</url>
    <content><![CDATA[<p>之前我先后白嫖了 azure 的 windows server，以及做了 zerotier 用于远控，但前者我提过 3389 端口老是被撞，后者要通过密码和 zerotier 网域两重保险，应该够安全了，但毕竟是把我的主用设备暴露出去，还得更安全一点才行。<br>我听说有些脚本可以登录时从 telegram bot 通知所有者，找了一下，ssh 的和 rdp 的都有，那就一起上了。</p>
<p>工具：</p>
<ul>
<li><a href="https://gist.github.com/LM1LC3N7/b6f98611a1cd425cd5e328f90ed697f6">SSH PAM module - Telegram Alert on connect and disconnect, with IP exceptions.</a></li>
<li><a href="https://github.com/ihatemodels/rdp-telegram-messenger">ihatemodels/rdp-telegram-messenger: Get instant telegram message when a new rdp connection is established</a></li>
</ul>
<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>参考：<a href="https://p3terx.com/archives/aria2-telegram-bot-automatically-uploads-to-google-drive-onedrive.html">Telegram Bot 控制 Aria2 下载并自动上传到 Google Drive、OneDrive - P3TERX ZONE</a></p>
<h3 id="创建-bot，获取-bot-token"><a href="#创建-bot，获取-bot-token" class="headerlink" title="创建 bot，获取 bot token"></a>创建 bot，获取 bot token</h3><p>访问 telegram bot 管理 bot <a href="https://telegram.me/botfather">@botfather</a>，通过三个步骤就能获得一个 bot：</p>
<ol>
<li>输入 <code>/newbot</code>，会询问你 bot 起什么昵称（即 tg 窗口左上角的名字），按自己喜好起就行。</li>
<li>回车后，会询问你 bot 想起一个什么用户名。以后可以通过用户名来直接找到这个 bot。需要以 Bot 或者 _bot 结尾，同时不可以和已有的 bot 名字冲突，所以这里要起复杂一点。</li>
<li>然后就能从机器人的回答中获得一串字体颜色为黄色的长长一串 token 了。 顺便回答里面 <code>You will find it at</code> 后面的蓝色链接可以直接通向创建的机器人，先过去 <code>/start</code> 一下，以免待会还要回来找。监测几个 ssh/rdp 就要建立几个 bot，可以建一个，做完建立提醒步骤后再建，也可以先一次建一堆（因为我看 botfather 这边有批量建立的功能，不过我没用过）。</li>
</ol>
<h3 id="获取-userid"><a href="#获取-userid" class="headerlink" title="获取 userid"></a>获取 userid</h3><p>进入刚刚获取的其中一个 bot，随便输点东西。</p>
<p>然后在浏览器中访问 <code>https://api.telegram.org/bot&lt;bot_token&gt;/getUpdates</code>，不同的 bot，bot token 不一样，别填错了。</p>
<p>不出意料的话，result 中 id 后面跟的数字就是账号的 userid。userid 每个 telegram 账号唯一，获取过一次就不用再获取了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210317195053.png"></p>
<p>如果 result 为空，证明离上次和 bot 互动时间相隔太久，重新去 bot 里再输点东西就好。</p>
<h3 id="获取-chatid"><a href="#获取-chatid" class="headerlink" title="获取 chatid"></a>获取 chatid</h3><p>参考：<a href="https://stackoverflow.com/questions/32423837/telegram-bot-how-to-get-a-group-chat-id">Telegram Bot - how to get a group chat id? - Stack Overflow</a></p>
<p>仅 rdp 登录提醒需要（因为我找到的 rdp 提醒脚本只能在群内提醒，没法在 bot 里面直接提醒）。</p>
<ol>
<li><p>把相应 bot 拉入群中。</p>
</li>
<li><p>在群中发一句</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">/my_id @my_bot</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>访问 <code>https://api.telegram.org/bot&lt;bot_token&gt;/getUpdates</code>，在 chat 这个代码块的 id，就是 chatid（带个负号的很显眼）</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210317214415.png"></p>
</li>
</ol>
<p>chatid 每个群唯一，所以也获取一次，然后把所有 rdp 监测 bot 拉到同一个群中就好了。就是建群还需要好友配合这点比较烦（实在不行办个小号呗）。</p>
<h2 id="linux-ssh-登录提醒"><a href="#linux-ssh-登录提醒" class="headerlink" title="linux ssh 登录提醒"></a>linux ssh 登录提醒</h2><ol>
<li><p>从参考文章 1 中下载或者复制粘贴源码得到 <a href="https://gist.githubusercontent.com/LM1LC3N7/b6f98611a1cd425cd5e328f90ed697f6/raw/d8149521d0287dd854c9917458899229284e567c/telegram-alert.sh"><code>telegram-alert.sh</code></a></p>
</li>
<li><p>修改其中的</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"># Your USERID or Channel ID to display alert and key, create a new bot with @BotFather on Telegram</span><br><span class="line"># Ask to @IDBot for your id (/getid)</span><br><span class="line">USERID="********"</span><br><span class="line"># Create a new bot with @BotFather and start a new discussion with it</span><br><span class="line">KEY="*********:***********************************"</span><br><span class="line">URL="https://api.telegram.org/bot${KEY}/sendMessage"</span><br></pre></td></tr></tbody></table></figure>

<p>key 就是 bot token，把我们前期准备获取的两个值填进去。</p>
</li>
<li><p>把 <code>telegram-alert.sh</code> 放到被检测机 <code>usr/local/bin</code> 里，加权限</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">chmod +x /usr/local/bin/telegram-alert.sh</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>在 <code>/etc/pam.d/sshd</code> 新增 <code>session optional pam_exec.so type=open_session seteuid /usr/local/bin/telegram-alert.sh</code></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">echo "session optional pam_exec.so type=open_session seteuid /usr/local/bin/telegram-alert.sh" &gt;&gt; /etc/pam.d/sshd</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>（可选）重启 sshd</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<p>如果是开启 SELinux 的系统（如 centos），参考文章后面还有两部，我用的是 debian 就不写上来了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210318004255.png"></p>
<h2 id="rdp-登录提醒"><a href="#rdp-登录提醒" class="headerlink" title="rdp 登录提醒"></a>rdp 登录提醒</h2><ol>
<li><p>从参考文章 1 中下载或者复制粘贴源码得到 <a href="https://raw.githubusercontent.com/ihatemodels/rdp-telegram-messenger/master/rdp-telegram.ps1"><code>rdp-telegram.ps1</code></a></p>
</li>
<li><p>修改其中的</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$botToken = 'ADD UR TOKEN HERE'</span><br><span class="line">$chatID = 'ADD UR CHAT ID HERE'</span><br></pre></td></tr></tbody></table></figure>

<p>把我们前期准备获取的两个值填进去。</p>
</li>
<li><p>把 <code>rdp-telegram.ps1</code> 放到被检测机里一个好找的地方，我就直接放到我的 user 目录下了 <code>C:\Users\zbttl</code>。</p>
</li>
<li><p>按下 win 键，敲入「事件查看器」并打开</p>
</li>
<li><p>找到应用程序和服务日志 -&gt; Microsoft -&gt; Windows -&gt; TerminalServices-RemoteConnectionManager。</p>
</li>
<li><p>新一点的系统，比如 win10，登录过 rdp 的话在 Admin 这项里面会有 20521 这项代表已登录成功的日志</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210318002631.png"></p>
<p>旧一些的，比如 windows server 2012 可能就没有。不过旧系统在 operational 这里会有类似 1149 的记录，同样是代表登录成功。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210318002752.png"></p>
<p>哪个都可以，参考文章中提到的是前一个，然后我发现前一个如果用微软商店的第三方 rdp（名字就叫远程桌面，系统自带的远程桌面遇到屏幕分辨率不一样的情况会拉跨），日志中没提示，所以自行选择。</p>
<p>右键其中一个包含上面提到的这两种其中一种的记录选择「将任务附加到此事件」。在打开的窗口中，创建基本任务的名字随便取，然后一路下一步来到「启动程序」这一项。程序或脚本，填入 POWERSHELL；添加参数（可选）填入 <code>rdp-telegram.ps1</code> 所在路径（记得打引号），对我来说那就是 <code>"C:\Users\zbttl\rdp-telegram.ps1"</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210318003547.png"></p>
</li>
<li><p>完成后，再次按下 win 键，搜索任务计划程序，打开，在任务计划程序库 -&gt; 事件查看器任务处，就能看到我们刚刚创建的任务。选择那个任务，点右侧的属性，在弹出的窗口中看到常规 -&gt; 安全选项，勾选「使用最高权限运行」。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210318004126.png"></p>
<p>不进行这一步的话，待会在 telegram 群虽然会弹通知，但通知中各项属性的值都是空：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210318004423.png"></p>
<p>如果显示操作参数错误的话，把上面「只在用户登录时运行」改为「不管用户是否登录都要运行」，然后输入本机账号密码即可。</p>
<p>另外还建议在设置 -&gt; 如果此任务已运行，改为「停止现有实例」或者「并行运行新实例」，以免网络原因导致前面的任务运行不成功一直卡着。</p>
</li>
<li><p>因为被监控机在国内，要给 telegram 发东西的话，你懂得，记得还得是全局代理才行。</p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210318011921.png"></p>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>两个问题：</p>
<ol>
<li>开 rdp 的时候能看见一个 cmd 框框弹出。万一攻击者看到这个框框眼疾手快关掉了，程序没跑完那通知不就过不来了。</li>
<li>我不赞成时时刻刻开着全局代理。</li>
</ol>
<p>解决方法：</p>
<p>参考</p>
<ul>
<li><a href="http://cn.voidcc.com/question/p-vhmweifz-ve.html">如何在静默/隐藏模式下使用任务计划程序运行powershell脚本？ - VoidCC</a></li>
<li><a href="https://bohemiangrove.co.uk/run-powershell-through-a-proxy/">Run PowerShell through a Proxy | Tech Blog</a></li>
</ul>
<p>在 <code>rdp-telegram.ps1</code> 同目录下新建一个 <code>rdp.js</code> 文件。文件内容类似于：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">var wshShell = new ActiveXObject("WScript.Shell"); </span><br><span class="line">wshShell.Run('%SystemRoot%\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -ExecutionPolicy Bypass -File "C:\\\Users\\zbttl\\rdp-telegram.ps1"', 0, false); </span><br></pre></td></tr></tbody></table></figure>

<p>用火绒的，把这个文件加到火绒的信任区里（这都能被当成病毒文件可还行）。</p>
<p>修改计划任务。回到上面第七步，找到操作，双击启动程序项，程序与脚本修改为 <code>wscript</code>，添加参数修改为 <code>rdp.js</code> 地址，如 <code>"C:\Users\zbttl\rdp.js"</code>。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210318012544.png"></p>
<p>修改 <code>rdp-telegram.ps1</code>，加入两行</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[system.net.webrequest]::defaultwebproxy = new-object system.net.webproxy('[代理地址]')</span><br><span class="line">[system.net.webrequest]::defaultwebproxy.BypassProxyOnLocal = $true</span><br></pre></td></tr></tbody></table></figure>

<p>代理地址这里，格式为 <code>http://127.0.0.1:7890</code> 这样。</p>
<p>即可。</p>
<p>（这样设置和全局代理也不冲突，不用担心 loopback）</p>
<p><strong>（21.4.2 更新）</strong> vps 上的 windows server 中无需关心代理问题，也不需要进计划任务中开启管理员模式运行。不过又出现了限制网址访问的问题。具体来说是这样，开 ie 浏览网页的时候经常就会弹这个网页不在信任列表中，是否加入信任列表并访问。对于我们的 ps1 脚本来说，就需要把其中的 <code>*.telegram.org</code> 加入信任列表中，否则就连不上 api 发不出讯息。</p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>telegram bot</tag>
        <tag>windows server</tag>
        <tag>计划任务</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>玩一下 zerotier</title>
    <url>/wan-yi-xia-zerotier/</url>
    <content><![CDATA[<p>之前咱玩过 frp，主要用于远程操作家里的电脑。这东西方便是方便，但用了一段时间看了看日志，好家伙被扫了几百遍。。。。毕竟对外就一个端口一个密码，实话说，不太安全（前几个月还看见 v2ex 因为 frp 导致公司电脑被勒索，后面不知道咋样了）。</p>
<p>类似的工具，纯粹的 ddns 类工具效果和 frp 一样；wireguard 之类的工具，倒是需要先通过工具连进对等网络才能去链接 rdp 等服务，安全了不少，但缺点是要配置分流；最后我看中了 zerotier，也是需要先通过工具连进对等网络，不过不用配置分流，也有网页端 ui 方便配置，还可以软件本身提供的中心节点，速度慢可以靠自建的 moon 中继节点加速，不太好的地方就是开源不完全，以及另外俩待会我会提到的缺点。都还可以接受，暂时用着呗。</p>
<p>步骤就偷懒记简略点。</p>
<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>参考文章：<a href="https://www.cnblogs.com/Yogile/p/12502311.html">ZeroTier 内网穿透 - Yogile - 博客园</a></p>
<p>大部分应用场景都是我用手机（安卓）/ 轻薄本连回家中的游戏本，所以先尝试把他们连起来。</p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>安卓端直接通过 <a href="https://play.google.com/store/apps/details?id=com.zerotier.one">google play</a> 下载同名应用。</p>
<p>windows 可以通过<a href="https://www.zerotier.com/download/">官网下载</a>安装，不过这玩意 chocolatey 里面也有，直接省事一个命令下去：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">choco install zerotier-one -y</span><br></pre></td></tr></tbody></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在 <a href="https://my.zerotier.com/">zerotier 首页</a>注册登录，创建网络（Create a Network）。</p>
<p>在 Managed Routes 中，按自己的喜好设置一个网段（CIDR 格式，也就是 x.x.x.x/24 这样），待会自己设备可以分配到位于这个网段内的地址。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210315233647.png"></p>
<p>剩下的就可以不管了，好奇的话可以看参考文章。</p>
<h3 id="加入"><a href="#加入" class="headerlink" title="加入"></a>加入</h3><p>有两种方法。</p>
<ol>
<li>将客户端中的 nodeid 填入 web 端的 Manually Add Member 中；</li>
<li>使用客户端的 Join Network 功能，将 web 端的 Network ID 填入。</li>
</ol>
<p>把手机和游戏本都 join 进来以后，在 web 端里面就能看到它们了。把最左边的勾打上，修改一下 ip 方便记忆。</p>
<p><strong>（21.5.22 更新）</strong> 把 ipad 也加进来了，但和 android/pc 秒开秒认证不同，ios 我足足开着十来分钟下面的 web 才有认证设备出现（此时屏幕右上角 vpn 图标不出现），认证完再开等了半分钟 vpn 图标才出来，emmm。。。看商店里面，自 4 月份开始的四五条评论都给了 ios 版一星，原因都是获取不到 ip，这应该是个 bug。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210316011848.png"></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>此时 pc 和安卓同时启用客户端，web 这边的 last seen 就会显示 online（像上图一样）。打开安卓的 rdp 客户端，通过刚刚我们修改的 pc 端的 ip（以上图为例，假设下面那一个是 pc 的客户端，没修改 ip 的话，pc 在 zerotier 内网中 ip 就为 <code>10.10.10.181</code>，把这个 ip 输入到 rdp 的地址栏中）。</p>
<p>如果我没猜错的话。。。应该连不上~</p>
<p>这就是 zerotier 的<strong>缺点</strong>之一，连上 vpn 后，要过一会才能成功建立链接，这个时间或长或短，应该得要几分钟。几分钟后，再次链接，应该就能上了。如果还不能上，关闭 windows 的防火墙，尝试用 termux ping 一下 <code>10.10.10.181</code>，排查一下是 zerotier 的问题还是自己配置的问题。</p>
<h2 id="通过路由（ac86u）转发"><a href="#通过路由（ac86u）转发" class="headerlink" title="通过路由（ac86u）转发"></a>通过路由（ac86u）转发</h2><p>相比于让 pc 把所有端口全都交出去，我更希望通过路由器只把我想要放到外网的端口透出去。本节只适用于 merlin 和 merlin 改，官改未知，原厂肯定 8 行。</p>
<p>参考文章：</p>
<ul>
<li><a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=310110">梅林安装zerotier实现内网穿透 - 梅林固件 - 恩山无线论坛 - Powered by Discuz!</a></li>
<li><a href="https://www.snbforums.com/threads/a-guide-about-installing-zerotier-on-asus-ac68u-router.42648/">A Guide About Installing ZeroTier on ASUS AC68U Router | SmallNetBuilder Forums</a></li>
</ul>
<h3 id="安装-zerotier"><a href="#安装-zerotier" class="headerlink" title="安装 zerotier"></a>安装 zerotier</h3><h4 id="安装-opkg"><a href="#安装-opkg" class="headerlink" title="安装 opkg"></a>安装 opkg</h4><p>拿个 u 盘 / tf 卡插路由器上，进入 ssh，输入</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">entware-setup.sh</span><br></pre></td></tr></tbody></table></figure>

<p>根据提示，安装  opkg。</p>
<p>然后安装 zerotier</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install zerotier</span><br></pre></td></tr></tbody></table></figure>

<h3 id="加入-1"><a href="#加入-1" class="headerlink" title="加入"></a>加入</h3><p>启用 tun</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">modprobe tun</span><br></pre></td></tr></tbody></table></figure>

<p>启动 zerotier</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">zerotier-one -d</span><br></pre></td></tr></tbody></table></figure>

<p>仍旧是两种加入方法，一种是获取 nodeid，填到 web 中</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">zerotier-cli info</span><br></pre></td></tr></tbody></table></figure>

<p>另一种是直接在客户端通过 Network ID 加入</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">zerotier-cli join &lt;your network id&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h3><p>看一眼自己路由器 INPUT 里有几条规则</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">iptables -v -L INPUT -n --line-numbers</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210316023446.png"></p>
<p>16 条，很好。于是我们下面命令 INPUT 后面这个数字就设为 17。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">iptables -I INPUT 17 -i zt+ -j ACCEPT</span><br></pre></td></tr></tbody></table></figure>

<p>配置完记得用前一条命令确认一下。</p>
<p>新建 <code>S90zerotier-one.sh</code></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">nano /opt/etc/init.d/S90zerotier-one.sh</span><br></pre></td></tr></tbody></table></figure>

<p>内容为</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#! /bin/sh</span><br><span class="line"></span><br><span class="line">case "$1" in</span><br><span class="line">start)</span><br><span class="line">if lsmod | grep -q tun ;</span><br><span class="line">then echo "mod tun ready" ;</span><br><span class="line">else</span><br><span class="line">modprobe tun;</span><br><span class="line">logger -t "zerotier" -c "modprobe tun started, zerotier-one should start in one minute" -p user.notice ;</span><br><span class="line">exit 0;</span><br><span class="line">fi</span><br><span class="line">if ( pidof zerotier-one )</span><br><span class="line">then echo "ZeroTier-One is already running."</span><br><span class="line">else</span><br><span class="line">echo "Starting ZeroTier-One" ;</span><br><span class="line">/opt/bin/zerotier-one -d ;</span><br><span class="line">echo "$(date) ZeroTier-One Started" | logger -t "zerotier" -c "Started" -p user.notice ; #&gt;&gt; /opt/var/log/zerotier-one.log ;</span><br><span class="line">fi</span><br><span class="line">;;</span><br><span class="line">stop)</span><br><span class="line">if ( pidof zerotier-one )</span><br><span class="line">then</span><br><span class="line">echo "Stopping ZeroTier-One";</span><br><span class="line">killall zerotier-one</span><br><span class="line">echo "$(date) ZeroTier-One Stopped" | logger -t "zerotier" -c "Stopped" -p user.notice ; #&gt;&gt; /opt/var/log/zerotier-one.log</span><br><span class="line">else</span><br><span class="line">echo "ZeroTier-One was not running" ;</span><br><span class="line">fi</span><br><span class="line">;;</span><br><span class="line">status)</span><br><span class="line">if ( pidof zerotier-one )</span><br><span class="line">then echo "ZeroTier-One is running."</span><br><span class="line">else echo "ZeroTier-One is NOT running"</span><br><span class="line">fi</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo "Usage: /etc/init.d/zerotier-one {start|stop|status}"</span><br><span class="line">exit 1</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">exit 0</span><br></pre></td></tr></tbody></table></figure>

<p>给上权限</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">chmod +x /opt/etc/init.d/S90zerotier-one.sh</span><br></pre></td></tr></tbody></table></figure>

<p>然后用这个刚写的脚本重启 zerotier</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">/opt/etc/init.d/S90zerotier-one.sh stop</span><br><span class="line">zerotier-one -d</span><br></pre></td></tr></tbody></table></figure>

<p>配置端口透穿</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -d [路由器在zerotierweb中的ip] -p tcp --dport [透穿的端口] -j DNAT --to-destination [透穿服务所在设备的内网ip]:[透穿的服务的内网端口]</span><br></pre></td></tr></tbody></table></figure>

<p>打个比方：在 web 端中我们设置路由的 zerotier 局域网 ip 为 <code>10.10.10.150</code>；pc 通过 <code>ipconfig</code> 命令获取到自己的内网 ip 为 <code>192.168.1.2</code>，要透穿出去的服务是 rdp，所以内网端口为 3389；为了安全，透到外网的端口不用 3389 而是 4389，则：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -d 10.10.10.150 -p tcp --dport 4389 -j DNAT --to-destination 192.168.1.2:3389</span><br></pre></td></tr></tbody></table></figure>

<p>如果要透穿出去的内网端口无需和外网端口不一致，那么可以同时透穿多个端口。举个例子，如果你用 teamviewer 提供的默认隧道来远程操纵，这玩意平日里就会整天弹仅用于非商业用途的提示，有时候还会提醒你只能用 x 分钟就强制下线。改为仅在内网提供远程服务器的 lan 模式，隧道通过 zerotier 进行转发连接，就一切正常。teamviewer 只支持使用 5938 端口，不像 rdp 地址栏里面跟个新端口号就算改端口了；同时 teamviewer 在某些情况下还会走 443 和 80 端口，所以这两个端口最好也开放出来。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -d 10.10.10.150 -p tcp --m multiport --dport 5938,443,80 -j DNAT --to-destination 192.168.1.2</span><br></pre></td></tr></tbody></table></figure>

<hr>
<p>什么你说有了 rdp 为什么还要用 teamviewer？那我就偏个题：</p>
<ul>
<li>teamviewer 除非安装它提供的驱动或者你关闭物理显示器，否则远控的时候屏幕是亮着的；rdp 需要通过微软账户访问，除非你电脑里还有其他账号（而且你远控过来多半还是要操作你原来账号的内容），否则电脑屏幕是黑着的。</li>
<li>因此，远控的时候如果放个视频什么的，被远控的 teamviewer 设备也会发出声音，rdp 设备就不会。</li>
<li>rdp 远控不支持使用独显，teamviewer 支持。</li>
</ul>
<p>另外，如果先使用 rdp 远控，后续没有回到实机解锁就用 teamviewer 远控，那么 teamviewer 远控时会看到密码输入界面，输入密码后会黑屏。此时按一下 WIN+L 就会恢复正常，不想单独开篇文章记了，就放在这里吧。</p>
<hr>
<p>配置完确认一下</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">iptables -n -t nat -L PREROUTING --line-numbers</span><br></pre></td></tr></tbody></table></figure>

<p>此时用手机 rdp 通过 <code>10.10.10.150:4389</code> 应该就能访问过来了。（同样开开 zerotier 后要等几分钟）</p>
<h3 id="配置自启"><a href="#配置自启" class="headerlink" title="配置自启"></a>配置自启</h3><p>编辑文件 <code>/jffs/scripts/nat-start</code></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">nano /jffs/scripts/nat-start</span><br></pre></td></tr></tbody></table></figure>

<p>加入</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">modprobe tun</span><br></pre></td></tr></tbody></table></figure>

<p>编辑文件 <code>/jffs/scripts/wan-start</code></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">nano /jffs/scripts/wan-start</span><br></pre></td></tr></tbody></table></figure>

<p>加入</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cru a ZeroTierDaemon "* * * * * /opt/etc/init.d/S90zerotier-one.sh start"</span><br></pre></td></tr></tbody></table></figure>

<p>新建文件 <code>/jffs/scripts/firewall-start</code></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">nano /jffs/scripts/firewall-start</span><br></pre></td></tr></tbody></table></figure>

<p>内容为：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">logger -t "custom iptables" "Enter" -p user.notice</span><br><span class="line">iptables -C INPUT -i zt+ -j ACCEPT</span><br><span class="line">if [ $? != 0 ]; then</span><br><span class="line">iptables -I INPUT -i zt+ -j ACCEPT</span><br><span class="line">#需修改</span><br><span class="line">iptables -t nat -A PREROUTING -d 10.10.10.150 -p tcp --dport 4389 -j DNAT --to-destination 192.168.1.2:3389</span><br><span class="line">iptables -t nat -A PREROUTING -d 10.10.10.150 -p tcp --m multiport --dport 5938,443,80 -j DNAT --to-destination 192.168.1.2</span><br><span class="line">#修改到此</span><br><span class="line">logger -t "custom iptables" "rules added" -p user.notice</span><br><span class="line">else</span><br><span class="line">logger -t "custom iptables" "rules existed skip" -p user.notice</span><br><span class="line">fi</span><br></pre></td></tr></tbody></table></figure>

<p>标注为需修改到修改到此的中间两句，按使用者个人需求进行替换，在上面配置防火墙 -&gt; 配置端口透穿中，写了多少句，就加多少句进来。</p>
<h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><p>配置完直接重启检查。通过</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">iptables -v -L INPUT -n --line-numbers</span><br><span class="line">iptables -n -t nat -L PREROUTING --line-numbers</span><br></pre></td></tr></tbody></table></figure>

<p>若是出现了 zt+ 接口和端口透穿相关语句，且</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">zerotier-cli info</span><br></pre></td></tr></tbody></table></figure>

<p>显示正常启用，则配置成功。</p>
<h2 id="配置-moon-节点"><a href="#配置-moon-节点" class="headerlink" title="配置 moon 节点"></a>配置 moon 节点</h2><p>参考文章：</p>
<ul>
<li><a href="https://www.cnblogs.com/Yogile/p/12642423.html">ZeroTier 搭建 moon 服务器 - Yogile - 博客园</a></li>
<li><a href="https://blog.csdn.net/coldboy258/article/details/93133860">ZeroTier-One配置moon心得_coldboy258的专栏-CSDN博客</a></li>
</ul>
<h3 id="安装-zerotier-并加入节点"><a href="#安装-zerotier-并加入节点" class="headerlink" title="安装 zerotier 并加入节点"></a>安装 zerotier 并加入节点</h3><p>我这边装 moon 节点的 vps 系统是 debian，apt 仓库里没有 zerotier。得用 zerotier 官网的官方脚本：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">curl -s https://install.zerotier.com | sudo bash</span><br></pre></td></tr></tbody></table></figure>

<p>默认安装后即启动 zerotier，下面这句命令会报错。不过为了防止万一 zerotier 没启动，还是运行一遍为好</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">zerotier-one -d</span><br></pre></td></tr></tbody></table></figure>

<p>加入方法不再赘述。</p>
<h3 id="配置-moon-节点-1"><a href="#配置-moon-节点-1" class="headerlink" title="配置 moon 节点"></a>配置 moon 节点</h3><p>进入 zerotier 配置文件目录。</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">cd /var/lib/zerotier-one</span><br></pre></td></tr></tbody></table></figure>

<p>生成 moon.json 签名文件。</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">zerotier-idtool initmoon identity.public &gt;&gt;moon.json</span><br></pre></td></tr></tbody></table></figure>

<p>编辑</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">nano moon.json</span><br></pre></td></tr></tbody></table></figure>

<p> 修改 <code>stableEndpoints</code>，在里面填上一个 CIDR 地址，比如（如果有 ipv6 需求可看参考文章进行修改）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">"stableEndpoints": ["1.2.3.4/9993"]</span><br></pre></td></tr></tbody></table></figure>

<p>另外，记下此处 id 的值。</p>
<p>生成 moon 签名文件</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">zerotier-idtool genmoon moon.json</span><br></pre></td></tr></tbody></table></figure>

<p>如无意外会显示：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">wrote xxx.moon (signed world with timestamp xxx)</span><br></pre></td></tr></tbody></table></figure>

<p>将文件考入 moon 节点文件夹中</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">mkdir /var/lib/zerotier-one/moons.d</span><br><span class="line">cp *.moon moons.d/</span><br><span class="line">rm *.moon</span><br></pre></td></tr></tbody></table></figure>

<p>重启服务</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">service zerotier-one restart </span><br></pre></td></tr></tbody></table></figure>

<p>即可。</p>
<h3 id="连结-moon-节点"><a href="#连结-moon-节点" class="headerlink" title="连结 moon 节点"></a>连结 moon 节点</h3><p>在其他节点（非 moon 节点）使用命令</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">zerotier-cli orbit [moonID] [moonID]</span><br></pre></td></tr></tbody></table></figure>

<p>moonID 是上面让记过的那个。另外，这里的确是输入两遍 moonID，你没有看错。。。</p>
<p>再输入</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">zerotier-cli listpeers</span><br></pre></td></tr></tbody></table></figure>

<p>发现多了一个行末为 moon 结尾的行即成功。</p>
<p>另一个方法是把刚刚获得的 moon 文件考下来放入指定目录，且据说这个方法相对输入命令的方法有一个好处，若是 planet 节点崩掉（虽然可能性很小），通过 moon 节点仍能维持正常工作，输入命令那个方法就不行。但 ac86u 里没有放这个文件的地方，所以我没做尝试。</p>
<h3 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h3><ol>
<li><p>如果 moon 节点更换了 zerotier ip，在通过 <code>zerotier-cli listpeers</code> 会发现 moon 节点 ip 缺失。有可能要重新生成 moon 文件，或者停止 zerotier 服务后过若干分钟再启动即可解决。</p>
</li>
<li><p>另一个，也是 zerotier 目前<strong>最大的缺点</strong>：安卓不支持使用 moon 节点。apk 没有这个功能，也没有目录放置 moon 节点文件的地方。改用二进制文件呢？发现 termux 没有渠道来安装 zerotier（各个库中没有，官网的安装脚本不支持），手工编译报错：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Screenshot_20210315-194925.png"></p>
<p>且 issue 中有同样的问题：<a href="https://github.com/zerotier/ZeroTierOne/issues/1218">ZeroTierOne/node at master · zerotier/ZeroTierOne</a></p>
<p>维护者表示我们不支持除了 apk 以外的安卓使用方法。</p>
<p>没辙，差评.jpg</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>zerotier</tag>
        <tag>rdp</tag>
        <tag>teamviewer</tag>
        <tag>端口透穿</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器探针与流量重置</title>
    <url>/fu-wu-qi-tan-zhen-yu-liu-liang-chong-zhi/</url>
    <content><![CDATA[<p>之前薅了 azure 的羊毛，想想每个月 15g 流量，还是挂个探针吧。我之前一直在用 <a href="https://github.com/cppla/ServerStatus">cppla/ServerStatus: 云探针、多服务器探针、云监控、多服务器云监控，演示： https://tz.cloudcpp.com/</a>，因为它可以通过定时连接三网官网去探测服务器的延迟，好多画风更棒的探针都没这个功能（但准不准就不知道了，起码每天测出来的数据都是电信爆炸，这个我觉得是准的）。</p>
<h2 id="ServerStatus-安装"><a href="#ServerStatus-安装" class="headerlink" title="ServerStatus 安装"></a>ServerStatus 安装</h2><p>需要一台安装了 docker ，拥有公网 ip 的探针面板机，我选择装在境内的 tx 云学生机上，等过期了可能就装到家里的 n1 上然后靠 frp 端口透穿（</p>
<h3 id="面板机配置"><a href="#面板机配置" class="headerlink" title="面板机配置"></a>面板机配置</h3><p>下载配置文件，我习惯在 root 下单开文件夹：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">mkdir -p /root/docker-compose/serverstatus</span><br><span class="line">cd /root/docker-compose/serverstatus</span><br><span class="line">wget https://raw.githubusercontent.com/cppla/ServerStatus/master/autodeploy/config.json</span><br></pre></td></tr></tbody></table></figure>

<p>并修改。默认配置文件中有四个文件块，对应着四个服务器，如果你手上没那么多 vps，可以酌情增减。抽出其中一个文件块来看。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	"username": "s01", #待会在客户端服务器中设置的用户名</span><br><span class="line">	"name": "node1", #在 web 面板中显示的节点名</span><br><span class="line">	"type": "xen", #在 web 面板中显示的服务器系统类型</span><br><span class="line">	"host": "host1", #没啥用，作者在issue中说单纯为了区分用</span><br><span class="line">	"location": "cn", #在 web 面板中显示的服务器地区</span><br><span class="line">	"password": "USER_DEFAULT_PASSWORD" #待会在客户端服务器中设置的密码</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure>

<p>设置好后，运行（80 port 太多东西占了，先调到 100 去）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">docker run -d --restart=always --name=serverstatus -v /root/docker-compose/serverstatus/config.json:/ServerStatus/server/config.json -p 100:80 -p 35601:35601 cppla/serverstatus</span><br></pre></td></tr></tbody></table></figure>

<h3 id="客户机配置"><a href="#客户机配置" class="headerlink" title="客户机配置"></a>客户机配置</h3><p>debian 默认带 python2，不用装了。直接下载（假设直接下到 <code>/root </code> 下）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">wget --no-check-certificate -qO client-linux.py 'https://raw.githubusercontent.com/cppla/ServerStatus/master/clients/client-linux.py'</span><br></pre></td></tr></tbody></table></figure>

<p>运行：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">python client-linux.py SERVER=[宿主服务器ip] USER=[宿主机配置中对应代码块的用户名] PASSWORD=[宿主机配置中对应代码块的密码]</span><br></pre></td></tr></tbody></table></figure>

<p>如果显示 <code>ipv4 granted</code> 之类的消息，那就证明连接正常。然后做后台运行和自启，请出老朋友 supervisor。</p>
<p>安装</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">apt install supervisor -y</span><br></pre></td></tr></tbody></table></figure>

<p>新建文件 <code>tanzhen.conf</code></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[program:tanzhen]</span><br><span class="line">user=root</span><br><span class="line">command=python client-linux.py SERVER=[宿主服务器ip] USER=[宿主机配置中对应代码块的用户名] PASSWORD=[宿主机配置中对应代码块的密码]</span><br><span class="line">autostart=true</span><br><span class="line">redirect_stderr = true</span><br><span class="line">stdout_logfile_maxbytes = 1MB </span><br><span class="line">stdout_logfile = /tmp/tanzhen.log</span><br></pre></td></tr></tbody></table></figure>

<p>放入 <code>/etc/supervisor/conf.d</code> 中。重载配置：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">supervisorctl reload</span><br></pre></td></tr></tbody></table></figure>

<p>访问 <code>[面板机ip]:100</code>，正常的话就能看到客户端已连接。</p>
<hr>
<p>这么配置，总流量是找 <code>/proc/net/dev</code> 要的，于是出现两个问题：</p>
<ol>
<li>重启后流量显示重置</li>
<li>每月重置流量没法实现</li>
</ol>
<p>项目 issue <a href="https://github.com/cppla/ServerStatus/issues/54">服务器流量统计怎么清零 · Issue #54 · cppla/ServerStatus</a> 里面，作者建议用 vnstat 来探测流量。</p>
<h2 id="vnstat-探测流量与流量重置"><a href="#vnstat-探测流量与流量重置" class="headerlink" title="vnstat 探测流量与流量重置"></a>vnstat 探测流量与流量重置</h2><h3 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h3><p>安装 vnstat</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">apt install vnstat</span><br></pre></td></tr></tbody></table></figure>

<p>安装后重启一遍服务，以网络获取接口情况；或者直接新建接口。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">service vnstat restart</span><br><span class="line">#上面这个命令或者下面这个命令，二选一，假设网卡名为 eth0</span><br><span class="line">#vnstat --create -i eth0</span><br></pre></td></tr></tbody></table></figure>

<p>输入</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">vnstat -q</span><br></pre></td></tr></tbody></table></figure>

<p>出现类似</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210311143837.png"></p>
<p>就算成功。因为 5 分钟才刷新一次流量显示，所以 5 分钟后再次输入 <code>vnstat -q</code> 才会有正确的流量数据出现。类似于：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210311144006.png"></p>
<p>当然，如果等的不耐烦，也可以直接输入 <code>vnstat -u</code> 手动刷新流量显示值，然后输入 <code>vnstat -q</code> 查看。</p>
<h3 id="整合进探针中"><a href="#整合进探针中" class="headerlink" title="整合进探针中"></a>整合进探针中</h3><p>编辑探针客户端的 <code>client.py</code> 文件。</p>
<p>将</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">def liuliang():</span><br><span class="line">    NET_IN = 0</span><br><span class="line">    NET_OUT = 0</span><br><span class="line">    with open('/proc/net/dev') as f:</span><br><span class="line">        for line in f.readlines():</span><br><span class="line">            netinfo = re.findall('([^\s]+):[\s]{0,}(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)', line)</span><br><span class="line">            if netinfo:</span><br><span class="line">                if netinfo[0][0] == 'lo' or 'tun' in netinfo[0][0] \</span><br><span class="line">                        or 'docker' in netinfo[0][0] or 'veth' in netinfo[0][0] \</span><br><span class="line">                        or 'br-' in netinfo[0][0] or 'vmbr' in netinfo[0][0] \</span><br><span class="line">                        or 'vnet' in netinfo[0][0] or 'kube' in netinfo[0][0] \</span><br><span class="line">                        or netinfo[0][1]=='0' or netinfo[0][9]=='0':</span><br><span class="line">                    continue</span><br><span class="line">                else:</span><br><span class="line">                    NET_IN += int(netinfo[0][1])</span><br><span class="line">                    NET_OUT += int(netinfo[0][9])</span><br><span class="line">    return NET_IN, NET_OUT</span><br></pre></td></tr></tbody></table></figure>

<p>替换为</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">def liuliang():</span><br><span class="line">	NET_IN = 0</span><br><span class="line">	NET_OUT = 0</span><br><span class="line">	vnstat=os.popen('vnstat --dumpdb').readlines()</span><br><span class="line">	for line in vnstat:</span><br><span class="line">		if line[0:4] == "m;0;":</span><br><span class="line">			mdata=line.split(";")</span><br><span class="line">			NET_IN=int(mdata[3])*1024*1024</span><br><span class="line">			NET_OUT=int(mdata[4])*1024*1024</span><br><span class="line">			break</span><br><span class="line">	return NET_IN, NET_OUT</span><br></pre></td></tr></tbody></table></figure>

<p>重载 supervisor 即可生效。</p>
<p><strong>（21.3.31 更新）</strong> 在某些系统（比如 ubuntu 中），安装的 vnstat 版本不是 v1.x 而是新的 v2.x，剔除了 <code>vnstat --dumpdb</code> 这个命令导致上面这行代码无法工作。需要更换为：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">def liuliang():</span><br><span class="line">    NET_IN = 0</span><br><span class="line">    NET_OUT = 0</span><br><span class="line">    vnstat=os.popen('vnstat --oneline').readlines()</span><br><span class="line">    for line in vnstat:</span><br><span class="line">        mdata=line.split(";")</span><br><span class="line">        NET_IN=str(mdata[8])</span><br><span class="line">        NET_IN=re.findall('\d+\.\d*', NET_IN)</span><br><span class="line">        NET_IN=int(float(NET_IN[0])*1024*1024*1024)</span><br><span class="line">        NET_OUT=str(mdata[9])</span><br><span class="line">        NET_OUT=re.findall('\d+\.\d*', NET_OUT)</span><br><span class="line">        NET_OUT=int(float(NET_OUT[0])*1024*1024*1024)</span><br><span class="line">    return NET_IN, NET_OUT</span><br></pre></td></tr></tbody></table></figure>

<h3 id="配置定时重置和刷新时间"><a href="#配置定时重置和刷新时间" class="headerlink" title="配置定时重置和刷新时间"></a>配置定时重置和刷新时间</h3><p>vnstat 的配置放在 <code>/etc/vnstat.conf</code> 中。默认情况下每月流量重置时间为 1 号。如果需要修改，可以修改 MonthRotate 参数。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"># on which day should months change</span><br><span class="line">MonthRotate 1</span><br></pre></td></tr></tbody></table></figure>

<p>流量总量显示 5 分钟刷新一次，有点久。可以修改</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"># how often (in minutes) bandwidth detection is redone when</span><br><span class="line"># BandwidthDetection is enabled (0 = disabled)</span><br><span class="line">BandwidthDetectionInterval 5</span><br></pre></td></tr></tbody></table></figure>

<p>不过再怎么修改也没有默认的实时更新快。。。这也是使用 vnstat 代替默认方法的缺点之一。</p>
<p>还有，每月重置时间这个，如果你手动修改后再修改时区到最近的 0 点想看看能不能生效，多半是看不到的。根据：<a href="https://ubuntuforums.org/showthread.php?t=2324673">[SOLVED] vnstat not changing the start of the month [day]</a></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Having been in contact by e-mail with vnstat's author, Teemu Toivola, it was revealed that [as I suspected/hoped for] the new setting to MonthRotate will not take effect on the same month that it was done; so I will definitely have to wait until June 10th to confirm this feature of vnstat. Until then, I will keep this thread open.</span><br><span class="line">Oddly enough, despite my intense searching for an answer to this fact, I never read any explanation for it anywhere else; well, there is one now, right here!</span><br><span class="line">Thank you, Habitual, for the assistance.</span><br></pre></td></tr></tbody></table></figure>

<p>也就是说一定要等到真实时间的下个月才会重置流量。（当然把时间调到下个月能不能成功我就不知道了，懒得试）</p>
<h3 id="手动重置流量信息"><a href="#手动重置流量信息" class="headerlink" title="手动重置流量信息"></a>手动重置流量信息</h3><p>我还不知道上面这个方法能不能生效。。。如果不行的话，那就只能手动重置流量。</p>
<p>删除流量数据</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">rm -r /var/lib/vnstat/.* </span><br><span class="line">rm -r /var/lib/vnstat/* </span><br></pre></td></tr></tbody></table></figure>

<p>重启 vnstat</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">service vnstat restart</span><br></pre></td></tr></tbody></table></figure>

<p>改一改写进 crontab 也能达成自动重置流量的目的。</p>
<hr>
<p>如果删除后重启，查看 <code>service vnstat status</code> 发现遭遇文件权限问题：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">chown -R vnstat:vnstat /var/lib/vnstat</span><br></pre></td></tr></tbody></table></figure>

<p>另外，vnstat 的日志中还发现有一个叫 vnstat daemon，也就是叫 vnstatd 的东西。其实 vnstat 和 vnstatd 是同一个服务。操作（start/stop/restart/status）的时候只用操作其中一个就好。</p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>探针</tag>
        <tag>ServerStatus</tag>
        <tag>vnstat</tag>
      </tags>
  </entry>
  <entry>
    <title>debian 10 单独安装 mysql</title>
    <url>/debian-10-dan-du-an-zhuang-mysql/</url>
    <content><![CDATA[<p>之前在<a href="https://zbttl.github.io/yi-bu-dao-wei-de-vps-cong-ru-men-dao-fang-qi/?highlight=mysql">一步到位的 vps 从入门到放弃 | Bao’s 备忘录</a>谈过可以用 lnmp / 宝塔去装 mysql。 不过很多时候我并不需要 php，我自己的 vps 主用 caddy 而不是 nginx，只有 mysql 是刚需，加上我个人秉承着 「apt + dpkg 走天下」的暴论，就想着有没有官方的使用 apt 的单独安装 mysql 的方法（</p>
<p>只谈安装，剩下的配置流程，以前谈过了，参考本文开头那篇文章。</p>
<h2 id="使用-mysql-apt-config-安装"><a href="#使用-mysql-apt-config-安装" class="headerlink" title="使用 mysql-apt-config 安装"></a>使用 mysql-apt-config 安装</h2><p>和 ubuntu 那边的 ppa 是类似的东西（</p>
<p>参考文章：<a href="https://www.digitalocean.com/community/tutorials/how-to-install-the-latest-mysql-on-debian-10">How To Install the Latest MySQL on Debian 10 | DigitalOcean</a></p>
<ol>
<li><p>到 <a href="https://dev.mysql.com/downloads/repo/apt/">MySQL :: Download MySQL APT Repository</a> 获取最新的 mysql-apt-config 安装包。拿到地址后直接到系统里面 wget，现在的版本是 0.8.16-1，so：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">wget https://repo.mysql.com//mysql-apt-config_0.8.16-1_all.deb </span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>安装</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo dpkg -i mysql-apt-config*</span><br></pre></td></tr></tbody></table></figure>

<p>更新一下 apt 库</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></tbody></table></figure>

<p>安装</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">apt install mysql-server</span><br></pre></td></tr></tbody></table></figure>

<p>安装过程中，会弹出两个窗口，一个是选择 mysql 需要安装的组件，一个是选择 mysql 的版本，目前可选 5.7 和 8.0；一个是输入 root 密码提权。</p>
</li>
</ol>
<h2 id="使用官网离线安装包"><a href="#使用官网离线安装包" class="headerlink" title="使用官网离线安装包"></a>使用官网离线安装包</h2><p>用上面的方法只能装两个版本，还要装更旧的就得去官网找包了。</p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>到<a href="https://downloads.mysql.com/archives/community/">MySQL :: Download MySQL Community Server (Archived Versions)</a>页面，选择相应版本和平台。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210310205740.png"></p>
<p>可以下载第一个 deb bundle，用于完全离线安装；也可以下载 mysql-community-server（上图第二个包）</p>
<h3 id="下载-mysql-community-server-并修复安装（二选一）"><a href="#下载-mysql-community-server-并修复安装（二选一）" class="headerlink" title="下载 mysql-community-server 并修复安装（二选一）"></a>下载 mysql-community-server 并修复安装（二选一）</h3><p>若是下载 mysql-community-server 的话，同样是获取到下载连接然后用 wget 下载再用 dpkg 安装，不在赘述；安装中一定会报错：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210310210236.png"></p>
<p>不过可以用命令来修复：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">apt --fix-broken install</span><br></pre></td></tr></tbody></table></figure>

<p>不报错，并提示输入 root 密码的话，基本就安装成功了。</p>
<h3 id="下载-deb-bundle-，完全离线安装（二选一）"><a href="#下载-deb-bundle-，完全离线安装（二选一）" class="headerlink" title="下载 deb bundle ，完全离线安装（二选一）"></a>下载 deb bundle ，完全离线安装（二选一）</h3><p>参考：<a href="https://dev.mysql.com/doc/mysql-installation-excerpt/5.7/en/linux-installation-debian.html">MySQL :: MySQL Installation Guide :: 7.6 Installing MySQL on Linux Using Debian Packages from Oracle</a></p>
<p>下载 deb bundle 包后解压</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">mkdir mysql</span><br><span class="line">tar -xvf mysql-server_*.tar -C ./mysql</span><br><span class="line">cd mysql</span><br></pre></td></tr></tbody></table></figure>

<p>安装 libaio</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">apt install libaio1 -y</span><br></pre></td></tr></tbody></table></figure>

<p>配置，提权</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">dpkg-preconfigure mysql-community-server_*.deb</span><br></pre></td></tr></tbody></table></figure>

<p>安装</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">dpkg -i mysql-{common,community-client,client,community-server,server}_*.deb</span><br></pre></td></tr></tbody></table></figure>

<p>不过说是完全离线，大概率还是要修复依赖。。。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">apt -f install -y</span><br></pre></td></tr></tbody></table></figure>

<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>没法用 <code>apt remove</code> 命令直接下载，错误的卸载方法还可能导致未来无法正常安装。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">apt-get remove --purge mysql-server mysql-client mysql-common -y</span><br><span class="line">apt-get autoremove -y</span><br><span class="line">apt-get autoclean</span><br><span class="line">rm -rf /etc/mysql</span><br></pre></td></tr></tbody></table></figure>

<p>中间弹出 <code>Remove data directories ?</code>，选 yes。</p>
<h3 id="提示-install-invalid-user-‘mysql’"><a href="#提示-install-invalid-user-‘mysql’" class="headerlink" title="提示 install: invalid user ‘mysql’"></a>提示 <code>install: invalid user ‘mysql’</code></h3><p>多半就是错误的卸载导致的。</p>
<p>运行</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">adduser mysql</span><br></pre></td></tr></tbody></table></figure>

<p>设置一个密码即可。</p>
<h3 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h3><p>我闲的无聊折腾 mysql 安装就是因为我先装了 8.0 版本在 1g 的 azure 机子上，发现一重启探针就报警吃了 88% 内存，一排查发现是 mysql 的问题。</p>
<p>实测 8.0 版本吃的内存比 5.7 多一倍。。。换为 5.7，内存占用降为 63%。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>debian</tag>
      </tags>
  </entry>
  <entry>
    <title>netch 使用体验（代理规则获取）</title>
    <url>/netch-shi-yong-ti-yan-dai-li-gui-ze-huo-qu/</url>
    <content><![CDATA[<p><a href="https://github.com/NetchX/Netch">Netch</a> 这么一个功能强大且逻辑合理的 gui，才出不久但各种文档已经足够详细，还要详细谈谈的必要嘛。。。</p>
<p>还真有（</p>
<p>netch 本身自带的规则并不丰富，进程全局模式可用度不高，因此需要手动提取规则。</p>
<p>官方引用了 SSTAP-rule 处的文档<a href="https://github.com/FQrabbit/SSTap-Rule/wiki">Home · FQrabbit/SSTap-Rule Wiki</a>，给出了几种提取规则的方法：</p>
<blockquote>
<p><a href="https://github.com/oooldtoy/SSTAP_ip_crawl_tool#sstap_ip_crawl_tool">一个自动获取游戏远程ip，并自动写成SSTAP规则文件的脚本。 </a>(建议优先考虑此工具)</p>
<p><a href="https://github.com/NormanBB/N/blob/master/intro.md">使用 openQPA 进行基于游戏进程的ip地址获取</a></p>
<p><a href="https://github.com/FQrabbit/SSTap-Rule/blob/master/doc/UU-extract.md">提取加速器规则（超详细）</a></p>
</blockquote>
<p>经过实验，方法三加速效果最好也最简单。但也有两个问题：</p>
<ol>
<li>你得有 uu 加速器（tx 不行）会员，或者你有认识的人帮你提取（有会员为啥还要自建？）。</li>
<li>tun/tap 没有程序代理模式用起来那么稳定，特别是如果 netch 是二级代理模式那就更容易出问题了（有几率导致 loopback）。</li>
</ol>
<p>方法一，是提取游戏进程的路由。但问题的关键似乎并不是「该提取哪些路由规则」而是「哪些程序需要代理」。譬如 cod16 在仅代理本体 <code>ModernWarfare.exe</code> 的情况下游戏能够顺利进入，但丢包显示错误，且游戏下载并未加速。</p>
<p>方法二能找到游戏需要代理的进程（其本身也能找到需要加速进程的路由），需要将后台尽量清空，测试时流量跑的多的未知进程基本上就是需要代理的进程了。当然也不一定用方法 2 这个工具，许多工具都能达成目的，不过方法 2 这个程序，足够直观。缺点是，安装有点繁琐：</p>
<ol>
<li><p>安装 python2，如果之前安装有并主用 python3 的，不需要把 python2 加入 path 中。</p>
</li>
<li><p>安装 PyQt4。可以从<a href="https://sourceforge.net/projects/pyqt/files/PyQt4/PyQt-4.11.4/PyQt4-4.11.4-gpl-Py2.7-Qt4.8.7-x64.exe/download">这个地址</a>安装下载，也可以用 chocolatey 安装</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">choco install pyqt4 -y</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>安装模块。参见 <a href="https://python.freelycode.com/contribution/detail/139">[官解]Windows上Python2和3如何兼容？</a></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">py -2 -m pip install xmltodict==0.11.0</span><br><span class="line">py -2 -m pip install httplib2</span><br><span class="line">py -2 -m pip install bs4</span><br><span class="line">py -2 -m pip install dpkt</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>下载并解压 <a href="https://github.com/l7dpi/openQPA">openQPA</a>（没有 release，直接拉取整个项目就行），双击 <code>QPA.py</code> 打开，如果。跑两圈需要加速的应用然后把闹得欢的进程加入加速名单吧！</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210228063445.png"></p>
</li>
</ol>
<p>另外，tun/tap 的全局进程代理模式和绕过大陆/局域网模式：<code>[3] Bypass LAN and China (TUN/TAP)</code>，以及后续的全局进程白名单模式，我尚未进行测试，如果效果好上面这些操作就当闲的没事干了（</p>
]]></content>
      <categories>
        <category>game</category>
      </categories>
      <tags>
        <tag>游戏加速</tag>
        <tag>netch</tag>
      </tags>
  </entry>
  <entry>
    <title>ikago 和 pcap2socks 使用体验</title>
    <url>/ikago-he-pcap2socks-shi-yong-ti-yan/</url>
    <content><![CDATA[<p>参考文章：<a href="https://www.v2ex.com/t/672367#r_8979623">分享自己用 Go 写的游戏加速器 IkaGo - V2EX</a></p>
<p>从 <a href="https://t.me/NewlearnerChannel">Newlearner の自留地</a> 了解到的游戏加速软件。</p>
<p>后来发现作者还写了一个 pcap2socks 的项目，同样用于游戏加速。</p>
<p>区别在于，</p>
<ul>
<li>ikago 是完整的一套游戏加速方案；</li>
<li>pcap2socks 只保留了旁路由的功能，还需搭配 socks 代理使用。</li>
</ul>
<p>和很多专攻 pc 代理的加速器不同，这类型加速器的加速原理是旁路由，常见于给各种游戏主机加速。用过各种游戏加速器 pc 客户端主机加速的都应该有印象：在 pc 这边开好主机加速，再在游戏机那一段设置好 ip 配置，正确设置的话 pc 加速器这边会显示已成功加速。而这俩加速器的使用步骤也差不多是这样。</p>
<p>当然，自建加速器和大厂加速器的取舍我已经在<a href="">另一篇</a>文章里提过了，这里只谈这种方案在技术上对普通加速器的优势：</p>
<p>各个大厂的游戏加速器的主机加速功能只能为一台设备加速，而且这台设备还有平台限制；而自建加速器想加速多少设备就加速多少设备；只要你想，加速 pc 、手机也可以。</p>
<p>当然了，旁路由加速要求加速设备和被加速设备不能是同一个设备，用过大厂游戏加速器主机加速的人也应该对此深有体会，自己想玩主机却还要一直开着电脑？大厂们也知道这点，于是就趁机贩卖起能够更为小巧省电，独立运行器加速器的主机盒；以及我在<a href="https://zbttl.github.io/lu-you-qi-pao-fen-shua-ji-hou-ri-tan-ji-ji-ge-jia-su-qi-shi-yong-qing-kuang-shou-ji/?highlight=%E8%B7%AF%E7%94%B1#%E6%80%BB%E7%BB%93%E6%88%91%E7%94%A8%E8%BF%87%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8A%A0%E9%80%9F%E5%99%A8%E7%9A%84%E4%BC%98%E5%8A%A3%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89">另一篇文章</a>中谈到那些能安装加速器插件的路由器。其实原理都并没有脱离 arp 劫持 + 代理流量的旁路由模式。自建就更灵活了：只要你的设备能跑起 go，就能运行。各类软路由，甚至手机上的 termux，都可以达成要求，这里就不详细阐述了。</p>
<h2 id="ikago"><a href="#ikago" class="headerlink" title="ikago"></a><a href="https://github.com/zhxie/ikago">ikago</a></h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>server 和 client 端运行平台是 linux 或者 windows 的，直接下载对应 release。或者按文档给的方法，安装 go 并 git clone 项目后使用 go run 运行，适合其他平台。</p>
<h3 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h3><p>vps 这边新建一个 server.json，假设就放在 <code>/root</code> 下吧</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">"listen-devices": [],</span><br><span class="line">"upstream-device": "",</span><br><span class="line">"gateway": "",</span><br><span class="line">"mode": "faketcp",</span><br><span class="line">"method": "aes-128-gcm",</span><br><span class="line">"password": "[密码]",</span><br><span class="line">"rule": true,</span><br><span class="line">"monitor": 9400,</span><br><span class="line">"verbose": false,</span><br><span class="line">"log": "",</span><br><span class="line">"mtu": 1400,</span><br><span class="line">"kcp": false,</span><br><span class="line">"kcp-tuning": {</span><br><span class="line">    "sndwnd": 100,</span><br><span class="line">    "rcvwnd": 100,</span><br><span class="line">    "datashard": 20,</span><br><span class="line">    "parityshard": 20,</span><br><span class="line">    "acknodelay": false,</span><br><span class="line">    "nodelay": false,</span><br><span class="line">    "interval": 10,</span><br><span class="line">    "resend": 0,</span><br><span class="line">    "nc": 0</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">"fragment": 1400,</span><br><span class="line">"port": 9300</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>可以改的几个地方：</p>
<ul>
<li>monitor 是和 web 监控端链接的接口。不过 monitor 这个接口在 client 端开就足够了，不一定要在 server 端这里再开一个。</li>
<li>verbose，详情，设为 true 日志会变得更详细。</li>
<li>log。日志输出位置。但后续我们会用 supervisor 开启自启的同时去输出日志，所以没必要开这个。</li>
<li>port。远程端口。</li>
</ul>
<p>看起来可以调但其实不能调的地方：</p>
<ul>
<li>mode。文档写可选 tcp 和 faketcp，但实际上用 tcp 的话不能开启加密，即 method 那里只能填 none，否则连不通。</li>
<li>kcp。kcp 设为打开的话，client 端平台不能是 windows，否则也连不通，会报错 <code>network layer type not support</code>。</li>
</ul>
<p>这俩应该是 bug 吧（前者在项目的 <a href="https://github.com/zhxie/ikago#known-issues">Known Issues</a> 中有提到）。。。不过看作者项目好久没动，我也不好意思提 issue 去了（又不是不能用）。</p>
<p>假设咱的 release 版 server 端二进制文件放在 <code>/root/ikago</code> 下吧，启动看看：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">/root/ikago/ikago-server -c /root/ikago/server.json</span><br></pre></td></tr></tbody></table></figure>
<p>大概效果是这样的：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210224092039.png"></p>
<h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><p>以 windows 为例，新建 client.json:</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">"listen-devices": [],</span><br><span class="line">"upstream-device": "",</span><br><span class="line">"gateway": "",</span><br><span class="line">"mode": "faketcp",</span><br><span class="line">"method": "aes-128-gcm",</span><br><span class="line">"password": "[密码]",</span><br><span class="line">"rule": true,</span><br><span class="line">"monitor": 9400,</span><br><span class="line">"verbose": true,</span><br><span class="line">"log": "",</span><br><span class="line">"mtu": 1400,</span><br><span class="line">"kcp": false,</span><br><span class="line">"kcp-tuning": {</span><br><span class="line">    "sndwnd": 100,</span><br><span class="line">    "rcvwnd": 100,</span><br><span class="line">    "datashard": 20,</span><br><span class="line">    "parityshard": 20,</span><br><span class="line">    "acknodelay": false,</span><br><span class="line">    "nodelay": false,</span><br><span class="line">    "interval": 10,</span><br><span class="line">    "resend": 0,</span><br><span class="line">    "nc": 0</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">"publish": "10.6.0.2",</span><br><span class="line">"fragment": 1400,</span><br><span class="line">"port": 0,</span><br><span class="line">"sources": [</span><br><span class="line">    "10.6.0.1",</span><br><span class="line">    "10.6.0.3"</span><br><span class="line">],</span><br><span class="line">"server": "[vps_ip]:9300"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>monitor 和 verbose，和 server 那边含义一致。client 这边建议都开启。</li>
<li>sources：劫持并监听的本地 ip，即要加速的设备在路由器下的本地 ip。</li>
<li>publish：除了使用 arp 或者到路由器中获取需要加速设备的 ip 并填入 sources 中，更推荐的方法是单独做一个网段，用过加速器主机加速的各位应该都不陌生。作者选用的方法是模仿 tx 加速器的网段设置，被加速主机 ip 填 10.6.0.1，网关填 10.6.0.2,前者写到 sources 中，后者写到 publish 中，我个人又多加了一个 ip，这样如果还有另一个加速的设备就不用回来再修改了。</li>
</ul>
<p>启动</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">.\ikago-client.exe -c .\client.json</span><br></pre></td></tr></tbody></table></figure>

<p>效果差不多是这样的：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210225090832.jpg"></p>
<h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><p>被加速设备改用手动获取 ip 地址，publish 处的地址填入网关一项中；sources 处的其中一个地址填入 ip 一项中，子网掩码为 255.255.255.0，dns 一项填入 8.8.8.8。</p>
<p>打开 ikago-web，可以选择拉取项目 <a href="https://github.com/zhxie/ikago-web">zhxie/ikago-web: IkaGo Web is a front-end interface for IkaGo.</a> 在本地打开或者自搭，也可以使用<a href="http://ikago.ikas.ink/">作者搭建的 web 页面</a>。</p>
<p>点击 configure，path 改成 <code>localhost:9400</code>。正确设置的话，status 处会显示为 active，并且左下角显示有已经加速上的设备。</p>
<h3 id="服务端设置自启（可选）"><a href="#服务端设置自启（可选）" class="headerlink" title="服务端设置自启（可选）"></a>服务端设置自启（可选）</h3><ol>
<li><p>安装 supervisor</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">apt install supervisorctl -y</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>新建一个 <code>ikago.conf</code>，内容如下</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[program:ikago]</span><br><span class="line">user=root</span><br><span class="line">command=/root/ikago/ikago-server -c /root/ikago/server.json</span><br><span class="line">autostart=true</span><br><span class="line">redirect_stderr = true</span><br><span class="line">stdout_logfile_maxbytes = 1MB </span><br><span class="line">stdout_logfile = /tmp/ikago.log</span><br></pre></td></tr></tbody></table></figure>

<p> 把这个文件放进 <code>/etc/supervisor/conf.d</code>。</p>
</li>
<li><p>运行</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">supervisorctl reload</span><br></pre></td></tr></tbody></table></figure>

<p> 后续直接通过</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">tail -f /tmp/ikago.log</span><br></pre></td></tr></tbody></table></figure>

<p> 查看日志。</p>
</li>
</ol>
<h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><ol>
<li><p>有时虽然配置正确了，被加速设备在 web 面板中却未出现，且被加速设备也连接不上网络。尝试重启笔记本和路由器，还有可能是某些路由器本身系统因素导致出现问题，我曾经就遭遇过加速设备在主路由（ac86u，梅林改，本身就不算稳定的系统）加速不上，挂上一个刷入小米路由器的联想 newifi mini 并让加速和被加速设备连上后加速成功的例子。</p>
<p> 另一种情况是我一开始习惯把网关设为 <code>.1</code> 为结尾的地址，因此 publish 处我填了 <code>10.6.0.1</code>，sources 处填了 <code>10.6.0.2</code>，而被加速设备处也进行相应顺序上的调换，结果发现加速不上；换回来就成功了。这就比较玄学了。。。后面的 pcapsocks 也出现过这样的问题。</p>
</li>
<li><p>我在<a href="">前一篇</a>文章中写过不太推荐这个加速器，原因就在于，我运行后也没在使用，但五六天后我的探针给我报警了，回来一查：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Xshell_D1Iuwab1Dc.png"></p>
<p>摊手（</p>
</li>
</ol>
<h2 id="pcap2socks-和-pcap2socks-gui"><a href="#pcap2socks-和-pcap2socks-gui" class="headerlink" title="pcap2socks 和 pcap2socks-gui"></a><a href="https://github.com/zhxie/pcap2socks">pcap2socks</a> 和 <a href="https://github.com/zhxie/pcap2socks-gui">pcap2socks-gui</a></h2><p>和 ikago 略有差异，pcap2socks 隧道的工作交给 socks5 了，只需要一个放在本地的二进制文件即可。假设 socks 开在 1080 端口，则：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">.\pcap2socks.exe -s 10.6.0.1 -p 10.6.0.2 -d 127.0.0.1:1080</span><br></pre></td></tr></tbody></table></figure>

<p>这里的 <code>-s</code> 和 <code>-p</code> 在上面的 ikago client 配置中都有对应项，还不熟悉的可以返回去看。</p>
<p>这时多半会报错</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">error: Cannot determine the interface. Available interfaces are listed below, and please use -i &lt;INTERFACE&gt; to designate:</span><br></pre></td></tr></tbody></table></figure>

<p>然后底下这些就是设备列表，找到你的上网网卡的设备，复制前面那一长串 <code>\Device\NPF_{xxx}</code>，在命令用 <code>-i</code> 参数带上，即再次输入：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">.\pcap2socks.exe -s 10.6.0.1 -p 10.6.0.2 -d 127.0.0.1:1080 -i '\Device\NPF_{xxx}'</span><br></pre></td></tr></tbody></table></figure>

<p>主机端参考 ikago 那边的设置就行了。</p>
<p>这个我还是不推荐用。。。因为有时运行一段时间就报错：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">warning: receive from proxy: TCP: xxx:443 -&gt; 0: 你的主机中的软件中止了一个已建立的连接。 (os error 10053)</span><br></pre></td></tr></tbody></table></figure>

<p>但其 gui 版本经过我实验表现相对稳定，也不用考虑网卡那串长长的 CLSID，甚至有 tx/uu 加速器默认的 ip 方案可直接选用，推荐使用。（这都喂到嘴里了，应该不用教了吧，gui 教程还要截图挺累的）</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210227054945.png"></p>
<p>（唯一的缺点也许是不能在软路由上用 gui 版。不过软路由直接设置成旁路由然后全局代理他不香嘛？）</p>
<p>不过这里还是有个小问题，某些设备（特别是 windows 20H2）打开这个 gui 看到的是一片空白，我排查了一下，应该是新版 edge 的锅，有这么几种解决方案：</p>
<ol>
<li><p>（优先使用）作者在项目中底下写的，启用 loopback 。以管理员权限运行 powershell，输入：</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">CheckNetIsolation.exe LoopbackExempt -a -n="Microsoft.Win32WebViewHost_cw5n1h2txyewy"</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>安装 chromium edge dev。可以从 <a href="https://www.microsoftedgeinsider.com/zh-cn/download/">Microsoft Edge Insider Channels</a> 下载。也可以直接用 chocolatey 安装。</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">choco install microsoft-edge-insider-dev -y</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>嫌 chromium edge dev 太臃肿？也可以只下 runtime：<a href="https://developer.microsoft.com/zh-cn/microsoft-edge/webview2/#download-section">Webview2 - Microsoft Edge Developer</a>。下载安装里面的 x64 版「常青版独立安装程序」（卧槽这翻译和坐和放宽有的一拼）。</p>
</li>
<li><p>（并不是正确的解决方法，但我潜意识感觉后续可能会有用，记录一下）更新 <code>WebView2Loader.dll</code>。<br> 安装 nuget</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">choco install NuGet.CommandLine -y</span><br></pre></td></tr></tbody></table></figure>

<p>  安装 <a href="https://www.nuget.org/packages/Microsoft.Web.WebView2">NuGet Gallery | Microsoft.Web.WebView2 1.0.705.50</a>：</p>
  <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">nuget install Microsoft.Web.WebView2</span><br></pre></td></tr></tbody></table></figure>

<p>  提取 <code>WebView2Loader.dll</code>，可利用 everything 搜索，一般在 <code>C:\Windows\System32\Microsoft.Web.WebView2.1.0.705.50\build\x64\</code> 下，everything 可能会搜索到其他几个 x64 目录下也有 <code>WebView2Loader.dll</code>，应该都是同一个文件。pcap2socks 自带的 <code>WebView2Loader.dll</code> 应该包含了几个平台的依赖，大小 400 多 k，我们提取的 x64 版只有 133k。（这年头不会还有用 x86 的吧？用 x86 寨板跑加速？）</p>
<p>  然后把提取到的文件覆盖进 pcap2socks 目录内就行。</p>
<p> <strong>（21.4.2 更新）</strong> netch 已于上个月加入 pcapsocks 功能。我试了一下，好用。除了代理地址定义起来没有原版 pcap2socks 简单，以及界面不够好看，应该没啥缺点。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>game</category>
      </categories>
      <tags>
        <tag>游戏加速</tag>
        <tag>ikago</tag>
        <tag>pcap2socks</tag>
      </tags>
  </entry>
  <entry>
    <title>onedrive 挂载到 cloudflare</title>
    <url>/onedrive-gua-zai-dao-cloudflare/</url>
    <content><![CDATA[<p>感觉 azure 做的 oneIndex 目录打开还是贼慢。</p>
<p>玩玩 Spencer Woo 大佬修改的项目 <a href="https://github.com/spencerwooo/onedrive-cf-index">spencerwooo/onedrive-cf-index: 🏵 Probably the best looking OneDrive Index around! Powered by Cloudflare Workers.</a>，咱觉得能过 cf 的速度可能会快一丢丢。</p>
<p>本来就有详细的安装教程，本来说顺着教程摸过去就好？结果发现，还是有坑。</p>
<p>参考文章：</p>
<ul>
<li><a href="https://github.com/spencerwooo/onedrive-cf-index/blob/master/README-CN.md">onedrive-cf-index/README-CN.md at master · spencerwooo/onedrive-cf-index</a></li>
<li><a href="https://github.com/beetcb/onedrive-cf-index-CN">beetcb/onedrive-cf-index-CN: onedrive-cf-index ：世纪互联版简陋指南</a></li>
<li><a href="https://github.com/heymind/OneDrive-Index-Cloudflare-Worker#-%E6%96%B0%E7%89%B9%E6%80%A7-v11">heymind/OneDrive-Index-Cloudflare-Worker: DEPRECATED: Please use https://github.com/spencerwooo/onedrive-cf-index instead</a></li>
</ul>
<p>后两篇是第一篇的补充 / 原项目，在这里整合一下。</p>
<h3 id="azure-面板操作"><a href="#azure-面板操作" class="headerlink" title="azure 面板操作"></a>azure 面板操作</h3><ol>
<li><p>手工获取 <code>client_id</code> 和 <code>client secret</code>。<a href="https://zbttl.github.io/azure-yang-mao-er/#%E9%85%8D%E7%BD%AE-OneIndex">上一篇文章</a>中我详细讲过，跳过。</p>
</li>
<li><p>获取 <code>authorization code</code> 和 <code>refresh_token</code>。这里的问题在于文章中获取 <code>refresh_token</code> 接口的<a href="https://heymind.github.io/tools/microsoft-graph-api-auth">网站</a>已经 gg 了。不过里面获取 code 的功能还能用。而获取 <code>access_token</code>，可以参考微软官网的操作 <a href="https://docs.microsoft.com/en-us/onedrive/developer/rest-api/getting-started/graph-oauth?view=odsp-graph-online#code-flow">Authorization for OneDrive API via Microsoft Graph - OneDrive dev center | Microsoft Docs</a> 手工获取。</p>
<ol>
<li><p>打开接口页面 <a href="https://heymind.github.io/tools/microsoft-graph-api-auth">Microsoft Graph API Auth</a>，在 「Authorize for code  」处，填入 Client ID 并点击 Authorize 就会弹出一个浏览器消息，里面是 authorization code，是以 <code>M.R3_BAY</code> 开头的一串东西。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210220012033.png"></p>
<p>（手工获取）不排除未来这个网页的 code 获取接口也会爆。保险起见，翻译一下微软官网的做法：</p>
<blockquote>
<h3 id="Step-1-Get-an-authorization-code"><a href="#Step-1-Get-an-authorization-code" class="headerlink" title="Step 1. Get an authorization code"></a>Step 1. Get an authorization code</h3><p>To start the sign-in process with the code flow, use a web browser or web-browser control to load this URL request.</p>
<p>Copy</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">GET https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id={client_id}&amp;scope={scope}</span><br><span class="line">  &amp;response_type=code&amp;redirect_uri={redirect_uri}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Required-query-string-parameters"><a href="#Required-query-string-parameters" class="headerlink" title="Required query string parameters"></a>Required query string parameters</h4><table>
<thead>
<tr>
<th align="left">Parameter name</th>
<th align="left">Value</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>client_id</em></td>
<td align="left">string</td>
<td align="left">The client ID created for your app.</td>
</tr>
<tr>
<td align="left"><em>scope</em></td>
<td align="left">string</td>
<td align="left">A space-separated list of scopes that your app requires.</td>
</tr>
<tr>
<td align="left"><em>redirect_uri</em></td>
<td align="left">string</td>
<td align="left">The redirect URL that the browser is sent to when authentication is complete.</td>
</tr>
<tr>
<td align="left"><em>response_type</em></td>
<td align="left">string</td>
<td align="left">The type of response expected from the authorization flow. For this flow, the value must be <strong>code</strong>.</td>
</tr>
</tbody></table>
<h4 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h4><p>Upon successful authentication and authorization of your application, the web browser will be redirected to your redirect URL with additional parameters added to the URL.</p>
<p>Copy</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">https://myapp.com/auth-redirect?code=df6aa589-1080-b241-b410-c4dff65dbf7c</span><br></pre></td></tr></tbody></table></figure>
</blockquote>
<p>简化一下就是，用浏览器访问（<code>client_id</code> 那里填入自己的 Client ID）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id=[client_id]</span><br><span class="line">&amp;scope=offline_access%20Files.Read%20Files.ReadWrite.All&amp;response_type=code&amp;redirect_uri=https://heymind.github.io/tools/microsoft-graph-api-auth</span><br></pre></td></tr></tbody></table></figure>

<p>如果 web 接口没坏的话，和用 web 的效果一样；坏了的话就会带到一个 404 网页。不要慌张，此时地址栏的 url 里面已经包含有以 <code>M.R3_BAY</code> 开头直到地址栏结尾的 code 了。</p>
<p>当然参考文章 2 里也给了一个略有差异但实际上也能使用的方法，同样是通过浏览器访问（不过原文是访问到世纪互联版 od，改个主机地址就成）：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">https://login.chinacloudapi.cn/common/oauth2/v2.0/authorize?client_id=[client_id]&amp;response_type=code&amp;redirect_uri=http://localhost/od-cf&amp;response_mode=query&amp;scope=offline_access%20Files.Read%20Files.ReadWrite.All</span><br></pre></td></tr></tbody></table></figure>

<p>这里的 redirect_uri 用了虚无的 <code>http://localhost/od-cf</code>，可以改成 web 接口的地址，也可以保留并在 azure 面板的 <code>redirect_url</code> 处添加这个网址。仅就此处不同的 <code>redirect_url</code> 不影响后续使用。</p>
</li>
<li><p>安装一个 post 工具。比如 Insomnia 或者是 postman。都可以通过 chocolatey 安装。这里演示 postman 的。</p>
<p>微软官网上一共写了五个参数：</p>
<blockquote>
<p>POST <a href="https://login.microsoftonline.com/common/oauth2/v2.0/token">https://login.microsoftonline.com/common/oauth2/v2.0/token</a><br>Content-Type: application/x-www-form-urlencoded</p>
<p>client_id={client_id}&amp;redirect_uri={redirect_uri}&amp;client_secret={client_secret}<br>&amp;code={code}&amp;grant_type=authorization_code</p>
</blockquote>
<p>在 postman 中新建页面，请求类型设为 post，地址为 <a href="https://login.microsoftonline.com/common/oauth2/v2.0/token%EF%BC%9B%E5%88%87%E6%8D%A2%E5%88%B0">https://login.microsoftonline.com/common/oauth2/v2.0/token；切换到</a> boy 这个 tab，底下一栏选中 application/x-www-form-urlencoded；然后新建五个 key：</p>
<ul>
<li><code>grant_type</code> 填 authorization_code</li>
<li><code>code </code>填刚刚获取的 <code>authorization code</code></li>
<li><code>redirect_uri</code> 填刚刚那一步用的回调 url</li>
<li><code>client_id</code>：你们懂得。</li>
<li><code>client_secret</code>：同上。</li>
</ul>
<p>点击 send，不出意外的话结果里就会有 <code>access_token</code> 和 <code>refresh_token</code>。记录下 <code>refresh_token</code>。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210220035446.png"></p>
<p>不过如果获取失败（比如显示 <code>error: "invalid_request"</code>），那么就说明参数有误。注意，此时需要重新从第一小步开始获取 <code>authorization code</code>，因为 <code>authorization code</code> 只能用一次。另外 authorization code 多次获取的话也只有最后一次获取的 code 能用来获取 <code>refresh_token</code>。</p>
</li>
</ol>
</li>
</ol>
<h3 id="cloudflare-面板操作"><a href="#cloudflare-面板操作" class="headerlink" title="cloudflare 面板操作"></a>cloudflare 面板操作</h3><ol>
<li><p>搞一个域名并挂接到 cf 这事应该不用我强调了（</p>
</li>
<li><p>打开域名项，右下角有区域 id 和账户 id，记录下来。</p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210220051612.png"></p>
<ol start="3">
<li>从顶上那个 worker 图标中进入 worker 配置项，点击管理 worker -&gt; 创建 worker，可以修改一下左上角的部分域名名字（也是整个 worker 的名字），然后点击保存并部署。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210220052345.png"></p>
<ol start="4">
<li><del>我不是特别能理解。。。cf 不是绑定域名就能用么，为什么做出来的 worker 一开始还用的是 <code>xxxx.yyy.workers.dev</code> 这种 cf 自己的域名。。。这么长不好记啊。</del>这个 worker 跟账号有关，跟域名无关。但因为太长不好记，所以推荐把这个 worker 的域名绑定我们本身的域名。参考文章：<a href="https://www.andressevilla.com/how-to-setup-cloudflare-workers-on-a-custom-domain/">How to Setup Cloudflare Workers on a Custom Domain - Andres Sevilla</a></li>
</ol>
<p>到顶上 dns 图标那里，添加记录，类型设为 cname；名称起一个顺耳的二级域名名称；目标则设置为我们刚刚创建的那个 <code>xxxx.yyy.workers.dev</code>，保存。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210220060402.png"></p>
<p>切回 worker，点添加路由，路由这栏设置为我们刚刚添加的域名，比如我们的域名是 xxxx.com，二级域名就按上面那张图的来，这里就填 <code>cf.xxxx.com/*</code>。 worker 就选择我们刚刚创建的 worker 就好了。</p>
<h3 id="本地-git-操作"><a href="#本地-git-操作" class="headerlink" title="本地 git 操作"></a>本地 git 操作</h3><ol>
<li><p>这一步装了 node 的可以忽略；没装 node 的，吃下作者的按理，装个 nvm 8：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">choco install nvm -y</span><br><span class="line">nvm install latest --lts</span><br><span class="line">nvm on</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>拉取项目，安装：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">git clone https://github.com/spencerwooo/onedrive-cf-index.git</span><br><span class="line">cd .\onedrive-cf-index\</span><br><span class="line">npm i @cloudflare/wrangler -g</span><br><span class="line">npm install</span><br><span class="line"># 使用 wrangler 登录 CloudFlare 账户</span><br><span class="line">wrangler login</span><br><span class="line"># 使用这一命令检查自己的登录状态</span><br><span class="line">wrangler whoami</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>修改项目目录下的 <code>wrangler.toml</code>：</p>
<ul>
<li><code>name</code>：worker 的名字。</li>
<li><code>account_id</code>：账户 id；</li>
<li><code>zone_id</code>：区域 id。</li>
</ul>
<p>创建 KV bucket，如果待会要在本地预览效果的话，两个命令都要打（话说回来，这两个命令每个都会产生一个 id 和 一个 preview id，但两组数值串里面的 id 其实是一样的）。记下第一个命令生成的 id 和第二个命令生成的 preview id。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"># 创建 KV bucket</span><br><span class="line">wrangler kv:namespace create "BUCKET"</span><br><span class="line"></span><br><span class="line"># 创建包括预览功能的 KV bucket</span><br><span class="line">wrangler kv:namespace create "BUCKET" --preview</span><br></pre></td></tr></tbody></table></figure>

<p>回到 <code>wrangler.toml</code>，在 <code>kv_namespaces:</code> 下把刚刚记下的 id 和 preview id 填进去。</p>
<p>修改 <code>src/config/default.js</code>：</p>
<ul>
<li><code>client_id</code>：你懂得；</li>
<li><code>base</code>：你想要展示的网盘文件夹。要以斜杠 <code>/</code> 打头。</li>
</ul>
<p>使用 <code>wrangler</code> 添加 Cloudflare Workers 环境变量：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">wrangler secret put REFRESH_TOKEN</span><br></pre></td></tr></tbody></table></figure>

<p> 随后会提示你输入 <code>refresh_token</code>，粘贴过去然后回车确定。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">wrangler secret put CLIENT_SECRET</span><br></pre></td></tr></tbody></table></figure>

<p><code>client_secret</code> 也同样。</p>
</li>
<li><p>预览</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">wrangler preview</span><br></pre></td></tr></tbody></table></figure>

<p>看起来一切顺利？才不是！</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/vmware_owHXCU2y2I.png"></p>
<p>这是人家 Spencer Woo 大佬的页眉和页脚啊~</p>
<p>根据原文说的：</p>
<blockquote>
<ul>
<li><p>我们 <strong>应该</strong> 更改默认「着落页面」，直接修改 <a href="https://github.com/spencerwooo/onedrive-cf-index/blob/master/src/folderView.js#L51-L55">src/folderView.js</a> 中 <code>intro</code> 的 HTML 即可；</p>
</li>
<li><p>我们也 <strong>应该</strong> 更改页面的 header，直接修改 <a href="https://github.com/spencerwooo/onedrive-cf-index/blob/master/src/render/htmlWrapper.js#L24">src/render/htmlWrapper.js</a> 即可；</p>
</li>
</ul>
</blockquote>
<p>着落页面即页脚，直接顺着链接点进去就知道在哪了：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210220072759.png"></p>
<p>页首要改的地方可能难找点，大概在 51 行：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210220073041.png"></p>
<p>还有一些地方，比如参考文章 3 写的三个高级功能，都在 <code>src/config/default.js</code> 能找到：</p>
<ul>
<li>离线下载，<code>proxyDownload</code>，默认已打开；</li>
<li>缓存，<code>cache</code>，默认已打开；</li>
<li>小文件上传，<code>upload</code>，默认未打开，如需要打开，还得回到 azure 面板中打开 <code>Files.ReadWrite</code> 权限，可参考<a href="https://zbttl.github.io/azure-yang-mao-er/#%E9%85%8D%E7%BD%AE-OneIndex">上一篇文章</a>。</li>
</ul>
<p>未提到的，图床的缩略图功能并没有代码控制，不用手动打开。</p>
<p>加密功能，类似于 oneIndex 的 <code>.password</code> 文件，在 <code>src/auth/config.js</code> 中，默认未打开。</p>
<p>这些都折腾完了，就可以正式部署了：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">wrangler publish</span><br></pre></td></tr></tbody></table></figure>

<p>一切顺利的话，访问刚刚自己在 cf 绑定的二级域名即可。</p>
<hr>
<p>使用体验的话，凑合，部署起来是比 oneIndex + azure 麻烦多了，主要是把配置都移到本地而不是在 oneIndex 的 web 后台配置。</p>
<p>主要优势就是高峰期的时候，晚上 11 点这段时间，azure 这边不挂东西根本就下不动几 k 的跑；走 cf 代理流量的话，好歹有个 60k 左右的速度。。。聊胜于无嘛！</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>羊毛</tag>
        <tag>托管</tag>
        <tag>onedrive</tag>
        <tag>cloudflare</tag>
      </tags>
  </entry>
  <entry>
    <title>azure 羊毛（二）</title>
    <url>/azure-yang-mao-er/</url>
    <content><![CDATA[<p>azure 学生包除了那一个 Linux 服务器，还有以下的东西（参考<a href="https://www.jianshu.com/p/98c77e0ea05d">Azure 学生订阅包含内容 - 简书</a>）</p>
<blockquote>
<p><strong>一年时间内包括：</strong></p>
<p>100美元额度</p>
<p>2个免费主机（b1s 1核1G）<br> 1个windows主机<br> 1个linux主机</p>
<p>2个64G的免费磁盘</p>
<p>一个250G的SQLSERVER数据库</p>
<p>一个5 GB Azure Cosmos DB （可当做mongodb用）</p>
<p>每月20G流出流量免费（流入流量全免）</p>
<p>10个免费的App Service（可用于搭建OneIndex等不太占用流量的站点，好处有自带https，自带伪静态支持，自带用户验证，可以设成只有自己和指定的微软账号才能访问网站，并且全鼠标可视化操作，无需命令行敲代码。）</p>
</blockquote>
<p>20G 这个存疑（我之前得到的消息是 15G）。两个数据库没想通有啥用。。。那剩下的羊毛，就是 windows server 和 app service 这俩玩意了。</p>
<h2 id="Windows-server"><a href="#Windows-server" class="headerlink" title="Windows server"></a>Windows server</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>参考文章：<a href="https://51.ruyo.net/11319.html">Windows Azure学生订阅额度完全使用(薅干)指南教程 - 教程资源|网络资源 - 如有乐享</a></p>
<p>参考文章说的很清楚了，总结起来就是：</p>
<ol>
<li>建的时候选 b1s  smalldisk windows server 2012 r2，不用 smalldisk 后续磁盘缩不到 64g；单核也不建议用更高配置的系统；</li>
<li>创建成功后停止虚拟机，修改磁盘大小。</li>
</ol>
<p>另外还有两个细节：</p>
<ol>
<li>关闭实例优惠（默认应该就是关着的，而且一般人账号里面真的会有 windows server 2012 的授权吗）</li>
<li>用新的资源组，和之前 Linux 那个资源组区分开，以免删除的时候出现不必要的麻烦。</li>
</ol>
<hr>
<p>接着就能通过 rdp 愉快的使用了。一般来说，windows server 我们是用来挂机的，不过。。。如果我也想用这玩意来做「科学」用途呢（</p>
<h3 id="证书申请与验证"><a href="#证书申请与验证" class="headerlink" title="证书申请与验证"></a>证书申请与验证</h3><p>Windows 的各种操作大部分人都很熟悉，但搭建像 Linux 那样用途的服务器，因为环境和生态的原因，操作上还是有巨大的差距的。Windows 这边申请证书虽然有比较官方的 win-acme，但一个是刚转过来的我对这玩意比较陌生，二个是它用的 cloudflare 接口不仅是外挂的而且还要单开 api 接口参数， 而 Linux 这边的 acme.sh 只需要默认的 CF_Key，这么一对比还是后者更趁手。Windows 上用熟悉的 Linux 工具解决问题，呃。。。这很不优雅但有用（x）</p>
<ol>
<li><p>装 chocolatey 和 git。</p>
<p>吐槽一句自带的服务器版 ie 实在是太烦人了。。。还好有 chocolatey 可以直接装东西不用通过浏览器（</p>
<p>装 git 的原因是因为 git 自带精简版的 mingw。当然如果你要运行的东西需要一些其他的 dependence，装 cygwin 或 msys2 也不是不行（</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))</span><br><span class="line">choco install git -y</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>用 choco 安装 acme.sh。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">choco install acme-sh -y</span><br></pre></td></tr></tbody></table></figure>

<p>导航到 acme.sh 的安装目录，目前最新的版本是 2.88，用 chocolatey 安装的话大概就会在 <code>C:\ProgramData\chocolatey\lib\acme-sh\tools\acme.sh-2.8.8</code> 这里。</p>
<p>右键空白处，点击 <code>git bash here</code>。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210217185446.png"></p>
</li>
<li><p>接下来就是大家熟悉的操作了。可以参考<a href="https://zbttl.github.io/yi-bu-dao-wei-de-vps-cong-ru-men-dao-fang-qi/#%E5%85%B3%E4%BA%8E%E8%AF%81%E4%B9%A6%E7%9A%84%E9%85%8D%E7%BD%AE">一步到位的vps从入门到放弃 | Bao’s 备忘录</a>。最后证书建议安装在一个路径固定的目录（方便以后操作，放在桌面等 <code>C:/Users/xxx</code> 打头的目录），但不要放在 c 盘根（权限问题）。我自己放在 %public% 文件夹（即  <code>C:\Users\Public</code>），新建的 <code>ssl</code> 文件夹中。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">export CF_Key="xxxxxx"</span><br><span class="line">export CF_Email="xxxxxx"</span><br><span class="line">./acme.sh --issue --dns dns_cf -d baobaobao.xxx -d *.baobaobao.xxx -k ec-256</span><br><span class="line">mkdir C:\\Users\\Public\\ssl</span><br><span class="line">./acme.sh --installcert -d baobaobao.xxx --keypath 'C:\Users\Public\ssl\baobaobao.key' --fullchainpath 'C:\Users\Public\ssl\baobaobao.crt' --ecc</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>acme.sh 的自动续签依赖于 Linux 的 crontab。windows 没这玩意，只能自己搞个伪劣版（</p>
<p>新建 <code>acme-cron.sh</code> 放在 %public% 下</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#!/usr/bin/env bash</span><br><span class="line">cd 'C:\ProgramData\chocolatey\lib\acme-sh\tools\acme.sh-2.8.8'</span><br><span class="line">./acme.sh --renew --dns dns_cf -d baobaobao.xxx -d '*.baobaobao.xxx' -k ec-256 --ecc</span><br><span class="line"> ./acme.sh --installcert -d baobaobao.xxx --keypath 'C:\Users\Public\ssl\baobaobao.key' --fullchainpath 'C:\Users\Public\ssl\baobaobao.crt' --ecc</span><br></pre></td></tr></tbody></table></figure>

<p>在同一目录下新建 <code>acme.bat</code></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">cmd /c ""%PROGRAMFILES%\Git\bin\bash.exe" --login -i -- %PUBLIC%\acme-cron.sh"</span><br></pre></td></tr></tbody></table></figure>

<p>新建一个计划任务</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">schtasks /Create /tn acme-renew /tr "%public%/acme.bat" /sc  DAILY /st  00:00:00</span><br></pre></td></tr></tbody></table></figure>

<p>每天 0 点这个脚本就会弹窗定时续签了。反正是远程 rdp，又不是 24 小时盯着的，弹窗啥的，无所谓吧~</p>
</li>
</ol>
<hr>
<p>什么你说其他内容？不就剩下一个工具吗。</p>
<p>工具选择 v2，因为 v2 客户端服务端二进制是二合一的，只取决于配置文件如何配置，不需要再去考虑自己二进制版本是 sever 版还是 client 版。还有记得开放 web 面板 + 系统内防火墙，开放入站端口即可。如果考虑 fullcone 的话，相应端口 + 高位端口都要打开，，否则仅开放对应端口就行。系统内可以直接敲命令放行对应应用，参考下面这个命令：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">New-NetFirewallRule -DisplayName "xray" -Enabled True -Program "C:\Users\Public\v2rayN\xray.exe" -Description "xray" -Group "xray" -Action Allow -Protocol ANY</span><br></pre></td></tr></tbody></table></figure>

<p>还不会就手放键盘脑补吧，前有嘴含内存条脑补游戏画面，今有申请了证书后手放键盘脑补 p 站首页（雾</p>
<h3 id="更换-rdp-端口（21-3-16-更新）"><a href="#更换-rdp-端口（21-3-16-更新）" class="headerlink" title="更换 rdp 端口（21.3.16 更新）"></a>更换 rdp 端口（21.3.16 更新）</h3><p>鼓捣了一下 rdp 登录 bot 的事情，结果查日志的时候发现好家伙一堆上来撞密码的，虽然没被撞开（应该），但搞得系统卡卡的。关掉 公网 3389 用 vpn 连上来有点大题小作，换个端口应该就行（虽然也许还有没事找事全端口扫的家伙，不过比起专扫 3389 的应该少不少）。</p>
<h4 id="修改注册表"><a href="#修改注册表" class="headerlink" title="修改注册表"></a>修改注册表</h4><p>直接新建一个 <code>change_rdp_port.reg</code> 文件，假设我们吧端口换到 3380，用一个 10 转 16 进制计算机算一下，3380 的 16 进制是 d34。那么文件内容为：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Terminal Server\Wds\rdpwd\Tds\Tcp]</span><br><span class="line">"PortNumber"=dword:00000d34</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp]</span><br><span class="line">"PortNumber"=dword:00000d34</span><br></pre></td></tr></tbody></table></figure>

<p>保存，双击运行即可。</p>
<h4 id="修改防火墙"><a href="#修改防火墙" class="headerlink" title="修改防火墙"></a>修改防火墙</h4><p>重启 windows server 就能生效。。。按下重启键你就凉了，还要对 windows server 默认开启的防火墙动手脚。</p>
<p>在 <code>控制面板\系统和安全\Windows Defender 防火墙</code> 中，找到高级设置 -&gt; 入站规则。新建规则 -&gt; 规则类型：端口 -&gt; 应用于 tcp，特定本地端口填入 3380 -&gt; 允许连接 -&gt; 一路下一步，给 tcp 规则起个名字。搞掂后打开规则属性，在程序与服务 -&gt; 程序 -&gt; 此程序中填入：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">%SystemRoot%\system32\svchost.exe</span><br></pre></td></tr></tbody></table></figure>

<p>保存。</p>
<p>复制一遍该规则，粘贴后进入规则属性，改一下名字，在协议和端口中将 tcp 改为 udp。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210317004152.png"></p>
<p>点一下顶上名称栏的本地端口，给本地端口排个序，把原来的 3389 tcp 和 udp 端口禁用。ok，重启，通过 <code>ip:3380</code> 连入 rdp。</p>
<p><strong>（21.3.17 更新）</strong> 或者，新建一个 ps1 文件，内容为：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">New-NetFirewallRule -Name tcp-rdp -DisplayName 'rdptcp' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 3380</span><br><span class="line">New-NetFirewallRule -Name udp-rdp -DisplayName 'rdpudp' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 3380</span><br></pre></td></tr></tbody></table></figure>

<h3 id="开启-ssh（21-4-1-更新）"><a href="#开启-ssh（21-4-1-更新）" class="headerlink" title="开启 ssh（21.4.1 更新）"></a>开启 ssh（21.4.1 更新）</h3><p>防止 rdp 突然爆掉，有个后路（</p>
<p>前引：<a href="https://zbttl.github.io/windows-kai-qi-openssh-server/">windows 开启 openssh-server | Bao’s 备忘录</a></p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>windows server 2012 r2 small disk 不支持 <code>Add-WindowsCapability</code> 这一类的命令。代替的方案有：</p>
<ol>
<li><p>手动解压安装。从 <a href="https://github.com/PowerShell/Win32-OpenSSH/releases">Releases · PowerShell/Win32-OpenSSH</a> 下载 <a href="https://github.com/PowerShell/Win32-OpenSSH/releases/download/v8.1.0.0p1-Beta/OpenSSH-Win64.zip">OpenSSH-Win64.zip</a>，解压到任意位置并添加到系统变量中，运行其中的 <code>install-sshd.ps1</code>。</p>
</li>
<li><p>直接用 chocolatey 安装。参考：<a href="https://gitlab.com/DarwinJS/ChocoPackages/tree/master/openssh">openssh · master · DarwinJS / ChocoPackages · GitLab</a></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">choco install openssh -params '"/SSHServerFeature"' </span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h4 id="修改-sshd-config"><a href="#修改-sshd-config" class="headerlink" title="修改 sshd_config"></a>修改 sshd_config</h4><p>参考前引文章的修改方法。</p>
<p>打开管理员登录权限</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">PermitRootLogin yes</span><br></pre></td></tr></tbody></table></figure>

<p>注释掉旧版密钥路径</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#Match Group administrators</span><br><span class="line">#       AuthorizedKeysFile __PROGRAMDATA__/ssh/administrators_authorized_keys</span><br></pre></td></tr></tbody></table></figure>

<p>关闭密码登录</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">PasswordAuthentication no</span><br></pre></td></tr></tbody></table></figure>

<p>将公钥放到 <code>C:\Users\zbttl\.ssh</code>里面，改名为<code>authorized_keys</code>。</p>
<h4 id="修改端口，或者使用计划任务进行运行"><a href="#修改端口，或者使用计划任务进行运行" class="headerlink" title="修改端口，或者使用计划任务进行运行"></a>修改端口，或者使用计划任务进行运行</h4><p>在管理员账户下，通过刚才方法安装的 openssh 会自动启动服务，但这时候通过 22 端口还是没法登录。必须修改到 1000+ 的高位端口，继续修改 sshd_config：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#Port 22</span><br><span class="line">Port 10022</span><br></pre></td></tr></tbody></table></figure>

<p>然后重启服务。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">net stop sshd</span><br><span class="line">net start sshd</span><br></pre></td></tr></tbody></table></figure>

<p>如果一定要用 22 端口，只能用 psexec 启动。（直接 <code>sshd -d</code> 会出和通过服务启动时一样的错误）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">choco install psexec -y</span><br><span class="line">psexec -s sshd.exe -d</span><br></pre></td></tr></tbody></table></figure>

<p>不过要注意，用这种方法启动的终端，只能连一次。。。连完以后就会断掉，还要再手动开起来。解决方法是用 winsw 把这行命令做成服务，winsw 在 <a href="https://zbttl.github.io/yi-bu-dao-wei-de-vps-cong-ru-men-dao-fang-qi/">一步到位的 vps 从入门到放弃 | Bao’s 备忘录</a> frp 相关配置中我我曾经提过，有需求的读者自己实现吧。</p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>打开防火墙（继续用 22 的话可以忽略这一步，chocolatey 自己开开了）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">New-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 10999</span><br></pre></td></tr></tbody></table></figure>

<p>更改默认命令行程序为 powershell</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">New-ItemProperty -Path "HKLM:\SOFTWARE\OpenSSH" -Name DefaultShell -Value "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe" -PropertyType String -Force</span><br></pre></td></tr></tbody></table></figure>

<p>修改密钥权限参见前引，太长不写。</p>
<p>还有记得打开 azure web 那边的入站端口 10999 哦。 </p>
<h2 id="OneIndex-app-service-version"><a href="#OneIndex-app-service-version" class="headerlink" title="OneIndex app service version"></a>OneIndex app service version</h2><p>我刚好有 office 365 家庭版，也试过挂在 vps 上，但 app service 这类 PaaS 我没那么熟，这次就折腾看看。</p>
<p>参考文章：</p>
<ul>
<li><a href="https://www.imaegoo.com/2020/azure-app-service/">体验 Azure 应用服务：可以白嫖的 OneIndex 空间 - iMaeGoo’s Blog</a></li>
</ul>
<p>开服务既可以走 web 也可以走 cli：</p>
<h3 id="建立-Web-应用（web，二选一）"><a href="#建立-Web-应用（web，二选一）" class="headerlink" title="建立 Web 应用（web，二选一）"></a>建立 Web 应用（web，二选一）</h3><ol>
<li><p>在 azure 首页 -&gt; 创建资源 -&gt; 查看全部，搜索框中输入 web 应用，创建。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210218003811.png"></p>
</li>
<li><p>创建页面参考上一篇文章 <a href="https://zbttl.github.io/github-xue-sheng-bao-he-azure-yang-mao/#%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA">github 学生包和 azure 羊毛 - 创建虚拟机</a>，同样的最好不要和别的项目共用资源组。唯一要修改的地方是运行时堆栈选择 php 7.3。没提到的地方保持默认。最后点击下一步 -&gt; 创建，等他创建完成。</p>
</li>
</ol>
<h3 id="建立-web-应用（CLI，二选一）"><a href="#建立-web-应用（CLI，二选一）" class="headerlink" title="建立 web 应用（CLI，二选一）"></a>建立 web 应用（CLI，二选一）</h3><p>微软的 web 面板反应迟钝，也可以通过 CLI 创建，需要通过 azure-cli 软件。下文参考<a href="https://ld246.com/article/1542285912094">使用 Azure App Service 免费计划部署 Solo 博客过程记录 - 链滴</a>。</p>
<ol>
<li><p>安装 azure-cli</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">choco install azure-cli -y</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>登录 Azure 账号</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">az login</span><br></pre></td></tr></tbody></table></figure>

<p>查看所有订阅，这里面 “id” 后面的这一串就是待会要用到的订阅 id</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">az account list --all</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210218015139.png"></p>
<p>选择一个education 订阅进行操作</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">az account set -s [订阅ID]</span><br></pre></td></tr></tbody></table></figure>

<p>创建部署用户（用户名密码自己起）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">az webapp deployment user set --user-name [用户名] --password [密码]</span><br></pre></td></tr></tbody></table></figure>

<p>查看所有部署用户</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">az webapp deployment user show</span><br></pre></td></tr></tbody></table></figure>

<p>查看所有可用区域</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">az account list-locations</span><br></pre></td></tr></tbody></table></figure>

<p>创建资源组，-l 这里输入刚刚可用区域里面找到的相应区域名字，这里选择 East Asia（即香港区，其实部署在哪里无所谓啦，最后流量也不走服务器，目录查看并不太吃流量和速度）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">az group create -l eastasia -n [资源组名称]</span><br></pre></td></tr></tbody></table></figure>

<p>创建免费的应用服务计划，注意这里 -n 参数和上面的 -n 参数含义不一样（毕竟 -n 应该是代表 new），这里的是服务器计划名称，资源组名称填在 -g。服务计划名称中不能含有下划线。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">az appservice plan create -n [服务计划名称] -g [资源组名称] --sku FREE</span><br></pre></td></tr></tbody></table></figure>

<p>查看运行时堆栈</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">az webapp list-runtimes</span><br></pre></td></tr></tbody></table></figure>

<p>创建应用。这里 -n 又变成应用服务名称了，服务计划名称放在 -p（plan）。我用的是 powershell，后面 -r 这里需要双重转义。用 cmd 的填 <code>-r "php|7.3"</code> 就行。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">az webapp create -g [资源组名称] -p [服务计划名称] -n [应用服务名称] -r '"php|7.3"'</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h3 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目"></a>导入项目</h3><ol>
<li><p>创建完毕后从 azure 面板资源组找到创建的应用服务和应用服务计划，点开应用服务。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210218020450.png"></p>
</li>
<li><p>找到左侧的部署中心，右边会显示「未配置 CI/CD」，顺着按钮转到设置。在设置一项 -&gt; 源中选择本地 git 并保存。另外提一嘴，这里用 github 应该才是最方便的，但选 github 底下堆栈那里找不到 php，莫非是不支持？那就没辙了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210218032603.png"></p>
</li>
<li><p>转到右侧的凭据，记下克隆 url，用户名和密码。用户名只用记以 $ 打头的后半部分（不知道为啥新版部署中心这里这么写，我第头几次输用户名的时候疯狂报错，后来到旁边的经典部署中心才发现斜杠前面的部分是多余的，不过旧版部署中心。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210218044156.png"></p>
</li>
<li><p>拉取 oneindex 项目到本地。oneindex 源项目已经被删掉挺久了。。。这里给出两个克隆 / 魔改版：</p>
<ul>
<li><del><a href="https://github.com/steven52880/Oneindex-Mod">steven52880/Oneindex-Mod: 适用于有较快php空间、小文件长时间展示不修改的情况。 比如展示多个小文件html，展示markdown等。</a></del></li>
<li><a href="https://github.com/cyrilsoy/Oneindex">cyrilsoy/Oneindex: Onedrive Directory Index</a></li>
</ul>
<p>后者是谷歌搜到的第一个，我翻了一下代码，又亲自部署了一下感觉没问题；前者来自 <a href="https://t.me/NewlearnerChannel">Newlearnerの自留地</a> 之前的推荐（后续发现部署错误，疑似回调接口损坏）。</p>
   <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">git clone https://github.com/steven52880/Oneindex-Mod.git</span><br><span class="line">cd oneindex</span><br><span class="line">git remote add azure [部署URL]</span><br><span class="line">git push azure -f</span><br></pre></td></tr></tbody></table></figure>

<p>如果 git push 这一步密码不慎输错的话。。。有可能需要到 windows 的凭据管理器 -&gt; windows 凭据中删除相应凭据回来再执行最后一步（直接修改可能不行）。</p>
</li>
</ol>
<h3 id="配置-OneIndex"><a href="#配置-OneIndex" class="headerlink" title="配置 OneIndex"></a>配置 OneIndex</h3><p>在部署中心处点击右侧的浏览，进入 OneIndex 站点。如果进去的时候发现不是下面这个样子，多半是还在部署，等等吧，等日志中显示部署成功。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210218045918.png"></p>
<p>点击下一步，点击获取应用 id 和机密，按要求操作，不出意料第一个界面会返回 client secret 而第二个界面中有 client_id，回来填入即可。</p>
<p>如果不成功的话，可以尝试手动获取。其中一个框里面已经填上了网址，这就是待会要用到的回调 url。记下来。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210218050036.png"></p>
<p>「回到」 azure。这里的回到打引号是因为开服务的这个号可以完成使命了，你可以换另一个号来获取剩下的内容（当然继续用开服务的这个号也可以）。搜索并进入「应用注册」，名称随便填；受支持的账户类型选最长的那一个；重定向 url 就填我们刚刚获得的回调 url。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210218051832.png"></p>
<p>点击确定后跳转到概要，记下其中的应用程序(客户端) ID。这个是 OneIndex 注册界面中 Client_id 的值。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210218052107.png"></p>
<p>从左侧面板来到证书和密码，点新客户端密码，说明随便起，截止日期可选从不。点击添加后，这个值便是 OneIndex 注册界面中的 Client_secret。记得保存好，出了该页面再回来这个值就会被打码（不过也没什么，删掉再建就行）。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210218052427.png"></p>
<p>来到 api 权限，点击添加权限，看到那个大大的 microsoft Graph，点进去，选委托的权限，勾选 OpenId 类下的 <code>offline_access</code>，Files 类下的 <code>Files.Read</code>、<code>Files.Read.All</code> 共三个权限，点击添加权限即可。</p>
<p>回到 OneIndex，填上这两个值即可。</p>
<p>后续按照流程绑定账号，不出意料就能进入管理界面了（默认密码 OneIndex）。完成部署。</p>
<h3 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h3><p>OneIndex 我只想共享两个目录的内容，但根目录下那么多文件夹一个个设置排除很麻烦，所以我干脆又做了一个 app service。部署的时候设置的 Client_id 和 client secret 可以反复使用，不用重新生成。</p>
<p>onedrive 目录类项目还有好多个变种，要换另一个试试的话，某些情况下直接导入到原来部署好的应用服务也可以生效，如果部署日志显示成功那就是可以。但也有很多情况需要重新删掉原来的应用服务重新建一个，比如要换 client_id 和 client_secret 的时候；不同的项目可能有不同的回调 url，如果用的同一个 client_id 的话，记得在对应的 client_id 应用 -&gt; 身份验证中添加对应的回调 url。</p>
<p>目前能部署的貌似只有 OneIndex?多个版本的 OLAINDEX 用这个方法部署不上去，估计可能是什么依赖没装。</p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>羊毛</tag>
        <tag>azure</tag>
        <tag>托管</tag>
        <tag>onedrive</tag>
        <tag>windows server</tag>
        <tag>app service</tag>
        <tag>acme.sh</tag>
      </tags>
  </entry>
  <entry>
    <title>k2 中继</title>
    <url>/k2-zhong-ji/</url>
    <content><![CDATA[<p>曾经在<a href="https://zbttl.github.io/lu-you-qi-pao-fen-shua-ji-hou-ri-tan-ji-ji-ge-jia-su-qi-shi-yong-qing-kuang-shou-ji/#%E5%B0%8F%E7%B1%B3%E5%9B%BA%E4%BB%B6%E5%8A%A0%E9%80%9F%E7%9A%84%E5%8A%A3%E5%8A%BF%EF%BC%8C%E5%92%8C%E5%90%8E%E7%BB%AD%E5%8A%A0%E9%80%9F%E6%96%B9%E6%A1%88%E7%9A%84%E5%AF%BB%E6%89%BE">路由器跑分 &amp;&amp; 刷机 后日谈 及 几个加速器使用情况收集</a>中提到过</p>
<blockquote>
<p>刷个 padavan 在家当非单独子网的无线中继好了，加速器识别到家中的华硕主路由器，让华硕来加速，这个就仅仅弥补 xbox 无线拉跨的问题。</p>
</blockquote>
<p>今天就谈谈中继的问题。</p>
<h2 id="padavan"><a href="#padavan" class="headerlink" title="padavan"></a>padavan</h2><p>参考文章：<a href="https://www.bilibili.com/read/cv5828717/">老毛子Padavan固件（华硕固件）无线中继设置以及自动切换脚本中继 - 哔哩哔哩</a></p>
<h3 id="打开中继"><a href="#打开中继" class="headerlink" title="打开中继"></a>打开中继</h3><p>padavan 界面经过几次调整，现在的中继菜单项在高级设置（记点进去而不是在它本身的下拉菜单项） -&gt; 无线 2.4 GHz/无线 5 Ghz -&gt; 无线桥接中。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-01-27%20072941.jpg"></p>
<p>需要做说明的就是其中的无线 AP 工作模式和无线 AP-Client 角色。</p>
<ul>
<li><p>AP 工作模式。分为 AP（禁用桥接）、WDS桥接（禁用AP）、WDS中继（桥接+AP）、APCliet（禁用AP）、APClient（APClient+AP) 五种。 </p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-01-27%20073051.jpg"></p>
<p>AP（禁用桥接）为默认不使用桥接时的模式，而 WDS中继（桥接+AP）、APClient（APClient+AP) 是在剩下两种上开启 AP（无线信号）的模式，所以我们在这两种中间选一种就行了。</p>
<p>WDS （注意不要和那个有漏洞的 WPS 功能混淆了）需要在被中继的路由上开启相关功能，ap 则不需要，本文我们选择后者。另外 WDS 中继还有升级版 —— 被称作 mesh（听起来熟悉多了吧，这两年各大厂都在吹这玩意）。</p>
</li>
<li><p>无线 AP-Client 角色。分为 LAN bridge 和 WAN（Wireless ISP）两种。简单来说，前者是网桥，后者是路由。之前用极路由 2 做 xbox 中继加速的时候，加速器在极路由上安装，所以是路由模式（极路由的中继也只有路由模式可选）；此处我们用 K2 做加速，但加速器在主路由（ac86u）上安装，那么就得用网桥模式。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-01-27%20182740.jpg"></p>
</li>
</ul>
<p>之后只要点开上级 SSID 搜索并选主路由的 SSID，输好密码，其他保持默认就行。</p>
<h3 id="网桥中继关闭-dhcp-及调整网段"><a href="#网桥中继关闭-dhcp-及调整网段" class="headerlink" title="网桥中继关闭 dhcp 及调整网段"></a>网桥中继关闭 dhcp 及调整网段</h3><p>但如果选择网桥中继，还需要做一些其他的设置：</p>
<ul>
<li>内部网络（LAN） -&gt; DHCP 服务器，关闭「启用 DHCP 服务器」的开关，因为主路由的 DHCP 会和中继路由的 DHCP 冲突。</li>
<li>内部网络（LAN）-&gt; 内网设置 -&gt; ip 地址，填入一个 ip 地址，格式为 192.168.x.y。x 和 y 的地址原则上随意，但 x 最好在自己常中继的设备的网段中，y 要避免和自己常中继设备网段设备中的设备 ip 冲突。打个比方，自己主路由的网关是 192.168.111.1，且通过查询主路由管理界面发现自己没有 ip 为 192.168.111.2 的设备，那么就可以把这个地址设置为 192.168.111.2。</li>
</ul>
<h3 id="打开中继后进入中继路由管理界面"><a href="#打开中继后进入中继路由管理界面" class="headerlink" title="打开中继后进入中继路由管理界面"></a>打开中继后进入中继路由管理界面</h3><p>成功中继后，路由器有可能就不能直接用原来的 ip 地址进入管理界面了。有两种情况：</p>
<ol>
<li><p>按上面所说的中继路由内部网络 ip 在主路由网段内。那么此时先尝试访问之前我们填的 ip 地址。如果访问不到，说明中继路由被主路由重新分配了 ip 地址。我们需要一些方法「探测」到中继路由在网段内的 ip 地址：</p>
<ul>
<li><p>通过主路由 web 管理中的设备管理界面（比如下面这张图最顶上那个就是 K2，但其实这个地址完全不对）</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210128035916.png"></p>
</li>
<li><p>windows 的 <code>arp -a</code> 命令（这个命令只能显示内网有多少设备但不显示具体设备名）或其他一些嗅探工具</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210128040228.png"></p>
</li>
<li><p>android 的 pingtools （推荐）或其他的一些嗅探工具</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Screenshot_20210128-045757.png"></p>
</li>
</ul>
</li>
<li><p>按上面所说的中继路由内部网络 ip 在不在主路由网段内。比如之前我说的，带 xbox 出门去同学家，同学的路由器刚好也是能加速的，那我也可以带 k2 去中继，但此时开机后你会发现因为没开 dhcp 连上的设备无法获得相应网段的 ip 地址自然访问不到中继路由的 web 界面了。两种解决方法。</p>
<ul>
<li><p>通过有线方式，路由器 wan 口连接其他有线路由器的 lan 口，自己的手机 / pc 连上接着中继路由的路由器然后使用「中继路由内部网络 ip 在主路由网段内」的几种方法就能找到中继路由的新 ip；</p>
</li>
<li><p>手动设置 ip。以 windows 为例，连上中继路由器后，右击任务栏的右侧的网络图标，选择“打开网络和 Internet 设置”，点击更改适配器选项，找到自己当前网卡的适配器，双击打开，进入属性，双击 Internet 协议版本 4，设置为使用下面的 ip 地址。ip 地址具体设置，还是以上面中继路由 ip 设置为的 192.168.111.2 为例，此处 ip 可填 192.168.111.x，子网掩码 255.255.255.0，网关 192.168.111.x，这里两个 x 填啥都可以，无所谓，目的只是为了最后让机子和路由器在同一网段中。设置好后确定，等一阵子打开 192.168.111.2 就是中继路由的管理界面了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210128011605.png"></p>
<p>如果是安卓也是相同的改法，甚至更简单，这里就不再复述了（不过安卓需要在连接前就手动指定 ip 和网关，否则就会一直卡在获取 ip 地址这一步连不上 wifi，另外连接前可能要先关掉流量，有的机子判断 wifi 无法上网时还会继续跑流量，导致中继这边 web 打不开）。</p>
<p>修改完中继参数后记得再把系统这个 ip 设置改回自动获得。另外一点，设置好中继后有可能在主路由中看到中继路由，但因为网段不一样，所以是没法直接访问的，除非去改中继路由的内网 ip 地址。可拿回家又要再改，没必要。</p>
</li>
</ul>
</li>
</ol>
<h3 id="自动切换被中继路由"><a href="#自动切换被中继路由" class="headerlink" title="自动切换被中继路由"></a>自动切换被中继路由</h3><p>因为中继路由我只在自己家和我同学家使用，每次换地方设置中继都要折腾一边，有没有自动切换的方法？当然有。</p>
<p>就在中继页面的底部，可以编辑 ap_script，按照说明，在自动切换中继信号处写两条规则就行了。写完后点应用然后重启路由。注意！不要直接拔电源重启，而是按页面顶部的重启键重启，因为后者重启时会检测配置是否保存了，而前者有可能重启后你发现刚写的配置没了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-01-28%20033440.jpg"></p>
<p>最后一点。在系统管理 -&gt; 操作模式处，也可以设置路由模式为无线接入点。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-01-28%20034658.jpg"></p>
<p>随后进行无线中继的话就会固定使用 LAN bridge无线 AP-Client 角色。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-01-27%20035053.jpg"></p>
<p>但使用这个模式会导致 ap_script 脚本失效（日志中显示连接了然后又断开再显示无法连接），和无线路由器模式相比没有优势（唯一算优势的地方，就是路由器模式下 LAN bridge 就算连上网了指示灯也是红的，而无线接入点模式下连上网灯是黄的，也就是正常的）。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-01-27%20035508.jpg"></p>
<hr>
<p><strong>（21.2.6 更新）</strong> 灯的问题属于 hiboy padavan 独有问题。自编译 <a href="https://github.com/hanwckf/rt-n56u">hanwckf/rt-n56u: Padavan</a> 中继模式灯颜色正常，但自编译又没有自切换中继信号的功能了。</p>
<p>另外 padavan 这么中继问题不小。。。过了几天拿到我朋友家，发现中继没有正常工作，不仅如此，用任何方法 web 管理界面都进不去了（包括访问我们修改过的内部网络 ip，通过有线接到别人的路由下等方法），甚至 pingtools 都探测不到中继路由的 ip，只得重置，感觉 padavan 不靠谱。</p>
<p><strong>(21.2.10 更新)</strong> 之前中继的时候用的是 newifi Y1S 附赠的 12V 1.5a 电源。后续买了一个 ppd 的 n1，送了一个 12v 1.5a 的电源，意外发现有时用 Y1S 电源时中继失败但换用 n1 电源就可以中继成功，看来电源稳定性对中继是有影响的（联想的几个硬件相对斐讯那算是「偷工减料」了），这个现象在后面的 asus 固件中继中又出现了一次。</p>
<p><strong>（21.4.3 更新）</strong> 用着用着发现一个神秘问题：我把路由器拿到同学家，发现还是分配不出 ip。手动修改电脑 ip 进入 web 管理界面后，发现日志中 padavan 路由已经识别到我同学家的主路由了，而且上面那个无线桥接页面的各项配置也自动被修改了，但就是连不上。我想了想，再次拔线重启 padavan，这回就连上了。回到家换成连接家中的主路由，同样是这个现象，要重启两次。</p>
<h2 id="openwrt（21-2-6-更新）"><a href="#openwrt（21-2-6-更新）" class="headerlink" title="openwrt（21.2.6 更新）"></a>openwrt<strong>（21.2.6 更新）</strong></h2><p>padavan 不太行，那就换用 openwrt 吧。</p>
<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>openwrt 的中继和自动切换热点需要加入两个 luci 插件：<code>luci-proto-relay</code> 和 <code>luci-app-travelmate</code>，可以自己用 ssh 的 opkg 命令安装，我的选择是在编译过程中添加，避免自己用 opkg 安装时出现依赖问题，<code>luci-proto-relay</code> 在  LuCI -&gt; Protocols 下；<code>luci-app-travelmate</code> 在 LuCI -&gt; Applications 下，不懂的编译的同学可以参考<a href="https://zbttl.github.io/lu-you-qi-pao-fen-shua-ji/?highlight=openwrt">这篇文章</a>。吐槽一句，k2 要编译成功还得多精简几个东西（比如 ipv6 啊，usb 驱动啊），8m 的 rom 太拮据了。。。</p>
<p>另外 travelmate 有两个前身。</p>
<p>一个叫 auto-ap，参考</p>
<ul>
<li><a href="https://www.right.com.cn/forum/thread-171010-1-1.html">【2016-05-12】 更新 - autoap 自动切换中继信号插件-支持LUCI界面配置 - OPENWRT专版 - 恩山无线论坛 - Powered by Discuz!</a> </li>
<li><a href="https://www.right.com.cn/forum/thread-347014-1-1.html">openwrt插件autoap（自动切换中继信号）系统配置配合调整 - OPENWRT专版 - 恩山无线论坛 - Powered by Discuz!</a>）</li>
</ul>
<p>另一个叫 luci-app-autorepeater，参考 <a href="https://github.com/peter-tank/luci-app-autorepeater">peter-tank/luci-app-autorepeater: Helps you turn your router as automatic repeater, by join scanned wireless station from ssid or bssid.</a></p>
<p>在最新的 openwrt R21.2.1 版本中，这两个插件已均不生效（但后来我尝试刷入旧版 openwrt 这俩东西也没成功生效过。。。）</p>
<h3 id="配置-travelmate"><a href="#配置-travelmate" class="headerlink" title="配置 travelmate"></a>配置 travelmate</h3><p>先配置自动切换中继路由的功能。在服务 -&gt; travelmate 处，默认的未配置情况下这里是 Interface Wizard 页面，需要在 <code>Create Uplink interface</code> 处把默认的 <code>trm_wwan</code> 改为自己的无线 wifi 中继接口。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210302001719.png"></p>
<p>默认为 <code>wwan</code>，改好后确定保存，即可进入真正的配置界面。</p>
<p>转到 Wireless Stations 处。此处的扫描 radio0 是扫描 5g 信号，radio1 则是扫描 2.4g 信号。通过扫描，把需要中继的信号都加进去，调整好顺序。</p>
<p>如果说目前受限于地理位置，无法通过扫描添加未来要自动切换的被中继信号呢？可以通过 Advanced -&gt; Edit Wireless Configuration，在下面的代码编辑器最后一行下面添加</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">config wifi-iface</span><br><span class="line">	option network 'wwan'</span><br><span class="line">	option device 'radio0'</span><br><span class="line">	option mode 'sta'</span><br><span class="line">	option ssid '[被中继信号ssid]'</span><br><span class="line">	option encryption 'psk2'</span><br><span class="line">	option key '[被中继信号密码]'</span><br><span class="line">	option disabled '1'</span><br></pre></td></tr></tbody></table></figure>

<p>最后回到总览。启用 <code>Enable travelmate</code>，建议关闭 <code>Captive Portal Detection</code>（出门在外，可能会中继外面的 wifi 或自己的手机热点，信号没那么稳定，再开这个选项切来切去体验就会变差），最后保存并应用。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210302022533.png"></p>
<h3 id="配置中继桥"><a href="#配置中继桥" class="headerlink" title="配置中继桥"></a>配置中继桥</h3><p>参考文章：</p>
<ul>
<li><a href="https://openwrt.org/zh/docs/guide-user/network/wifi/relay_configuration">[OpenWrt Wiki] Wifi扩展器、中继器及桥接配置</a></li>
</ul>
<p>说到这里，使用 openwrt 有个好处：可以配置完所有功能再应用。padavan 配置网桥的话，如果顺序没有安排好，先配置关闭 dhcp 后还得手动调整自己机子的 ip 地址才能返回 web 管理界面；openwrt 则可以一次配置完后再去获取当前网段下中继路由的 ip。</p>
<ol>
<li><p>调整 wwan 的防火墙类型。在网络 -&gt; 接口中找到 wwan，选择修改，在配置 -&gt; 防火墙区域中把区域从 wan 调到 lan，并保存。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210302082144.png"></p>
</li>
<li><p>新建中继桥。新增一个接口，新接口协议选择「中继桥」（须安装 <code>luci-proto-relay</code> 才会有这个）。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210302082255.png"></p>
<p>提交后修改「网络间中继」，勾选 lan 和 wwan。然后同样将这个中继桥的防火墙区域指向 lan，保存。（这样设置其实还不行，但我卖一个关子，待会在 bug 那里说）</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210302082616.png"></p>
</li>
<li><p>修改 lan 接口。和 padavan 不同，这里设置的 lan ip 必须不在被中继路由子网内，比如被中继路由网关 ip 是 <code>192.168.100.1</code>，这里就不能填 <code>192.168.100.2</code> 之类的，可以填 <code>192.168.101.1</code>。勾选 dhcp 中的「忽略此接口」。此时可以保存并应用，必要时重启路由。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210302082916.png"></p>
</li>
</ol>
<h3 id="bug"><a href="#bug" class="headerlink" title="bug"></a>bug</h3><p>这么一通配置完了，发现几个问题：</p>
<ol>
<li><p>上不去网，因为 ip 没下发，看来是 dhcp 的包没从被中继路由那边传过来。</p>
</li>
<li><p>手动配置网关和 ip 后， windows 10 的网络连接显示从无连接变成了已连接。但几乎所有程序都还连不上网，除了浏览器，原因是浏览器我挂上了 cfw，我的 cfw 开起了 dns 服务。用 nslookup 检测的话，会报错 dns。也就是 dns 的包也没传过来。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210307075634.png"></p>
</li>
<li><p>时不时网络卡顿。</p>
</li>
</ol>
<p>第二点，可通过修改中继桥的本地 ipv4 地址解决。需要修改成中继路由在主路由中的 ip，可从总览 -&gt; 网络处获取。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210307075734.png"></p>
<p>但一和三就麻烦了，参考文章中也列出了该种 bug：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210305071401.png"></p>
<p>上面这段说明里面的 kmod-trelay，可以参考 <a href="https://forum.openwrt.org/t/howto-kmod-trelay/49610/2">Howto kmod-trelay - Installing and Using OpenWrt / Network and Wireless Configuration - OpenWrt Forum</a>。但我实验了几天，没成功，而且为了 dhcp 预计会导致两个更大的问题：</p>
<ol>
<li>只能用于无线中继转有线。起码无线连不上。参考文章中要给 wwan 改 mac，改成连接到中继路由设备的 mac，我用笔记本无线连接后改成笔记本无线网卡的 mac，一重启路由，发现笔记本找不到中继路由发的 5g 信号，估计是 wwan 拿的笔记本 mac 走的 5g 中继，笔记本也通过路由发送的 5g 连接路由器，两个 mac 冲突了。</li>
<li>因为第一点，导致只能中继一个设备，因为路由只有一个网卡，只能改一个 mac。</li>
</ol>
<hr>
<p>要配置网桥，移动地点后不能直接中继还得进 web 管理界面改网桥地址，这就太麻烦了。</p>
<p>还有诸如以下的麻烦：</p>
<ol>
<li>不能直接从 web 看在线了多少设备（曾经在线过的设备也会显示在在线列表中，而且不显示是否离线）。可以通过 ssh 命令 <code>ip neigh | grep REACHABLE</code>。</li>
<li>可能会有某个有线网口失效。</li>
<li>使用开源驱动导致 k2 的 pa+lna 信号放大芯片不生效，信号差一点。</li>
</ol>
<p>不过我也发现两个优势：</p>
<ol>
<li>手动修改 ip 连上中继并能正常上网后，仍然可以通过 lan ip 进入 web 管理界面。其他系统做不到这点，因为 lan ip 和中继路由不在一个网段，其他系统想进去 web 界面得手动修改到 lan ip 的网段；padavan 可以设置 lan ip 到中继路由的网段，但移动地点以后多半又不在同一个网段了，还是不如 openwrt 方便；</li>
<li>可以同时使用网桥中继和 WISP 中继。比如以下的方案——新开一个 wwan2.4 接口和 lan2 接口，lan2 和 wwan2.4 接口接起来，lan2 开启 dhcp，wwan2.4 和 2.4g 无线接起来，就可以达成连接 2.4g 进入相对稳定而方便的 WISP 中继，连接 5g 并手动设置 ip 进入网桥中继。有线一般走 lan，也就是网桥中继，这大家也可以自己设置，就不详细阐述了。另外从 2.4g 无法进入 ssh，因为在系统 -&gt; 管理权处 dropbear 只给了 lan 接口，可以多开一个给 lan2 接口，或者设置为未指定。</li>
</ol>
<p>看来 openwrt 也不太行。。。</p>
<p>转了一圈，试过了高铬，发现除了有个检测在线 qq 的功能，并没有其他优势，中继里也没有中继桥功能可用。</p>
<p>然后发现了带有 pa+lna 驱动的华硕固件，刷进去发现还不错。</p>
<h2 id="asus-中继（21-2-7-更新）"><a href="#asus-中继（21-2-7-更新）" class="headerlink" title="asus 中继（21.2.7 更新）"></a>asus 中继<strong>（21.2.7 更新）</strong></h2><p><a href="https://www.right.com.cn/forum/thread-4052903-1-1.html">K2 ASUS_AC1200HP自动编译版 - 斐讯无线路由器以及其它斐迅网络设备 - 恩山无线论坛 - Powered by Discuz!</a></p>
<p>第一次连接，就可以选择中继模式。这里的中继模式就直接是网桥（中继桥）模式了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210307133213.png"></p>
<p>华硕的固件比较傲娇，成功中继后在被中继路由的管理界面看不到中继路由 ip，使用其他方法（比如 pingtools）也找不到。得使用华硕自己的软件 <a href="https://www.asus.com/uk/support/FAQ/1037094/">ASUS Device Discovery</a>。这个软件在苹果端 app store 和安卓端 google play 也有对应平台的移动端。虽说得多装个软件吧，但使用起来比用 arp 探测的几个方法要方便可靠多了：打开软件就能找到设备，点击配置就直接跳到 web 管理界面。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210307132240.png"></p>
<p>asus 固件没有自动切换中继功能，但手动切换中继比 padavan 方便多了。找不到中继信号的 asus k2 应该会把自己的 ip 自动设回 192.168.1.1，直接访问就行，不成功再用上面介绍的 app 找到管理 ip 并进入。点击主页的重新搜寻即可重新进入中继设置界面。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210307180031.png"></p>
<p>此时不点击自动设置无线就可以使用之前设置的无线密码连接中继路由。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210307180258.png"></p>
<p>当然进不去中继路由管理界面还有一种可能就是用了不可靠的电源。之前我换到同学家使用不仅打不开中继界面，连无线信号和联网状态也断断续续，把 Y1S 的电源换成 n1 原装电源解决。另一次供电不足甚至造成了无线 loopback，在主路由 web 中一瞬显示中继路由下挂了 30 多个设备。。。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/chrome_IrYpRrhfUV.png"></p>
<p>我感觉网桥中继模式应该比较吃供电来着。</p>
<hr>
<p>相比 padavan 另一个好评的地方是，灯颜色对了（</p>
<p>网桥中继除了有供电上的毛病，有时候设备第一次链接中继路由会发现第一时间上不去网，其实是通过中继路由一时半会拿不到主路由 dhcp 分配的 ip 地址。（主路由你快点！给主路由倒一杯卡布奇诺）</p>
<p>如果有多余的路由器，下面这个方案才是最合适的，集速度稳定网桥中继于一身，甚至就算供电不太稳使用起来依旧没什么问题。</p>
<h2 id="集客-ap-中继（21-3-1-更新）"><a href="#集客-ap-中继（21-3-1-更新）" class="headerlink" title="集客 ap 中继（21.3.1 更新）"></a>集客 ap 中继<strong>（21.3.1 更新）</strong></h2><p>参考文章：</p>
<ul>
<li><a href="https://www.right.com.cn/forum/thread-1501038-1-1.html">集客AC AP 知识大全 FAQ 小白扫盲贴 - 斐讯无线路由器以及其它斐迅网络设备 - 恩山无线论坛 - Powered by Discuz!</a></li>
<li><a href="https://www.right.com.cn/forum/thread-4046510-1-1.html">星际宝盒 CM520 刷集客AP MESH组网 - 斐讯无线路由器以及其它斐迅网络设备 - 恩山无线论坛 - Powered by Discuz!</a></li>
</ul>
<p>集客 ap 和普通网桥中继原理略有不同。集客 ap 需要通过有线方式挂一个路由器在主路由下，这个挂在主路由下的路由叫做 ac 面板。而真正的中继路由被称为 ap，ap 能通过各种方式和 ac 完成配对，完成配对后的 ac 和 ap，迁移环境后无需再次配对——也就是说，只要我在家里配置好 ac 和 ap，带到同学家，只要把 ac 挂到他的路由器上，ap 无论放在那里，只要一插电，过一会就能用了。因为 ac 面板有处理能力，dhcp 的速度和中继的稳定性也优于直接中继。另外 ap 除了可以通过无线配对，也能通过有线配对，被称为有线/无线回程。</p>
<p>记得我在 padavan 那边提到的 WDS 么？集客 ap 此处实现的功能便是 mesh 的一部分，WDS 这里也可以使用额外的两台路由完成中继，mesh 和 WDS 的区别在于，mesh 的管理功能和稳定性都要更强；不过 WDS 有一定泛用性，有的时候支持某两种不同品牌 / 系统的路由。但类似于 asus，使用 wds 需要进入两边的路由 web 界面把各自的 mac 添加进去；openwrt 还需要像上面网桥中继教程那样在中继路由上手动设置被中继路由的网关与 ip，跟 mesh 即插即用相比差了不是一点点。</p>
<p>集客 ap 下载地址：<a href="http://file.cnrouter.com/index.php/Index/apbeta.html">文件管理</a></p>
<p>页面中集客 AP_MTK_MIPS 是 ap，集客微路由_MTK 是 ac 面板。但 ap 中实际上带有微 ac，可以带最多 16 台 ap，所以我们下两个 ap 就好了，这样两个路由都可以胜任 ac / 中继 ap。我多出来的路由是极路由 2 和 newifi Y1S，这两个都没带 pa+lna，所以虽然处理器相同但要下的固件和 k2 的固件是不一样的，k2 下 AP230EP，另外两个路由应该下 AP230IP，我尝试给极路由 2 用 AP230EP，结果无线 mesh 回程失效，只剩有线回程可用。</p>
<h3 id="进入管理界面"><a href="#进入管理界面" class="headerlink" title="进入管理界面"></a>进入管理界面</h3><ol>
<li><p>第一次配对需要先把两个路由都通过网线接入同一个局域网。可以把 ac /  中继 ap 路由都接入主路由中；也可以把 ac / 中继 ap 的其中一个插到主路由上，另一个插到中继 ap / ac 上。但必须有一个路由接到主路由上，否则微 ap 中 -&gt; ap 列表中不会显示任何内容。</p>
</li>
<li><p>接着可以通过三种方法进入管理界面：</p>
<ul>
<li>在中继 ap / ac <strong>已连接</strong>到被中继路由（主路由）的情况下，连接到主路由，通过 arp 或者主路由 web 界面（详情见<a href="#%E6%89%93%E5%BC%80%E4%B8%AD%E7%BB%A7%E5%90%8E%E8%BF%9B%E5%85%A5%E4%B8%AD%E7%BB%A7%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86%E7%95%8C%E9%9D%A2">上文</a>）找到挂在主路由下的 ip 并进入；</li>
<li>手动修改连接设备的 ip，ip 地址修改为 6.6.6.1，子网掩码 255.0.0.0。然后连接到 ac / 中继 ap 发出的节点，节点名为 GECOOSAP-XXXX，浏览器输入 6.6.6.6 进入；</li>
<li>在中继 ap / ac <strong>未连接</strong>到被中继路由（主路由）的情况下，<del>按下路由的 reset 键，</del>过一会会出现一个 SOS_XXXX<del>（值得一提的是，同一个设备这里的 XXXX 和第二个方法中 GECOOSAP-XXXX 这一串里的 XXXX 是一样的字符串，刚开始开起了多个设备但不知道设备对应的节点名称是什么，可以用这个方法来确定）</del> 的节点，默认 wifi 密码为 88888888，由于没有连上主路由，所以中继 ap / ac 会打开自己的 dhcp，因此不需要和上面那个方法一样手动修改连接设备的 ip，直接输入 6.6.6.6 进入即可。</li>
</ul>
<p>第三点划去的部分是因为新版固件在检测到连接不上网络时就会自动释放 sos 节点，并且原来ac / 中继 ap 发出的节点末尾会增加一个感叹号。</p>
<p>进入成功后使用默认密码 admin 登录。</p>
</li>
</ol>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>参考：<a href="https://www.bilibili.com/video/BV1yJ411P748">200块的无缝组网体验堪比1699mesh套装？斐讯K2T无线路由KVR组网实战_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p>
<ol>
<li><p>在 ac 和中继 ap 系统管理 -&gt; 基本设置中设置好格子的设备名称，将自动重启设为 0 天，修改密码。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-03-08%20204346.png"></p>
</li>
<li><p>进入 ac 的无线管理 -&gt; ssid 设置中，设置好相应的 2.4g / 5g 无线配置。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210308234442.png"></p>
</li>
<li><p>进入 ac 的微 ap -&gt; ap 列表，这里应该会显示 ac 和所有中继 ap 的设备名单，在这里我勾选上网络里的唯一一台中继 ap，选择克隆 -&gt; 克隆无线配置。当然此处也可以根据当前的网络环境自己调成各个节点的信道，不过因为我可能要带出门，各个地点的网络环境都不同所以就保持自动好了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210308234608.png"></p>
</li>
</ol>
<h3 id="无线-mesh-回程"><a href="#无线-mesh-回程" class="headerlink" title="无线 mesh 回程"></a>无线 mesh 回程</h3><ol>
<li><p>此时在 ap 列表中，直接点击 ap 一栏的超链接就能进入相应设备的 web 管理界面了。</p>
</li>
<li><p>在 ac 端 -&gt; mesh 设置，开启 mesh，角色选择主 mesh，配对标识自己设置，待会在子 mesh 处要填一样的。射频选 5g。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-03-08%20234741.png"></p>
</li>
<li><p>从 ap 列表中进入 ap 中继端，在上面所述同样的地方开启 mesh，设置基本一致，除了角色需要选择为子 mesh。</p>
</li>
<li><p>拔掉子 mesh 端的网线，过一会子 mesh 就会通过无线连接上主 mesh 了。在子 mesh 上能看到无线回程变为在线状态：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210309000533.png"></p>
<p>主 mesh 这边：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210309001359.png"></p>
</li>
</ol>
<hr>
<p>集客 ap 几个中继路由可以选择不同的信道这点是其他中继做不到的。</p>
<p>风传集客 ap 中继能不受有线网口速度影响，我试了一下，是假的，中继后 speedtest 网速最高高不过百兆（几个中继路由都只有百兆口）。</p>
<p>除了需要用两台设备，缺点还有这么几个：</p>
<ol>
<li><p>k2 灯颜色不对，全程红灯；</p>
</li>
<li><p>设备间使用的加密没得选。参考文章中有提到：</p>
<blockquote>
<ol start="9">
<li>问：相比用过的其他固件,我想设置加密方式为 WPA2,不用WPA,2.4G协议能不能只802n, 802b/g兼容关掉,类似这种选项能否开放出来?<br> 答：集客AP定们是工程级，在功能满足的情况下更多是要考虑降低安装和维护成本，尽量做到即插即用，加密方式目前只使用的最安全的。</li>
</ol>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>路由器</category>
      </categories>
      <tags>
        <tag>xbox</tag>
        <tag>openwrt</tag>
        <tag>padavan</tag>
        <tag>中继</tag>
        <tag>asusfirmware</tag>
        <tag>集客ap</tag>
      </tags>
  </entry>
  <entry>
    <title>github 学生包和 azure 羊毛</title>
    <url>/github-xue-sheng-bao-he-azure-yang-mao/</url>
    <content><![CDATA[<h2 id="github-学生包"><a href="#github-学生包" class="headerlink" title="github 学生包"></a>github 学生包</h2><p>虽然我早毕业了，但 github 学生包是大二的时候才办的，按两年需要续一次的规定，其实还剩大半年呢，先把能薅的都薅了（</p>
<p>先来复习一下 github 学生包申请方法：</p>
<ol>
<li><p>确保自己没开代理。打开 <a href="https://education.github.com/">github education</a> 网站，点击顶上的 get benefit。</p>
</li>
<li><p>按照提示一路填写真实信息即可。破学校没有教育邮箱，只好上传学生证。上传照片的部分拍上自己学生证上有头像和日期那一面。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210128055410.png"></p>
</li>
<li><p>大概会过两三天 github 就会给你发邮件告诉你申请成功了。我的亲身经历是申请成功的话邮件送达的时间会稍快，而失败的话就会慢的多。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210128064234.png"></p>
<center>上面那封成功 下面那封失败</center>

</li>
</ol>
<p>截止今天（21.1.25），github education 包里面有下面这些东西。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/GitHub%20Student%20Developer%20Pack%20-%20GitHub%20Education.jpg"></p>
<p>一眼扫过去，我觉得我认得且比较有用的：</p>
<ul>
<li>digitalocean 的一年 100 美元优惠码</li>
<li>azure 一年 100 美元优惠码</li>
<li>github 高级会员（私人仓库免费）</li>
<li>namecheap 和 name.com 各一年的免费域名（正好两年期间一年用一个）</li>
<li>termius 教育版会员（跨平台 ssh 工具，相比 xshell 赢一手 mosh）</li>
<li>jetbrain 教育版全家桶</li>
</ul>
<p><del>被羊毛贩子倒来倒去的主要是前两个</del>，do 会给优惠码，不过要先冲进去 5 美刀；azure 只要绑上一个微软账号就行了。使用有效期以激活优惠码 / 绑定账号激活教育优惠时为准。和 azure 相比，do 激活并不复杂，不提。</p>
<h2 id="azure-学生包激活"><a href="#azure-学生包激活" class="headerlink" title="azure 学生包激活"></a>azure 学生包激活</h2><p>先吐槽一句，也许是我水平不够，软软的东西，凡事遇到啥问题，google 一下就是软软的官方教程，那教程乍看起来写的是相当详细，但认真看的话，就是找不到自己想找的内容，总感觉有一种浓浓的<del>高数课本的味道</del>。。。</p>
<p>偏题了，最后还是<del>沙雕网友</del>能把我拉出来.jpg</p>
<p>参考文章：</p>
<ul>
<li><a href="https://51.ruyo.net/8043.html">Windows Azure学生免费帐户，获得100美元的优惠！ - VPS|国外VPS|教程资源|网络资源 - 如有乐享</a></li>
<li><a href="https://51.ruyo.net/11319.html">Windows Azure学生订阅额度完全使用(薅干)指南教程 - 教程资源|网络资源 - 如有乐享</a></li>
</ul>
<p>实话说，注册那段我已经忘了具体干了啥。。。只记得得从 github education 那里的连接登录到 azure，虽说教程说最好不要用中国但我自信满满的没看教程直接用中国注册过去了，还有并不用信用卡，就这么多，这部分略过。</p>
<h3 id="查看余额"><a href="#查看余额" class="headerlink" title="查看余额"></a>查看余额</h3><p>注册完，先从主页中搜索「订阅」，打开后能看到「Azure for education」这项，点开，顶上会有一个「若要查看剩余额度。。。」啥的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210128174716.png"></p>
<p>点开以后，选「Check Your Balance」这一项，打开以后显示有 100 刀就说明注册成功。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210128174649.png"></p>
<h3 id="导入密钥（建议）"><a href="#导入密钥（建议）" class="headerlink" title="导入密钥（建议）"></a>导入密钥（建议）</h3><p>然后先把自己常用的密钥导入（登陆 ssh 用密钥是个好习惯）：</p>
<ol>
<li><p>在顶上搜索框搜索「密钥」，点开，点击新增。</p>
</li>
<li><p>如下图，有两个必填项目：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210128180113.png"></p>
<p>资源组随便新建一个，密钥上传自己的公钥，或者让它来生成。</p>
<p>创建后可能要等一段时间才能用。</p>
</li>
</ol>
<h3 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h3><ol>
<li><p>之后，搜索「虚拟机」，进入虚拟机管理界面，点击创建-&gt;虚拟机。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210128214751.png"></p>
<p>区域看个人 ISP 情况，电信这边我感觉香港（东亚）比较快，但我同学的移动就感觉新加坡（南亚）更快。可以自己用 <a href="https://cloudpingtest.com/">Cloud Ping Test (Latency) for different providers like AWS, Azure, GCP</a> 试试延迟（当然延迟这个东西仅供参考，更重要的实际能跑出来的是带宽）。映像一半用 ubuntu 或 debian，别用 CentOS 了，要凉了。大小选 B1S，虽然有更便宜的但微软学生包中其实包含了两个免费的 b1s 服务器。ssh 就选自己刚刚创建的密钥就好。</p>
<p>切换到磁盘这边，记得选 P6 而不是默认的 30G。os 磁盘类型维持默认，默认就是高级，不会因为选了标准就给你减免的（</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210128215625.png"></p>
<p>网络这边，选择出站端口，必选 22，可选 80、443，更多的端口需要创建后再改。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210128215847.png"></p>
<p>可以在高级处禁用诊断。我是觉得无所谓啦。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210128220009.png"></p>
</li>
<li><p>设置好后就可以点底下的查看 + 创建了。</p>
</li>
</ol>
<h3 id="使用静态-ip（可选）"><a href="#使用静态-ip（可选）" class="headerlink" title="使用静态 ip（可选）"></a>使用静态 ip（可选）</h3><ol>
<li><p>点开刚创建的虚拟机 -&gt; 网络，NIC 公共 IP 后面跟着的蓝色数字串是目前的动态 ip 地址，这个 ip 重启后会自动变更，不方便我们使用，点开他，选中左侧的「配置」，在右侧的「分配」处改为静态并保存即可。</p>
<p>不过静态 ip 每天要花差不多 0.04 刀，用一年可能就差不多十几刀了，如果不用静态 ip 的话建议绑个域名方便记忆，动态 ip 在面板中重启机器时会变换，换了以后再去域名里面改解析，稍微麻烦但还是比直接用域名要方便一些。（在 ssh 中使用 reboot 并不会导致 ip 被更换）</p>
<p>从动态 ip 改成静态 ip 很简单，但从静态 ip 改回动态 ip 略微麻烦，要先解绑网卡。可能需要先停机。在刚刚设置 ip 的地方，点击左边的「概述」进入概述页面，再点击「取消关联」。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210130041803.png"></p>
<p>再次回到「配置」，在右侧的「分配」处改为动态并保存；回到概述页面，点击关联，在右侧弹出的窗口中，「资源类型」改为网络接口，网络接口处点击下拉按钮就会显示有刚刚解绑的设备，选上并确定即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210130022757.png"></p>
</li>
</ol>
<h3 id="增加入站出站端口（可选）"><a href="#增加入站出站端口（可选）" class="headerlink" title="增加入站出站端口（可选）"></a>增加入站出站端口（可选）</h3><p>   我个人用 vps 是不喜欢开防火墙的，安全要求没那么高。点开刚创建的虚拟机 -&gt; 网络 -&gt; 入站端口规则 -&gt; 添加入站端口规则，目标端口范围 0-65535 满上。安全一些只开高端口 10000-65535 也可以，另外现在最新的某类型工具通过 fallback 能让所有那种类型的流量都通过 443 出入，那这里啥都不加也都可以，自己选择吧。</p>
<p>   <img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210128220516.png"></p>
<p>   然后出站流量规则那里也照猫画虎整一个就行。</p>
<h3 id="增加一块-p6-硬盘（可选）"><a href="#增加一块-p6-硬盘（可选）" class="headerlink" title="增加一块 p6 硬盘（可选）"></a>增加一块 p6 硬盘（可选）</h3><p>   学生包 azure 其实带了两块免费的 p6 硬盘，一块给 b1s Linux 用一块给 b1s windows 用，但如果 windows 的虚拟机你用不上，也可以把多出来的 p6 放进 linux 这边。</p>
<p>   转到创建的虚拟机中磁盘这一项，选创建并附加新磁盘，改大小为 64g ，点顶上的保存即可。不过附加的磁盘并不会立刻在虚拟机中生效，需要你自己挂载，而且我也没试过是不是真的能挂上去。。。。所以这条存疑（</p>
<p>   <img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210128221237.png"></p>
<h3 id="强制开启-root-账号（可选）"><a href="#强制开启-root-账号（可选）" class="headerlink" title="强制开启 root 账号（可选）"></a>强制开启 root 账号（可选）</h3><p>干完上面那些事就可以通过 ssh 登录 vps 了。默认的用户名是在设置第一屏的时候自己设置的，虽然用 root 而不用 sudo 是个不太好的习惯，但我就想用 root 登录怎么办？</p>
<p>   参考：<a href="https://khaledammar.com/technical-tips-and-tricks/technical-tricks/">How to ssh to your Amazon EC2 instance using by root? | Khaled Ammar</a></p>
<ol>
<li><p>登录后，编辑 <code>/etc/ssh/sshd_config</code> 文件，修改其中的</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">PermitRootLogin forced-commands-only</span><br></pre></td></tr></tbody></table></figure>

<p>为</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">PermitRootLogin without-password</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>重启 sshd</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo service sshd restart</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>编辑 <code>/root/.ssh/authorized_keys</code>，定位到</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ssh-rsa [big long key]</span><br></pre></td></tr></tbody></table></figure>

<p>将这串字符前面的内容全部删除。</p>
</li>
<li><p>此时即可使用 root 用户登录。</p>
</li>
</ol>
<h3 id="后续计费"><a href="#后续计费" class="headerlink" title="后续计费"></a>后续计费</h3><p><del>之前我谈到后续还可以新开一个 windows b1s 虚拟机，我对 windows server 不熟，这里就不多 bb 了。</del> windows server 的内容参考后续的文章。</p>
<p>1202 年了，现在这个时间 azure education 究竟包含了多少内容已经无法在订阅 -&gt; 使用配额中看到了（以前还能看到自己的 b1s 有 750 小时的进度条）。但现在开完虚拟机过一段时间后可以到余额处查看，自己开的这些东西是不是免费的（下面这张图就是我不小心用了默认大小的硬盘后扣的钱）：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210125183046.png"></p>
<p>azure 只计算回程流量，大概算一下，每个月好像是有 15 gb 的免费流量，加上 0.14 刀 / g 的超套流量，正正经经用100 刀 / 年也许够用 800g-900g 这样吧，没有 do 那么豪，但能嫖到香港的 vps 还要什么自行车呢？（不过毕竟没绑定信用卡，万一超了费用去哪了呢 hhhhh？）</p>
<p>azure 也没有明确的进度条告诉我还能用多少流量，只能看到已经用了多少流量。一种方法是依赖探针；另一种是通过虚拟机 -&gt; 指标，「度量值」选 Network Out Total，「聚合」选总和，右边的显示方法改成图表，时间跨度改成一个计费周期（计费周期具体是从多少号开始可以去余额那边看到），就能大概看出用了多少了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210129020611.png"></p>
<h3 id="（21-8-16-更新）快照还原"><a href="#（21-8-16-更新）快照还原" class="headerlink" title="（21.8.16 更新）快照还原"></a>（21.8.16 更新）快照还原</h3><p>参考：<a href="https://www.makak.ch/azure-restore-vm-disk-from-a-snapshot/?cn-reloaded=1">Azure - Restore VM disk from a snapshot - Makak.ch</a></p>
<p>azure 的快照和以前用过的 do、vultr 等不一样，仅仅需要对磁盘进行快照即可。</p>
<h4 id="创建快照"><a href="#创建快照" class="headerlink" title="创建快照"></a>创建快照</h4><ol>
<li>在需要做快照的对应虚拟机管理界面下，选择左侧边栏的设置 -&gt; 磁盘，点击磁盘进入磁盘管理界面。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210816012819.png"></p>
<ol start="3">
<li><ol start="2">
<li>选择「创建快照」，指定好名字后一路下一步即可。</li>
</ol>
</li>
</ol>
<h4 id="还原快照"><a href="#还原快照" class="headerlink" title="还原快照"></a>还原快照</h4><ol>
<li>搜索「快照」关键字，进入快照管理页面</li>
<li>选中相应快照，点击创建磁盘。</li>
<li>指定好名字一路下一步后，创建磁盘成功。回到「创建快照」第一步截图的这个界面，点击「交换 os 磁盘」，找到刚刚创建的磁盘，还原即可。</li>
<li>还原时机器会关机。还原后需要手动打开。如果还原前的磁盘不需要了，还原后可以手动删除以免造成额外支出。</li>
</ol>
<hr>
<p>感觉一套下来，除了还原后原磁盘内容还能得以保留，给了一个「反悔还原」的机会以外，相比 do 和 vultr 步骤复杂多了，搞得那么复杂也没有啥额外的优点，人家厂还原时虽然也不能用，但不需要手动开机；中间我还以为快照能给转移到不同于原主机所在的其他区域去，后来发现是我想多了，创建磁盘的时候地区这栏根本就是灰的，原来快照备份的磁盘所在的区域在哪，快照就必须在哪。。。。。。</p>
<p>只能说不愧是软软。</p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>羊毛</tag>
        <tag>github</tag>
        <tag>azure</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 问题集合和那些被我放弃的功能</title>
    <url>/hexo-wen-ti-ji-he-he-na-xie-bei-wo-fang-qi-de-gong-neng/</url>
    <content><![CDATA[<p>一些是我从进阶那篇文章搬过来的坑，我感觉内容比较多，干脆单开一篇好了。</p>
<h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><h3 id="hexo-转移到-windows-上部署（吐槽，临时，没完全成功，已解决）"><a href="#hexo-转移到-windows-上部署（吐槽，临时，没完全成功，已解决）" class="headerlink" title="hexo 转移到 windows 上部署（吐槽，临时，没完全成功，已解决）"></a>hexo 转移到 windows 上部署（吐槽<del>，临时，没完全成功</del>，已解决）</h3><p>个人习惯，新玩意先在虚拟机上实验，因为之前 windows 上太多开发工具会把机子环境搞乱（比如 sql server 之类的），给后面其他软件的安装带来麻烦。不过观察到现在，hexo 除了安装拿一下影响全局环境，其他情况下都只在自己文件夹内做修改。一直用虚拟机编辑体验不太好（linux 下 vscode 还是挺卡的），索性搬到 windows 上。</p>
<p>然后发现：安装新组件，本地预览啥的没问题。但部署到 github 仓库的时候就出问题了。首先是告诉我，没权限，估计是没 key。</p>
<p>先把 key 导进去看看？</p>
<p>用 ssh-add 命令，报错。</p>
<p>参考 <a href="https://www.cnblogs.com/attackingmilo/p/Windows-ssh-add-error.html">Windows下使用ssh-add报错 Error connecting to agent: No such file or directory</a></p>
<p>把服务开起来</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Set-Service -Name ssh-agent -StartupType Manual</span><br><span class="line">Start-Service ssh-agent</span><br></pre></td></tr></tbody></table></figure>

<p>再添加</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ssh-add ./id_rsa</span><br></pre></td></tr></tbody></table></figure>

<p>还报错。。。</p>
<p>把密钥放进系统用户目录中</p>
<p>再添加</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ssh-add C:\Users\zbttl\id_rsa</span><br></pre></td></tr></tbody></table></figure>

<p>总算是添加进去了，运行</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></tbody></table></figure>

<p>显示</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">warning: agent returned different signature type ssh-rsa (expected rsa-sha2-512)</span><br><span class="line">Hi zbttl! You've successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></tbody></table></figure>

<p>但我再次运行 <code>hexo g -d</code></p>
<p>还报错：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Error: git@github.com: Permission denied (publickey).</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br></pre></td></tr></tbody></table></figure>

<p>后面查阅到 <a href="https://github.com/hexojs/hexo/issues/3339">Win10使用ssh的hexo部署到github报错 ＃3339</a>，看起来应该是因为我的 rsa 密钥还带有密码，但 hexo-deployer-git 在 windows 下不会弹密码提示而是自作主张当做没密码的原因。但我既不想去掉密钥的密码，也不想用 git push 提交，所以直接用 windows 提交暂时是不成了。（不过我也没去查阅 hexo-deployer-git 那边有没有解决方案，起码我这边已经用的最新版了）</p>
<p>想到一个曲线救国的方法，开一个 vmware ubuntu 的共享文件夹，把 hexo 项目放在里面，就可以编辑的时候用 windows typora，部署的时候再用 ubuntu。我感觉用 wsl 也可以，但我没怎么用过那玩意，感兴趣的可以尝试。（wsl2 就算了，我对 hyper-v 印象超差的）</p>
<p><strong>（21.1.21 更新）</strong>已解决。把 ssh 私钥放到 <code>C:\Users\[用户名]\.ssh</code> 里面就完事了。</p>
<h3 id="hexo-更改-categories-大小写后部署-404-的问题"><a href="#hexo-更改-categories-大小写后部署-404-的问题" class="headerlink" title="hexo 更改 categories 大小写后部署 404 的问题"></a>hexo 更改 categories 大小写后部署 404 的问题</h3><p>参考文章：<a href="https://blog.csdn.net/liuergo/article/details/102640098">Hexo部署到Github文件夹大小写问题_liuergo的博客-CSDN博客</a></p>
<p>前一篇说过尽量约定好 tags 和 categories 大小写的原因是，我发现我有的文章归进了首字母大写的类别（如 Linux）里，有些归进了首字母小写的类别（如 linux）里，但实际上应该归为一类。我手动替换修改后，刷新提交发现是归为一类了，点进去显示 404。后来发现是 github 大小写不敏感的锅。</p>
<p>索引到 <code>.deploy_git/.git</code> 文件夹，修改 <code>config</code> 文件中的 <code>ignorecase</code> 参数为 false 即可。</p>
<h3 id="较长的行内代码导致段落字与字间距错误"><a href="#较长的行内代码导致段落字与字间距错误" class="headerlink" title="较长的行内代码导致段落字与字间距错误"></a>较长的行内代码导致段落字与字间距错误</h3><p>看一眼效果你们就明白我在说啥了：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210123042437.png"></p>
<p>解决方法嘛。。。说实话我现在找到的解决方法我不太喜欢，因为要改动主题文件夹，在 hexo 进阶那篇文章中我已经解释过为什么直接改动主题文件夹的内容是不太好的行为了，但现在我想不到其他办法（是我真的菜）。</p>
<p>来到 <code>themes\next\source\css\_common\scaffolding\highlight</code> 下，打开 <code>index.styl</code>。目前是下面这一段决定了行内代码的格式：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">code {</span><br><span class="line">  @extend $code-inline;</span><br><span class="line">  border-radius: 3px;</span><br><span class="line">  font-size: $table-font-size;</span><br><span class="line">  padding: 2px 4px;</span><br><span class="line">  word-wrap();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>将其修改为</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">code {</span><br><span class="line">  @extend $code-inline;</span><br><span class="line">  border-radius: 3px;</span><br><span class="line">  font-size: $table-font-size;</span><br><span class="line">  padding: 2px 4px;</span><br><span class="line">  white-space: pre-wrap;</span><br><span class="line">  word-break: break-all;  //自动换行，不显示横向滚动条。</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>即可。</p>
<p>原理是让行内代码块拥有自动换行和任意字符间断行的能力，参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/word-break">word-break - CSS（层叠样式表） | MDN</a>。未来如果又更新了代码的位置，或者用着其他主题也有这个问题的，在浏览器内用 f12 找一下相应代码的位置再过来改就成。</p>
<p>修改后：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210123234229.png"></p>
<p>另外值得一提的是，独立代码块自动换行功能也可以在这个文件中修改。但修改后行号显示会出现问题，目前没有解决方法。</p>
<p><strong>（21.2.17 更新）</strong>还有一种方法，参考 <a href="https://theme-next.js.org/docs/theme-settings/miscellaneous.html?highlight=fonts+customization">Misc Theme Settings | NexT</a>，修改主题配置文件的 <code>text_align</code>：</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"># Set the text alignment in the posts.</span><br><span class="line">text_align:</span><br><span class="line">  # Available values: start | end | left | right | center | justify | justify-all | match-parent</span><br><span class="line">  desktop: start</span><br><span class="line">  mobile: start</span><br></pre></td></tr></tbody></table></figure>

<p>但恕我直言，这效果。。。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210217072912.png"></p>
<p>咱还是用不那么优雅的方法获取优雅的效果吧（</p>
<h2 id="已弃用的功能"><a href="#已弃用的功能" class="headerlink" title="已弃用的功能"></a>已弃用的功能</h2><h3 id="hexo-文字特效"><a href="#hexo-文字特效" class="headerlink" title="hexo 文字特效"></a>hexo 文字特效</h3><p>参考文章：<a href="https://tding.top/archives/58cff12b.html">Hexo-NexT 添加打字特效、鼠标点击特效 | 小丁的个人博客</a></p>
<p>拷贝 <code>activate-power-mode.min.js</code> 代码，放入 <code>source\js</code> 中。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">(function webpackUniversalModuleDefinition(root,factory){if(typeof exports==='object'&amp;&amp;typeof module==='object')module.exports=factory();else if(typeof define==='function'&amp;&amp;define.amd)define([],factory);else if(typeof exports==='object')exports["POWERMODE"]=factory();else root["POWERMODE"]=factory()})(this,function(){return(function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={exports:{},id:moduleId,loaded:false};modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.loaded=true;return module.exports}__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.p="";return __webpack_require__(0)})([function(module,exports,__webpack_require__){'use strict';var canvas=document.createElement('canvas');canvas.width=window.innerWidth;canvas.height=window.innerHeight;canvas.style.cssText='position:fixed;top:0;left:0;pointer-events:none;z-index:999999';window.addEventListener('resize',function(){canvas.width=window.innerWidth;canvas.height=window.innerHeight});document.body.appendChild(canvas);var context=canvas.getContext('2d');var particles=[];var particlePointer=0;POWERMODE.shake=true;function getRandom(min,max){return Math.random()*(max-min)+min}function getColor(el){if(POWERMODE.colorful){var u=getRandom(0,360);return'hsla('+getRandom(u-10,u+10)+', 100%, '+getRandom(50,80)+'%, '+1+')'}else{return window.getComputedStyle(el).color}}function getCaret(){var el=document.activeElement;var bcr;if(el.tagName==='TEXTAREA'||(el.tagName==='INPUT'&amp;&amp;el.getAttribute('type')==='text')){var offset=__webpack_require__(1)(el,el.selectionStart);bcr=el.getBoundingClientRect();return{x:offset.left+bcr.left,y:offset.top+bcr.top,color:getColor(el)}}var selection=window.getSelection();if(selection.rangeCount){var range=selection.getRangeAt(0);var startNode=range.startContainer;if(startNode.nodeType===document.TEXT_NODE){startNode=startNode.parentNode}bcr=range.getBoundingClientRect();return{x:bcr.left,y:bcr.top,color:getColor(startNode)}}return{x:0,y:0,color:'transparent'}}function createParticle(x,y,color){return{x:x,y:y,alpha:1,color:color,velocity:{x:-1+Math.random()*2,y:-3.5+Math.random()*2}}}function POWERMODE(){{var caret=getCaret();var numParticles=5+Math.round(Math.random()*10);while(numParticles--){particles[particlePointer]=createParticle(caret.x,caret.y,caret.color);particlePointer=(particlePointer+1)%500}}{if(POWERMODE.shake){var intensity=1+2*Math.random();var x=intensity*(Math.random()&gt;0.5?-1:1);var y=intensity*(Math.random()&gt;0.5?-1:1);document.body.style.marginLeft=x+'px';document.body.style.marginTop=y+'px';setTimeout(function(){document.body.style.marginLeft='';document.body.style.marginTop=''},75)}}};POWERMODE.colorful=false;function loop(){requestAnimationFrame(loop);context.clearRect(0,0,canvas.width,canvas.height);for(var i=0;i&lt;particles.length;++i){var particle=particles[i];if(particle.alpha&lt;=0.1)continue;particle.velocity.y+=0.075;particle.x+=particle.velocity.x;particle.y+=particle.velocity.y;particle.alpha*=0.96;context.globalAlpha=particle.alpha;context.fillStyle=particle.color;context.fillRect(Math.round(particle.x-1.5),Math.round(particle.y-1.5),3,3)}}requestAnimationFrame(loop);module.exports=POWERMODE},function(module,exports){(function(){var properties=['direction','boxSizing','width','height','overflowX','overflowY','borderTopWidth','borderRightWidth','borderBottomWidth','borderLeftWidth','borderStyle','paddingTop','paddingRight','paddingBottom','paddingLeft','fontStyle','fontVariant','fontWeight','fontStretch','fontSize','fontSizeAdjust','lineHeight','fontFamily','textAlign','textTransform','textIndent','textDecoration','letterSpacing','wordSpacing','tabSize','MozTabSize'];var isFirefox=window.mozInnerScreenX!=null;function getCaretCoordinates(element,position,options){var debug=options&amp;&amp;options.debug||false;if(debug){var el=document.querySelector('#input-textarea-caret-position-mirror-div');if(el){el.parentNode.removeChild(el)}}var div=document.createElement('div');div.id='input-textarea-caret-position-mirror-div';document.body.appendChild(div);var style=div.style;var computed=window.getComputedStyle?getComputedStyle(element):element.currentStyle;style.whiteSpace='pre-wrap';if(element.nodeName!=='INPUT')style.wordWrap='break-word';style.position='absolute';if(!debug)style.visibility='hidden';properties.forEach(function(prop){style[prop]=computed[prop]});if(isFirefox){if(element.scrollHeight&gt;parseInt(computed.height))style.overflowY='scroll'}else{style.overflow='hidden'}div.textContent=element.value.substring(0,position);if(element.nodeName==='INPUT')div.textContent=div.textContent.replace(/\s/g,"\u00a0");var span=document.createElement('span');span.textContent=element.value.substring(position)||'.';div.appendChild(span);var coordinates={top:span.offsetTop+parseInt(computed['borderTopWidth']),left:span.offsetLeft+parseInt(computed['borderLeftWidth'])};if(debug){span.style.backgroundColor='#aaa'}else{document.body.removeChild(div)}return coordinates}if(typeof module!="undefined"&amp;&amp;typeof module.exports!="undefined"){module.exports=getCaretCoordinates}else{window.getCaretCoordinates=getCaretCoordinates}}())}])});</span><br></pre></td></tr></tbody></table></figure>

<p>在 <code>_data/footer.njk</code> 中新增</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">{# 打字特效 #}</span><br><span class="line">{% if theme.typing_effect %}</span><br><span class="line">  &lt;script src="/js/activate-power-mode.min.js"&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    POWERMODE.colorful = {{ theme.typing_effect.colorful }};</span><br><span class="line">    POWERMODE.shake = {{ theme.typing_effect.shake }};</span><br><span class="line">    document.body.addEventListener('input', POWERMODE);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">{% endif %}</span><br></pre></td></tr></tbody></table></figure>

<p>在主题配置文件中新增：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"># typing effect</span><br><span class="line">typing_effect:</span><br><span class="line">  colorful: true  # 礼花特效</span><br><span class="line">  shake: false  # 震动特效</span><br></pre></td></tr></tbody></table></figure>

<p>即可。</p>
<p>为啥我不用这个呢。。。因为只有在评论区生效，搜索时也要打字但并不生效，在本地部署时没有评论区，不好调试；另外就是这玩意我在手机上试了一下，打了几个字就卡住了，不太行。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>方向对了，奈何能力不足——cod17 僵尸模式试玩体验</title>
    <url>/fang-xiang-dui-liao-nai-he-neng-li-bu-zu-cod17-jiang-shi-mo-shi-shi-wan-ti-yan/</url>
    <content><![CDATA[<p>凌晨两点试玩结束，写一篇体验。</p>
<p>传统艺能，发售三个月还是只有一张图。第一遍玩下来，给我的感觉就是：图好小。。。</p>
<p>作为一个萌新，3arc 的僵尸我只玩过 cod12 和 cod15。cod17 这张图严格来说在整个系列中应该也算中等规模，但按前几座的惯例，第一张图应该是整个作品的牌面：拥有和全系列作品相比较大的地图规模；丰富的要素；和全作最多的彩蛋。但这次的地图我一遍走通两遍走熟，整个地图按区域划分不过两个平原一栋楼加底下两层。彩蛋方面，主线彩蛋也就是惯例的 pap，武器升级和最终 boss，盾牌都给砍掉了；而支线彩蛋更是只有僵尸抬棺这一个，实在是乏善可陈。而且僵尸抬棺这个彩蛋。。。第一遍乍看起来很有趣，而且简单上手还能拿奖励，但做多几次就发现为了拿点奖励要看他跳一分多钟啥事都不能干，实在有点。。。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E4%BD%BF%E5%91%BD%E5%8F%AC%E5%94%A4%C2%AE%EF%BC%9A%E9%BB%91%E8%89%B2%E8%A1%8C%E5%8A%A8%E5%86%B7%E6%88%98%20-%20Xbox%20Series%20XS.png"></p>
<center>专 业 团 队</center>


<p>其他方面，t 组在贡献了最「偷工减料」的一张首发图的同时，打算用相比前作更为完善的模式和玩法来弥补；除了本体模式，增加了 20 撤离和狂暴模式；同时在原来的刷波和通关主线两种玩法中又加了一种「撤离」玩法：10 波后就能每 5 波一次选择呼叫飞机并前往撤离点撤离，但撤离过程中会遭遇大量僵尸的围堵，此时你要干的就是找个角落然后用尽你所有的方法在规定时间内把僵尸全部清理掉，保证撤离点的安全，否则时间一到飞机就会被从动视裤裆里掏出来的火箭筒干掉，游戏结束~</p>
<p>t 组也大幅增加了养成要素在僵尸模式所占的比例。泡泡糖和勋章系统被移除，作为替代，游戏结束后会获得暗黑水晶，暗黑水晶能够赋予整个武器类型功能和能力上的强化；强化游戏中通过金钱购买的能力机器给予能力的强度；以及强化大招的等级以获取更强的功能，关键的是，这些强化是永久的，而且每个强化最多只有三级，每级的水晶需求数是 1/2/3，也就是说，只需要 6 个水晶就可以升满一个项目。这点我当然要给好评了，因为有仓鼠症的我总不舍得用那些高级泡泡糖和勋章。。。</p>
<p>而游戏中能够临时获取的，除了金钱，还有废料和高级废料，通过废料和高级废料，玩家能够购买各种杀伤性道具和战争机器等一系列高等级杀伤性装备，代替了原来在武器配置栏中的需要升级才能获取的各类装备；同时废料也可以升级枪械品质和护甲品质，喝过 3j 厚血拥有 3j 甲的人物甚至能拥有相当于 500 血的耐久。本作承袭自现代战争的等级系统也决定着玩家不需要反复跟 t 组祖传的转生系统斗争了（万恶的武器转生，转生 2 的击杀显示器我自己根本看不到好吧）。武器升级机变成了菜单，玩家再也不用数自己要强化几次才能强化满一把枪了，原来的元素升级也独立了出来，不需要先进行武器强化，且元素任选，只需要 2000。唯一变难了一点就是武器升级机涨价了，一阶 5000 二阶 15000 三阶 30000，不过武器升级机提升的伤害应该和前作相比也有增加，且本作的僵尸有血条也能直观的感受到升级过的武器和各枪械对僵尸的击杀能力。cod15 倒下后武器不再重置，本作取消了这点，和 cod12 一样武器会重置回初始武器，但本作的初始武器并不是手枪而是任选；增加了复活资金，10 关后死亡复活有上万的复活资金，不过要去强化武器还是要跑一段路，应该说这点上难度和上作持平。加上相对较小的地图规模，可以说，本作的僵尸模式的难度相比于前作大幅降低了。</p>
<p>再来说说僵尸模式在本作中的「定位」问题。本次僵尸模式的枪械，和多人模式共享了枪械配件和等级，这一点要给好评；但可能也正因此动视大幅度增加了多人模式下枪械升级的难度，这就有待商榷了。t 组制作的僵尸模式，从 cod5 和 7 两作打下地图和剧情方面的基础，到 9 的彩蛋元素初露锋芒，在 12 中可以称「登峰造极」了，明显走了一个类似「rouge like」的路线；而从 cod15 开始，推出了简单模式，枪械拥有特战改装，能够自选初始武器，僵尸模式的路线开始转向，玩法丰富化，难度简单化；到了本作，更是整合了多人模式的枪械，显然是为了吸引多人模式的玩家进场，同时降低难度，走大众化路线。遥想当年，第一次玩 cod12 的僵尸模式匹配，我当时的技术就只能玩到拿盾牌和装保险丝，但几个点我都烂熟于心，一通操作把东西都拿了，到了第七关被僵尸刮两下就 ob 了；本以为匹配的路人应该水平也就那样，但看着看着他们就把大保健和黑龙炮掏出来了，要不是当年的 uu 还很拉跨，最后掉线了，说不定我能躺平看人家打 boss？但本次我匹配到的几局，确实有绕僵尸的大佬，但彩蛋也就开到 pap 为止，奇迹武器啥的就更不知道了，显然是从多人来的。</p>
<p>另外，服务器应该还是老的 p2p 机制，但几次匹配我不是 0 延迟就是 500ms 左右，打个僵尸等半天才出击杀，还好在僵尸模式对延迟的要求远没有多人高，勉强能玩下去，一个新游戏就真没人玩？我觉得是 t 组没有优化好。但，这里就不能不提一嘴 t 组奇葩的「延迟锁」机制了：只能匹配到一定延迟内的玩家。因为这点，亚服玩家就只能和亚服玩家玩，就算用再好的加速器，也不能突破物理限制吧？到人数较多的美欧，延迟一定会超过 200ms，这已经超过延迟锁的匹配范围了。我目前主用平台是 xbox，体验是最差的，远古 cod10 还尚且能匹配 tdm，cod14 仍能秒配的今天，cod12 尽管贵为一代经典却早早鬼服，cod15 在特定时间才能匹配到人，要不就是通过进入线上好友或已经交手过的还在线的玩家的房间，blackout 则完全鬼服。ps4 亚洲区装机量较高且会免过 cod12 ；而 pc 有强制解延迟锁工具，但我没用过不知道好不好用（且听说还被官方鉴定为外挂工具），这两个平台状况应该比 xbox 这边好一点。匹配都匹配不到人，遑论体验了，延迟锁真可谓「本末倒置」。现在能够拉进 500ms 的匹配，加上源自上一作的跨平台联机机制，希望 t 组是真开窍了吧。</p>
<p>总结起来，我认为 t 组路线是对了，但无论是因为接的大锤的烂摊子，还是因为本身实力下降，此时僵尸模式首发内容不足是无可争辩的，我觉得若不是因为多人模式枪械整合的优势，僵尸模式可能要濒临鬼服了。目前放出的情报时僵尸模式可能会有新图，但也可能是几张重置图。上次烂尾的 15 最后好歹还有 8 张图，四张重置但塞进去许多元素，更别提 cod12 把重置图和新内容塞一起够出一个 dlc 的事情了，这次搞不好会更少哦。。。。逆水行舟，不进则退啊。</p>
<p>最后吐槽一句，本身我是不想专门写一篇这样的文章做总结的。但发生了件事让我不忍了：我知道凌晨两点结束测试，想趁最后时候刷一把。一般来说，测试都是就算超时也让人打完最后一把再赶人跑的，上次多人试玩也是这样。但这次我好不容易打到第 19 波，结果 2 点一到准时把我赶下线了。。。动视你至于贪那点时间么？？？</p>
]]></content>
      <categories>
        <category>game</category>
      </categories>
      <tags>
        <tag>cod</tag>
        <tag>流水账</tag>
      </tags>
  </entry>
  <entry>
    <title>总结一下【完美版】自动下载 B 站收藏视频 – Left&#39;s blog 遇到的坑</title>
    <url>/zong-jie-yi-xia-wan-mei-ban-zi-dong-xia-zai-b-zhan-shou-cang-shi-pin-left-s-blog-yu-dao-de-keng/</url>
    <content><![CDATA[<p>原教程： <a href="https://left.pink/archives/3073">【完美版】自动下载 B 站收藏视频 – Left’s blog</a></p>
<p>虽然 Left 人家的实现方法是脚本，有点非典型吧（我用的东西大多是写成二进制或者 docker），不过既然能成功实现功能那就是好东西。不过脚本的固有问题，就是坑多。目前也没找到更好的工具替代，所以排了坑继续用吧。</p>
<ol>
<li><p>记得安装 mailutils、rclone。</p>
</li>
<li><p>记得几个工具给齐权限（特别是那个 danmaku2ass.py）</p>
</li>
<li><p>rsshub 建议自建。rsshub 公用接口有可能获取不到自己的收藏夹。</p>
</li>
<li><p>目前一共三个 bug。</p>
<ol>
<li><p>评论底下说的</p>
<blockquote>
<p>第三十行提示 “syntax error: unexpected end of file”</p>
</blockquote>
<p>其实是这句：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">if [ $pubdate != $olddate ];</span><br></pre></td></tr></tbody></table></figure>

<p>得改成</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">if [ "$pubdate" != "$olddate" ];</span><br></pre></td></tr></tbody></table></figure>

<p>我一开始还以为变量是指脚本路径和视频储存路径（</p>
</li>
<li><p>you-get 报错。可能要加 <code>-k</code> 参数。具体是第一个脚本的 41 行：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">stat=$($you -i -c /home/zbttl/run/cookies.txt $link)</span><br></pre></td></tr></tbody></table></figure>

<p>改成</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">stat=$($you -i -k -c /home/zbttl/run/cookies.txt $link)</span><br></pre></td></tr></tbody></table></figure>

<p><code>-k</code> 参数具体作用是忽视证书错误。我踩坑的原因是我的 openssl 是自己编译的。。。没把本地证书链接进去。不止 you-get 报错，wget 也报错。不排除其他原因（网络故障和你懂得），gayhub 上就有一样的 issue <a href="https://github.com/zhangn1985/ykdl/issues/452">b 站解析经常性 403 错误 you-get 没问题・Issue #452・zhangn1985/ykdl</a>。</p>
</li>
<li><p>需要替换的地方，包括脚本位置，储存位置，cookies 位置，danmaku2ass.py，rclone 参数，发送到的邮箱。特别是邮箱参数有两个，我一开始只替换了一个，我说怎么只收到一个，大 e 了。</p>
</li>
<li><p><strong>(已反馈，作者已修复）</strong>第二个脚本转换弹幕的那一句</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">/usr/bin/python3 /root/bili/danmaku2ass.py /var/www/webdav/Bilibili/"$title"/"$fullfilen"</span><br></pre></td></tr></tbody></table></figure>

<p>我搜了一下，没找到 <code>fullfilen</code> 这个变量。</p>
<p>得改成</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">/usr/bin/python3 /root/bili//danmaku2ass.py "$filename"</span><br></pre></td></tr></tbody></table></figure>
</li>
</ol>
</li>
<li><p>脚本只能下载运行时放在收藏夹最顶上的视频。所以运行前放在收藏夹最顶上的视频和运行后收藏的视频都能抓到。但不能下载之前收藏的视频，还有收藏了一个视频后必须等他处理完再收藏其他视频，手速太快就只会下载其中一个视频哦。</p>
</li>
<li><p>还有就是，you-get 最近还不一定能方便的获取到最高画质了，打个比方，这是正常的</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210108055751.png"></p>
<p>但这个。。。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210108192531.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Eee8fypU4AAOFjh.jpg"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Downloadtools</category>
      </categories>
      <tags>
        <tag>bilibili</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode 调试 bash shell 脚本</title>
    <url>/vscode-diao-shi-bash-shell-jiao-ben/</url>
    <content><![CDATA[<p>昨天说到日志的事，光知道报错也不行，得知道错哪里。所以我试着在 ubuntu 上用 vscode 调试 bash 脚本。</p>
<p>参考文章：<a href="https://liushiming.cn/article/debug-bash-on-macos.html">使用 vscode 调试 bash 脚本</a></p>
<ol>
<li><p>打开 vscode，去拓展商店装一个 bash debug。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210108020551.png"></p>
</li>
<li><p>将需要调试的脚本放到一个单独的文件夹中，使用文件-&gt;打开文件夹打开带脚本的那个文件夹。</p>
</li>
<li><p>在侧边栏选中那个一个虫子加一个播放键那个图标，点击右边的创建 <code>launch.json</code> 按钮</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210108021032.png"></p>
</li>
<li><p>找到左侧顶栏播放键旁的下拉菜单，选添加配置</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210108023523.png"></p>
<p>建议添加 select script from list of sh files 这个（即运行后提示用户选择要调试的脚本）</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210108023750.png"></p>
</li>
<li><p>使用下拉菜单选中刚刚我们添加的 select script from list of sh files，点击播放键运行。</p>
</li>
<li><p>bash 调试时并不会自动显示已修改变量的值，需要我们自己添加。在左半部分监视窗口中按加号添加表达式，以</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">${变量名}</span><br></pre></td></tr></tbody></table></figure>

<p>格式来添加，要确认哪个就添加哪个。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210108024834.png"></p>
</li>
</ol>
<p>剩下的步骤和其他语言程序的调试就差不多了，就不谈了。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>terminal</tag>
        <tag>vscode</tag>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title>mailutils 查看日志/发送邮件</title>
    <url>/mailutils-cha-kan-ri-zhi-fa-song-you-jian/</url>
    <content><![CDATA[<p>之前写 crontab 提过一个简单的 postfix。后来玩大佬的<a href="https://left.pink/archives/3073">【完美版】自动下载 B 站收藏视频 – Left’s blog</a> 时，没调试好脚本一下子弹一堆错，脚本发的错误又不走 linux 的日志而是发去邮件，光靠简单的 postfix 就不好一条条查看了。得用更高一级的 mailutils。另外脚本本身还有发送邮件提示上传完毕的功能，也得通过 mailutils。</p>
<p>参考文章：<a href="https://unix.stackexchange.com/questions/26790/what-is-mail-and-how-is-it-navigated">linux - What is “mail”, and how is it navigated? - Unix &amp; Linux Stack Exchange</a></p>
<ol>
<li><p>安装</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install mailutils -y</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>使用</p>
<p>通过命令 <code>mail</code> 进入邮箱。此时可以看到底下有个问号，那个地方就会显示你的输入的操作符。这个软件所有的操作逻辑都是操作符 + 回车，不输入操作符直接敲回车，软件就会依照所处位置进行对应的操作。为啥强调这个？因为这就是这个软件难用的地方。。。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Xshell_aEyufayMNT.png"></p>
</li>
<li><p>看到邮箱列表，最左边有个小箭头，表示选中的邮件。可以直接用回车进入被选中的邮件。但基于操作逻辑，你不能用上下方向键调整箭头指向的邮件。。。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210107223732.png"></p>
</li>
<li><p>在相关邮件查看处，按下回车看邮件剩余的部分；如果邮件已结束，则会跳到下一封。也可以按输入 <code>n</code> + 回车直接跳到下一封。</p>
</li>
<li><p>要重新显示邮件列表，可以使用 <code>z</code> + 回车，显示未读邮件；邮件列表太多的话，只会显示一部分，可以用 <code>z+</code> 或 <code>z-</code> + 回车，上下翻页；或者用 <code>f*</code> 显示所有邮件。</p>
</li>
<li><p>要指定进入某一个邮件，可以直接输入数字 + 回车；要删除所有邮件，输入 <code>d*</code> + 回车。</p>
</li>
<li><p>剩下的可以通过输入 <code>help</code> + 回车进入命令界面（虽然我感觉大多数人都看不懂，因为我没发现详细说明在哪）。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210108012406.png"></p>
</li>
<li><p>按下 <code>q</code> + 回车后退或直接退出。</p>
</li>
<li><p>发送邮件。使用命令</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">mail -s "[邮件内容]" -r "[发送人]" [接收方邮箱]</span><br></pre></td></tr></tbody></table></figure>

<p>发送人最后在接收方会显示为 <code>root&lt;[发送人]@localhost.localdomain&gt;</code></p>
<p>另外发送邮件的机器可能还要做域名解析之类的（不是很清楚，我用虚拟机 ubuntu 发不出去，在 vps 的 ubuntu 发送就没问题，一般那个脚本应该都在 vps 上用的吧，所以我就没认真探究）。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>log</tag>
        <tag>mailutils</tag>
      </tags>
  </entry>
  <entry>
    <title>cod 战区复活岛活动吐槽</title>
    <url>/cod-zhan-qu-fu-huo-dao-huo-dong-tu-cao/</url>
    <content><![CDATA[<p>其实前期活动还是蛮好做的，因为有队友活着就能无限复活，甚至比 codm 的只有 5 次复活机会还要夸张。虽说战区这个平衡性属实很烂，满地 m14 + 双持三连发，我觉得小蜜蜂（mac10，记忆中的 cs 1.6 叫法，csgo 里面好像改称吹风机了，小蜜蜂是 mp9）也不错，第一赛季刚出的时候好像玩的人也不少，但现在战区没啥人用。</p>
<p>但是，和第六赛季中期有码头后期没有一样，等我想肝的时候复活岛就变成迷你大逃杀了。。。用传奇武器和白板武器各杀 30 个的任务我死活完不成，前者难捡，后者干脆直接被吞了。。。原版复活岛地板是能见到白板枪的，改完以后只能捡空投箱的，还得是什么配件都没带的 rpd/ffar/三连发手枪才算白板。好在其中有两把轮椅，但 ffar 什么配件都没带的话开场就 26 发子弹，射速又快可能一个都扫不死，一定程度上还不如 rpd。还有下面这个破坏载具的任务，改版前说是打有人坐过的载具也算，反正改版后这么打就不算了- -</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E4%BD%BF%E5%91%BD%E5%8F%AC%E5%94%A4%C2%AE%EF%BC%9A%E7%8E%B0%E4%BB%A3%E6%88%98%E4%BA%89%C2%AE%20(5).png"></p>
<p>另外还有动视日常的「翻译错误」问题。打个括号是因为我也不知道究竟是翻译错误还是动视本身就写错了（我认为连玩梗都那么熟练的动视上海因为这个没少给总部背锅）。具体来说：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E4%BD%BF%E5%91%BD%E5%8F%AC%E5%94%A4%C2%AE%EF%BC%9A%E7%8E%B0%E4%BB%A3%E6%88%98%E4%BA%89%C2%AE%20(7).png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E4%BD%BF%E5%91%BD%E5%8F%AC%E5%94%A4%C2%AE%EF%BC%9A%E7%8E%B0%E4%BB%A3%E6%88%98%E4%BA%89%C2%AE%20(6).png"></p>
<p>都是传奇武器？其实前面那张是白板武器而不是传奇武器。还有一个任务是「在复活岛购买 30 个连杀奖励」，这个我认真核对过简繁英三个版本，都说清楚了是在复活岛。但其实打夺金也能完成（</p>
<p>唯一让我感到开心点点的是，我这个 kd 不到 1 的典狱长终于吃到两把鸡啦~</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E4%BD%BF%E5%91%BD%E5%8F%AC%E5%94%A4%C2%AE%EF%BC%9A%E7%8E%B0%E4%BB%A3%E6%88%98%E4%BA%89%C2%AE%20(8).png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E4%BD%BF%E5%91%BD%E5%8F%AC%E5%94%A4%C2%AE%EF%BC%9A%E7%8E%B0%E4%BB%A3%E6%88%98%E4%BA%89%C2%AE%20(9).png"></p>
<p>还是同一个小时内。。。第一把算是和队友苟到最后，第二把那真是就是躺的，队友三个活着就我倒了。。。凌晨三点的俄区，兼顾了延迟不算高和对手不太强的优点。吃完那两把鸡活动时间本来也就到了（昨天凌晨四点），但你们看上面的图，也是传统艺能了。第二天直到晚上 11 点我还能继续肝这个任务，正在我以为是不是动视又像第六赛季一样延期甚至变成永久任务的时候，凌晨两点再次上线的我就看不到这个任务了。。。但复活岛还是留下来，估计当常驻了吧（乌鸦摸鱼到现在新的战区地图还没做出来- -复活岛是旧图了，而且 codm 还比正作先上线）</p>
]]></content>
      <categories>
        <category>game</category>
      </categories>
      <tags>
        <tag>cod</tag>
        <tag>流水账</tag>
      </tags>
  </entry>
  <entry>
    <title>路由器跑分 &amp;&amp; 刷机 后日谈 及 几个加速器使用情况收集</title>
    <url>/lu-you-qi-pao-fen-shua-ji-hou-ri-tan-ji-ji-ge-jia-su-qi-shi-yong-qing-kuang-shou-ji/</url>
    <content><![CDATA[<blockquote>
<p>要说新年有啥目标。。。年底这一波，看来又得物色路由器了。或者换个新的加速方法</p>
</blockquote>
<p>光速出坑（不是</p>
<p>前几天说了，开开心心折腾 openwrt 的我遇到给 xbox 加速的极路由 2 崩了，怎么重置都无效，干脆一起刷了 openwrt。虽然极路由原厂系统也是基于 openwrt，但显然腾讯加速器不认这个；再次刷回原厂系统发现进不去插件中心，进去直接显示 503，也没法用手机客户端，甚至自动对时都不行，怀疑是时间不对的我手动对时，没用（此时我还没意识到真正的问题）。最后惊讶的发现极路由还有个 key 机制，不备份一刷就没了，没了就进不去插件中心了。痛心疾首的我不甘心，边想着大不了再买一个边找是不是还有其他办法暴力破 root 或者直接进插件中心，让我下个开发者模式插件就行。</p>
<h2 id="极路由强制进入插件中心（作废）"><a href="#极路由强制进入插件中心（作废）" class="headerlink" title="极路由强制进入插件中心（作废）"></a>极路由强制进入插件中心（作废）</h2><p>结果真让我找到一个：<a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=205316&amp;ordertype=1">极路由2（hc5761）恢复mac教程无key - 无线路由器硬件改造以及故障维修 - 恩山无线论坛 - Powered by Discuz!</a></p>
<blockquote>
<p>本帖最后由 航校门口二楼修 于 2017-6-29 16:53 编辑</p>
<p>本人刷机的时候没有备份 key 刷第 3 方固件 导致 mac 丢失 刷回官方固件无法安装插件。<br>首先是需要的工具<br>1.【固件编辑器】</p>
<ol start="2">
<li>极路由 2 的恢复固件    链接: <a href="http://pan.baidu.com/s/1ccXyfO">http://pan.baidu.com/s/1ccXyfO</a> 密码: dh35</li>
<li>必须要有刷不死，否则你可以忽略这帖子了</li>
</ol>
<p>接下来是教程内容：</p>
<ol>
<li>用固件编辑器打开恢复固件<br>按 ctrl+h 出现替换文本对话框<br>搜索 000000000000 和搜索 00:00:00:00:00:00 替换你的 mac</li>
<li>进入 breed 选择固件直接刷机就可以了。和刷普通固件方法一样。（注意不要选编程器固件刷入，刷前先恢复出厂）</li>
</ol>
<p>注意：</p>
<ol>
<li>不能直接从路由器中进入云插件，会提示 103 错误，估计是 key 丢失了（联系微信客服要寄回去修）</li>
<li>可以从官方网页进入 极路由云平台 安装插件（我是绑定了极路由账号的，不知道没有绑定的可不可以） </li>
<li>手机安装 app 管理 路由器 可以用 安装和卸载插件 完美，没有什么错误（前提要绑定过你的极路由账号）</li>
<li>从官网进入路由器云插件页面的，需要卸载插件后从新安装才能正常使用。</li>
</ol>
</blockquote>
<p>试过手上最新版固件文件找不到 000000000000 ，只能用他给的版本。但也还是 504，而且这回有提示 103 了，我才回忆起刚开始就算进不去也不会提示 103，合着刚刚可能没丢，但也没想着备份，现在再让我刷一个修改版彻底刷丢了。。。</p>
<p>再去恩山搜索极路由，喔，这回连带加速器加速失败的罪魁祸首都给抖出来了，原来是极路由网站也跑路了，极路由彻底凉了。那也不用再买台新的了，买到了你也开不了开发者模式加不了速。</p>
<p>那怎么办？又要回到电脑加速时代？</p>
<p>我想了想，不是还有小米 mini 吗？小米 mini 和极路由 2、newifi mini 配置一样，就可能体积大一点，而且不是用 micro-usb 口充电而是用 3.5 dc 口充电，感觉和 newifi mini 一毛一样啊？度了一下果然，极路由 2 似乎没啥教程能刷成小米的系统，但 newifi mini 可以。</p>
<h2 id="newifi-mini-刷入小米固件"><a href="#newifi-mini-刷入小米固件" class="headerlink" title="newifi mini 刷入小米固件"></a>newifi mini 刷入小米固件</h2><p>参考文章：</p>
<ul>
<li><a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=173247">【新提醒】NEWIFI mini 完美刷小米 mini - 可用 APP 安装插件 - 随意改 SN - 小米无线路由器以及小米无线相关的设备 - 恩山无线论坛 - Powered by Discuz!</a></li>
<li><a href="https://www.jianshu.com/p/e4e0a5818c3d">小米路由器青春版刷入 Breed 教程 - 简书</a></li>
<li><a href="http://www.360doc.com/content/16/1202/07/32686726_611203705.shtml">小米路由器 3 开启 SSH 最简单的方法</a></li>
</ul>
<ol>
<li><p>到参考文章 1 中下载小米的编译器固件</p>
<blockquote>
<p>小米路由器编程器固件下载地址：链接：<a href="http://pan.baidu.com/s/1dD4QW5j">http://pan.baidu.com/s/1dD4QW5j</a> 密码：78wj</p>
</blockquote>
</li>
<li><p>进入 breed，以防万一备份一次编译器固件再说。然后在固件更新中切换到「编译器固件」，选择下载的小米编译器固件，取消掉自动重启的勾，其他不要动。</p>
</li>
<li><p>刷完到固件启动中，切换启动方式为小米 mini。</p>
</li>
<li><p>重启，发现怎么灯一个也不亮？但插上网线以后，wan 亮了，虚惊一场。和极路由刷成 openwrt lan 灯报废一样，只不过这次似乎连 2.4g 和 5g 的灯都报废了，就剩 wan 口和 lan 口灯能亮。。。</p>
</li>
<li><p>进入管理页面</p>
<blockquote>
<p>小米路由器 IP 192.168.31.1 登录密码：<strong>12345678</strong> <em>后期可以自己修改</em></p>
</blockquote>
</li>
<li><p>确定无误尝试用 ssh 连接路由器。虽说文章里说：</p>
<blockquote>
<p>固件默认开启 ssh…… 账号 root 密码 admin</p>
</blockquote>
<p>但后续我更新了就进不去了，而且刷了 breed 以后，不可以用小米官方的 root 方法（因为小米官方的 root 方法最重要的一部是插入含有特定文件的 u 盘，然后按住 reset 键启动路由器，然后这不就和进入 breed 的方法冲突了么）。所以趁现在是旧版固件，先破一遍。</p>
</li>
<li><p>回到管理界面，复制此时管理界面的网址 url，此时的 url 应该是类似这种形状的</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">http://192.168.31.1/cgi-bin/luci/;stok=《你的 stok》/web/home#router</span><br></pre></td></tr></tbody></table></figure>

<p>删掉 <code>《你的 stok》</code> 以后的部分，留下</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">http://192.168.31.1/cgi-bin/luci/;stok=《你的 stok》</span><br></pre></td></tr></tbody></table></figure>

<p>这一段我称之为 header，放到文本编辑器中待用。</p>
</li>
<li><p>在 header 后加上</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">/api/xqnetwork/set_wifi_ap?ssid=tianbao&amp;encryption=NONE&amp;enctype=NONE&amp;channel=1%3Bnvram%20set%20ssh%5Fen%3D1%3B%20nvram%20commit</span><br></pre></td></tr></tbody></table></figure>

<p>访问。访问成功后网页应显示</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">“{'msg':'未能连接到指定 WiFi(Probe timeout)','code':1616}”</span><br></pre></td></tr></tbody></table></figure>

<p>注意这个 code。如果成功应该就显示 1616。我用新版本尝试虽然也能显示一句类似的内容，但 code 不是 1616，最后也没成功。</p>
<p>之后重复上面的步骤，不过在 header 后添加的内容要经过修改。第二次访问添加：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">/api/xqnetwork/set_wifi_ap?ssid=tianbao&amp;encryption=NONE&amp;enctype=NONE&amp;channel=1%3Bsed%20%2Di%20%22%3Ax%3AN%3As%2Fif%20%5C%5B%2E%2A%5C%3B%20then%5Cn%2E%2Areturn%200%5Cn%2E%2Afi%2F%23tb%2F%3Bb%20x%22%20%2Fetc%2Finit.d%2Fdropbear</span><br></pre></td></tr></tbody></table></figure>

<p>第三次访问添加</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">/api/xqnetwork/set_wifi_ap?ssid=tianbao&amp;encryption=NONE&amp;enctype=NONE&amp;channel=1%3B%2Fetc%2Finit.d%2Fdropbear%20start</span><br></pre></td></tr></tbody></table></figure>

<p>最后一次访问</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">/api/xqsystem/set_name_password?oldPwd=《你当前的后台管理密码》&amp;newPwd=《新密码》</span><br></pre></td></tr></tbody></table></figure>

<p>最后一次访问结果就不是 1616 了，而是 “{‘code’:0}”，表示修改密码成功。</p>
<p>之后就可以用修改的密码登录 ssh 了，管理界面的密码似乎也会被同步修改。</p>
<p>但和极路由一样，旧版固件装不上腾讯加速器的插件。还得更新，更新不能在网页端更新（未经验证），得使用手机 app。下载<a href="https://cdn.cnbj1.fds.api.mi-img.com/xiaoqiang/client/xqapp_dev.apk">开发版 app</a>，登录后会自动检测到新固件，更新完可能要手动重启一遍路由器。重启后就能安装了（应该，也说不准，我当时手机就装不上，上次日记吐槽过了）。为防万一（毕竟破解啥的还比较麻烦），固件更新前和更新且所有配置设置好后最好就都做一次编译器固件备份，实测备份以后还原能成功复原所有配置，且功能全部正常。</p>
</li>
</ol>
<h2 id="小米固件加速的劣势，和后续加速方案的寻找"><a href="#小米固件加速的劣势，和后续加速方案的寻找" class="headerlink" title="小米固件加速的劣势，和后续加速方案的寻找"></a>小米固件加速的劣势，和后续加速方案的寻找</h2><p>   正如我上一篇文章所说，小米的固件根本没有单独子网的无线中继功能，只有所谓的 ap 中继：</p>
<blockquote>
<p>别急，我发现小米的固件显然有问题，不能 nat 中继（中继的时候 newifi 和我的 ac86u 在同一子网，而总网关也就是 192.168.xxx.1是华硕的路由器），导致如果无线中继手机读取到的是 ac86u。只有通过极路由中继，然后用一根网线接极路由的 wan 和 newifi 的 lan 让 newifi 自己做一个子网出来才行。。。还好当年没有买小米 mini。凑合着用。</p>
</blockquote>
<p>   线下离网线近还好，如果离得远或者只能我开手机热点的情况下，我就得带两个路由（其中一个支持无线中继）。</p>
<p>   把做过一番操作的极路由备份一遍编程器固件，重新刷入 openwrt。此时我又发现一个极路由 2 比较差的地方：5g wifi 的发射强度能在 openwrt 中看到，newifi mini 可以发射出 22 dbm 信噪比的信号，但极路由 2 只能发射 10 dbm。另一点，在 breed 刷完 openwrt 自动重启到能进入管理界面的速度，newifi mini 也远快于极路由 2，前者大概 10s 就能近了，后者要接近一分钟，等无线信号灯亮了我才能进管理界面。</p>
<p>   但没办法，如果极路由能刷小米的系统就好了。。。让 newifi 做无线中继效果应该好一点，毕竟信号强的多。但做无线中继的 openwrt 和极路由原生系统比，也有个缺陷：极路由的系统中继能够记录多个中继节点，比如家中的 wifi，带出去后在同学家添加他家的 wifi ，回到家还能自动连上我家的 wifi 而不需要再次重新寻找 ssid 输密码；openwrt 记不住，和 xbox 一样一样的，出门后还要删掉那个已经填好的家中的中继的无线节点，再次添加。</p>
<p>   这时候我想起家里还有个 k2，那玩意 flash 和 rom 更低，相比另外两个砍半；但无线四个天线，cpu 也没缩水，信号反而更强。但是。。。同样是 dc 3.5 接口，newifi mini 就能插在 xbox 上，k2 只能用专用的一体式 12v 1a 适配器（说起来，k2 本身的适配器被学校那个穷凶极恶的老鼠咬断了，但newifi mini 的适配器也是 12v 的，试过通用），无论是插 xbox 上还是插 5v2a 的手机插头，都会导致无限重启，无线信号时断时连。反正就是带不出去。。。刷个 padavan 在家当非单独子网的无线中继好了，加速器识别到家中的华硕主路由器，让华硕来加速，这个就仅仅弥补 xbox 无线拉跨的问题。</p>
<p>   我之前不是说我还想买个网件来加速么。看起来也不行，网件吃电相比 k2 只能更多不能更少，想接 xbox 口就能吃到足够的供电，做梦吧。</p>
<p>   还有，无线非 nat 中继也有坑爹的地方：nat 中继你连上路由后会获得中继路由给你发的 ip，你沿着这个 ip 就能摸到中继路由的网关；但 ap 中继，好处是你链接中继路由和直接链接主路由获取到的 ip 是一样的，坏处是你这就不能直接知道中继路由的 ip 是啥了。本来我想着主路由华硕的管理界面应该有所有连接设备的 wifi 吧，排除掉我在用的设备不就是那个中继路由的 ip 喽？结果：</p>
<p>   <img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210104162929.png"></p>
<p>   算了。直接用点工具强行 arp 探测好了。下了个 pingtools，抓到了。</p>
<p>   <img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210104163439.png"></p>
<p>   那还有其他方案么？还真有，那就是：不用 tx 加速器。</p>
<p>   uu 就在 10 月份支持 openwrt 加速：<a href="https://router.uu.163.com/app/baike/public/5f963c9304c215e129ca40e8.html">网易UU加速器</a></p>
<p>   恩山老哥总结的路由器加速设备表：<a href="https://www.right.com.cn/forum/thread-4056285-1-1.html">【　　　】游戏加速器路由器支持情况小统计 - 网友联络、交流（禁止广告，违反封账户） - 恩山无线论坛 - Powered by Discuz!</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210104165940.png"></p>
<h2 id="总结我用过的一些加速器的优劣（持续更新）"><a href="#总结我用过的一些加速器的优劣（持续更新）" class="headerlink" title="总结我用过的一些加速器的优劣（持续更新）"></a>总结我用过的一些加速器的优劣（持续更新）</h2><h3 id="腾讯加速器"><a href="#腾讯加速器" class="headerlink" title="腾讯加速器"></a>腾讯加速器</h3><ul>
<li><del>便宜（14 元/月）</del>18了，和灵缇一个价格</li>
<li>曾经是唯一支持用 pc 管理路由加速的加速器（下载 6 月左右的旧版 pc 客户端也许还可用）</li>
<li>不限设备绑定，不限单路由下加速设备数量</li>
<li><del>但路由加速 bug 频发，最主要的 bug 就是加速一段时间，加速的设备重启或者待机唤醒后就会断网。通过重启路由，或者通过 ssh 进入路由器，用 <code>netstat -plun</code> 检索 tx 加速进程（名为 pmplugin），kill 后重新加速即可。</del>（<strong>21.6.27 更新</strong>，此 bug 似乎已修复）</li>
<li>下载加速节点大多数属于空气节点。实测 cod16 和微软模拟飞行下载加速都很慢，烂橘子效果尚可。</li>
<li>微软商店的游戏几乎都加速不起来。腐烂国度 2 windows store 版加速基本没效果。</li>
<li><del>手机端不支持 xbox 云游戏加速。</del><strong>（21.10.1 更新）</strong> 许多游戏已有加速效果。</li>
</ul>
<h3 id="uu-加速器"><a href="#uu-加速器" class="headerlink" title="uu 加速器"></a>uu 加速器</h3><ul>
<li>贵（30 元/月）</li>
<li>限制一个设备绑定，且该设备下只能同时加速两个设备。</li>
<li>下载加速效果不错。</li>
<li>支持 xbox 云游戏加速。</li>
<li>openwrt 路由插件不能用手机 app 直接安装。</li>
<li>没有 tx 那样的 bug。</li>
<li>当年玩 cod12 pc 频繁掉线，不知道现在是否有改善。</li>
<li>过节时线路拥堵，延迟会变高。</li>
</ul>
<h3 id="灵缇加速器"><a href="#灵缇加速器" class="headerlink" title="灵缇加速器"></a>灵缇加速器</h3><ul>
<li>价格居中（16 元/月）</li>
<li>不支持 xbox 云游戏加速。</li>
<li>支持 padavan。</li>
<li>支持 openwrt 手机安装和 padavan。但 openwrt 路由器需要提前安装 kmod-tun 功能（目前如果是自己编译的 openwrt，直接安装源上的 kmod-tun 会提示你当前依赖版本太低，但其实 kmod-tun 功能已经作为模块编译了，去编译目录找一下安装就行，实测成功）。</li>
<li>xbox 下载加速效果不错，但是不要用他的加速节点下载而是联机节点下载。加速节点速度撑死 30m，联机节点最高 200m。</li>
<li>也没有 tx 那样的 bug。</li>
<li>港服节点貌似很拉跨。</li>
<li>如果主路由下拖了一个中继路由（两个路由在同一个子网下），而你有两台游戏机，一台游戏机接主路由，另一台游戏机接子路由，那么你此时只能加速其中一个游戏机，加速另一个游戏机时会报错提示冲突。</li>
<li>对 merlin（非华硕官方插件）支持一般，有时候装不上插件，以及用了两三天以后加速状态可能会掉，需要重新打开 app 点加速，而腾讯没这个毛病。</li>
</ul>
<h3 id="雷神加速器"><a href="#雷神加速器" class="headerlink" title="雷神加速器"></a>雷神加速器</h3><ul>
<li>便宜到爆。按使用时间付费而不是按月付费，冲个几千小时基本用不完。</li>
<li>效果玄学。电信环境下，也就是开了比不开好一点点的效果，但和其他加速器相比，两个字，拉跨。</li>
<li>不支持任何路由器。</li>
<li>cod16 拿不到 nat 开放。</li>
</ul>
<h3 id="自建"><a href="#自建" class="headerlink" title="自建"></a>自建</h3><p>自建加速器方案有很多，我也写过一些，这里只分析一波自建和上面大厂加速器的取舍：</p>
<ol>
<li>线路是一个加速器是否好用的关键。除非花了大价钱，否则自建的线路会烂一些。各个大厂专营的加速器们把主要成本都花在了线路优化上面，加速器走的远程隧道基本都是专线，后续再通过用户数量来摊薄成本，自建加速器自然比不上；可选多个线路这点更是同价格自建无法比拟的。</li>
<li>自建第一个优势在于更为灵活。大厂加速器通过账号和客户端限制能加速几台设备，而自建完全没有这种限制，想加速几台加速几台。</li>
<li>大厂加速器把大多数钱投入线路上，再把剩下的一部分钱投入服务器负载均衡技术上，估计剩下的一点油渣才是给加速器实现技术的；其次一般情况下技术难度 = 规模 + 功能，加速器用户基数大导致研发新功能还需要考量到服务器稳定性的问题，最后导致无论是啥加速器都有其暂时不支持，无法加速的游戏/设备。而各类开源的自建加速器的技术发展到现在，单纯功能上讲基本完爆闭源的大厂加速器几条街。只要你肯折腾，没有啥加速不上的设备。</li>
<li>线路上的劣势能通过技术手段弥补吗？部分情况下可以，使用多倍发包，前向纠错等技术，付出多一些流量，可以较为有效的改善丢包和延迟问题。</li>
<li>当然，技术不是万能的，但钱在这里也许是万能的。某些线路过高的丢包就算是用各种技术去弥补也无济于事，这时候我们可以考虑更换线路，更换运营商等方式。只要肯加钱上专线，完爆大厂加速器不是梦！</li>
</ol>
<p>总结：自建适合</p>
<ul>
<li>有钱有时间的人</li>
<li>没钱有时间的人，玩的游戏对延迟敏感度不高</li>
</ul>
]]></content>
      <categories>
        <category>game</category>
      </categories>
      <tags>
        <tag>游戏加速</tag>
        <tag>openwrt</tag>
        <tag>持续更新</tag>
      </tags>
  </entry>
  <entry>
    <title>2020，这一年，xbox 新玩家的一年</title>
    <url>/2020-zhe-yi-nian-xbox-xin-wan-jia-de-yi-nian/</url>
    <content><![CDATA[<p>今年对世界是艰难的一年，不过对我这个宅来说。。。可能算是「波澜壮阔」的一年（用词不当警告）。</p>
<p>该总结的事情很多，我毕业了，而且后续应该不打算再读研究生啥的（数学太烂），放下了陪伴我接近 20 年的学生身份；毕业这一年我也没认真找工作，毕竟计算机这边我还有好多东西想玩清楚；今年因为种种原因在家里的时间是我这二十几年来最长的，也写了大学四年来最多的日记，最后我鼓起勇气开了个博客慢慢把日记放上来。诸如此类等等等。</p>
<p>但如果让我选「今年在什么东西上花费的精力最多？」，那应该还是这台 xbox one S。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20201231_155252913.jpg"></p>
<p>这台东西是去年双十二买的，当时的背景是我亲戚给了我一张 5000 大洋的购物卡让我换掉大学期间的这台电脑，当时我妈还想着要是钱不够还可以给我填点，毕竟大学用的暗影 2 是 6000 元级的，我妈以为毕业后预算可能还要再高点。但我大学期间感受最深的是笔记本的便携性真的很重要。。。。后续我的暗影 2 都待在家里插着显示器当台式机用，我去年买了个更大更高的桌子放显示器，而那个更矮更小的桌子就插在大桌子下面，笔记本就合盖放在小桌子上（为了散热我还会垫几个瓶盖在 b 和 c 面之间），然后接上鼠标键盘 hub hdmi 啥的。除非是要线下打游戏才会扛出去，如果是有编程任务，我宁愿带我高中买的 500 大洋的 windows 平板出去，毕竟大学的课业编程任务并不需要很好的硬件。就算用得着我也选择开个远程，毕竟要把暗影 2 带过来要拔一大堆线，回来还要重新把小桌子拉出来，把机子摆上去插好线开好机再塞回去（</p>
<p>所以我当时就打定主意买轻薄本了。既然是买轻薄本，当时市场上最棒的选择就是小新 pro13，那玩意才 4499。虽然最后被京东坑了一笔，我看双十二之前就有付 200 定金然后双十二发货的事了，结果双十二的时候尾款不可以用礼品卡付，后面放弃定金在当天买照样 4499 立刻发货。。。。</p>
<p>那剩下的 500（被坑了一笔只剩 300 了），想了想我 10 月份才买了 3 个月的 xgp 试用，看着主机库比 pc 库多一大堆游戏；我那时候还蛮想继续玩地平线 4，但对每次开游戏都要关一堆程序甚至重启一遍电脑否则就要吃掉帧警告这件事感到疲倦，有了 xbox 自然就没这个问题了；还有 8 月份趁极限竞速 6 下架 34 大洋薅的全 dlc 包（我当时是考虑到以后可能买 xbox，做梦都没有想到年底就能买，更没有想到有了 xbox 这一年这游戏我也没开几次）。还有，我 18 年买的 ns 分期一年，到 12 月刚好还完，xbox one S 纯数字版那时候 1k3 扣掉 300 还有 1000，六期还完每期也就 200 不到，在我每月接受范围之内。</p>
<p>然后就是日常的喜新厌旧流程。。。买到 xbox 的这一年我的日常游戏平台从 ns 基本转向 xbox，最常玩的两个游戏，从年初到年中的 cod15 多人 + 僵尸；三月份开始持续一整年的 cod16。cod15 僵尸较 cod12 僵尸难度降低不少，还有机器人队友，以我的实力能打到奇迹武器出来了；16 的季票制毁誉参半，但 yysy 托季票的福我有动力肝了，枪几乎都满级了，还有十月份那一波穿墙 bug 说起来是很讨人嫌但玩着那是真香啊。。。话说回来这两个游戏我都有 pc 版还都是买的首发，但因为 pc 的配置问题以及 pc 端没有同屏没人陪我玩，完全没动力玩。特别是 cod 16 我买的首发却错过了前三个赛季这点。。。虽然都玩的挺爽，但值得吐槽的地方也不少：cod15 的锁 ping，才出了一年我就匹配不到吃鸡了，甚至想匹配到多人都要挑好时间（凌晨有人几率降低）选好节点（亚洲，美国匹配不到）；16 的阴间图，后期的匹配崩坏和最后一个赛季不得善终，作为一款里程碑式的游戏落得这样一个下场，令人唏嘘。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201231175932.png"></p>
<p>除了最主要的这两个，中间还穿插着玩了挺多游戏：年初的地平线 4，年中定了三年 xgp 后玩的皇牌空战 7，趁出 xgp 库前玩的鬼泣 5，dlc 都入了库的命运 2；ea play 进 xgp 后玩的战地 4，还有早就买了但最后才玩的 cod14，没钱买疯狂打试玩的 cod17 等等。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201231173039.png"></p>
<p>（没想到只打人机的我，dota2 还是游戏时间最长的游戏，不过起码有 50 小时左右的时长我是挂机挂出来的，那时候用人机实验一天究竟能打几只斧王，搞了满地图的斧王；战地 1 实打实的肝出了所有枪，cod16 时间应该更多，毕竟我在战网上也有玩，gog 统计不到；鬼泣 5 和皇牌空战 7 一个起码 10 小时一个起码 50 小时，应该是因为我玩的时候不想联网的原因，离线状态下的游戏时间没有算进去）</p>
<p>线下同屏部分，主机上的大作同屏能力完爆 pc，cod 每一作都能同屏，僵尸模式离线状态下甚至能四人同屏，pc 上只有 12 勉强能双人同屏，而且还只能访客模式同屏；微软这边的两个重量级独占作品，光环和战争机器，除了光环 5 那是作作都能同屏过剧情，战争机器 5 甚至能三人同屏（343 你看看人家，鬼面兽警告）；borderland 在 pc 上同屏你得有配置运行几个游戏，在主机上同时开四个号完全没有压力，遗憾的是 borderland 本世代作品没有中文，因为我在 pc 端玩中文比较熟了就切成两个朋友比较熟悉的日文来玩；borderland3 开始有中文但在 xbox one 上只能最多双人，但在已经到来的次时代机型上可以四人，不过 3 目前还是贵，等一个骨折，或者入xgp（ 今年的线下部分，因为疫情的原因我家附近的两个初中同学并不用回武汉和福建，趁年初把 borderland 2 刷到三周目，把战争机器系列和光环系列都通了。而偶尔和我高中同学进行的线下聚会，最令人惊喜的是的是细胞分裂黑名单，有中文，有老司机带，玩起来节目效果爆炸 2333。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201231190158.png"></p>
<p>（单机通关列表，刚好一页）</p>
<p>当然，作为「坑王」，这一年有不少挖坑入坑出坑回坑的瞬间，而且有不少时候让人感叹「好险没掉进去」：</p>
<p>年初几天趁 xgp 还在，趁金会员价买了 cod14、15，学会了跨巴西区买便宜的 cod，但那时还不知道怎么用手上的信用卡，只能在淘宝买礼品卡。cod16 最后三月份我在港服买的，那时候巴西区比港区便宜接近 50 元，但 cod16 那时候大概 160 雷亚尔，只有 50、100、200 雷亚尔额度的礼品卡，200 雷亚尔大概 320 左右，手上现金不够（穷啊）。1 月底的时候我奶奶住院我要去看着，下了战地 1 和战地 5 进小新 pro13，战地 1 降点解析度居然还能玩（amd yes！），战地 5 就不太行，但更关键的是我确定了雷神加速器完全不彳亍，uu 又太贵（而且两年前我玩 cod12 出现频繁断线问题最后确认是 uu 的锅，换成海豚就没问题，所以我一直对 uu 印象不太好），最后用网络条件比较需求苛刻的 cod16 大战场验证了一下没问题（有问题就会频繁丢包卡顿，雷神就这样），趁 1 月特惠以一年价格上车了腾讯加速器一年半会员（那时候主机加速还是免费的）。</p>
<p>虽然带上一年前买的手柄和买 xbox one 送的手柄我手上有两个手柄，但经常晚上和我线下的两个初中同学加起来得三个手柄，就在月中暂时找我高中同学借了一个。借完了以后试了试四人同屏，发现 cod15 本身可以线下四人，可连接第三个手柄了以后花式卡机闪退。去 reddit 转了一圈发现大把人出这个问题，遂到微软商店给差评。但到现在都还没有修。所以线下两人以上的大作只剩下 borderland2 和后来买的 cod12（gears5 在月初就打通了）。</p>
<p>一月底我把机器带到我同学家的时候开机提示进入救援模式，没法复原，最后只能初始化。还好游戏没丢，初始化完不用重下。后面我才知道 xbox 默认关机键其实是待机，正式的关机方法是在菜单那边找完全关机这个选项。待机的时候断点可能就会进救援模式出不来只能初始化，后面我就注意了。要是这事发生在锁区后那就鬼故事了。。。</p>
<p>二三月份，大号 xgp 到期，我尝试用小号续了一份三个月的 xgp，登录小号后设置机子为常用主机（也就是常说的 home），成功让大号也能正常网战玩 xgp 游戏（唯一不太行的地方就是领金会员免费游戏，只能领在小号上）。不过此时国服还没彻底锁死，我发现国服的网络似乎比外服好，还经常用 u 盘大法切回去，如果下游戏或者领会免就又切回来。</p>
<p>三月底我的手柄 rt 键频繁按键时发出呲呲呲的声音，我想着反正买的国行找京东算账，结果京东说南宁有维修点叫我过去修。我想了想等我的两个同学会学校再说吧，修的久了就没法线下了。结果到最后人也没回学校，手柄自己不响了，到了过保都没修。。。但我闲的无聊和我爸去看了一眼维修点，也不远，但居然和我高中同学修微星笔记本是同一个维修点（关键是他的笔记本没修好，最后还出了大问题），这就。。。。微软爸爸这样真的好么？</p>
<p>另一个手柄上的故障是，某天晚上在隔壁楼初中同学家玩，他用着我那已经买了两年的旧手柄，突然一下，左摇杆那圈胶就被搓掉了一角。一月份高中同学借我的那个手柄右摇杆也是这个毛病，那个右摇杆干脆整个胶圈都没了，手感变得很烂；再后面，我去问另一个有 xbone 手柄的同学，他的左摇杆也这样了，被搓掉一点。。。看来这是通病啊，当场我就拿保护包里面的摇杆套把裂开的左摇杆保护起来了（我一开始是很抗拒摇杆套这种东西的，但取下来不知道丢哪里，就暂时丢在保护壳里了）。后续去淘宝买了十来个硬的摇杆保护帽（软的手感更好，但用久了就容易松掉），把摇杆都套上了。毕竟万一搓掉，想要还原就只能拆手柄换摇杆。我玩了这么多台机子，都没见过这种情况，软软这个摇杆质量最差，毫无疑问。</p>
<p>四月，borderland 出 xgp 库，不过那时我们才打到二周目，我想了想趁特价买下来吧，这回跑到阿根廷区去买。阿根廷锁区，这次得从网上找代理，拿着码进 windows 商店一个个换可用代理知道把码换成功为止。不过 borderland 2 的豪华版缺一个莉莉斯 dlc（去年 8 月免费送过），更要命的是我关注了一年，愣是没打折。。。</p>
<p>光环基本通关，准备玩战争机器，发现 2 和 3 还只有 xbox 360 版。但 3 在商店里找不到？研究了一圈发现只有美区有，而且只有繁体下才显示中文。另外玩这些个单机的时候发现连着网不开加速器等 n 久还可能进不去游戏，折腾了半天断网秒进。</p>
<p>五月份，小号的 xgp 也到期了。这回我不想又开个新小号了，xgp 游戏我也不常玩，常玩的 cod 主要是网战需要金会员，尝试用国服金会员顶着，没问题。但 cod16 阴了我一手：cod16 新赛季要玩多人，需要下两个数据包。国服商店找不到这两个数据包，切到外服没有金会员根本进不去在线模式，直接在商店里又找不到这两个数据包，必须从在线模式的设置里跳转到商店才能看见。固然可以买 14 天的金会员然后下这两个包，可再下个赛季怎么办？我看了看时间，这台 xbox 分六期，下个月还完；大号 xgp 过期超过 3 个月了。于是我果断淘宝三年金会员 627，进商店一看果然有 10 港币活动，3 年金会员打满留在外区。没成想还没 10 天 xbox 国服冬窗事发，留在国区的跑不掉了，好险！</p>
<p>同样在五月份，毕业论文答辩的前一天，发生了神界原罪羊毛事件。详情我单独写成了一篇文章，一个月后我用阿根廷区换点卡同样的方法薅到羊毛。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201231235143.png"></p>
<p>五月买完 xgpu 开始皇牌空战和腐烂国度，发现这两个玩意一个只能在繁体显示中文一个只能在简体显示中文。皇牌空战难度是有点高，打剧情废了我半天事，而且我在战地 1 里开飞机看大佬都不用追逐视角而用固定视角，想着什么时候学一下，结果玩完皇牌空战好吧彻底改不过来了。打剧情我全程断网，估计就因为这个没算我时间（不过连上网倒是把成就都补给我了）。</p>
<p>六月份腾讯宣布主机加速收费和增加 svip，原有的 vip 自动升级成 svip，svip 一年要 240 多，好耶， 白嫖（不过半年国区没发现 svip 有啥用，该速度起不来的游戏还是起不来，而且自动选择节点每次都给我选择 vip 而不是 svip 节点）。但主机加速收费这个就很讨厌了，我大学同学来我家玩，cod 战区不能同屏，但我不是 pc 有一份 xbox 有一份么，cod 16 开始能跨平台，所以我只要开小新 pro13 来加速就可以了。收费后，虽然我有 svip 但一个账号不可以两地登。不过正好我初中同学剩下一台 ac86u，我试了一下，能用路由加速功能，600 大洋分 6 期我就抬走了。不过用了一段时间，有 bug，开了加速过了一两天主机就连不上网了，得重启路由，有点烦。另外，我同学剩下 ac86u 的原因就是他家换 ax88u 了，ax88u 并不在下面的表里面，但我试过也可以加速，到他家玩就不需要再多带一台电脑了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201231232143.png"></p>
<p>七月份。那出远门线下呢？华硕网件太贵，从小米和极路由挑。小米 1 小米 2 带硬盘的，二手也很贵；极路由 3 之后体积又大性能又差，1s 没有 5g；最后剩下极路由 2 和小米 mini，极路由 2 用的是 micro-usb 供电而不是 3.5mm 线，用不着为了他再找一个电源插头，插在 xbox 上就好了。拿回来解绑原来的账号，开启 root，更新固件，顺利启用。后面偶然发现了更意外的事情：我的路由器放在房间里面，而 xbox 放在客厅。cod16 大战场开了加速器还是偶尔丢包，我以为是 tx 的问题，直到我在国贸开开手机热点给极路由 2 然后因为网络情况复杂不得已只能用网线把 xbox 和极路由连起来，发现不怎么丢包了。回到家我尝试也用无线中继，结论相同。原来 xbox 的无线性能这么烂，还不如 40 大洋的二手路由器。。。。</p>
<p>八月份。我 19 年 1 月到的工行 visa 卡，吐槽了一年半，每次付款都告诉我余额不足。结果这时我突然会用了，原来要去结售汇先换成对应货币（如果没有对应货币就先换成美元，到时候会自动转的）。怎么发现的？给我的俄罗斯服务器续费的时候，刚买的时候可以用支付宝，从 8 月开始不能用了，也没有 visa，我硬着头皮本来说不能续费就算了，结果用信用卡就真给我续上了。能用 visa 的话我就不用买礼品卡了。靠这张信用卡我还完成了 xbox 360 转区 （转区转了半天失败，结果一觉醒来告诉我转成功了），再过一个月左右，微软就停售礼品卡了。。。阿根廷区成为绝唱，巴西区礼品卡大幅涨价。。。</p>
<p>八月底，听说鬼泣 5 出库，还没打通关的我火速断网，时间往后倒，成功的在出库后十来天打通关了。这时我发现，没断网的话，打到一半关机不关游戏，唤醒机器有一定可能从游戏中退出；但不断网绝对没事，唤醒后你关机前在那关机后还在那。另外鬼泣这个只有亚洲版有中文，亚洲版不打折，后续还出究极版不知道能不能继承记录的操作，也算是惊到我了，真有你的卡婊 ~ 后面我连上网，鬼泣五下角的 xgpu 标志光速消失，这时就算我再断网时间往回调，也进不去了。</p>
<p>不过后续我试用了三天 uu，这三天没出像 tx 一样重启断网的 bug，唤醒机器从游戏中退出的问题也没见过，看起来 uu 的路由加速技术肯定能甩 tx 几条街。不过 uu 一台路由只能加速两个设备，而绑定后你想在另一台路由加速还要先手动解绑。最后一天用 uu 的时候还出现了游戏闪退然后重新打开游戏打不开的问题，重启路由没用但重启 xbox 有用，就不知道是网易的锅还是微软的锅了。</p>
<p>年尾。ea-play 加入 xgpu。然后就是令人爆笑的战地 4 豪华版不在 xgpu 里的「真相」。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/2020-12-31_23-54-21.PNG"></p>
<p>还有昨天发生的事，极路由的官网彻底炸了，以为加速不成功是因为机子坏了的我盲目刷机导致 key 丢失，想再买一台极路由 2 结果上了恩山发现原来是这事。再后面发现大学毕业宿舍剩下的 newifi 能刷小米 mini 固件，虽然是 3.5 dc 口用的 12V 1A 电源，但我尝试用高中便携风扇的 dc 转 usb 口给 newifi 和 xbox 接上，能亮。经过一段复杂的折腾（root+更新），发现 android 端的 app 加速不上，显示 ssh 未开启。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Screenshot_20201231-053505.png"></p>
<p>快死心了，换上 ios 再试，结果装上了。。。意思是可以带出去了？别急，我发现小米的固件显然有问题，不能 nat 中继（中继的时候 newifi 和我的 ac86u 在同一子网，而总网关也就是 192.168.xxx.1是华硕的路由器），导致如果无线中继手机读取到的是 ac86u。只有通过极路由中继，然后用一根网线接极路由的 wan 和 newifi 的 lan 让 newifi 自己做一个子网出来才行。。。还好当年没有买小米 mini。凑合着用。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/2020-12-31%2005.34.47.png"></p>
<p>总结：都什么乱七八糟的坑，印度程序员出来挨打！</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/HupuBBS_201231081453-1242822577.png"></p>
<p>要说新年有啥目标。。。年底这一波，看来又得物色路由器了。或者换个新的加速方法？去年就喊着买 xss 和便携显示器的我，现在都还没买。等我找到工作，就把 xss 便携显示器和 cod17 都买了（怒）</p>
<p>就这样吧。祝各位看官新年快乐！</p>
]]></content>
      <categories>
        <category>game</category>
      </categories>
      <tags>
        <tag>xbox</tag>
        <tag>流水账</tag>
      </tags>
  </entry>
  <entry>
    <title>吐槽 crontab</title>
    <url>/tu-cao-crontab/</url>
    <content><![CDATA[<p>干嘛写这玩意呢。。。因为这玩意坑不少。</p>
<p>作为 linux 的计划任务程序，使用方法大家都很清楚：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></tbody></table></figure>

<p>然后会用不知道什么程序打开 cron 的配置文件。对我没用错词汇，就是不知道什么程序，我见过用 vim 的、用 nano 的、用一个不知道叫啥名字但快捷键很像 tmux 的（可能是 emcas？），有的系统第一次用 crontab 的时候会让你选用哪种编辑器，但有的完全不会。。。</p>
<p>然后敲命令进去</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">* * * * * [command]</span><br></pre></td></tr></tbody></table></figure>

<p>那几个星号：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">*    *    *    *    *</span><br><span class="line">-    -    -    -    -</span><br><span class="line">|    |    |    |    |</span><br><span class="line">|    |    |    |    +----- 星期中星期几 (0 - 7) (星期天 为0)</span><br><span class="line">|    |    |    +---------- 月份 (1 - 12) </span><br><span class="line">|    |    +--------------- 一个月中的第几天 (1 - 31)</span><br><span class="line">|    +-------------------- 小时 (0 - 23)</span><br><span class="line">+------------------------- 分钟 (0 - 59)</span><br></pre></td></tr></tbody></table></figure>

<p>另外可以用 <code>*/n</code> 这种格式，表示时间刻度内执行 n 次。<code>*</code> 既可以填入单个数字表示某一时间，也可以填入类似 <code>1-9</code> 这种形式，表示时间段。</p>
<p>坑来了：后面的命令，有几个值得注意的地方：</p>
<ol>
<li><p>运行时涉及的所有文件和命令需要绝对路径。</p>
<p>比如用于 hostloc 一键签到的 php 脚本：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">php loc.php</span><br></pre></td></tr></tbody></table></figure>

<p>在 crontab 中就得这么写：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">0 1 * * * /usr/bin/php /root/loc.php &gt;&gt;/var/log/hostloc.log</span><br></pre></td></tr></tbody></table></figure>

<p>还有 service 之类的命令，得找到 service 的绝对路径：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">which service</span><br></pre></td></tr></tbody></table></figure>

<p>然后类似这么写：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">0 1 * * * /usr/sbin/service xxx restart</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>“命令里面夹命令”，需要用 <code>`</code> 号替换括号；如果命令里面有 <code>%</code> 号，需要在前面用 <code>\</code> 转义。</p>
<p>比如：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">0 0 1 * * /root/traffic.sh &gt; /root/$(date +%y%m%d).txt&amp;&amp;/root/traffic.sh reset</span><br></pre></td></tr></tbody></table></figure>

<p>就需要改成</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">0 0 1 * * /root/traffic.sh &gt; /root/`date "+\%y\%m\%d"`.txt&amp;&amp;/root/traffic.sh reset</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>如果运行出错，crontab 不会主动报错，你可以查看一下 crontab 的 service 日志（参考<a href="https://unix.stackexchange.com/questions/212355/where-is-my-logfile-of-crontab">cron - Where is my logfile of crontab? - Unix &amp; Linux Stack Exchange</a>）：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">journalctl -u cron.service</span><br><span class="line">#或者用下面两个</span><br><span class="line">#journalctl _COMM=cron</span><br><span class="line">#journalctl _COMM=cron --since="date" --until="date"</span><br></pre></td></tr></tbody></table></figure>

<p>或者查看它本身导出的日志文件（不同的 linux 发行版路径可能不一样，以下这个适用于 debian）：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cat /var/log/syslog</span><br></pre></td></tr></tbody></table></figure>

<p>但这样看到的错误日志其实不够详细。仔细观察的话，出错的日志后面有这么一条：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">(CRON) info (No MTA installed, discarding output)</span><br></pre></td></tr></tbody></table></figure>

<p>意思是 cron 想把错误发到系统内的邮件管理器，但你没装。</p>
<p>那就装一个好了：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">apt install postfix</span><br><span class="line">service postfix start</span><br></pre></td></tr></tbody></table></figure>

<p>后续出错的时候就可以通过</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cat /var/spool/mail/root</span><br></pre></td></tr></tbody></table></figure>

<p>查看错误的详细情况。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>log</tag>
        <tag>crontab</tag>
      </tags>
  </entry>
  <entry>
    <title>压缩 gif 图片的方法（命令行）</title>
    <url>/ya-suo-gif-tu-pian-de-fang-fa-ming-ling-xing/</url>
    <content><![CDATA[<p><strong>（20.12.2 更新）</strong> 有条件的话看一下上面几篇参考文章：</p>
<ul>
<li><a href="https://legacy.imagemagick.org/Usage/anim_basics/">Animation Basics</a></li>
<li> <a href="https://legacy.imagemagick.org/Usage/anim_opt/">Animation Optimization</a></li>
<li> <a href="https://legacy.imagemagick.org/Usage/anim_mods/">Animation Modifications</a></li>
<li> <a href="https://legacy.imagemagick.org/Usage/video/">Video Handling</a></li>
</ul>
<p>很长且都是英文，但讲清楚了 gif 的生效和渲染及优化机制。</p>
<p>如果原图还是 mp4 格式的话，可以通过 ffmepg 压缩。但如果已经是 gif 成品了，就相对麻烦一点。但严格意义上，不推荐修改 gif 的尺寸。参见<a href="https://legacy.imagemagick.org/Usage/anim_mods/#resize">参考文章 2 的 resize 一节</a>。</p>
<h2 id="通过-ffmpeg-减少帧数和分辨率"><a href="#通过-ffmpeg-减少帧数和分辨率" class="headerlink" title="通过 ffmpeg 减少帧数和分辨率"></a>通过 ffmpeg 减少帧数和分辨率</h2><p>先使用 ffprobe 查看 gif 帧数和分辨率</p>
<p><img src="https://i.imgur.com/fxYtqoU.png"></p>
<p>我们可以看到，这个 gif 分辨率为 360*360，帧数为 10fps</p>
<p>可以通过 scale 和 -r 进行压缩</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg -i 0.gif -r 10 -vf scale=350:-1 0_change.gif</span><br></pre></td></tr></tbody></table></figure>

<p>然后。。。尴尬的事情发生了，压缩完以后体积反而膨胀了？试着更改分辨率，发现一旦更改分辨率体积都会膨胀（并且已经开了 transdiff 透明参数，没开的话甚至会膨胀到 18m），于是只能另求它法。</p>
<p><strong>（20.12.3 更新）</strong> 大概是因为：</p>
<blockquote>
<p>Problems with Resizing Animations</p>
<p>The biggest problem with resizing GIF animations is that the “<code>-resize</code>“ operator is designed specifically to make the resulting images as close to ideal (after the resize) as possible. It does this by merging and generating lots of additional colors in the image to make it look better.</p>
<p>The resulting images are far from ideal for saving to the limited GIF file format. With GIF’s limited color table, this results in heavy <a href="https://legacy.imagemagick.org/Usage/quantize/#intro">Color Reductions</a> in the resized images. For a single GIF image that is not so bad, but for a GIF animations, the default <a href="https://legacy.imagemagick.org/Usage/quantize/#dither_error">Error Correction Dithering</a> of the reduced color set produces problems, in ‘dither noise’ between frames, and in turn a bad frame optimization for final file size.</p>
<p>It is even worse when transparent colors are also being used, which is a common practice for typical GIF animations used for web pages. Transparency is also commonly used for <a href="https://legacy.imagemagick.org/Usage/anim_opt/#compress_opt">Compression Optimization</a> techniques, for animations that would otherwise not need it.</p>
<p>What happens is that “<code>-resize</code>“ produces semi-transparent pixels in the overlay images. Then when the images are saved back to a GIF file format, these pixels are then converted to either fully-transparent or fully-opaque, both producing major color distortions in the resulting animation.</p>
<p>If any form of optimization is used… frame, transparency or LZW… then the transparency effects will basically result in a <strong>disastrously resized GIF animation</strong>. That is the facts, Jack! So you will need to live with it.</p>
<p>Even if you avoid using “<code>-resize</code>“, by using “<code>-sample</code>“, you will still have major problems unless you “<code>-coalesce</code>“ the animation first.</p>
<p>调整动画大小的问题<br>调整GIF动画大小的最大问题是，”-resize “操作符是专门设计用来使产生的图像尽可能地接近理想（调整大小后）。它通过在图像中合并和生成大量额外的颜色来使其看起来更好。<br>所产生的图像远不是理想的保存到有限的GIF文件格式。由于GIF的颜色表有限，这就导致在调整后的图像中出现了严重的颜色还原。对于单个GIF图像来说，这还不算太坏，但对于一个GIF动画来说，默认的错误校正抖动的还原颜色集会产生问题，在帧之间的 “抖动噪声”，反过来对最终文件大小的帧优化也不好。<br>当同时使用透明色时，情况就更糟糕了，这也是用于网页的典型GIF动画的常见做法。透明色也常用于压缩优化技术，用于本来不需要的动画。<br>发生的情况是，”-resize “会在覆盖图像中产生半透明的像素。然后当图像被保存回GIF文件格式时，这些像素就会被转换为全透明或全不透明，都会在生成的动画中产生重大的色彩失真。<br>如果使用任何形式的优化……帧，透明度或LZW……那么透明度效果基本上会导致灾难性的调整GIF动画大小。这就是事实，杰克！所以你需要忍受它。所以你需要接受它。<br>即使你避免使用”-resize”，通过使用”-sample”，你仍然会有很大的问题，除非你先”-coalesce “动画。</p>
</blockquote>
<p><del>所以也许是因为 ffmpeg 转换后 gif 的各类优化手段失效了。</del></p>
<p><strong>（20.12.15 更新）</strong> 也许是码率原因。用新版 ffprobe 探测一下视频就知道了。</p>
<p>另外 ffmpeg 因为算法原因<strong>转换后的视频宽和高必须是偶数</strong>，如果要缩小分辨率的话要用一些奇特的手段：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg -i 0.gif  -b:v 5000k -vf "scale=trunc(iw*0.6*0.5)*2:-2" 0_change.gif</span><br></pre></td></tr></tbody></table></figure>

<p>此处的 trunc 意为取整。<code>-2</code> 在此处指指定了另一项参数后使本项参数自动缩放相同比例且能被 2 整除。0.6 就是让这个视频等比缩放百分之 60 啦。</p>
<p>但这样大概率是不行的。。。ffmpeg 没有办法很好的处理 gif 到 gif 之间的码率，可能会导致写在参数里的码率和实际码率有很大的偏差。更好的办法是先转为 mp4：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg -i 0.gif  -b:v 1000k -vf "scale=trunc(iw*0.6*0.5)*2:-2" 0.mp4</span><br></pre></td></tr></tbody></table></figure>

<p>如果 gif 带有透明度，就得转成 mov，但这样就没法调码率了（不生效）。不过实测就算是不调码率最后生成的 gif 还是小很多。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg -i 0.gif  -movflags faststart -vcodec qtrle -vf "scale=trunc(iw*0.6*0.5)*2:-2" 0.mov</span><br></pre></td></tr></tbody></table></figure>

<p>再转为 gif，顺便还能优化一下（这里这个命令是下面的 <a href="#%E5%A6%82%E6%9E%9C%E7%95%99%E7%9D%80%E8%BD%AC%E6%8D%A2%E4%B8%BA-gif-%E7%9A%84%E8%A7%86%E9%A2%91%E5%8E%9F%E4%BB%B6">高级 magisk 压缩</a> 中命令的精简版）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">convert -layers optimize -quiet  0.mp4 -ordered-dither o8x8,8,8,6 +map 0_change.gif</span><br></pre></td></tr></tbody></table></figure>

<p>进一步缩小，可以考虑降帧，需要配合<code>-r</code>和<code>-delay</code>参数：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg -i 0.gif  -r 10  -delay 10 -b:v 1000k -vf "scale=trunc(iw*0.6*0.5)*2:-2" 0.mp4</span><br><span class="line">convert -layers optimize -quiet  0.mp4 -ordered-dither o8x8,8,8,6 +map 0_change.gif</span><br></pre></td></tr></tbody></table></figure>

<p>如果原来留有视频原件，也可以参考上面的格式缩小分辨率和帧数直接转换（视频转 gif 码率显示问题不大）。</p>
<h2 id="通过-magick-压缩"><a href="#通过-magick-压缩" class="headerlink" title="通过 magick 压缩"></a>通过 magick 压缩</h2><p>参考文章：</p>
<ul>
<li><a href="http://www.blogdaren.com/post-2408.html">【原创】Centos中利用convert命令进行JPG和PNG图片的互转</a></li>
<li><a href="https://segmentfault.com/a/1190000000436384">压缩gif的正确姿势</a></li>
</ul>
<p>需要先安装 ImageMagick 才能使用 convert 命令</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">apt install ImageMagick</span><br></pre></td></tr></tbody></table></figure>

<p>然后运行命令</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">convert xxx.gif -fuzz 15% -layers Optimize xxx2.gif</span><br></pre></td></tr></tbody></table></figure>

<p>压缩是压缩了，人物都糊掉了。。。</p>
<p>试图减少 fuzz 数值，发现 fuzz 数字是有一个生效阶梯的，具体来说，如果在百分之 9 以内，制作出来的动图和原来大小一样；调到百分之 9 的时候，大小从 6.3m 降低到了 4.1m；后面的就懒得具体测试了，不过原来的参数 15 就更小了。百分之 9 左右，画质还能接受，但。。。这可调参数也太少了。</p>
<p>另外提一点，convert 和 ffmpeg 联合使用是可以调整 gif 速度的（副作用是 gif 的透明度信息会丧失。如果 gif 本身是背景透明的图像则不适用于本方法。根据观察 <code>-f image2pipe</code> 会先把色彩格式转换为 yuv 而不是继承原来的 brgb 色彩格式，使用 pipe 的话此问题暂时无解，通过拆分成两个命令可解，详见 imagemagick 日志）：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg -i xxx -vf scale=-1:-1 -r 10 -f image2pipe -vcodec ppm - | convert -delay 5 -loop 0 -layers Optimize - xxx2.gif</span><br></pre></td></tr></tbody></table></figure>

<h2 id="利用-gifsicle（也称为-giflossy）"><a href="#利用-gifsicle（也称为-giflossy）" class="headerlink" title="利用 gifsicle（也称为 giflossy）"></a>利用 gifsicle（也称为 giflossy）</h2><p>参考文章：</p>
<ul>
<li><a href="https://www.lcdf.org/gifsicle/man.html">英文文档</a></li>
</ul>
<p>先安装 gifsicle </p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">apt install gifsicle</span><br></pre></td></tr></tbody></table></figure>

<p>先用自动参数进行压缩（<code>-O3</code> 有损，<code>-O2</code> 无损）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">gifsicle -O3 xxx.gif -o xxx2.gif</span><br></pre></td></tr></tbody></table></figure>

<p>发现动图从 6.3m 下降到了 6m，效果还不错</p>
<p>不过当我想做其他操作的时候。。。问题来了</p>
<p>使用 scale 参数等比缩放</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">gifsicle xxx.gif --scale 0.9 -o xxx2.gif</span><br></pre></td></tr></tbody></table></figure>

<p>压缩到 5.2m，但是像素细节排列没有原来好了，而且到黑色背景下就炸掉了（irfanview 各种显示错位，除非指定 –resize-method 为 lanczos 类的才可以解决，但是那样 gif 体积又变大了）。。。</p>
<p><img src="https://i.imgur.com/y6epGBl.png"></p>
<p>用 ps 缩放 0.9 的 gif 做对比（也是 5.2m）</p>
<p><img src="https://i.imgur.com/z5XFHOK.png"></p>
<p>更要命的是，如果不用等比缩放裁剪：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">gifsicle xxx.gif --resize 350x-350 -o xxx2.gif</span><br></pre></td></tr></tbody></table></figure>

<p>效果更差，各种残影。。。</p>
<p><img src="https://i.imgur.com/BFDBYxt.png"></p>
<p>另外发现，gifsicle 有一个测试命令，类似于 ffmpeg 的 ffprobe</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">gifsicle -I xxx.gif</span><br></pre></td></tr></tbody></table></figure>

<p>原图的 gifsicle 参数是这样的：</p>
<p><img src="https://i.imgur.com/9NitUNm.png"></p>
<p>经过 ps 降低分辨率，效果还不错的 gif，参数是这样的</p>
<p><img src="https://i.imgur.com/uAU4u5h.png"></p>
<p>另外，从这里我们可以看到，gif 每帧的延迟是 0.1s（10ms），由此我们也可以用 gifsicle 来调节 gif 播放速度。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">gifsicle -d 5 xxx.gif -o xxx2.gif</span><br></pre></td></tr></tbody></table></figure>

<p>这里的「5」单位是 ms。这个数字要求是整数，而且其实最小是 2，因为 1 出来的效果和原图一样（虽然用 gifsicle -I 出来的参数 delay 上确实写的是 0.01s）</p>
<p><strong>（20.12.14 更新）</strong> 还可以使用 lossy 参数</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">gifsicle -O3 --lossy=80 --colors 256 0.gif -o 0.gif</span><br></pre></td></tr></tbody></table></figure>

<h2 id="（20-12-14-更新）-高级-magick-压缩"><a href="#（20-12-14-更新）-高级-magick-压缩" class="headerlink" title="（20.12.14 更新） 高级 magick 压缩"></a><strong>（20.12.14 更新）</strong> 高级 magick 压缩</h2><h3 id="如果留着转换为-gif-的视频原件"><a href="#如果留着转换为-gif-的视频原件" class="headerlink" title="如果留着转换为 gif 的视频原件"></a>如果留着转换为 gif 的视频原件</h3><p>当然把成品 gif 转回 mov 也不是不可以，但不推荐。建议用原件通过 ffmpeg 转换为减少帧数和分辨率的视频后再进行这一步。</p>
<ol>
<li><p>看一眼视频怎么调整色彩才能不超过 256 色（gif 一帧最多支持 256 色，可以通过抖色和使用帧独立色板增加颜色，但后者会显著增加 gif 大小）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">convert -quiet 0.mp4 -ordered-dither o8x8,4 -append -format %k info:</span><br></pre></td></tr></tbody></table></figure>

<p>如果显示的结果小于 256，那就继续调大 <code>-ordered-dither</code> 参数的最后一位。反之亦然。比如上述命令结果是 60，那么：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">convert -quiet 0.mp4 -ordered-dither o8x8,5 -append -format %k info:</span><br></pre></td></tr></tbody></table></figure>

<p>重复上述步骤。直到得出的数字 +1  后运行命令就大于 256 为止。</p>
</li>
<li><p>假设使用上述步骤得出了 7 这个数字，那么：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">convert -layers optimize -quiet -delay 1 0.mp4 -ordered-dither o8x8,7 +map 0.gif </span><br></pre></td></tr></tbody></table></figure>

<p>此时优化了帧框架和颜色，剩下透明度还可以通过更新的 gifsicle 再次缩小体积（见上文）。</p>
</li>
</ol>
<h3 id="未留有原件"><a href="#未留有原件" class="headerlink" title="未留有原件"></a>未留有原件</h3><h4 id="框架优化"><a href="#框架优化" class="headerlink" title="框架优化"></a>框架优化</h4><p>大部分时候使用 <code>-layers optimize</code> 即可。其他的框架优化方式参见参考文章 2。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">convert 0.gif -layers optimize  0_change.gif </span><br></pre></td></tr></tbody></table></figure>

<h4 id="颜色优化"><a href="#颜色优化" class="headerlink" title="颜色优化"></a>颜色优化</h4><p>查看源动图总颜色数：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">convert 0.gif +append  -format "Total Number of Colors: %k"  info:</span><br></pre></td></tr></tbody></table></figure>

<p>查看源动图每帧颜色数：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">identify -format "Colors in Frame %p: %k\n"  speed.gif</span><br></pre></td></tr></tbody></table></figure>

<p>查看源动图独立色板数（需安装 giftrans，deb 系统下可使用 apt 安装）：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">giftrans -L speed.gif 2&gt;&amp;1 | grep -c "Local Color Table:"</span><br></pre></td></tr></tbody></table></figure>

<p>优化：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">convert 0.gif ( -clone 0--1 -background none +append -quantize transparent  -colors 63  -unique-colors -write mpr:cmap    +delete \) -map mpr:cmap      0.gif</span><br></pre></td></tr></tbody></table></figure>

<p>上面的命令是将图像色彩缩水至 64 色。转换时间略久。</p>
<p>转换视频时使用的 <code>-ordered-dither</code> 参数和 <code>-map</code> 参数不能用于 gif 直接对转，就算和上面的那个强制色彩缩水命令搭配使用也不行，只要用其中任意一个参数就会导致独立色板出现。解决方法是使用 miff 格式进行中转（尽量不要直接使用 gif 中转，可能会导致色彩信息在中转时部分丢失）：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">convert -delay 1 0.gif  -ordered-dither o8x8,7  0.miff</span><br><span class="line">convert 1.miff  +map 10.gif </span><br></pre></td></tr></tbody></table></figure>

<h4 id="透明度优化"><a href="#透明度优化" class="headerlink" title="透明度优化"></a>透明度优化</h4><p>可以用 <code>-layers OptimizeTransparency</code> 参数：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">convert 0.gif -layers OptimizeTransparency +map   0.gif</span><br></pre></td></tr></tbody></table></figure>

<p>不过似乎 <code>OptimizeTransparency</code> 已经被包含在 <code>optimize</code> 中了。</p>
<p>更建议使用上文之前写的利用 magick 压缩和利用 gifsicle 压缩，这两个同样是透明度优化的方法。</p>
<p>以上三种优化可以合并使用，也可以排成队列使用，不过：</p>
<ol>
<li>再次提醒在颜色优化这步需要用 miff 格式中转。</li>
<li>建议 <code>-layers optimize</code> 在最后一步做。</li>
</ol>
<h3 id="修改-gif-分辨率（不推荐）"><a href="#修改-gif-分辨率（不推荐）" class="headerlink" title="修改 gif 分辨率（不推荐）"></a>修改 gif 分辨率（不推荐）</h3><p>有两种方法，<code>-resize</code> </p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">convert 0.gif -resize 60% 0_change.gif</span><br></pre></td></tr></tbody></table></figure>

<p>或是 <code>-sample</code></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">convert 0.gif -sample 60% 0_change.gif</span><br></pre></td></tr></tbody></table></figure>

<p>但算法并不好，容易导致花屏和拖影。另外使用这两个参数的时候尽量用百分比缩放，用分辨率缩放可能导致部分画面错位（如下面这个命令）。由于上面的 gifsicle 也部分使用了 magick 的算法，我猜测 gifsicle 等比缩放后的错位也来源于 magick。缩放分辨率推荐使用 ffmpeg。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">convert 0.gif -sample x480 0_cuowei.gif</span><br></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>影音</category>
      </categories>
      <tags>
        <tag>ffmpeg</tag>
        <tag>gifsicle</tag>
        <tag>imagemagick</tag>
      </tags>
  </entry>
  <entry>
    <title>玩一下 FFmpeg</title>
    <url>/wan-yi-xia-ffmpeg/</url>
    <content><![CDATA[<p>因为最近有两件事情，所以要研究一下这玩意：把一整个 capoo 动画分割出几个小片段然后做成表情包（capoo 好萌），还有就是 vps 上下的动画，直接用 filebroswer 播不了，需要稍微转一下码才行。</p>
<p>总参数参考：<a href="https://ffmpeg.org/ffmpeg.html">ffmpeg Documentation</a></p>
<h2 id="视频精确分割"><a href="#视频精确分割" class="headerlink" title="视频精确分割"></a>视频精确分割</h2><p>关键词：帧内编码（intra）</p>
<p>参考文章：<a href="https://www.jianshu.com/p/cf1e61eb6fc8">FFMPEG 视频分割和合并</a></p>
<p>不过这篇文章没有谈一个参数，to，to 是裁剪到时间节点而 t 是裁剪自开始以来的一段时间长度，这里为了方便我很明显是要用 to 的。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg -ss 00:00.00 -to 00:00.01 -i capoo.mp4 -vcodec copy -acodec copy "C:\Users\zbttl\OneDrive - go.Stockton.edu\Desktop\capoo\ capoo1.mp4"</span><br></pre></td></tr></tbody></table></figure>

<p>不过发到 telegram 上的 gif 的 mp4 不能带音频，所以索性再改一下</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg -ss 00:00.00 -to 00:00.01 -i capoo.mp4 -vcodec copy -an "C:\Users\zbttl\OneDrive - go.Stockton.edu\Desktop\capoo\ capoo1.mp4"</span><br></pre></td></tr></tbody></table></figure>

<p>顺便附带一个文件夹内批量转换为无声 mp4 的例子：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">for i in *.mp4; do ffmpeg -i $i -vcodec copy -an "/home/zbttl/capoo/${i%%.*}.mp4";done</span><br></pre></td></tr></tbody></table></figure>

<p>参数里可以加上 <code>-avoid_negative_ts</code> 移动关键帧使其与要剪辑的位置相符。</p>
<h3 id="使用-gui（不成熟）"><a href="#使用-gui（不成熟）" class="headerlink" title="使用 gui（不成熟）"></a>使用 gui（不成熟）</h3><p>也可以使用 gui 工具 <a href="https://github.com/mifi/lossless-cut">LosslessCut</a>。gui 可以通过视频中的 Intra（I 帧，关键帧）识别转场，操作上便捷许多。不过很多视频由于参数原因（I 帧过多会增大视频体积），所以 I 帧和真正的转场不一定完全符合，可能还要通过 ffmpeg 转一下码。</p>
<p>参考：</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/28008666">FFmpeg精准时间切割视频文件</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/85895180">FFmpeg视频抽帧那些事</a></li>
<li><a href="%5Bhttps://weichao.io/2018/05/27/FFmpeg-%E8%BD%AF%E7%BC%96%E7%A0%81-H264%E3%80%81H265/%5D(https://weichao.io/2018/05/27/FFmpeg-%E8%BD%AF%E7%BC%96%E7%A0%81-H264%E3%80%81H265/)">FFmpeg 软编码 H264、H265</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/36109778">ffmpeg和H264视频的编解码</a></li>
</ul>
<p>加入以下参数：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">-keyint_min #Intra最小间隔时间，可设置为 0。</span><br><span class="line">-g #group of picture，Intra最大间隔时间。设置为 1 就全部都是关键帧。全部设置为关键帧有助于手动切割。</span><br><span class="line">-sc_threshold #(scenecut)设置场景更改检测的阈值。可设置为 0-无限。</span><br></pre></td></tr></tbody></table></figure>

<p>比较有用的就是这三个参数。我还实验了 <code>-profile</code>、<code>-preset</code> 两个参数。<code>profile</code> 在文档中有 <code>extended</code> 这个选项可能对关键帧切换有帮助，但实际使用起来选项无法使用；<code>preset</code> 只要不设置成比较快的那些选项，使用 <code>slow</code> 和什么都不用出来的 I 帧数量和分布没有区别。</p>
<p>ffmpeg 使用非 copy 模式转码会显示 I/P/B 帧的数量和占比。也可以使用 <code>elecard streameye tools</code> 查看 I/P/B 的数量和分布（但要花钱，破解找不到，要不就只能试用）。</p>
<p>转码的时候也不要加入 <code>-c:a copy</code> 参数，可能导致时间轴误差。</p>
<p>例子：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg -y -i '.\capoo.mp4'  -preset slow -keyint_min 1 -sc_threshold 60 './capoo_1.mp4'</span><br></pre></td></tr></tbody></table></figure>

<p>再用得到的新视频文件在 gui 内裁剪。</p>
<p>然而实际使用时发现在每个关键帧处还要往上倒三帧否则就会包含下个场景的画面。原因是这个 gui 命令里面用了 <code>-c copy</code> 参数。。。目前还无解。而且除了这个，有时候导出的某些视频还会出现只剪了后面没剪前面的情况，貌似是因为放在桌面，桌面的路径里面有中文（onedrive 的锅）。。。。</p>
<p>还有其他的 gui 工具，比如 <a href="https://sourceforge.net/projects/ffmpegyag/">ffmpegyag</a>。但这就没有根据 Intra 帧在时间轴上快捷指向的功能了（虽然还是能识别处 I/P/B 帧）。而且不能直接使用（点 OK 就卡住），生成脚本后运行倒是没问题。</p>
<h3 id="配合-opencv"><a href="#配合-opencv" class="headerlink" title="配合 opencv"></a>配合 opencv</h3><p>门槛有点高。给两篇参考文章，先挖个坑。</p>
<ul>
<li><a href="https://www.cnblogs.com/dskit/p/10003722.html">基于opencv+ffmpeg的镜头分割</a></li>
<li><a href="https://yuyujunjun.github.io/segmentation-keyframe-extraction">视频镜头分割和关键帧提取</a></li>
</ul>
<h2 id="vps-动画转码"><a href="#vps-动画转码" class="headerlink" title="vps 动画转码"></a>vps 动画转码</h2><p>为什么播不了？我想估计是位深太大了，使用 ffmpeg x264 默认参数转一下就好了。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg  -i "[Sakurato.sub][Nande Koko ni Sensei ga!][01][GB][1080P].mp4" -vcodec libx264 -acodec copy  test.mp4</span><br></pre></td></tr></tbody></table></figure>

<p>不过转出来感觉略微有点不太对，windows potplayer 缩略图显示不出东西来。。。原因不明，排除了 10bit 不兼容原因（原案是 10bit，可显示）和 hevc（h265）与 avc（h264）原因（用哪个编码器都转不出来）。</p>
<p>另外，x264 编译器还有很多奇奇怪怪的参数，参考这里：<a href="https://trac.ffmpeg.org/wiki/Encode/H.264">H.264 Video Encoding Guide</a></p>
<h3 id="显卡加速"><a href="#显卡加速" class="headerlink" title="显卡加速"></a>显卡加速</h3><p>参考文章：<a href="https://www.jianshu.com/p/59da3d350488">使用GPU硬件加速FFmpeg视频转码</a></p>
<p>ffmpeg 还支持显卡加速<del>，不过嘛。。。参数很麻烦，没什么可靠的参考（因为 ffmpeg 的参数经常有顺序限制的，上面那篇文章的参考我试了一下，失败），下面这个，我转起来速度比较快（不过也有是用 8bit 的原因），而且 potplayer 识别了缩略图，另外显卡也工作了（不过占用只有百分之8。。。。）</del>（未加 <code>-hwaccel cuda</code>，虽然是硬解但仍然经过内存。但下面的命令仅硬解码，且仅 h265）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg  -hwaccel cuda  -c:v h265_cuvid -i "[Sakurato.sub][Nande Koko ni Sensei ga!][01][GB][1080P].mp4" -pix_fmt yuv420p test.mp4</span><br></pre></td></tr></tbody></table></figure>

<p>参考：<a href="https://developer.nvidia.com/zh-cn/blog/nvidia-ffmpeg-transcoding-guide/">NVIDIA FFmpeg 转码指南</a></p>
<p>拿来转部落战视频用的，因为 ipad 录的视频码率高，而且带了旋转属性（很诡异，是写在 ffmpeg 参数里面的，也就是说对于支持的播放器打开后会自动转正变成横屏，但其实视频硬属性是竖着的），因为有这个自动旋转所以网上写的大部分硬件转码无法使用（不支持关掉自动旋转并摆正视频），但是我试了一个新的，还凑合，而且 gpu 打满。原理是硬解硬编码，下面的方框部分是指定使用最广泛的 h264 硬解，记得如果原来就是 h265 视频需要把这个参数换掉（<code>hevc_cuvid</code>）或关掉。硬编码的部分也可以换成 <code>h264_nvenc</code>。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg -y -vsync 0 -hwaccel cuda [-c:v h264_cuvid]  -i xxx.MP4 -vcodec hevc_nvenc -b:v 3000k xxx.mp4</span><br></pre></td></tr></tbody></table></figure>

<p>hwaccel 也有被称为 cuvid 的参数。但我用 cuvid 代替 cuda 时会报错</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Pixel format 'yuvj420p' is not supported</span><br></pre></td></tr></tbody></table></figure>

<p>原因未知。cuvid 和 cuda 的区别我也没发现有参考资料能解释。</p>
<p>对于其他硬解方式，可以参考这篇文章：<a href="https://www.bilibili.com/read/cv4579978/">（三+1）用显卡加速视频转码压制之ffmpeg、media coder、shana encoder</a></p>
<p>查看解码方法：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg -decoders</span><br></pre></td></tr></tbody></table></figure>

<p>查看编码方法：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg -encoders</span><br></pre></td></tr></tbody></table></figure>

<p>上面提到的 <code>cuda</code> 和 <code>h264_cuvid</code> 就在解码方法里面，而 <code>hevc_nvenc</code> 就在编码方法里面。对于 intel 系来说，硬解应该是 <code>qsv</code> 后缀一类的方法；而 amd 是 <code>amf</code> 后缀一类的方法。</p>
<p>因为一般是转为 x264/265 编码的视频，可以借助 h264/hevc 快速筛选出当前 ffmpeg 转换时支持的编解码方法，类似于：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg -decoders|findstr h264</span><br><span class="line">ffmpeg -encoders|ffmpeg -hevc</span><br></pre></td></tr></tbody></table></figure>

<p>我仔细看了看最新版 ffmpeg，发现起码对于 amd，只找到了编码方法（比如 <code>h264_amf</code>）而没有找到解码方法。。。不过实测，仅使用编码方法也能有效的加速视频的转换：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg -c:v h264_amf -i "[Sakurato.sub][Nande Koko ni Sensei ga!][01][GB][1080P].mp4" test.mp4</span><br></pre></td></tr></tbody></table></figure>

<p>好在我平常操作的视频都是解码不怎么费劲的视频，解码费劲的 4k 编码起来必然更慢，暂时不属于我手上硬件能触及的范围了。。。</p>
<p>另外，文章提到</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg -hwaccels</span><br></pre></td></tr></tbody></table></figure>

<p>能查看当前硬件和 ffmpeg 支持的硬解，但我看结果感觉扯淡。。。我用 amd 的机子能查出来 intel 和 cuda，却没有 amf，就 tm 离谱（当然文章里面也提到了这个方法不准就是了）。另外实际转换时使用qsv <code>-hwaccels qsv</code> 时需保证没有独立显卡（特别是N卡），否则会报错，是bug，来自<a href="https://trac.ffmpeg.org/ticket/6996">#6996（尝试在 Windows 10 上使用 NVidia 主 GPU 支持的 Intel 系统上使用 QSV 会导致崩溃）– FFmpeg</a>。</p>
<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>参考文章：<a href="https://blog.csdn.net/educast/article/details/81866749">ffmpeg 多线程转码</a></p>
<p>通过写在 <code>-i</code> 参数前的 <code> -threads [线程数]</code> 可以指定 ffmpeg 使用的线程。不过经过测试比较新的 ffmpeg 都会用完 cpu 的所有线程，所以除非要限制 cpu 功率否则这个参数没必要动。</p>
<h2 id="mkv-内挂字幕嵌入-mp4"><a href="#mkv-内挂字幕嵌入-mp4" class="headerlink" title="mkv 内挂字幕嵌入 mp4"></a>mkv 内挂字幕嵌入 mp4</h2><p>参考文章：<a href="http://andrew-reynolds-bootcamp.com/questions/2027/ffmpeg-mkvdao-mp4zhuan-huan-shi-qu-liao-zi-mu">題 FFMPEG mkv到mp4轉換失去了字幕</a></p>
<p>内挂字幕的 mkv 在 filebroswer 里面看不到字幕啊。。。于是要想办法提取字幕出来，再把字幕直接内嵌进去。</p>
<p>有两种方法：</p>
<ol>
<li><p>不靠谱方法，很快，但是不一定能识别</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg -i input.mkv -c copy -c:s mov_text output.mp4</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>重新编码的方法。一定能识别，但是贼慢</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg -i input.mkv -vf subtitles=input.mkv output.mp4</span><br></pre></td></tr></tbody></table></figure>


</li>
</ol>
<h2 id="mp4-批量转换-gif"><a href="#mp4-批量转换-gif" class="headerlink" title="mp4 批量转换 gif"></a>mp4 批量转换 gif</h2><p>参考文章：<a href="http://blog.pkh.me/p/21-high-quality-gif-with-ffmpeg.html#content">High quality GIF with FFmpeg</a></p>
<p>以 centos 为例，先编辑个小脚本：</p>
<p>change.sh</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">palette="./palette.png"</span><br><span class="line"></span><br><span class="line">filters="fps=15,scale=-1:-1:flags=lanczos"</span><br><span class="line"></span><br><span class="line">ffmpeg -v warning -i $1 -vf "$filters,palettegen" -y $palette</span><br><span class="line">ffmpeg -v warning -i $1 -i $palette -lavfi "$filters [x]; [x][1:v] paletteuse" -y $2                                                                                     </span><br></pre></td></tr></tbody></table></figure>

<p>运行 </p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">./change.sh './[要转换的mp4]' '[转换成的gif名字]'</span><br></pre></td></tr></tbody></table></figure>

<p>或者把需要转换的 mp4 文件放到和上面这个脚本相同目录中，执行</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">for i in *.mp4; do ./change.sh $i "${i%%.*}.gif";done</span><br></pre></td></tr></tbody></table></figure>

<p>这条命令会把所有的 mp4 的后缀名去掉，换成 gif。</p>
<p>另外，windows 端也可以通过修改成两个 bat 文件做到类似的效果（不过第二部我不知道怎么把原 mp4 文件夹的所有后缀替换成 gif，只能直接加 gif），要批量转换的时候运行第二个 bat 就 ok 了</p>
<p>change.bat</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">cd /d %~dp0 </span><br><span class="line">set palette="palette.png"</span><br><span class="line"></span><br><span class="line">set filters="fps=15,scale=-1:-1:flags=lanczos"</span><br><span class="line"></span><br><span class="line">ffmpeg -v warning -i %1 -vf "%filters%,palettegen" -y %palette%</span><br><span class="line">ffmpeg -v warning -i %1 -i %palette% -lavfi "%filters% [x]; [x][1:v] paletteuse" -y %2       </span><br></pre></td></tr></tbody></table></figure>

<p>change_all.bat</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">for %%i in (*.mp4) do change.bat "%%i" "%%i.gif"</span><br></pre></td></tr></tbody></table></figure>

<p>嫌转换成的 gif 太大？改点参数就成，比如：</p>
<p>change_slim.bat</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">cd /d %~dp0 </span><br><span class="line">set palette="palette.png"</span><br><span class="line"></span><br><span class="line">set filters="fps=10,scale=350:-1"</span><br><span class="line"></span><br><span class="line">ffmpeg -v warning -i %1 -vf "%filters%,palettegen" -y %palette%</span><br><span class="line">ffmpeg -v warning -i %1 -i %palette% -b:v 1000k -lavfi "%filters% [x]; [x][1:v] paletteuse" -y %2       </span><br></pre></td></tr></tbody></table></figure>

<h2 id="合并音视频"><a href="#合并音视频" class="headerlink" title="合并音视频"></a>合并音视频</h2><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg -i xxx -i xxx -c:v copy -c:a copy output.mp4</span><br></pre></td></tr></tbody></table></figure>



<h2 id="mp4-转音频"><a href="#mp4-转音频" class="headerlink" title="mp4 转音频"></a>mp4 转音频</h2><p>对于大部分 mp4，可以直接提取其中的音频，速度很快：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg -i .\test.mp4 -acodec copy -vn test.mp3</span><br></pre></td></tr></tbody></table></figure>

<p>不过，这条命令是直接把 mp4 封装中的音频部分提取出来，如果音频部分不是 mp3 格式就会出错：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/6zkXFjh.png"></p>
<p>从日志里面，我们可以观察到原来封装里面是什么格式的，比如这里就是 aac 的：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/mtmQeQT.png"></p>
<p>这时候就需要把命令中的格式从 mp3 改成 aac：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg -i .\test.mp4 -acodec copy -vn test.aac</span><br></pre></td></tr></tbody></table></figure>

<p>如果需要转换其他格式，可以使用 <code>c:a</code> 参数替代 <code>acodec</code>，比如转换为当前较先进的 opus 格式（当然速度就慢多了）：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg -i .\test.mp4 -c:a libopus -vn test.opus</span><br></pre></td></tr></tbody></table></figure>

<h2 id="下载-m3u8"><a href="#下载-m3u8" class="headerlink" title="下载 m3u8"></a>下载 m3u8</h2><p>参考文章：<a href="https://stackoverflow.com/questions/50455695/why-does-ffmpeg-ignore-protocol-whitelist-flag-when-converting-https-m3u8-stream">Why does ffmpeg ignore protocol_whitelist flag when converting https m3u8 stream?</a></p>
<p>某些视频网站和 ios 软件用的视频地址抓出来是 m3u8 的。比如机核的视频。可以用 chrome 插件<a href="https://chrome.google.com/webstore/detail/%E7%8C%AB%E6%8A%93/jfedfbgedapdagkghmgibemcoggfppbb">猫抓</a>获取 m3u8 文件。然后，加入相关参数，注意需要紧跟在 ffmpeg 命令后面：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg -protocol_whitelist file,http,https,tcp,tls,crypto -i xxxx.m3u8 xxxx.xxx</span><br></pre></td></tr></tbody></table></figure>

<p>xxxx.xxx 指的是你需要输出的视频名字和格式，因为 m3u8 流切下来一般是 h264 的，封装格式需要你自己来确定，ffmpeg 会帮你把所有切片合并。</p>
<h2 id="自动裁切黑边"><a href="#自动裁切黑边" class="headerlink" title="自动裁切黑边"></a>自动裁切黑边</h2><p>参考文章：<a href="https://www.bogotobogo.com/FFMpeg/ffmpeg_cropdetect_ffplay.php">CROPDETECT AND FFPLAY - 2020</a></p>
<p>先检测黑边：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg -i .\test.mp4 -vcodec copy -acodec copy cropdetect=24:16:0 test1.mp4</span><br></pre></td></tr></tbody></table></figure>

<p>24:16:0 是默认参数，一般如果要调也只调第一个参数（黑边阈值）。</p>
<p>输出的日志中会有类似于</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[Parsed_cropdetect_0 @ 0x3704360] x1:0 x2:639 y1:43 y2:317 w:640 h:272 x:0 y:46 pts:181320 t:181.320000 crop=640:272:0:46</span><br></pre></td></tr></tbody></table></figure>

<p>其中有用的就是 w、h、x、y 四个参数，分别放入新命令的相应位置</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg -i .\test.mp4 -vcodec copy -acodec copy -vf crop=640:272:0:46 test1.mp4</span><br></pre></td></tr></tbody></table></figure>

<p>即可。（虽然经过我测试默认参数检测还是有点偏差，但稍微手动调一下 w 和 h 的值效果就令人满意了）</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>参考文章：<a href="https://linux.cn/article-10932-1.html">给新手的 20 多个 FFmpeg 命令示例</a></p>
<p>比较有用的几个地方：</p>
<h3 id="转换格式时不压缩视频"><a href="#转换格式时不压缩视频" class="headerlink" title="转换格式时不压缩视频"></a>转换格式时不压缩视频</h3><p>使用<code>-qscale 0</code></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$ ffmpeg -i input.webm -qscale 0 output.mp4</span><br></pre></td></tr></tbody></table></figure>

<h3 id="（21-6-26-更新）批量将视频大小限制到一定范围内（试做）"><a href="#（21-6-26-更新）批量将视频大小限制到一定范围内（试做）" class="headerlink" title="（21.6.26 更新）批量将视频大小限制到一定范围内（试做）"></a>（21.6.26 更新）批量将视频大小限制到一定范围内（试做）</h3><p>参考文章：</p>
<ul>
<li><a href="https://blog.csdn.net/u011330638/article/details/82392268">FFmpeg 的介绍与使用_我的学习笔记-CSDN博客_ffmpeg</a></li>
<li><a href="https://bravoing.github.io/2020/02/14/%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%99%A8%E5%8E%9F%E7%90%86%E3%80%81%E5%88%86%E8%BE%A8%E7%8E%87%E3%80%81%E5%B8%A7%E7%8E%87%E3%80%81%E7%A0%81%E7%8E%87/">视频播放器原理、分辨率、帧率、码率 | Hexo</a></li>
</ul>
<p>众所周知媒体文件（图片，视频，音频等）要降低体积不难，但要降低到一个大小范围内，就很折腾了。</p>
<p>ffmpeg 缩小视频体积一般有那么几种途径：</p>
<ol>
<li>降低码率，这种方法用的比较多。降低码率比较简单的一共有三种方法<ul>
<li>动态码率（vbr）下，直接使用参数 <code>-b:v [目标码率]</code>。</li>
<li>固定码率（cbr）下，使用参数 <code>-cbr [cbr参数] -pass 1</code>，cbr 参数默认为 23，增大至 28 左右，可有效减小体积。</li>
<li>参数 <code>-qp</code>。</li>
</ul>
</li>
<li>降低分辨率。</li>
<li>降低帧数。</li>
</ol>
<p>对于视频文件，通常我们不采用降低帧率的方法，而是配合使用降低分辨率和降低码率的方法，因为在固定分辨率的情况下，码率的下降是有极限的，比方说在 1080p 分辨率下，即使我们使用参数 <code>-b:v 1000</code>，最后转换出来的视频平均码率可能也有 1500 左右；并且后续再使用 <code>-b:v 500</code> 也会发现转出来的视频和上一个视频大小几乎没有区别。另一方面，高分辨率低码率的视频有可能比同体积的稍低分辨率但高码率的视频还要胡上许多。</p>
<p>我们的思路是，第一次先对码率进行下调，当体积大于目标值时，再对视频的码率和分辨率同时进行缩小，直到体积符合要求。</p>
<p>change.bat</p>
<figure class="highlight bat"><table><tbody><tr><td class="code"><pre><span class="line">::调试时改为<span class="built_in">echo</span> on</span><br><span class="line">::<span class="built_in">set</span> local可参考[请问批处理<span class="built_in">setlocal</span>命令一般如何使用? - 知乎](https://www.zhihu.com/question/<span class="number">279379047</span>/answer/<span class="number">847986676</span>)</span><br><span class="line">@<span class="built_in">echo</span> off&amp;<span class="built_in">setlocal</span> enabledelayedexpansion</span><br><span class="line"></span><br><span class="line">::nv硬解，无硬解能力的话可设为libx264</span><br><span class="line"><span class="built_in">set</span> self_codec=hevc_nvenc</span><br><span class="line">::码率</span><br><span class="line"><span class="built_in">set</span> bitrate=<span class="number">2000</span></span><br><span class="line">::目标大小</span><br><span class="line"><span class="built_in">set</span> destiny_space=<span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">%%i</span> <span class="keyword">in</span> (*) <span class="keyword">do</span> (</span><br><span class="line"><span class="comment">rem bat 在 do 中 echo[批处理文件 - 如何在/ F的循环内设置变量 - VoidCC](https://stackoverflow.com/questions/13805187/how-to-set-a-variable-inside-a-loop-for-f)</span></span><br><span class="line"><span class="keyword">for</span> /f "tokens=<span class="number">2</span> delims==" <span class="variable">%%j</span> <span class="keyword">in</span> ('ffprobe -v error -show_entries stream^=bit_rate -select_streams v:<span class="number">0</span> "<span class="variable">%%i</span>"') <span class="keyword">do</span> <span class="keyword">call</span> :Foo <span class="variable">%%j</span> bit_ratenow</span><br><span class="line"><span class="keyword">for</span> /f "tokens=<span class="number">2</span> delims==" <span class="variable">%%k</span> <span class="keyword">in</span> ('ffprobe -v error -show_entries stream^=width -select_streams v:<span class="number">0</span> "<span class="variable">%%i</span>"') <span class="keyword">do</span> <span class="built_in">set</span> widthnow=<span class="variable">%%k</span></span><br><span class="line"><span class="built_in">echo</span> 初次转换视频码率为<span class="variable">!bit_ratenow!</span>,宽度为<span class="variable">!widthnow!</span></span><br><span class="line">::这里没法用双冒号注释,只能用<span class="built_in">rem</span>，原因不明</span><br><span class="line">ffmpeg -y -i "<span class="variable">%%i</span>" -vcodec <span class="variable">%self_codec%</span> -b:v <span class="variable">!bit_ratenow!</span>k "change.<span class="variable">%%i</span>"</span><br><span class="line"><span class="keyword">call</span> :NextReduce "<span class="variable">%%i</span>" <span class="variable">!bit_ratenow!</span> <span class="variable">!widthnow!</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">goto</span> End</span><br><span class="line"></span><br><span class="line">:Foo</span><br><span class="line">::/a参数指对语句进行计算</span><br><span class="line"><span class="built_in">set</span> /a z=%<span class="number">1</span>/<span class="number">1024</span></span><br><span class="line">::<span class="built_in">echo</span> %<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> <span class="variable">%z%</span> <span class="keyword">geq</span> <span class="variable">%bitrate%</span> (</span><br><span class="line">    <span class="built_in">set</span> z=<span class="variable">%bitrate%</span></span><br><span class="line">) <span class="keyword">else</span> (</span><br><span class="line">    ::bat不支持浮点数</span><br><span class="line">    ::<span class="built_in">set</span> /a z=<span class="variable">%z%</span>*<span class="number">4</span>/<span class="number">5</span></span><br><span class="line">    <span class="built_in">set</span> /a z=<span class="variable">%z%</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">set</span> /a <span class="variable">%2=%</span>z%</span><br><span class="line">::<span class="built_in">echo</span> <span class="variable">%z%</span></span><br><span class="line"><span class="keyword">goto</span> :eof</span><br><span class="line"></span><br><span class="line">:NextReduce</span><br><span class="line"><span class="built_in">setlocal</span></span><br><span class="line"><span class="built_in">set</span> bitrate=%<span class="number">2</span></span><br><span class="line"><span class="built_in">set</span> width=%<span class="number">3</span></span><br><span class="line">:lessthen100m</span><br><span class="line"><span class="built_in">set</span> space=<span class="number">0</span></span><br><span class="line"><span class="comment">rem 使用~符号忽略双引号</span></span><br><span class="line">::<span class="built_in">echo</span> change.%~<span class="number">1</span></span><br><span class="line">::<span class="built_in">echo</span> %~<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> /f "tokens=<span class="number">3</span> delims= " <span class="variable">%%l</span> <span class="keyword">in</span> ('<span class="built_in">dir</span> /a /c "change.%~<span class="number">1</span>"^| <span class="built_in">find</span> /i "change.%~<span class="number">1</span>"') <span class="keyword">do</span> <span class="built_in">set</span> /a space=<span class="variable">%%l</span>/<span class="number">1024</span>/<span class="number">1024</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%space%</span></span><br><span class="line"><span class="keyword">if</span> <span class="variable">!space!</span> <span class="keyword">geq</span> <span class="variable">%destiny_space%</span> (</span><br><span class="line">    <span class="built_in">set</span> /a bitrate=<span class="variable">!bitrate!</span>*<span class="number">4</span>/<span class="number">5</span></span><br><span class="line">    <span class="built_in">set</span> /a width=<span class="variable">!width!</span>*<span class="number">4</span>/<span class="number">5</span></span><br><span class="line">    <span class="built_in">echo</span> 目标视频码率为<span class="variable">!bitrate!</span>,宽度为<span class="variable">!width!</span></span><br><span class="line">    ffmpeg -y -i "%~<span class="number">1</span>" -vcodec <span class="variable">%self_codec%</span> -b:v <span class="variable">!bitrate!</span>k -vf "scale=<span class="variable">!width!</span>:-<span class="number">1</span>" "change.%~<span class="number">1</span>"</span><br><span class="line">    <span class="keyword">goto</span> :lessthen100m</span><br><span class="line">)</span><br><span class="line"><span class="built_in">endlocal</span></span><br><span class="line">:End</span><br></pre></td></tr></tbody></table></figure>

<p>然后将需要处理的视频放到和本 bat 同一个文件夹下即可。处理过的视频文件将被命名为 <code>change+源文件名.mp4</code>。</p>
<p>当然这个脚本还是有不少的改进空间：</p>
<ol>
<li>不同分辨率的目标码率应该不太一样，我现在把目标码率统一设置为一个数字了。如果设置的太小就会牺牲高分辨率的视频文件；设置得过大低分辨率的视频文件就可能需要多次转换。</li>
<li>直接使用参数 <code>-b:v [目标码率]</code>进行码率降低实际上是一个简单而糟糕的方法。</li>
</ol>
<p>第一个问题，如果分辨率和码率有一个合适的对应函数曲线可能就能解决，我没找到；有个大概的表格</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/74521514-7828ac00-4f54-11ea-8a0f-d6fdff487751.png"></p>
<p>但用分辨率中的宽度/码率得到的结果在 0.2-0.3 直接浮动，差距太大，可能凑合用都有点勉强。</p>
<p>第二个问题，推荐的方法是使用 <code>Two-Pass ABR</code> 转换法：</p>
<blockquote>
<p>用于限制输出文件的大小，比如预期视频文件有 10min(600s)，200 MB：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">&gt;200 * 8192 / 600 = ~2730 Kb</span><br><span class="line">&gt;2730 - 128(音频常用的比特率) = 2602 kb</span><br><span class="line">&gt;12</span><br></pre></td></tr></tbody></table></figure>

<p>那么：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">&gt;ffmpeg -y -i input -c:v libx264 -b:v 2600k -pass 1 -c:a aac -b:a 128k -f mp4 /dev/null &amp;&amp; \</span><br><span class="line">&gt;ffmpeg -i input -c:v libx264 -b:v 2600k -pass 2 -c:a aac -b:a 128k output.mp4</span><br></pre></td></tr></tbody></table></figure>
</blockquote>
<p>但要在 bat 下这样处理是有点麻烦。。。如果下一次我再改这个脚本，我可能会选择用 python 写吧，现在这个，先凑合着用吧2333</p>
<p><strong>（22.1.19 更新）</strong>批量将视频大小限制到一定范围内-python 版（试做）</p>
<p>用 bash 写脚本真是吃力。。。还不能在 linux 上用。想要改进一下脚本，让子目录下的文件也能被一键转换，发现用 bash 写实在是太复杂了，所以干脆把上面的脚本用 python <a href="https://github.com/zbttl/lazyConvert">重构</a>了：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pymediainfo <span class="keyword">import</span> MediaInfo</span><br><span class="line"></span><br><span class="line">filetuple = os.walk(<span class="string">r'./'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#走显存编码,可选qsv/cuda/nvenc/amf,使用qsv时需保证没有独立显卡（特别是N卡），否则会报错，是bug，来自[#6996（尝试在 Windows 10 上使用 NVidia 主 GPU 支持的 Intel 系统上使用 QSV 会导致崩溃）– FFmpeg](https://trac.ffmpeg.org/ticket/6996)，不用可置空。</span></span><br><span class="line">hwaccel=<span class="string">''</span></span><br><span class="line"><span class="comment">#hwaccel=r' -hwaccel qsv '</span></span><br><span class="line"><span class="comment">#解码方法，可用h264_cuvid/h264_amf/h264_qsv/libx264，不用可置空。</span></span><br><span class="line"><span class="comment">#self_decodec=''</span></span><br><span class="line">self_decodec=<span class="string">r' -c:v h264_qsv '</span></span><br><span class="line"><span class="comment">#解码方法，可用h264_nvenc/h264_amf/h264_qsv/libx264</span></span><br><span class="line"><span class="comment">#self_encodec=''</span></span><br><span class="line">self_encodec=<span class="string">r' -c:v h264_qsv '</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#码率（单位kbps）</span></span><br><span class="line">destiny_bitrate=<span class="number">4000</span></span><br><span class="line"><span class="comment">#目标大小(MB)</span></span><br><span class="line">destiny_space=<span class="number">200</span></span><br><span class="line"><span class="comment">#目标帧数</span></span><br><span class="line">fps=<span class="string">r'23'</span></span><br><span class="line"><span class="comment">#目标格式</span></span><br><span class="line"><span class="built_in">format</span>=<span class="string">r'.mp4'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#转换命令</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_bat</span>(<span class="params">file_name,extension,bit_rate,height</span>):</span></span><br><span class="line">    command=<span class="string">r'ffmpeg'</span>+hwaccel+self_decodec+<span class="string">r'-i "'</span>+file_name+extension+<span class="string">r'"'</span>+self_encodec+<span class="string">r' -b:v '</span>+<span class="built_in">str</span>(bit_rate)+<span class="string">r' -vf scale=-1:'</span>+<span class="built_in">str</span>(height)+<span class="string">r' -r '</span>+fps+<span class="string">r' -y "'</span>+file_name+<span class="string">r'_convert'</span>+<span class="built_in">format</span>+<span class="string">r'"'</span></span><br><span class="line">    os.system(command)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取码率</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detect_bit_rate</span>(<span class="params">file_name</span>):</span></span><br><span class="line">    command=<span class="string">r'ffprobe -i "'</span>+file_name+<span class="string">r'" -show_entries format=bit_rate -v quiet -of csv="p=0"'</span></span><br><span class="line">    bit_rate=os.popen(command).read().split()[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> bit_rate</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取视频高度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detect_height</span>(<span class="params">file_name</span>):</span></span><br><span class="line">    command=<span class="string">r'ffprobe -i "'</span>+file_name+<span class="string">r'" -show_entries stream=height -v quiet -of csv="p=0"'</span></span><br><span class="line">    height=os.popen(command).read().split()[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> height</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> path,dir_list,files <span class="keyword">in</span> filetuple:</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            path=path.strip(<span class="string">'./'</span>)</span><br><span class="line">            <span class="keyword">if</span>(path!=<span class="string">''</span>): </span><br><span class="line">                file=os.path.join(path,file)</span><br><span class="line">            fullfilename=file</span><br><span class="line">            <span class="comment">#排除非视频文件</span></span><br><span class="line">            fileInfo = MediaInfo.parse(file)</span><br><span class="line">            <span class="keyword">for</span> track <span class="keyword">in</span> fileInfo.tracks:</span><br><span class="line">                <span class="keyword">if</span> track.track_type == <span class="string">'Video'</span>:</span><br><span class="line">                    <span class="comment">#获取拓展名</span></span><br><span class="line">                    (file, extension) = os.path.splitext(file)</span><br><span class="line">                    <span class="comment">#已转换/直接更名的视频直接跳过</span></span><br><span class="line">                    <span class="keyword">if</span>(<span class="keyword">not</span> fullfilename.endswith(<span class="string">r'convert'</span>+<span class="built_in">format</span>) <span class="keyword">and</span> <span class="keyword">not</span> os.path.exists(file+<span class="string">r'_convert'</span>+<span class="built_in">format</span>) <span class="keyword">and</span> <span class="keyword">not</span> fullfilename.endswith(<span class="string">r'convert'</span>+extension) <span class="keyword">and</span> <span class="keyword">not</span> os.path.exists(file+<span class="string">r'_noconvert'</span>+extension)):</span><br><span class="line">                        <span class="keyword">if</span>(os.path.getsize(file+extension)&gt;destiny_space*<span class="number">1024</span>*<span class="number">1024</span>):</span><br><span class="line">                            <span class="comment">#第一次转换，大于目标大小的，码率缩到目标码率，高度缩到1080，若码率和高度均一低于目标码率，则取源文件码率/高度，然后缩减帧率，转换</span></span><br><span class="line">                            bit_rate= <span class="built_in">int</span>(detect_bit_rate(file+extension))</span><br><span class="line">                            height=detect_height(file+extension)</span><br><span class="line">                            <span class="keyword">if</span>(bit_rate&gt;destiny_bitrate*<span class="number">1000</span>):</span><br><span class="line">                                bit_rate=destiny_bitrate*<span class="number">1000</span></span><br><span class="line">                            <span class="keyword">if</span>(<span class="built_in">int</span>(height)&gt;<span class="number">1080</span>):</span><br><span class="line">                                height=<span class="string">'1080'</span></span><br><span class="line">                            print(<span class="string">"初次转换视频码率为："</span>+<span class="built_in">str</span>(bit_rate/<span class="number">1000</span>)+<span class="string">"kbps"</span>)</span><br><span class="line">                            change_bat(file,extension,bit_rate,height)</span><br><span class="line">                            <span class="comment">#第一次转换后文件仍大于目标大小的，则进入循环转换流程，每次转换码率和高度会同时缩减到上次转换的80%，直到大小低于目标大小为止</span></span><br><span class="line">                            <span class="keyword">while</span>(os.path.getsize(file+<span class="string">r'_convert'</span>+<span class="built_in">format</span>)&gt;destiny_space*<span class="number">1024</span>*<span class="number">1024</span>):</span><br><span class="line">                                bit_rate=<span class="built_in">int</span>(bit_rate)*<span class="number">4</span>/<span class="number">5</span>;</span><br><span class="line">                                height=<span class="built_in">int</span>(height)*<span class="number">4</span>/<span class="number">5</span>;</span><br><span class="line">                                print(<span class="string">"本次转换视频码率为："</span>+<span class="built_in">str</span>(<span class="built_in">int</span>(bit_rate/<span class="number">1000</span>))+<span class="string">"kbps，视频宽度为："</span>+<span class="built_in">str</span>(height)+<span class="string">"px"</span>)</span><br><span class="line">                                change_bat(file,extension,bit_rate,height)</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="comment">#未转换，直接复制更名，便于后续筛选</span></span><br><span class="line">                            all_path=<span class="string">r'copy /y "'</span>+file+extension+<span class="string">r'" "'</span> +file+<span class="string">r'_noconvert'</span>+extension+<span class="string">r'"'</span></span><br><span class="line">                            os.system(all_path)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">             <span class="keyword">continue</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>新脚本在实现了上一个一键限制视频到对应体积功能的基础上，增加了以下功能：</p>
<ol>
<li>通过修改参数使编解码均使用硬解，默认使用支持最为广泛 qsv 硬解（intel 家的硬解标准）。</li>
<li>对子目录中的视频文件同样进行转换。</li>
<li>默认的封装格式为 mp4，可更改。</li>
<li>同时对帧数进行了更改。</li>
<li>转换时对修改/无需进行修改的文件均进行备份，多次运行时不会对已转换的项目进行多次转换。</li>
</ol>
<h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><p>ffmpeg windows 端出了新的编译版：<a href="https://github.com/BtbN/FFmpeg-Builds">BtbN/FFmpeg-Builds</a>。release 中有许多不同版本。lgbl 和 gbl 应该是许可证之间的不同，但大小也有区别，我个人认为是为了 lgbl 剔除了一些东西；shared 和不带 shared 的版本，区别是后者将运行库文件合并进了 ffmpeg 二进制文件中（但不带 shared 的版本体积大了很多）。最关键的是 vulkan 版本，带有 vulkan 版本需要比较新的独显和新的驱动才能使用，我的 965m 运行都会报错 <code>Lossless encoding not supported</code>。</p>
]]></content>
      <categories>
        <category>影音</category>
      </categories>
      <tags>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 进阶</title>
    <url>/hexo-jin-jie/</url>
    <content><![CDATA[<h2 id="NexT-更新"><a href="#NexT-更新" class="headerlink" title="NexT 更新"></a>NexT 更新</h2><p>光 速 更 新（不是</p>
<p>啊我刚写完上一篇挑博客系统的时候发现 gitment 怎么都不生效，想想是不是 next 有其他的生效方法。。。摸到 next 项目的 md 那边才发现一个惊讶的事实：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201221175721.png"></p>
<p>我上一篇用的是 7.8.0。。。原因啊，毕竟我也是看的人家的教程来学的，然后 clone 人家教程上面的 url 告诉我这个仓库的 NexT 过时了，显示了个新的仓库，我就直接摸过去了，谁知道还有更新的，佛了。</p>
<p>那就老老实实迁移吧，备份主题配置文件，删掉 themes 下的 NexT 主题，clone 新仓库的主题，</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cp themes/next/_config.yml themes/_config.yml.bak</span><br><span class="line">rm -r themes/next</span><br><span class="line">git clone https://github.com/next-theme/hexo-theme-next.git themes/next</span><br></pre></td></tr></tbody></table></figure>

<p>然后用 vscode 对一下新 clone 下来的主题配置文件和备份的旧版主题配置文件的差别，把要改的地方怼过去。。。</p>
<p>慢！</p>
<p>根据 <a href="https://theme-next.js.org/docs/getting-started/configuration.html">Configuration</a>，咱们现在用的 hexo 5.0 已经支持这种新的配置方式了，说人话就是不用再进 <code>themes/next</code> 里面改配置了，只需要在全局主题里面加（并且在这些配置的开头顶上加 <code>theme_config</code> 并给这些配置一个两空格缩进），或者在 hexo 根目录新开一个 <code>_config.next.yml</code> 把要改的配置丢进去就完事了。有点像以前写过的 rime 输入法的 patch 文件。</p>
<p>按上一篇文章的功能来，大部分需要修改主题配置文件的地方我都抽取出来放在了<code>_config.next.yml</code> ，以下是代码参考：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"># Define custom file paths.</span><br><span class="line"># Create your custom files in site directory `source/_data` and uncomment needed files below.</span><br><span class="line">custom_file_path:</span><br><span class="line">  #head: source/_data/head.njk</span><br><span class="line">  #header: source/_data/header.njk</span><br><span class="line">  #sidebar: source/_data/sidebar.njk</span><br><span class="line">  #postMeta: source/_data/post-meta.njk</span><br><span class="line">  #postBodyEnd: source/_data/post-body-end.njk</span><br><span class="line">  footer: source/_data/footer.njk</span><br><span class="line">  bodyEnd: source/_data/body-end.njk</span><br><span class="line">  #variable: source/_data/variables.styl</span><br><span class="line">  #mixin: source/_data/mixins.styl</span><br><span class="line">  #style: source/_data/styles.styl</span><br><span class="line"></span><br><span class="line">creative_commons:</span><br><span class="line">  license: by-sa</span><br><span class="line">  sidebar: false</span><br><span class="line">  post: true</span><br><span class="line">  language:</span><br><span class="line"></span><br><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  tags: /tags/ || fa fa-tags</span><br><span class="line">  categories: /categories/ || fa fa-th</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line">  #schedule: /schedule/ || fa fa-calendar</span><br><span class="line">  #sitemap: /sitemap.xml || fa fa-sitemap</span><br><span class="line">  #commonweal: /404/ || fa fa-heartbeat</span><br><span class="line">  about: /about/ || fa fa-user</span><br><span class="line"></span><br><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/zbttl || fab fa-github</span><br><span class="line">  E-Mail: mailto:zbttls@gmail.com|| fa fa-envelope</span><br><span class="line">  #Weibo: https://weibo.com/yourname || fab fa-weibo</span><br><span class="line">  #Google: https://plus.google.com/yourname || fab fa-google</span><br><span class="line">  #Twitter: https://twitter.com/yourname || fab fa-twitter</span><br><span class="line">  #FB Page: https://www.facebook.com/yourname || fab fa-facebook</span><br><span class="line">  #StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span><br><span class="line">  #YouTube: https://youtube.com/yourname || fab fa-youtube</span><br><span class="line">  #Instagram: https://instagram.com/yourname || fab fa-instagram</span><br><span class="line">  #Skype: skype:yourname?call|chat || fab fa-skype</span><br><span class="line"></span><br><span class="line">footer:</span><br><span class="line">  # Specify the year when the site was setup. If not defined, current year will be used.</span><br><span class="line">  #since: 2020</span><br><span class="line"></span><br><span class="line">  # Icon between year and copyright info.</span><br><span class="line">  icon:</span><br><span class="line">    # Icon name in Font Awesome. See: https://fontawesome.com/icons</span><br><span class="line">    name: fa fa-heart</span><br><span class="line">    # If you want to animate the icon, set it to true.</span><br><span class="line">    animated: false</span><br><span class="line">    # Change the color of icon, using Hex Code.</span><br><span class="line">    color: "#ff0000"</span><br><span class="line"></span><br><span class="line">  # If not defined, `author` from Hexo `_config.yml` will be used.</span><br><span class="line">  copyright:</span><br><span class="line"></span><br><span class="line">  # Powered by Hexo &amp; NexT</span><br><span class="line">  powered: false</span><br><span class="line"></span><br><span class="line">  # Beian ICP and gongan information for Chinese users. See: https://beian.miit.gov.cn, http://www.beian.gov.cn</span><br><span class="line">  beian:</span><br><span class="line">    enable: false</span><br><span class="line">    icp:</span><br><span class="line">    # The digit in the num of gongan beian.</span><br><span class="line">    gongan_id:</span><br><span class="line">    # The full num of gongan beian.</span><br><span class="line">    gongan_num:</span><br><span class="line">    # The icon for gongan beian. See: http://www.beian.gov.cn/portal/download</span><br><span class="line">    gongan_icon_url:</span><br><span class="line"></span><br><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true</span><br><span class="line">  item_text_post: true</span><br><span class="line">  item_text_total: true</span><br><span class="line"></span><br><span class="line">codeblock:</span><br><span class="line">  # Code Highlight theme</span><br><span class="line">  # All available themes: https://theme-next.js.org/highlight/</span><br><span class="line">  theme:</span><br><span class="line">    light: default</span><br><span class="line">    dark: tomorrow-night</span><br><span class="line">  prism:</span><br><span class="line">    light: prism</span><br><span class="line">    dark: prism-dark</span><br><span class="line">  # Add copy button on codeblock</span><br><span class="line">  copy_button:</span><br><span class="line">    enable: true</span><br><span class="line">    # Available values: default | flat | mac</span><br><span class="line">    style:</span><br><span class="line"></span><br><span class="line">back2top:</span><br><span class="line">  enable: true</span><br><span class="line">  # Back to top in sidebar.</span><br><span class="line">  sidebar: false</span><br><span class="line">  # Scroll percent label in b2t button.</span><br><span class="line">  scrollpercent: true</span><br><span class="line"></span><br><span class="line">busuanzi_count:</span><br><span class="line">  enable: true</span><br><span class="line">  total_visitors: true</span><br><span class="line">  total_visitors_icon: fa fa-user</span><br><span class="line">  total_views: false</span><br><span class="line">  total_views_icon: fa fa-eye</span><br><span class="line">  post_views: true</span><br><span class="line">  post_views_icon: far fa-eye</span><br><span class="line"></span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # If auto, trigger search by changing input.</span><br><span class="line">  # If manual, trigger search by pressing enter key or search button.</span><br><span class="line">  trigger: auto</span><br><span class="line">  # Show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  # Unescape html strings to the readable one.</span><br><span class="line">  unescape: false</span><br><span class="line">  # Preload the search data when the page loads.</span><br><span class="line">  preload: false</span><br><span class="line"></span><br><span class="line"># cursor_effect:</span><br><span class="line">#   enabled: true</span><br><span class="line">#   type: fireworks  # fireworks：礼花 | explosion：爆炸 | love：浮出爱心 | text：浮出文字</span><br><span class="line">cursor_effect: text</span><br></pre></td></tr></tbody></table></figure>

<p>认真看是不是还少了什么？</p>
<p>对了，背景动态火柴棍没了。。。。</p>
<p>记得这个效果是怎么实现的吗？是通过 git clone 本插件到 <code>next/source/lib</code> 中。根据 <a href="https://theme-next.js.org/docs/getting-started/upgrade.html">Upgrade</a> 所说：</p>
<blockquote>
<p>Since v8.0.0, all libraries under the <code>next/source/lib</code> directory was moved out to <a href="https://github.com/next-theme/plugins">@next-theme/plugins</a>. Please see this article for the new 3rd-party libraries installation method: <a href="https://theme-next.js.org/docs/third-party-services/#Adding-Plugins">Adding Plugins</a>.</p>
</blockquote>
<p>但我查了一下这个库，发现也没有 <code>canvas_nest</code>，看来多半是被 delete 了。</p>
<p>没关系，我们还有大力出奇迹（</p>
<p>找到 <code>canvas_nest</code>的 github 库：<a href="https://github.com/theme-next">theme-next</a>/<strong><a href="https://github.com/theme-next/theme-next-canvas-nest">theme-next-canvas-nest</a></strong></p>
<p>按说明行事：</p>
<ol>
<li><p>在 <code>hexo/source/_data</code> 中新建 <code>footer.njk</code>（不是 <code>footer.swig</code> 哦）。</p>
<blockquote>
<p> 由于 NexT 以前使用的 swig 模版引擎停止维护，去年迁移到了 Nunjucks</p>
</blockquote>
</li>
<li><p>加入以下内容</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script color="120,120,120" opacity="0.5" zIndex="-1" count="150" src="https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js"&gt;&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>（修改了一下，和原来我们在主题配置文件中实现的效果一致，就是不能单独设置移动端是否显示了）</p>
</li>
<li><p>在 <code>_config.next.yml</code> 解除 <code>footer: source/_data/footer.njk</code> 的注释（上面的参考代码中我已经开了）。</p>
</li>
</ol>
<p>即可。</p>
<p>话说回来记得我们另一个大力出奇迹的功能是啥么？回去复习~（还好我选择了放在 hexo 根目录的方法，否则这个功能也要再折腾一边）</p>
<p>关于其他的更新功能和差异，及迁移方法，可以查阅：</p>
<ul>
<li><a href="https://github.com/next-theme/hexo-theme-next/issues/4">【必读】更新说明及常见问题 #4</a></li>
<li><a href="https://theme-next.js.org/docs/getting-started/upgrade.html">Upgrade</a></li>
</ul>
<p>更新后 NexT 仍自带，可通过编辑配置启用的功能模块：</p>
<ul>
<li><a href="https://theme-next.js.org/docs/third-party-services/#Adding-Plugins">Third-party Services</a></li>
</ul>
<h2 id="评论（临时）"><a href="#评论（临时）" class="headerlink" title="评论（临时）"></a>评论（临时）</h2><p>上次我看了几个评论系统。一开始打算用简单而泛用的 Valine。结果刚开始我发现注册账号需要手机号码而且后续还要实名就感觉这玩意不对，后续在 NexT 更新公告里面看见这么一段：</p>
<blockquote>
<p>Valine 评论系统出现了一些令人担忧的问题：</p>
<ul>
<li>NexT 团队曾多次收到关于 Valine 评论系统存在隐私泄露问题的反馈；</li>
<li>Valine 自 1.4 版本起不再开源，因此 NexT 团队无法对 Valine 评论系统 Debug。并且发布的打包版本中存在未告知用户的百度统计代码；</li>
<li>11 月下旬出现了针对 Valine 评论系统的攻击。</li>
</ul>
<p>考虑到这些问题已经严重影响到 NexT 用户的数据安全，我们决定将其移除，需要继续使用的用户请安装插件： <a href="https://github.com/next-theme/hexo-next-valine">https://github.com/next-theme/hexo-next-valine</a><br>（插件的配置项使用驼峰命名，与 Valine 本身一致，需要注意将 <code>appid</code> 和 <code>appkey</code> 改为 <code>appId</code> 和 <code>appKey</code>）<br>鉴于以上原因，如果在使用 Valine 时出现<em>任何</em>问题，请在这里反馈： <a href="https://github.com/xCss/Valine/issues">https://github.com/xCss/Valine/issues</a><br>迁移到 Disqus： <a href="https://github.com/YunYouJun/valine-to-disqus">https://github.com/YunYouJun/valine-to-disqus</a></p>
</blockquote>
<p>怕了。另外的呢？接着就是上面我说的 gitment，我试了半天没用，开启后文章底下啥都出不来。后来发现这玩意是 2018 年更新的了。。。以及依赖 github Oauth Apps 的评论系统，调查了一下可能有安全问题（虽然参考文章都是两年前一年前的了，但配置文件中 secret 显然还是用的明码）：</p>
<ul>
<li><a href="https://henryhou.com/post/gitment_and_gittalk_secure/">评论插件 gitment 和 gittalk 存在安全性问题</a></li>
<li><a href="https://www.v2ex.com/t/535608">建议大家弃用 Gitalk 和 Gitment 等权限过高的 Github OAuth App</a></li>
</ul>
<p>我关注的大佬里面有用 Disqus 的，比如 <a href="https://blog.ichr.me/">ChrAlpha’s Blog</a>：<a href="https://blog.ichr.me/post/use-disqus-conveniently/">在特殊地区科学使用 Disqus 评论系统</a>。不过我瞄了一眼，似乎挺复杂的样子。。。。以后再说。</p>
<p>依赖 github issue 的评论系统虽然有安全问题，但我也有小号啊 ~ 在小号上开应该安全许多，这类型的还有另一个选择：gitalk，先用着吧。</p>
<p>参考文章：</p>
<ul>
<li><a href="https://segmentfault.com/a/1190000014085547">为Hexo添加Gitalk评论插件</a></li>
</ul>
<ol>
<li><p>先安装</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm install gitalk</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>去小号那里创建一个 OAuth Apps</p>
<p>打开 <a href="https://github.com/settings/applications/new">New OAuth App</a>（从头像 -&gt;settings-&gt;Developer settings 这里也可以找到）。</p>
<p>新建一个。（不要慌填错后续还能改）</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201222005052.png"></p>
<p>在稍后的界面获取一个 client secret，和 client id 一起记着待会要用。</p>
</li>
<li><p>打开主题配置文件（现在是 <code>_config.next.yml</code> 啦），新增</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">gitalk:</span><br><span class="line">  enable: true #用来做启用判断可以不用</span><br><span class="line">  owner: #Github 用户名,填小号的不要填大号的</span><br><span class="line">  repo: #储存评论issue的github仓库名</span><br><span class="line">  admin: #Github 用户名,</span><br><span class="line">  clientID: #`Github Application clientID`</span><br><span class="line">  clientSecret: #`Github Application clientSecret`</span><br><span class="line"> gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  github_id:  # GitHub repo owner，即小号的用户名</span><br><span class="line">  repo:  # Repository name to store issues，储存评论issue的github仓库名</span><br><span class="line">  client_id:  # GitHub Application Client ID，刚获取的</span><br><span class="line">  client_secret:  # GitHub Application Client Secret，刚获取的</span><br><span class="line">  admin_user:  # GitHub repo owner and collaborators, only these guys can initialize gitHub issues，还是填小号的用户名</span><br><span class="line">  distraction_free_mode: true # Facebook-like distraction free mode</span><br><span class="line">  # Gitalk's display language depends on user's browser or system environment</span><br><span class="line">  # If you want everyone visiting your site to see a uniform language, you can set a force language value</span><br><span class="line">  # Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span><br><span class="line">  language:ok，</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>ok，接下来部署到网站后看到文章下面就有评论区了，登录自己的小号就能开启评论区，注意每个文章都需要手动开启。另外连 about 和 tags 那几个界面都有评论区。。。。我们可以在那几个文章的文前代码块里面加上</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">comments: false</span><br></pre></td></tr></tbody></table></figure>

<p>即可屏蔽掉那些文章的评论区。</p>
<h2 id="链接中中文转拼音，以及修改-permalinks"><a href="#链接中中文转拼音，以及修改-permalinks" class="headerlink" title="链接中中文转拼音，以及修改 permalinks"></a>链接中中文转拼音，以及修改 permalinks</h2></li>
</ol>
<p>参考文章：<a href="https://zhuanlan.zhihu.com/p/123286944">Github+Hexo+matery 博客搭建小白教程 - 知乎</a></p>
<blockquote>
<p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。</p>
</blockquote>
<p>还有一点：Permalinks 我直接设置的日记文件标题（便于 seo），其实我的日记文件标题也就是当天的日期。不经任何修改可猜到可碰撞的网站一级目录文件，vps 文件漏洞 ptsd 警告（</p>
<p><del>其实我想找能够混淆 url 的 hexo 插件，没找到，先用这个凑合一下（</del>（可以使用 hexo-abbrlink，参考 <a href="https://blog.csdn.net/nineya_com/article/details/103445898">hexo博客进阶（一）url设置和百度url提交、百度访问量统计_玖涯博客-CSDN博客</a>）</p>
<p>安装</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm i hexo-permalink-pinyin</span><br></pre></td></tr></tbody></table></figure>

<p>在全局配置文件 <code>_config.yml</code> 新增：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">permalink_pinyin:</span><br><span class="line">  enable: true</span><br><span class="line">  separator: '-' # default: '-'</span><br></pre></td></tr></tbody></table></figure>

<p>后续，我研究了一下 permalinks，可以用文章标题代替文件标题的 url 部分。参考：<a href="https://hexo.io/zh-cn/docs/permalinks.html">永久链接（Permalinks） | Hexo</a></p>
<p>修改全局配置文件</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">permalink: :post_title/</span><br></pre></td></tr></tbody></table></figure>

<p>甚至还可以加上 hash 值（但可能对 seo 产生副作用）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">permalink: :post_title-:hash/</span><br></pre></td></tr></tbody></table></figure>

<p>修改后需要刷新</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">hexo clean&amp;&amp;hexo g</span><br></pre></td></tr></tbody></table></figure>

<h2 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h2><p>参考文章：</p>
<ul>
<li><a href="https://steemit.com/cn/@greedyboy/hexo-next-rss">将hexo静态博客next主题安装rss插件功能 — Steemit</a></li>
<li><a href="https://www.zywvvd.com/2020/03/20/next/14_add_rss/next-add-rss/">Next -14- 为Hexo Next7.7.1 添加RSS （带按钮） | 又见苍岚</a></li>
<li><a href="https://suyin-blog.club/2020/2M3YWE7/">给 Hexo 中的 Next 主题添加 RSS 功能 | 苏寅 Blog</a></li>
</ul>
<p>安装 rss 插件：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm i hexo-generator-feed</span><br></pre></td></tr></tbody></table></figure>

<p>在全局配置文件中新增：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">feed:</span><br><span class="line">    type: atom</span><br><span class="line">    path: atom.xml</span><br><span class="line">    limit: 20 #展示文章的数量，使用 0 或则 false 代表展示全所有的帖子</span><br><span class="line">    #content: #（可选）设置 true 可以在 RSS 文件中包含文章全部内容，默认：false</span><br><span class="line">    content_limit:300 #（可选）摘要中使用的帖子内容的默认长度。 仅在内容设置为 false 且未显示自定义帖子描述时才使用。</span><br><span class="line">    #content_limit_delim: #（可选）开启content_limit时，在显示的帖子内容中如果有分隔符，优先按分隔符进行分割。默认不使用。</span><br><span class="line">    #order_by: -date #rss 文章排序方法</span><br></pre></td></tr></tbody></table></figure>

<p>之后有三种显示方法（可以同时开启，但 2 和 3 没必要一起开）：</p>
<ol>
<li><p>显示在每篇文章末尾。这是 next 默认情况下推荐的方法，在 next 文件夹原来的配置文件中可以找到。</p>
<p>在主题配置文件 <code>_config.next.yml</code> 中新增</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">follow_me:</span><br><span class="line">  #Twitter: https://twitter.com/包包包zb || fab fa-twitter</span><br><span class="line">  #Telegram: https://t.me/channel_name || fab fa-telegram</span><br><span class="line">  #WeChat: /images/wechat_channel.jpg || fab fa-weixin</span><br><span class="line">  RSS: /atom.xml || fa fa-rss</span><br></pre></td></tr></tbody></table></figure>

<p>效果如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210104030713.png"></p>
</li>
<li><p>和侧边栏的联系方式显示在一起</p>
<p>修改主题配置文件中的 <code>social</code> 项：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">social:</span><br><span class="line">  ...</span><br><span class="line">  RSS: /atom.xml || fa fa-rss</span><br></pre></td></tr></tbody></table></figure>

<p>效果如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210104030940.png"></p>
</li>
<li><p>（不太推荐，因为和侧边栏动画无法统一）显示在侧边栏中部</p>
<p>修改 <code>\themes\next\layout\_partials\sidebar\site-overview.njk</code></p>
<p>在 <code>{%- if theme.site_state %}</code> 前新增</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">...</span><br><span class="line">{% if theme.rss %}</span><br><span class="line">   &lt;div class="feed-link motion-element"&gt;</span><br><span class="line">     &lt;a href="{{ url_for(theme.rss) }}" rel="alternate"&gt;</span><br><span class="line">       &lt;i class="fa fa-rss"&gt;&lt;/i&gt;</span><br><span class="line">       RSS</span><br><span class="line">     &lt;/a&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">{% endif %}</span><br><span class="line"></span><br><span class="line">{%- if theme.site_state %}</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure>

<p>然后在主题配置文件中添加</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">rss: /atom.xml</span><br></pre></td></tr></tbody></table></figure>

<p>效果如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210104031356.png"></p>
</li>
</ol>
<p>修改完后需要刷新，此时查看 public 文件夹中应该正确生成 atom.xml。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">hexo clean&amp;&amp;hexo g</span><br></pre></td></tr></tbody></table></figure>

<h2 id="显示运行时间"><a href="#显示运行时间" class="headerlink" title="显示运行时间"></a>显示运行时间</h2><p>参考文章：<a href="https://yansheng836.github.io/article/50902a4.html">hexo+yilia添加网站运行时间，ICP备案信息，设定站点建立时间 | 荷塘月色的博客</a></p>
<p>在 <code>source\_data\footer.njk</code> 中添加：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!--《添加网站运行时间 --&gt;</span><br><span class="line">&lt;!--&lt;br/&gt;--&gt;</span><br><span class="line">&lt;span id="timeDate"&gt;载入天数...&lt;/span&gt;&lt;span id="times"&gt;载入时分秒...&lt;/span&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var now = new Date();</span><br><span class="line"></span><br><span class="line">    function createtime() {</span><br><span class="line">        var grt = new Date("07/25/2019 12:00:00"); //此处修改你的建站时间或者网站上线时间 </span><br><span class="line">        now.setTime(now.getTime() + 250);</span><br><span class="line">        days = (now - grt) / 1000 / 60 / 60 / 24;</span><br><span class="line">        dnum = Math.floor(days);</span><br><span class="line">        hours = (now - grt) / 1000 / 60 / 60 - (24 * dnum);</span><br><span class="line">        hnum = Math.floor(hours);</span><br><span class="line">        if (String(hnum).length == 1) {</span><br><span class="line">            hnum = "0" + hnum;</span><br><span class="line">        }</span><br><span class="line">        minutes = (now - grt) / 1000 / 60 - (24 * 60 * dnum) - (60 * hnum);</span><br><span class="line">        mnum = Math.floor(minutes);</span><br><span class="line">        if (String(mnum).length == 1) {</span><br><span class="line">            mnum = "0" + mnum;</span><br><span class="line">        }</span><br><span class="line">        seconds = (now - grt) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);</span><br><span class="line">        snum = Math.round(seconds);</span><br><span class="line">        if (String(snum).length == 1) {</span><br><span class="line">            snum = "0" + snum;</span><br><span class="line">        }</span><br><span class="line">        document.getElementById("timeDate").innerHTML = " 本站已安全运行 " + dnum + " 天 "; //去掉了一个分隔符竖杠，因为用了不算子，已经自动做了换行分割</span><br><span class="line">        document.getElementById("times").innerHTML = hnum + " 小时 " + mnum + " 分 " + snum + " 秒";</span><br><span class="line">    }</span><br><span class="line">    setInterval("createtime()", 250);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;!-- 添加网站运行时间》 --&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>即参考文章中的「硬性配置」。</p>
<p>另外参考文章中有所谓「灵活配置」，将开关和建站时间设定提取成主题配置文件的配置项。但亲测使用灵活配置还得修改主题配置文件夹，修改放在全局配置文件夹的 <code>footer.njk</code> 不生效，不符合我们迁移时说的「不修改主题文件夹」的思想。</p>
<p>还有就是。我以为判断运行时间是会有更高级的方法，比如调用什么接口测试你的网站是啥时候开的，什么时候第一次部署的什么的，没想到是手工设置，和我的设想还是有点出入。。。</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>参考文章：<a href="https://www.zhyong.cn/posts/fc22/">hexo-next 添加文章置顶功能和评分功能等 | YouForever</a></p>
<p>在主题配置文件中添加</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">rating:</span><br><span class="line">  enable: true</span><br><span class="line">  id:</span><br><span class="line">  color:  "#fc6423"</span><br></pre></td></tr></tbody></table></figure>

<p>其中的 id，需要到 <a href="https://widgetpack.com/">widgetpack</a> 新建一个账号，新建完在左上角有显示。</p>
<p>建议配置评分方式，侧栏 &gt; Rating &gt; Setting，建议用 IP address 或 Device (cookie)，免登录。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210104032640.png"></p>
<h2 id="markdown-emoji"><a href="#markdown-emoji" class="headerlink" title="markdown emoji"></a>markdown emoji</h2><p>参考文章：</p>
<ul>
<li><a href="https://github.com/crimx/hexo-filter-github-emojis">crimx/hexo-filter-github-emojis: github emojis for hexo!</a></li>
<li><a href="https://spacefan.github.io/2018/06/30/hexo-emoji/">Hexo 博客使用 emoji 表情 | Home</a></li>
</ul>
<p>安装：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm i hexo-filter-github-emojis</span><br></pre></td></tr></tbody></table></figure>

<p>在全局配置文件中新增：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">githubEmojis:</span><br><span class="line">  enable: true</span><br><span class="line">  className: github-emoji</span><br><span class="line">  inject: true</span><br><span class="line">  #unicode: true #这个参数我也不知道加不加，出问题再说</span><br><span class="line">  styles:</span><br><span class="line">  customEmojis:</span><br></pre></td></tr></tbody></table></figure>

<p>修改完之后需要刷新。</p>
<p>不过，对于目前我的浏览器这个插件有个小 bug：</p>
<p> 目前的效果：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210113073831.png"></p>
<p>看起来不错。其实还有一个狗头：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210113073930.png"></p>
<p>只要选中就出现了。不知道是插件的效果还是 github 表情本身就有这个效果（我没用过不知道），挺好玩。。。但这个效果是在干净的 edge 上才能显示出来，在我配置过字体 stylus 的 centbrowser 这里就出问题了：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210113074220.png"></p>
<p>我想暂时先关掉这个变来变去的彩蛋，只显示一种狗头就好了，然而找不到方法，就先不管了，反正停掉一个单一网页的字体优化就一个选框的事。</p>
<p>我也试了一下另一个插件<a href="https://github.com/theme-next/hexo-filter-emoji">theme-next/hexo-filter-emoji: 🎉 GitHub emojis for Hexo!</a>，也能生效，但会出问题，无论我换不换字体，不选择时的狗头都出不来，只有选中时候的狗头才出现，这就属于「不能用」的情况了。</p>
<h2 id="修改正文字体大小"><a href="#修改正文字体大小" class="headerlink" title="修改正文字体大小"></a>修改正文字体大小</h2><p>感觉正文有一丢丢大。不过按照 Next 主题配置文件内的 fonts 属性配置（可参考 <a href="https://theme-next.js.org/docs/theme-settings/miscellaneous.html?highlight=fonts+customization">Misc Theme Settings | NexT</a>），发现没法单独修改正文字体的大小。</p>
<p>后来偶然发现开调试的时候，正文的字体大小是 1.125em：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210217072142.png"></p>
<p>对应的是 <code>$font-size-large</code> 这个属性（参考 <a href="https://blog.csdn.net/dpdpdppp/article/details/102387532">hexo(Next主题)修改文字大小_dpdpdppp的博客-CSDN博客</a>）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">// Font size</span><br><span class="line">$font-size-base           = 1em;</span><br><span class="line">$font-size-base           = unit(hexo-config('font.global.size'), em) if hexo-config('font.global.size') is a 'unit';</span><br><span class="line">$font-size-smallest       = .75em;</span><br><span class="line">$font-size-smaller        = .8125em;</span><br><span class="line">$font-size-small          = .875em;</span><br><span class="line">$font-size-medium         = 1em;</span><br><span class="line">$font-size-large          = 1.125em;</span><br><span class="line">$font-size-larger         = 1.25em;</span><br><span class="line">$font-size-largest        = 1.375em;</span><br></pre></td></tr></tbody></table></figure>

<p>于是，修改主题配置文件，取消 <code>custom_file_path</code> 代码块中的 <code> variable: source/_data/variables.styl</code> 这行注释。然后在 <code>source/_data/</code>中新建 <code>variables.styl</code>，添加：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$font-size-large = 1.05em</span><br></pre></td></tr></tbody></table></figure>

<p>即可。</p>
<p>但这时又发现标题的字体大小不够了。。。这回没辙了，标题大小单独写死在主题中没法覆盖（优先级仅次于带 $ 号的全局字体属性比如上面这个，高于 h1 这种标签，所以改 h1 也不成），除非修改主题文件夹中某个文件的 <code>.posts-expand .post-title</code> 这一段属性，算了算了。</p>
<h2 id="谷歌百度搜索收录"><a href="#谷歌百度搜索收录" class="headerlink" title="谷歌百度搜索收录"></a>谷歌百度搜索收录</h2><p>参考文章：</p>
<ul>
<li><a href="https://www.jianshu.com/p/f8ec422ebd52">Hexo博客提交百度和Google收录 - 简书</a></li>
<li><a href="http://www.yuan-ji.me/Hexo-%E4%BC%98%E5%8C%96%EF%BC%9A%E6%8F%90%E4%BA%A4sitemap%E5%8F%8A%E8%A7%A3%E5%86%B3%E7%99%BE%E5%BA%A6%E7%88%AC%E8%99%AB%E6%8A%93%E5%8F%96-GitHub-Pages-%E9%97%AE%E9%A2%98/">Hexo 优化：提交 sitemap 及解决百度爬虫无法抓取 GitHub Pages 链接问题 | JI’s Blog</a></li>
</ul>
<h3 id="谷歌"><a href="#谷歌" class="headerlink" title="谷歌"></a>谷歌</h3><p>谷歌最简单，而且也不需要实名。而且。。。听说只要时间一长，google 的爬虫会自动把你的页面爬进去，根本不用申请。不过我比较猴急，我现在！马上！就要在谷歌娘身体里面看到我的痕迹（滴嘟滴嘟</p>
<ol>
<li><p>安装谷歌站点地图生成工具</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm i hexo-generator-sitemap</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>在全局配置文件中添加</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#hexo sitemap</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>刷新，此时查看 public 文件夹中应该正确生成 sitemap.xml</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">hexo clean&amp;&amp;hexo g</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>访问<a href="https://search.google.com/search-console/">欢迎使用 Google Search Console</a>，除非绑定了自己的域名，否则在网址前缀中输入博客主页 url（带 https），即 <code>https://xxx.github.io</code>。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210104051916.png"></p>
</li>
<li><p>然后谷歌会给你一个文件。用文本编辑器打开，在最开头加上</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">layout: false</span><br><span class="line">sitemap: false</span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure>

<p>然后把这个文件放到 hexo 的 <code>_posts</code> 文件夹中，部署 <code>hexo d -g</code>。</p>
</li>
<li><p>大概要过段时间（因为一个我们用的 github 静态博客同步没那么快，二个谷歌本身就没那么快，我大概等了一个小时左右），此时再进这里就会进入 Google Search Console 网站管理界面了。</p>
</li>
<li><p>（可选）趁等待谷歌反应过来的间隙，继续优化一下。使用 nofollow，大概意思是自动判断出索引黑名单，不爬取黑名单的页面。</p>
<p>安装</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm i hexo-autonofollow</span><br></pre></td></tr></tbody></table></figure>

<p>在全局配置文件中添加</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">nofollow:</span><br><span class="line">    enable: true</span><br><span class="line">    exclude: # 不添加 nofollow 标签的连接</span><br><span class="line">    - exclude1.com</span><br><span class="line">    - exclude2.com</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>（可选）添加 rebot.txt。大概意思是使用规则判断索引黑白名单。在 <code>source/</code>文件夹下新建一个 rebots.txt 文件，放入以下内容：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"># hexo robots.txt</span><br><span class="line">User-agent: *</span><br><span class="line">Allow: /</span><br><span class="line">Allow: /archives/</span><br><span class="line"></span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /js/</span><br><span class="line">Disallow: /css/</span><br><span class="line">Disallow: /fonts/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /fancybox/</span><br><span class="line"></span><br><span class="line">Sitemap: http://xxx.github.io/sitemap.xml</span><br><span class="line">Sitemap: http://xxx.github.io/baidusitemap.xml</span><br></pre></td></tr></tbody></table></figure>

<p>然后刷新，部署。</p>
</li>
<li><p>在索引-&gt;站点地图-&gt;输入站点地图地址，填入 <code>sitemap.xml</code>，有可能马上提示成功，也可能提示失败。失败的话估计要等个半天一天再过来看，如果还失败就重新提交，我是提交到第三次就显示成功了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210104052701.png"></p>
</li>
<li><p>在 google 中输入 <code>site:xxxx.github.io</code>，如果显示搜不到，稍安勿躁，估计又是要等个一两天半周的。</p>
</li>
<li><p><strong>（21.1.21）</strong>后续我更新了一下网站结构，十多天过去了，google 没读取我新的站点地图，得手动刷新。方法是到覆盖率中，找到任意一个 404 的网页，点击已解决。</p>
</li>
</ol>
<h3 id="百度（存疑）"><a href="#百度（存疑）" class="headerlink" title="百度（存疑）"></a>百度（存疑）</h3><p>我自己没有亲自实验过，但听说 baidu 搜索引擎是没办法爬 <code>github.io</code> 的，说是百度爬的太多被 github 官方 ban 了。解决方法有三种：</p>
<ul>
<li>双线部署。部署到 coding 或者 gitlab 上。coding 被腾讯收购了，速度有保障，但要实名啥的，好像还要域名；gitlab 不需要手机号啥的，但访问速度比 github 还要不乐观。可以参考 <a href="https://zhuanlan.zhihu.com/p/111796666">Hexo 双线部署到 Coding 和 GitHub 提升访问速度 - 知乎</a>。</li>
<li>镜像部署，我现在用的是这种。参考<a href="https://zhuanlan.zhihu.com/p/111773896">如何让百度收录 GitHub Pages 个人博客 - 知乎</a>。部署到 <a href="https://vercel.com/">Vercel</a> 上，当检测到 github 仓库更新，vercel 这边也会自动重新拉取并部署。自带 cdn 也能保证速度，部署起来比前一种方便，缺点就是每个月只有 20G 访问流量，目前对于我这种小透明博客也够用了；还有就是注册的时候还是要用到手机号的。</li>
<li>使用主动推送。即部署时通过插件主动提交网页给搜索引擎。</li>
</ul>
<p><strong>前两种方法统称为使用镜像站点。使用镜像站点的方法和使用主动推送的方法是有一定冲突的。因为主动推送推送给搜索引擎的域名是以全局配置文件开头的 <code>url</code> 参数为准，而 <code>url</code> 参数中只能写一个域名，所以此时只能选谷歌 / 百度其中一个引擎做主动推送。同时，使用镜像站还需要使用「侵入式」方法修改站点地图模块生成的 url，否则其中一个站点地图就会出错。</strong>打个比方，全局配置文件开头的 <code>url</code> 我们写的是 github.io 的域名，也就是主站域名。此时生成的给百度的站点目录和主动推送域名也都是关于主站的而不是镜像站的，但百度那边我们填的是镜像站的域名，这就乱套了。另外将 <code>url</code> 修改为镜像站域名，直觉告诉我，未来有可能会引发什么其他的依赖于 url 插件的 bug。唯一一个能让镜像站和主动推送完美共存的方法就是通过 cname 链接到同一个自己的域名上，这就超出本文的研究范围了，不做探讨。</p>
<h4 id="不使用镜像站，仅使用主动推送提交页面"><a href="#不使用镜像站，仅使用主动推送提交页面" class="headerlink" title="不使用镜像站，仅使用主动推送提交页面"></a>不使用镜像站，仅使用主动推送提交页面</h4><ol>
<li><p>打开<a href="https://ziyuan.baidu.com/">百度搜索资源平台</a>，注册啥的我就略过了，注册完毕点击普通收录，在输入网站界面，协议选择 https 并输入我们的 <code>xxx.github.io</code> 域名，站点属性这里看实际情况选几个分类，然后验证网站这里选文件验证，下载。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210124015247.png"></p>
</li>
<li><p>和谷歌那边一样，获得的文件用文本编辑器打开，在最开头加上</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">layout: false</span><br><span class="line">sitemap: false</span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure>

<p>然后把这个文件放到 hexo 的 <code>_posts</code> 文件夹中，部署 <code>hexo d -g</code>。</p>
</li>
<li><p>同样，和 google 那边一样，过段时间再回来再点完成验证。实测百度这里的响应时间要比谷歌快得多，但。。。点完完成验证多半会进入 https 认证界面告诉你验证失败，这时点击再次验证，多半还会告诉你验证失败，不用管，估计过半天回来就成功了，好家伙，原来比谷歌快的真相是 https 验证耗得时间放到这里来了。。。不过，好消息是，我们不用等待它 https 验证完毕就可以下一步了。</p>
</li>
<li><p>配置主动推送模块。有两种选择，一个是 <a href="https://github.com/huiwang/hexo-baidu-url-submit">hexo-baidu-url-submit</a>，这个模块比较老但挺稳定，只用于百度主动推送；另一个是 <a href="https://github.com/cjh0613/hexo-submit-urls-to-search-engine">hexo-submit-urls-to-search-engine</a>，能同时用于 google / 必应的推送，但我第一次搞就报错了。。。所以我现在只用前一个。</p>
<p>在刚刚 sitemap 位置的旁边，有个 api 提交，下面就有个接口调用地址，把地址中 <code>token=</code> 后面的内容记下来。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210124025621.png"></p>
<p>安装百度主动推送插件</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm i hexo-baidu-url-submit</span><br></pre></td></tr></tbody></table></figure>

<p>在全局配置文件中新增：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">baidu_url_submit:</span><br><span class="line">  count: 100                 # 提交最新的多少个链接</span><br><span class="line">  host:                      # 在百度站长平台中添加的域名</span><br><span class="line">  token:                     # 秘钥</span><br><span class="line">  path: baidu_urls.txt</span><br></pre></td></tr></tbody></table></figure>

<p>并修改全局配置文件中 deploy 对应代码块，将原来的：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:xxx/xxx.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></tbody></table></figure>

<p>改成</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  - type: git</span><br><span class="line">    repository: git@github.com:xxx/xxx.github.io.git</span><br><span class="line">    branch: master</span><br><span class="line">  - type: baidu_url_submitter</span><br></pre></td></tr></tbody></table></figure>

<p>重新部署即可。</p>
</li>
</ol>
<p><strong>（21.2.26 更新）</strong> 照上面的一通做下来：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210226061535.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210226061627.png"></p>
<p>啊这。。。我明明提交的是后面这个网站呀？</p>
<h4 id="使用镜像站"><a href="#使用镜像站" class="headerlink" title="使用镜像站"></a>使用镜像站</h4><ol>
<li><p>两种镜像站只简单写写我用的这种，也就是第二种。打开 <a href="https://vercel.com/">Vercel</a>，注册一个账号后关联自己的 github，导入博客的 repo，后面部署的选项维持默认即可，注意 <code>FRAMEWORK PRESET</code> 这里不要选择 hexo，维持 other 即可。部署需要一定时间，部署完一切正常的话，点开 view build logs 应该是这样的：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210124021027.png"></p>
<p>此时 domains 那里应该有三个域名，挑其中一个域名记着待会备用。</p>
</li>
</ol>
<p>2-4. 参考不使用镜像站时的 1-3 步，差别就是填入的域名从 <code>xxx.github.io</code> 改为刚刚我们获得的镜像站域名。</p>
<ol start="5">
<li><p>安装百度站点地图生成工具</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm i hexo-generator-baidu-sitemap</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>在全局配置文件中添加</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#hexo sitemap</span><br><span class="line">sitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>此时就需要进行抉择：</p>
<ul>
<li>修改百度站点地图生成工具代码，使其不依赖全局配置文件 url 独立生成镜像站 url 的站点配置。不需要修改全局配置文件的 url，只能兼容谷歌的主动推送工具。</li>
<li>修改全局配置文件 url 为镜像站 url；修改谷歌站点地图生成工具代码，使其不依赖全局配置文件 url 独立生成主站 url 的站点配置。只能兼容百度的主动推送工具，修改全局配置文件 url 可能未来会出现未知 bug。</li>
</ul>
<p>参考<a href="https://zhuanlan.zhihu.com/p/31411755">修改hexo sitemap 生成插件中的链接模板 - 知乎</a>。</p>
<ul>
<li><p>修改百度站点地图生成工具代码：</p>
<p>定位到 <code>hexo\node_modules\hexo-generator-baidu-sitemap</code>，打开 <code>baidusitemap.ejs</code>，找到</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">&lt;loc&gt;&lt;%- encodeURI(url + post.path) %&gt;&lt;/loc&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>修改为类似于</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">&lt;loc&gt;&lt;%- encodeURI("https://xxx.github.io/" + post.path) %&gt;&lt;/loc&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>即可。</p>
</li>
<li><p>修改谷歌站点地图生成工具代码:</p>
<p>谷歌这边就不用侵入式修改了，因为这个插件支持配合模板使用。</p>
<p>下载<a href="https://raw.githubusercontent.com/hexojs/hexo-generator-sitemap/master/sitemap.xml">模板</a>，重命名为 sitemap_template.xml。放入 hexo 根目录。</p>
<p>找到以下内容：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">&lt;loc&gt;{{ post.permalink | uriencode }}&lt;/loc&gt;</span><br><span class="line"></span><br><span class="line">&lt;loc&gt;{{ config.url | uriencode }}&lt;/loc&gt;</span><br><span class="line"></span><br><span class="line">&lt;loc&gt;{{ tag.permalink | uriencode }}&lt;/loc&gt;</span><br><span class="line"></span><br><span class="line">&lt;loc&gt;{{ cat.permalink | uriencode }}&lt;/loc&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>依次修改为类似于下面的内容：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">&lt;loc&gt;{{ "https://xxx.github.io/" + post.path | uriencode }}&lt;/loc&gt;</span><br><span class="line"></span><br><span class="line">&lt;loc&gt;https://xxx.github.io/&lt;/loc&gt;</span><br><span class="line"></span><br><span class="line">&lt;loc&gt;{{ "https://xxx.github.io/" + tag.path | uriencode }}&lt;/loc&gt;</span><br><span class="line"></span><br><span class="line">&lt;loc&gt;{{ "https://xxx.github.io/" + cat.path | uriencode }}&lt;/loc&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>在全局配置文件中修改相应位置：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#hexo sitemap</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">  template: ./sitemap_template.xml</span><br></pre></td></tr></tbody></table></figure>

<p>重新部署即可。</p>
</li>
</ul>
</li>
<li><p>刷新，此时查看 public 文件夹中应该正确生成 baidusitemap.xml（和 sitemap.xml），可打开查看域名是否正确。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">hexo clean&amp;&amp;hexo g</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>nofollow 和 robots.txt 之前部署谷歌收录的时候部署过了，在百度这里通用（除了 robots.txt 中百度站点地图的地址可能要改成镜像站地址），没有进行谷歌收录部署的可以往上翻谷歌部署的第 7、8 步；直接部署站点地图就好了。点站点管理页面左侧侧边栏的资源提交 -&gt; 普通提交 -&gt; sitemap，输入 <code>[镜像站名]/baidusitemap.xml</code>，提交即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210124023841.png"></p>
</li>
<li><p>（可选，仅 url 设置为镜像站域名时可用）配置主动提交。参考不使用镜像站时的第 4 步，区别只是全局配置中的相应 host 参数改为镜像站的。</p>
</li>
<li><p>（可选）许多参考文章还提到一个自动推送。但百度去年改过依次规则，域名已备案的才可使用自动推送，且相关接口（swig 文件）业已从 NexT 主题中删除。如有需要的可自己研究，这里不涉及。</p>
</li>
</ol>
<h2 id="加载速度优化"><a href="#加载速度优化" class="headerlink" title="加载速度优化"></a>加载速度优化</h2><h3 id="快速连接技术"><a href="#快速连接技术" class="headerlink" title="快速连接技术"></a>快速连接技术</h3><p>照抄文章：<a href="https://lvxuefei.top/%E5%88%A9%E7%94%A8Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89-%E4%BC%98%E5%8C%96-%E5%90%84%E7%A7%8Dtips%E3%80%81%E9%BB%91%E7%A7%91%E6%8A%80%EF%BC%8C%E4%B8%8D%E6%96%AD%E6%9B%B4%E6%96%B0/">利用 Hexo+Next 搭建个人博客（三）—— 优化 (各种 tips、黑科技，不断更新) | 槐雪</a></p>
<blockquote>
<p>什么是快速连接技术，下面是其 <a href="https://github.com/GoogleChromeLabs/quicklink">GitHub 源地址</a>上给出的解释：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">通过在空闲时间预取视区内链接来加快后续页面加载速度</span><br></pre></td></tr></tbody></table></figure>

<p>按我的理解应该是在我们访问博文页面的时候，如果博文位于视区内的部分有网页链接，那么浏览器在空闲时会预加载该链接对应的页面以达到加快后续的访问速度的目的。</p>
</blockquote>
<p>安装</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm i quicklink</span><br></pre></td></tr></tbody></table></figure>

<p>在主题配置文件中添加</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">quicklink:</span><br><span class="line">  enable: true</span><br></pre></td></tr></tbody></table></figure>

<h3 id="使用-Gulp-压缩静态资源"><a href="#使用-Gulp-压缩静态资源" class="headerlink" title="使用 Gulp 压缩静态资源"></a>使用 Gulp 压缩静态资源</h3><p>参考文章：<a href="http://yifanstar.top/2020/07/19/hexo-blog-creat/">Hexo + GitHub Pages 搭建个人博客及 NexT 主题配置 | Star’s Tech Blog</a></p>
<p>看起来有点复杂。。。我得想办法先确认这些加速手段有用再继续，先占坑。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 入门</title>
    <url>/hexo-ru-men/</url>
    <content><![CDATA[<blockquote>
<p>罗马不是一日建成的。</p>
</blockquote>
<p>但我的博客可以！<span class="github-emoji"><span>🐶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f436.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
<p>0202 年了，要写博客选择很多，远古时期发展来的 wordpress 配置相对复杂，但发展那么多年是这里面最成熟的选择了；年中我为了续费阿里云学生机曾经快速过过一遍主页那些小教程，玩了一下里面的 vuepress 感觉也不错；还有好像挺多大佬用 typecho 的？不过作为萌新，先从当前最成熟最简单的开始，就 hexo + Next 了。</p>
<p>hexo 网上教程烂大街了，所以步骤我介绍的很简单，详细步骤参见相应的参考文章，我只介绍大概步骤和一些坑。（说是最成熟最简单，我这个跳坑大王还是遇到不少坑。</p>
<p>使用的软件版本：</p>
<p>nodejs 和 hexo 运行平台：Ubuntu 19.10（话说我现在才发现这个系统过期导致 apt update 失灵，等我解决了还可以水一篇文章）</p>
<p>nodejs（linux）：v14.6.0 <code>nodejs -v</code></p>
<p>hexo（linux）：5.2.0 <code>cd hexo</code> <code>hexo -v</code></p>
<p>hexo-next（linux）：7.8.0（可以在 <code>themes/next/package.json</code>内查到）</p>
<p><a href="https://github.com/Molunerfinn/PicGo">pic-go</a>（windows）：2.3.0-beta.3</p>
<p>另外先附上我们两个主角的官方中文文档：</p>
<ul>
<li><a href="https://hexo.io/zh-cn/docs/">hexo 文档</a></li>
<li><a href="https://theme-next.iissnan.com/getting-started.html">NexT 开始使用</a></li>
</ul>
<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>参考文章：</p>
<ul>
<li><a href="https://blog.ichr.me/post/set-up-hexo-on-github-page/">Github Page + Hexo 免费搭建个人博客教程</a></li>
<li><a href="http://blog.fujian.show/2019/05/11/hexo-github-build-blog/">史上最完整教程！Hexo + GitHub page免费搭建个人博客</a></li>
</ul>
<ol>
<li><p>装 nodejs 和 git</p>
</li>
<li><p>全局安装 hexo，新建个目录作为 <strong>hexo 根目录</strong>，在里面初始化 hexo，安装组件，生成文件。未来所有以 hexo 和 npm 开头的命令都需要在 hexo 文件夹下执行。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br><span class="line">mkdir hexo &amp;&amp; cd hexo</span><br><span class="line">hexo init</span><br><span class="line">npm install</span><br><span class="line">hexo g</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>装 NexT 主题（许多教程里面的 next 还用的是 iissnan/hexo-theme-next 的这个旧版，用旧版运行时会报错，且运行的时候有提示让你更新新版）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next.git themes/next</span><br></pre></td></tr></tbody></table></figure>

<p>修改 hexo 根目录中的 <code>_config.yml</code>，将其中的 theme 改为 next。（注意，如果此处修改后运行报错参考<a href="https://www.jianshu.com/p/861307262429">搭建博客遇到Plugin load failed: %s hexo-theme-landscape错误</a>删除 <code>package.json</code> 中原主题 landscape 的依赖即可）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></tbody></table></figure>

<p>此时就可以打开本地预览看看效果：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>建文章。本地预览中显示的这篇文章 <code>source/_posts/hello_world.md</code> 中。第一篇文章可以修改这个文件，也可以删掉重新建一个。通过终端建立新文章的方法参考<a href="https://hexo.io/zh-cn/docs/writing.html">写作</a>：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">hexo new post &lt;title&gt; title.md</span><br></pre></td></tr></tbody></table></figure>

<p>文件名称（也就是 title.md）不影响在博客中显示的效果。但 title 影响。</p>
<p>这么建文章有个问题。。。我之前写的日记，我想按我日记上的日期显示在博客里咋整？</p>
<p>那我们可以手动对 <code>source/_posts</code> 里的 md 文件进行一些修改。</p>
<p>原来写的日记，如果是普通的文本请改成 markdown 格式（这里不再展开），好在我原来写的日志就是 md 格式的，仿照 <code>hello-world.md</code> 在全文前面加上代表 title 和初始日期的代码块就行了。这个代码块里面还可以指定本文的分类、tag、是否置顶等属性，这个我们之后再说。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201220025108.png"></p>
<p>另外，之前文章的总标题我都用一级标题的形式书写的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201220025319.png" alt="比如这样"></p>
<p>而刚刚代码块里面的 title 在文章中显示出来的大小和一级标题一模一样，看起来重复了。所以还要把一级标题删掉，直接放到 title 上。</p>
</li>
<li><p>修整一下 hexo 全局配置文件 <code>_config.yml</code> 和 next 主题的配置文件 <code>themes/next/_config.yml</code>中的相应项目。全局配置文件中，网站基本描述（修改这里的时候注意，这些参数原来冒号后面跟的是单引号，别当双引号看了，最好一开始就直接删掉那些引号，这里的参数值就算是汉字也不需要用引号括起来）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Bao's 备忘录</span><br><span class="line">subtitle: </span><br><span class="line">description: 玩点好玩的</span><br><span class="line"># keyword:</span><br><span class="line">author: zbttl</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: Asia/Shanghai</span><br></pre></td></tr></tbody></table></figure>

<p>可引用外部图片</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></tbody></table></figure>

<p>next 主题配置文件中，主页需要需要启用菜单功能（我这里多启用了关于、标签、种类三个功能）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  tags: /tags/ || fa fa-tags</span><br><span class="line">  categories: /categories/ || fa fa-th</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line">  #schedule: /schedule/ || fa fa-calendar</span><br><span class="line">  #sitemap: /sitemap.xml || fa fa-sitemap</span><br><span class="line">  #commonweal: /404/ || fa fa-heartbeat</span><br><span class="line">  about: /about/ || fa fa-user</span><br></pre></td></tr></tbody></table></figure>

<p>（多嘴一句，后面美化主题新加功能的时候少不了折腾这两个文件，特别是 next 主题的配置文件，英语过关的话认真看里面已经写了很多插件功能了，装好模块删掉注释就能开）</p>
</li>
<li><p>把自己之前的一些文章转换好在本地看完效果后，发布。本来是想发布到自己的服务器和域名上，想想算了。。。毕竟那个东西，是用来干一些（咳咳</p>
<p>那就托管到 github.io 好了。在 github 上建一个名为你的用户名 .github.io 的仓库。放（或者建）一个 ssh key 到 github 里面。（玩 vps 的 ssh key 这玩意应该人手一个吧）</p>
<p>搞定以后再次修改全局配置文件 <code>_config.yml</code>的相应内容：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"># 刚刚建的仓库的域名</span><br><span class="line">url: https://xxx.github.io/</span><br><span class="line">root: /</span><br><span class="line">#permalink: :year/:month/:day/:title/</span><br><span class="line">permalink: :title/ #使url简洁，方便搜索引擎收录</span><br><span class="line">...</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:xxx/xxx.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></tbody></table></figure>

<p>repository 这项不清楚的话，打开你的项目下面，点击那个绿色的下载按钮 code-&gt;ssh</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201220033031.png"></p>
<p>配置 git 用户和邮箱：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">git config --global user.name "Your Name"</span><br><span class="line">git config --global user.email "email@example.com" </span><br></pre></td></tr></tbody></table></figure>

<p>把自己 ssh key 中的私钥 <code>id_rsa</code> 放到自己 linux 用户目录的 <code>.ssh</code> 文件夹里面，改权限为 0600。</p>
<p>安装 hexo-github 插件</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git </span><br></pre></td></tr></tbody></table></figure>

<p>提交！</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></tbody></table></figure>

<p>一会儿访问 xxx.github.io 就能看到自己的博客了。</p>
</li>
</ol>
<h2 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h2><p>参考文章：</p>
<ul>
<li><a href="https://blog.csdn.net/tangyb828/article/details/110389851">PicGo+GitHub 你的最佳免费图床选择！</a></li>
<li><a href="https://blog.csdn.net/weixin_43571641/article/details/106448498">[教程] PicGo+GitHub 免费图床搭建</a></li>
</ul>
<p>其实凑合一点存在项目内也不是不行。不过我的文章先在另一台设备的 typora 里面写完再上传到博客的，这样显然不太行。</p>
<p>如果不考虑国内访问，存在 imgur 就可以了，还有 shareX 这种工具能够方便的截图上传。</p>
<p>如果坚信自己的图片能够过审核！那可以存在 sm.ms。（我本来打算存那儿的，结果就那么几张为了实验找出来的图我还给敏感部位打了码最后还是被 delete 了两张）</p>
<p>最后决定先存 github 吧。虽然 github 的 raw.githubusercontent.com 今年由于某个原因变得不稳定了起来，但偶尔还能用，而且还有 cdn 加速勉强撑着。和上面两个图床相比还有一个优势就是上传上去的图片文件名不会变。未来无论是重新下回来还是上传到其他也不会改文件名的图床都会方便一些（批量改域名就可以）。</p>
<p>如果有 vps 而且流量多的话，可以考虑在 vps 中开一个图床，这里就不详细探究了。</p>
<ol>
<li><p>在 github 新建一个默认创建 README.md 的 public 仓库。（话说我有点害怕 github 来查我水表，于是我新开了了一个小号）</p>
</li>
<li><p>获取一个 github Personal access tokens，只需要 repo 权限。</p>
</li>
<li><p>在 picgo 中填写相应参数。坑来了：现在已经是 0202 年了，新项目没有 master 分支这个说法了。。。我踩进去半天才反应过来。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201218041918.png"></p>
<p>仓库名填 [ 账号名 ]/[ 仓库名 ]。</p>
<p>自定义域名，可以用 github 源 url。不排除未来 github 的源 url 再次更改，没关系，项目里面不是默认有个 README.md 吗？点开他，下面有个 raw，点开以后显示的域名去掉 README.md 就是我们要往自定义域名填的东西。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">https://raw.githubusercontent.com/[用户名]/[仓库名]/[分支名]</span><br></pre></td></tr></tbody></table></figure>

<p>或者用加速 cdn <a href="https://www.jsdelivr.com/?docs=gh">jsdelivr</a>。version 这里填分支名。后面带上 README.md 访问一下就知道自己有没有改对 url 了。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/user/repo@version</span><br></pre></td></tr></tbody></table></figure>

<p><strong>（20.12.23 更新）</strong> 今天传图片的时候遇到问题了。传了一张 50k 的图片，在 typora 中没显示出来。用浏览器打开一看：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Package size exceeded the configured limit of 50 MB. Try https://github.com/zbpicture/picture/tree/main/img/iiHvIIn.png instead.</span><br></pre></td></tr></tbody></table></figure>

<p>问题是这个图片那么小是怎么超过 50M 的？而且后面又传了两个图片，没问题。打开 github，上面三张图片都在。</p>
<p>原因未知但有解决方法：参考<a href="https://blog.shiyunhong.com/3353.html">记一下JsDelivr踩的坑</a>。</p>
<p>把链接中的 main 改成 master 就能显示出来了。</p>
<p>问题和解决方法都一样神秘的说。</p>
<p><strong>(21.1.1 更新)</strong> 发现一张图片码没打全，去 github 那边手动删掉重新上传，但发现 cdn 那边还是没有更新的样子？看来只能手动更新了。参考文章：<a href="https://www.cnblogs.com/UncleZhao/p/13753723.html">jsdelivr CDN 使用和缓存刷新 - 易波叶平 - 博客园</a></p>
<p>打开那张图片的 url，将其中的</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/</span><br></pre></td></tr></tbody></table></figure>

<p>切换为</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">https://purge.jsdelivr.net/</span><br></pre></td></tr></tbody></table></figure>

<p>即可。</p>
</li>
</ol>
<h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><h3 id="添加标签和分类"><a href="#添加标签和分类" class="headerlink" title="添加标签和分类"></a>添加标签和分类</h3><p>参考文章：</p>
<ul>
<li><a href="https://www.zhihu.com/question/29017171">hexo 下的分类和表签无法显示，怎么解决？</a></li>
<li><a href="https://aiellochan.com/2018/02/13/hexo/Hexo-%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%A4%9A%E4%B8%AA-categories/">Hexo 一篇文章多个 categories</a></li>
</ul>
<p>添加相应的文件夹：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">hexo new page "tags"</span><br><span class="line">hexo new page "categories"</span><br></pre></td></tr></tbody></table></figure>

<p>然后在 <code>source/</code> 相应文件夹下会看到一个 <code>index.md</code>，打开在代码块里面新增一个 type，type 的值就放相应的功能名。如果你不知道相应的功能名叫什么的话，去 next 配置文件里面 menu 那个地方看，或者直接往上翻，我曾经提到过。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201220065728.png"></p>
<p>之后就可以在对应博文的代码块中加入 categories 和 tags 属性了。要注意，如果要设置多个标签，格式是这样的：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">tags：</span><br><span class="line">- tag1</span><br><span class="line">- tag2</span><br></pre></td></tr></tbody></table></figure>

<p><strong>（21.1.20 更新）</strong> 可以但不推荐的方法（虽然看起来显得简洁，但如果未来要使用 <a href="https://github.com/D0n9X1n/hexo-blog-encrypt">hexo-blog-encrypt</a> 来加密文章的话，这样写最后部署会报错，参见<a href="https://github.com/D0n9X1n/hexo-blog-encrypt/issues/163">安装后 hexo 部署报错 · Issue #163 · D0n9X1n/hexo-blog-encrypt</a>）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">tags: [tag1,tag2]</span><br></pre></td></tr></tbody></table></figure>

<p>但如果要设置多个种类，格式是这样的：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line"> - [category1]</span><br><span class="line"> - [category2]</span><br></pre></td></tr></tbody></table></figure>

<p>还要注意，此时如果你边开着本地预览边改，需要重启一遍 <code>hexo s</code> 才会生效。如果你更换了文章的 tag，还需要刷新（完全重新部署，这个命令很常用，接下来还会频繁用到）：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">hexo clean&amp;&amp;hexo g</span><br><span class="line">#新方法，嫌旧方法执行两个命令麻烦的时候使用，无法完全替代旧方法</span><br><span class="line">#hexo g -f</span><br></pre></td></tr></tbody></table></figure>

<p>注意 tags 和 categories 的大小写问题，建议做好约定以便区分，比如 categories 除了特定名词外固定首字母大写，其他小写；tags 除了固定名词外一律小写。如果不小心出现了大小写混淆导致刷新不完全的问题，参见 <a href="https://zbttl.github.io/hexo-jin-jie/">hexo 进阶</a>。</p>
<h3 id="添加火柴棒动态背景"><a href="#添加火柴棒动态背景" class="headerlink" title="添加火柴棒动态背景"></a>添加火柴棒动态背景</h3><p>参考文章：<a href="https://lvxuefei.top/%E5%88%A9%E7%94%A8Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89-%E4%BC%98%E5%8C%96-%E5%90%84%E7%A7%8Dtips%E3%80%81%E9%BB%91%E7%A7%91%E6%8A%80%EF%BC%8C%E4%B8%8D%E6%96%AD%E6%9B%B4%E6%96%B0/">利用 Hexo+Next 搭建个人博客（三）—— 优化 (各种 tips、黑科技，不断更新)</a>)</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cd themes/next</span><br><span class="line">git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest</span><br></pre></td></tr></tbody></table></figure>

<p>在主题配置文件中新增：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">canvas_nest:</span><br><span class="line">  enable: true			# 是否显示true|false</span><br><span class="line">  onmobile: true 		# 是否在移动端展示true|false</span><br><span class="line">  color: "120,120,120" 	# 线条的颜色（RGB表示）, 用 `,` 隔开</span><br><span class="line">  opacity: 0.5 			# 线条头透明度: 0~1</span><br><span class="line">  zIndex: -1 			# 用于控制线条所在层的位置, 默认:-1。值越大，显示的层面离用户越近。</span><br><span class="line">  count: 150			# 线条的总条数</span><br></pre></td></tr></tbody></table></figure>

<h3 id="添加鼠标点击特效"><a href="#添加鼠标点击特效" class="headerlink" title="添加鼠标点击特效"></a>添加鼠标点击特效</h3><p>有两种实现方法，第一种参考<a href="https://blog.csdn.net/qq_42889280/article/details/103087564">Hexo博客+Next主题鼠标点击特效</a>，是老版本在 <code>/themes/next/layout/_custom/custom.swig</code> 调用第三方 js，虽然新版本已经不存在 <code>/themes/next/layout/_custom/</code>这个文件夹了，但仍可以通过手工创建并在  <code>/themes/next/layout/_layout.swig</code> body 中用 include 引入生效。</p>
<p>但我更推荐新方法：</p>
<p>参考文章：<a href="https://dongguagua.gitee.io/archives/6f944b02.html">NexT 主题自定义样式</a></p>
<p>相比上面的旧方法，新方法热切换鼠标点击效果的时候本地预览不会突然崩掉。</p>
<p>在主题配置文件中找到 <code>custom_file_path:</code>，取消下面</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">bodyEnd: source/_data/body-end.swig</span><br></pre></td></tr></tbody></table></figure>

<p>这行的 # 号注释。</p>
<p>编辑（新建） <code>source/_data/body-end.swig</code>，加入下面的内容：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">{# 鼠标点击特效 #}</span><br><span class="line">{% if theme.cursor_effect == "fireworks" %}</span><br><span class="line">  &lt;script async src="/js/cursor/fireworks.js"&gt;&lt;/script&gt;</span><br><span class="line">{% elseif theme.cursor_effect == "explosion" %}</span><br><span class="line">  &lt;canvas class="fireworks" style="position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;" &gt;&lt;/canvas&gt;</span><br><span class="line">  &lt;script src="//cdn.bootcss.com/animejs/2.2.0/anime.js"&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script async src="/js/cursor/explosion.min.js"&gt;&lt;/script&gt;</span><br><span class="line">{% elseif theme.cursor_effect == "love" %}</span><br><span class="line">  &lt;script async src="/js/cursor/love.min.js"&gt;&lt;/script&gt;</span><br><span class="line">{% elseif theme.cursor_effect == "text" %}</span><br><span class="line">  &lt;script async src="/js/cursor/text.js"&gt;&lt;/script&gt;</span><br><span class="line">{% endif %}</span><br></pre></td></tr></tbody></table></figure>

<p>然后打开 <code>source/js</code>，新建 <code>cursor</code> 文件夹。进入其中用 wget 下载四个 js 文件，对应四种特效：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">wget https://cdn.jsdelivr.net/gh/zbpicture/picture@main/explosion.min.js</span><br><span class="line">wget https://cdn.jsdelivr.net/gh/zbpicture/picture@main/fireworks.js</span><br><span class="line">wget https://cdn.jsdelivr.net/gh/zbpicture/picture@main/love.min.js</span><br><span class="line">wget https://cdn.jsdelivr.net/gh/zbpicture/picture@main/text.js</span><br></pre></td></tr></tbody></table></figure>

<p>最后在主题配置文件中放入一行</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cursor_effect: text # fireworks：礼花 | explosion：爆炸 | love：浮出爱心 | text：浮出文字</span><br></pre></td></tr></tbody></table></figure>

<p>即可</p>
<p>才怪。你会发现除了 text 以为的特效都正常，但使用 text 时，什么都没发生？按下 f12，弹出这么个错误：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201219211715.png"></p>
<p>查了半天不知道什么问题，干脆大力出奇迹。在 <code>source/_data/body-end.swig</code> 最顶上加一行：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script type="text/javascript" src=" https://cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js"&gt;&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><del>搞定。</del></p>
<p><strong>(21.1.22 更新）</strong> 才怪。我们刚刚修改了 <code>source</code> 文件夹下的 <code>_data</code> 和 <code>js</code> 文件夹。但 hexo 的机制，会在部署时把 <code>source</code> 下开头不带下划线的文件夹文件都渲染了，<code>_data</code> 带下划线没事，<code>js</code> 文件夹的文件一渲染内容就全乱了，然后就会出错。解决方法是设置渲染 <code>skip_render</code>。参考文章：<a href="https://segmentfault.com/q/1010000003957602">Hexo编译文档时把JS给写乱了，请问怎么解决？ - SegmentFault 思否</a></p>
<p>修改全局配置文件，找到 <code>skip_render:</code>，设置值为：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">skip_render: js/**</span><br></pre></td></tr></tbody></table></figure>

<p>意思是渲染时跳过 <code>source/js</code> 下所有文件和文件夹。</p>
<h3 id="添加置顶"><a href="#添加置顶" class="headerlink" title="添加置顶"></a>添加置顶</h3><p>参考文章：<a href="https://www.cnblogs.com/lqerio/p/11117467.html">HEXO添加置顶功能</a></p>
<p>卸载旧模块安装新模块：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm uninstall hexo-generator-index</span><br><span class="line">npm install hexo-generator-index-pin-top</span><br></pre></td></tr></tbody></table></figure>

<p>在需要置顶的博文的开头代码块中加入</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">top: true</span><br></pre></td></tr></tbody></table></figure>

<p>即可。</p>
<h3 id="去除-hexo-支持信息与主题版本信息，侧边栏社交信息链接，向上滚动按钮整合文章进度显示，添加代码块复制按钮，权利声明"><a href="#去除-hexo-支持信息与主题版本信息，侧边栏社交信息链接，向上滚动按钮整合文章进度显示，添加代码块复制按钮，权利声明" class="headerlink" title="去除 hexo 支持信息与主题版本信息，侧边栏社交信息链接，向上滚动按钮整合文章进度显示，添加代码块复制按钮，权利声明"></a>去除 hexo 支持信息与主题版本信息，侧边栏社交信息链接，向上滚动按钮整合文章进度显示，添加代码块复制按钮，权利声明</h3><p>参考文章：<a href="https://lvxuefei.top/%E5%88%A9%E7%94%A8Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89-%E4%BC%98%E5%8C%96-%E5%90%84%E7%A7%8Dtips%E3%80%81%E9%BB%91%E7%A7%91%E6%8A%80%EF%BC%8C%E4%B8%8D%E6%96%AD%E6%9B%B4%E6%96%B0/">利用 Hexo+Next 搭建个人博客（三）—— 优化 (各种 tips、黑科技，不断更新)</a>)</p>
<p>都是内置功能。</p>
<p>可以在主题配置文件里面找到相应内容。</p>
<p>支持信息和主题版本搜索 <code>powered</code> <del>和 <code>theme</code></del> 字段。（<strong>21.2.17 更新</strong>，发现新版本不再需要修改 theme 字段。后来我又给加回来了，最近翻到一些好康的 hexo 博客总想看看人家用了啥主题，感觉把自己的用的主题亮出来避免新人找来找去也不是件坏事吧？就是这个「由 xx 强力驱动」翻译怪怪的。。。得空的话我自己改一下，似乎修改主题配置文件夹的 <code>languages\zh-CN.yml</code> 相应翻译即可）</p>
<p>社交信息链接搜索 <code>social</code> 字段。</p>
<p>代码块复制按钮搜索 <code>codeblock</code> 字段，修改其中的 <code>copy_button</code> 参数。</p>
<p>向上滚动按钮整合文章进度显示搜索 <code>back2top</code> 字段，修改其中的 <code>scrollpercent</code> 参数。</p>
<p>权利声明修改 <code>creative_commons</code> 字段，其中的 <code>license</code> 参数决定你使用那种权利声明，参考<a href="https://zhuanlan.zhihu.com/p/154075043">怎样为自己的文章添加合适的许可（共用许可证-Creative Commons licenses）</a>，我觉得既然咱们决定用这玩意那最少也用个 by-sa。</p>
<h3 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h3><p>参考文章：<a href="https://lvxuefei.top/%E5%88%A9%E7%94%A8Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89-%E4%BC%98%E5%8C%96-%E5%90%84%E7%A7%8Dtips%E3%80%81%E9%BB%91%E7%A7%91%E6%8A%80%EF%BC%8C%E4%B8%8D%E6%96%AD%E6%9B%B4%E6%96%B0/">利用 Hexo+Next 搭建个人博客（三）—— 优化 (各种 tips、黑科技，不断更新)</a>)</p>
<ol>
<li>安装 <a href="https://links.jianshu.com/go?to=https://github.com/flashlab/hexo-generator-search">hexo-generator-searchdb</a> 插件</li>
</ol>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>打开全局配置文件，在下面添加</li>
</ol>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"># 搜索</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>打开主题配置文件找到 <code>Local search</code>，将 <code>enable</code> 设置为 <code>true</code></li>
</ol>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  trigger: auto				# trigger若为auto, 通过改变输入触发搜索</span><br><span class="line">  							# trigger若为manual, 通过按下enter键或者点击搜索按钮触发搜索</span><br><span class="line">  top_n_per_article: 1 		# 展示每篇文章的前n个结果，如果想要展示所有结果，设置为-1</span><br><span class="line">  unescape: false			# 将html字符串转义为可读的字符串。</span><br><span class="line">  preload: false			# 当加载页面时预加载搜索结果</span><br></pre></td></tr></tbody></table></figure>

<h3 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h3><p>参考：<a href="https://github.com/theme-next/hexo-symbols-count-time">theme-next/hexo-symbols-count-time: Symbols count and time to read of articles for Hexo.</a></p>
<p>安装 <code>hexo-symbols-count-time</code> 模块</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time</span><br></pre></td></tr></tbody></table></figure>

<p>其实就能生效了。但相应的参数还可以改一下。</p>
<p>打开全局配置文件新增 <code>symbols_count_time</code> 字段。顺便吐槽一句，参考文章推荐的 4/275 参数有点离谱，2500 字的文章正常人真的能在 2 分钟内读完吗。。。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: true</span><br><span class="line">  exclude_codeblock: false</span><br><span class="line">  awl: 3</span><br><span class="line">  wpm: 275</span><br><span class="line">  suffix: "mins."</span><br></pre></td></tr></tbody></table></figure>

<p>再打开主题配置文件找到 <code>symbols_count_time</code> 字段：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true</span><br><span class="line">  item_text_post: true</span><br><span class="line">  item_text_total: true</span><br></pre></td></tr></tbody></table></figure>

<p>然后做一次刷新</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">hexo clean&amp;&amp;hexo g</span><br></pre></td></tr></tbody></table></figure>

<p>避免出现不生效的 bug。（参考<a href="https://github.com/theme-next/hexo-symbols-count-time/issues/53">The symbols count is undefined and reading time is NaN:aN. #53</a>）</p>
<h3 id="统计访问量"><a href="#统计访问量" class="headerlink" title="统计访问量"></a>统计访问量</h3><p>参考文章：<a href="https://lvxuefei.top/%E5%88%A9%E7%94%A8Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89-%E4%BC%98%E5%8C%96-%E5%90%84%E7%A7%8Dtips%E3%80%81%E9%BB%91%E7%A7%91%E6%8A%80%EF%BC%8C%E4%B8%8D%E6%96%AD%E6%9B%B4%E6%96%B0/">利用 Hexo+Next 搭建个人博客（三）—— 优化 (各种 tips、黑科技，不断更新)</a>)</p>
<p>使用<a href="http://ibruce.info/2015/04/04/busuanzi/">不蒜子</a></p>
<p>打开主题配置文件找到 <code>busuanzi_count</code> 字段，将 <code>enbale</code> 设置为 <code>true</code></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  enable: true                #是否显示计数ture|false</span><br><span class="line">  total_visitors: true		  #访客数，uv的方式，单个用户连续点击n篇文章，只记录1次访客数</span><br><span class="line">  total_visitors_icon: user</span><br><span class="line">  total_views: true           #访问量，pv的方式，单个用户连续点击n篇文章，记录n次访问量</span><br><span class="line">  total_views_icon: eye</span><br><span class="line">  post_views: true            #是否显示每篇文章的访问次数ture|false</span><br><span class="line">  post_views_icon: eye</span><br></pre></td></tr></tbody></table></figure>

<h3 id="文章自动折叠"><a href="#文章自动折叠" class="headerlink" title="文章自动折叠"></a>文章自动折叠</h3><ol>
<li><p>安装插件 <code>hexo-excerpt</code></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo-excerpt</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>修改全局配置文件，新增以下内容（话说好多参考文章甚至是官方文档用的 <code>auto_excerpt</code> 在我这不生效，不知道啥原因）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">excerpt:</span><br><span class="line">  depth: 2</span><br><span class="line">  excerpt_excludes: []</span><br><span class="line">  more_excludes: []</span><br><span class="line">  hideWholePostExcerpts: false</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><p>一顿操作，不免装了一些没用模块，用些命令清理一下。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm prune</span><br><span class="line">hexo clean</span><br></pre></td></tr></tbody></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>现在博客只搞了最基础的美化，以及我觉得有必要实现的功能。其他高级一点的功能再说吧，比如 rss 啊，评论啊，说回来我评论不怎么想开（玻璃心），但想着能发动人民群众给我挑错误也还不错。不过听说评论还有好多种不同的实现方式，研究研究再说。（实在是受不了我就开个类似的东西，比如点赞？hexo 支持这玩意么）</p>
<h2 id="其他优秀参考文章集合"><a href="#其他优秀参考文章集合" class="headerlink" title="其他优秀参考文章集合"></a>其他优秀参考文章集合</h2><ul>
<li><a href="https://www.jianshu.com/p/9f0e90cc32c2">Hexo-NexT配置超炫网页效果</a></li>
<li><a href="https://tding.top/archives/567debe0.html">本博客当前使用的插件总结</a></li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 Windows 解码器导致的 DLNA 无法投屏问题</title>
    <url>/jie-jue-windows-jie-ma-qi-dao-zhi-de-dlna-wu-fa-tou-ping-wen-ti/</url>
    <content><![CDATA[<p>参考文章：<a href="https://jingyan.baidu.com/article/148a19214c4f770d70c3b14b.html">win10 电脑开启 DLNA 投屏（支持 rmvb/flv 全格式）</a></p>
<p>之前以为 dlna 很难用。。。其实电脑和电视在同一个 wifi 下，通过某种手段把文件投过去就行了。</p>
<p>参考文章说的挺详细了，一般的 mp4 格式其实右键就可以投屏。但主要是 flv 和浏览器这种东西就没法投。除了装 kodi 之类的软件外，还有一种方法就是改造 windows media player。</p>
<p>在媒体流处把启用媒体流和允许本地网络打开，然后就装解码器即可。</p>
<p>文章里推荐的是 <a href="https://www.majorgeeks.com/files/details/win7codecs.html">Shark007 ADVANCED Codecs</a>，这玩意。。。实话说，内含的缩略图拓展 software 做的还不错，但一个是装完以后只是 windows media player 能放 flv 了，但大量 flv 在 media player 里面却还是扫不出来；还有就是难装难卸，难装并不是指我超链接过去下载的 exe 难装，而是它本身在我常用的包管理器 chocolatey 里面有源，但那个源我无论是用实机还是用虚拟机都装不上，换版本也不行，问题十分奇葩；卸载的时候我的 explore.exe 直接崩掉了，甚至没法用任务管理器新建任务拉起来，只能注销。</p>
<p>更推荐我之前在 18.6.22 那个无比详尽的视频日记里面提到过的 k-litecodec，可以直接用 chocolatey 装，也不用装 full 版，装个 basic 就可以了</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">choco install -y k-litecodecpackbasic</span><br></pre></td></tr></tbody></table></figure>

<p>然后去 media player 里面，把原来的视频库的视频文件夹移除再加回来；或者新建一个文件夹把 flv 放进去再加进视频库里面，就可以了。</p>
]]></content>
      <categories>
        <category>影音</category>
      </categories>
      <tags>
        <tag>DLNA</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>玩一下 imagemagick</title>
    <url>/wan-yi-xia-imagemagick/</url>
    <content><![CDATA[<p>imagemagick，在我这里大概有两大类用途：</p>
<ol>
<li>没有 ps，下个 ps 贼大，怎么办？命令行修图吧。。。</li>
<li>gif 加速（配合 ffmpeg）</li>
</ol>
<p>不过这玩意那是相当复杂。。。以下是一些入门教程：</p>
<ul>
<li><a href="https://www.jianshu.com/p/310d833d9a25">ImageMagick 入门教程</a></li>
<li><a href="http://www.charry.org/docs/linux/ImageMagick/ImageMagick.html">我的 ImageMagick 使用心得</a></li>
<li><a href="http://www.pooy.net/category/os/imagemagick-os">璞玉（POOY）Category: Imagemagick</a></li>
<li><a href="https://blog.csdn.net/ihtml5/article/details/88084364">ImageMagick 高级教程整理</a></li>
<li><a href="http://www.360doc.cn/userhome.aspx?userid=1947337">ImageMagick 使用经验</a></li>
</ul>
<p>文档：</p>
<ul>
<li><a href="https://imagemagick.org/script/command-line-processing.php">官方文档</a></li>
<li><a href="https://imagemagick.org/script/command-line-options.php">官方参数文档</a></li>
<li><a href="http://www.imagemagick.com.cn/command_line_options.html">中文（看起来有一定机翻）参数文档</a></li>
<li><a href="https://legacy.imagemagick.org/Usage/">Examples of ImageMagick Usage</a></li>
</ul>
<p>请注意，本文完成时所使用的 Imagemagick 版本为 7.0.10-48 Q16 x64 2020-12-10（windows），修复了 Imagemagick 无法直接将 mp4 转换为 gif 的问题，可通过 chocolatey 安装并通过 <code>magick -version</code> 查看版本；在 Linux 上还安装了老版本的 Imagemagick，版本为 6.9.10-23 Q16 x86_64 20190101，通过 ubuntu 19.10 的 apt 安装指令安装，可通过 <code>convert -version</code> 查询版本。</p>
<h2 id="图像配字"><a href="#图像配字" class="headerlink" title="图像配字"></a>图像配字</h2><p>适用场景：表情包制作（x</p>
<p><code>-gravity</code>：文字位置，可选东西南北中（</p>
<p><code>-fill</code> 和 <code> -stroke</code>：文字颜色和边框</p>
<p><code>-pointsize</code>：文字大小，必填</p>
<p><code>-kerning</code>：文字间隔</p>
<p><code>-font</code>：如果你要写中文的话。。。就得指定中文字体</p>
<p><code>-annotate</code>：偏移，一般表情包的字也不会放最边边，还是要往中间偏点点~</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">magick .\0.jpg -gravity south -fill white -pointsize 400 -kerning 600  -stroke black -font 'SimSun-&amp;-NSimSun' -annotate +0+150 '[内容]'   0_des.jpg</span><br></pre></td></tr></tbody></table></figure>

<h2 id="马赛克（伪）"><a href="#马赛克（伪）" class="headerlink" title="马赛克（伪）"></a>马赛克（伪）</h2><p>后面的举例图有 nsfw 内容！我暂时还不知道怎么给图片打多边形马赛克 / 模糊。。。只能简单用白色多边形遮一下。</p>
<p><code>draw</code>：后面跟的 polygon 是多边形的意思，要裁其他图形的话参考这里 <a href="https://imagemagick.org/script/command-line-options.php#draw">draw</a>。后面的参数是多边形的座标，具体座标挺多画图软件能查看的（比如 irfanview），甚至 magick 自带工具 display 命令都可以。后面座标就按单向连通图的顺序，顺时针逆时针都可以。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">magick .\0raw.jpg -fill white  -draw 'polygon 342,2031 125,2274 330,2809 677,2851 652,2470' .\0.jpg</span><br></pre></td></tr></tbody></table></figure>

<h2 id="纠偏-裁剪"><a href="#纠偏-裁剪" class="headerlink" title="纠偏 + 裁剪"></a>纠偏 + 裁剪</h2><p>经常收壁纸，有的画集是有外框的，我有强迫症要把外框剪掉（而且有外框做壁纸也不好看）。另外，有的画集是扫描的，但扫描的时候没有彻底放正，导致剪裁的时候会发现有一点点歪。通常我会使用 photoshop 的透视剪裁来处理这类图片，不过这次 magick 有比较自动化的命令，来试试效果怎么样。</p>
<p>样张（不要吐槽这是张色图，我暂时懒得找又歪又有边框的图了，扫了一眼手机的图册就只有这张，而且这张图片和外框相接触的部分还带有一些彩边，非常适合检测算法的能力）：</p>
<p><img src="https://raw.githubusercontent.com/zbpicture/picture/main/img/005.jpg"></p>
<p>另外，下面的样图因为图床大小限制原因被我转成 jpg，但我操作的时候用的是原图 png。</p>
<h3 id="方法-1：用-photoshop-裁剪工具（不纠偏）"><a href="#方法-1：用-photoshop-裁剪工具（不纠偏）" class="headerlink" title="方法 1：用 photoshop 裁剪工具（不纠偏）"></a>方法 1：用 photoshop 裁剪工具（不纠偏）</h3><p>手工裁剪，尽量保留最大方形可见面积，且几乎不容忍任何解析度较低的彩边。</p>
<p>最后得到 2427x3429 大小的图片。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/005_ps1.jpg"></p>
<h3 id="方法2：用-photoshop-透视裁剪工具（顺便纠偏）"><a href="#方法2：用-photoshop-透视裁剪工具（顺便纠偏）" class="headerlink" title="方法2：用 photoshop 透视裁剪工具（顺便纠偏）"></a>方法2：用 photoshop 透视裁剪工具（顺便纠偏）</h3><p>手工像素级裁剪，尽量保留最大方形可见面积，且几乎不容忍任何解析度较低的彩边。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/005_ps2.jpg"></p>
<p>最后得到 2441x3434 大小的图片。目前最标准和完美的结果，也是下面操作的基准目标。</p>
<h3 id="方法3-直接使用-magick-自动检测"><a href="#方法3-直接使用-magick-自动检测" class="headerlink" title="方法3: 直接使用 magick 自动检测"></a>方法3: 直接使用 magick 自动检测</h3><p><code>-fuzz</code> 模糊检测因子，越大容忍度越低，裁掉的内容也就越多</p>
<p><code>-border</code> 边框最小尺寸</p>
<p><code>+repage</code> 消除位移属性（可有可无）</p>
<p><code>-trim</code> 进行裁剪</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">convert 005.png  -fuzz 73% -border 1x1 +repage -trim 005_magick1.png</span><br></pre></td></tr></tbody></table></figure>

<p>显然裁少了一截。最后只得到 2410x3293 尺寸的图片。fuzz 参数也没有调整余地了，调小成 72 右上角的字就消不掉。右上角的字和头发颜色相仿似乎使 magick 识别出现了混乱。另外右下角还有显而易见没裁掉的白边。</p>
<p>加一个代表指定边框颜色的 <code>-bordercolor</code> 参数，fuzz 参数就要提高到 85。color 具体能填什么，参考这里：<a href="https://imagemagick.org/script/color.php#usage">Color Name</a></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">convert 005.png -bordercolor '#ffffff' -fuzz 85% -border 1x1 +repage -trim 005_magick1.png</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/005_magick1.jpg"></p>
<p>分辨率变成 2412x3294。问题依旧。</p>
<p>去掉 <code>-boader</code> 参数。fuzz 可以降低到 60 多，但此时裁掉的像素就太多。差出数量级，这里就不给数据了。</p>
<h3 id="方法-4：自动旋转后使用-magick-检测拼接"><a href="#方法-4：自动旋转后使用-magick-检测拼接" class="headerlink" title="方法 4：自动旋转后使用 magick 检测拼接"></a>方法 4：自动旋转后使用 magick 检测拼接</h3><p><code>-deskew</code> 是自动倾斜校正参数。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">convert 005.png -background white -deskew 40% 005_tem.png</span><br></pre></td></tr></tbody></table></figure>

<p>然后</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">convert 005_tem.png  -fuzz 73% -border 1x1 +repage -trim +repage 005_magick2.png</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/005_magick2.jpg"></p>
<p>分辨率变成 2412x3269。仍然不完美，但白边没那么明显了。另外我尝试过 <code>-deskew 100%</code> 这个参数，结果二次处理后白边更大，效果不好。</p>
<h3 id="方法-5：magick-检测拼接，然后再自动旋转"><a href="#方法-5：magick-检测拼接，然后再自动旋转" class="headerlink" title="方法 5：magick 检测拼接，然后再自动旋转"></a>方法 5：magick 检测拼接，然后再自动旋转</h3><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">convert 005.png  -fuzz 50% -border 1x1 +repage -trim +repage 005_tem.png   </span><br><span class="line">convert 005_tem.png -background white -deskew 40% 005_tem2.png</span><br><span class="line">convert 005_tem2.png  -fuzz 73% -border 1x1 +repage -trim +repage 005_magick3.png </span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/005_magick3.jpg"></p>
<p>虽说分辨率甚至是图像和方法 4 出来的几乎都一模一样，不过 tem2 和 tem 两张图对比，后者有明显的纠偏痕迹了。但究竟是 magick3 trim 的时候又纠回来了还是之前的 trim 带了纠偏效果我就看不出来了。</p>
<h3 id="方法6（magick-7-专用）"><a href="#方法6（magick-7-专用）" class="headerlink" title="方法6（magick 7 专用）"></a>方法6（magick 7 专用）</h3><p>参考文章：<a href="https://imagemagick.org/discourse-server/viewtopic.php?f=4&amp;t=35579">Enhanced -trim operator</a></p>
<p>注意这里的 <code>-define trim:percent-background=15%</code>，含义和上面的 <code>-fuzz</code> 完全相反，越小裁掉的内容越多。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">magick 005.png  -define trim:percent-background=15% -define trim:background-color='#ffffff' -trim 005_tem.png</span><br></pre></td></tr></tbody></table></figure>

<p>分辨率 2440x3431。接近手工调整的结果了，但看起来还是有白边。特别是纠偏以后：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">convert 005_tem.png  -background white -deskew 40%  005_tem1.png</span><br></pre></td></tr></tbody></table></figure>

<p>尝试使用纯粹的 trim 方法（也就是方法 3），发现无论如何都剪不掉那些细小的白边。甚至把 <code>-fuzz</code> 参数调到 80 了，把图片上部剪掉一些了结果右侧的细小白边也还没被剪掉。</p>
<p>继续用本方法裁一遍</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">magick 005_tem1.png  -define trim:percent-background=15% -define trim:background-color='#ffffff' -trim 005_magick4.png</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/005_magick4.jpg"></p>
<p>极限了，还是有肉眼可见的白边，但再把 <code>-define trim</code> 参数调小就又影响画面了。白边的大小，相比只纠偏以后的效果，勉强是可以接受的。此时分辨率为 2437x3429。</p>
<h3 id="方法7：将白色边框中的多余的部分用-gui（画图-ps）剪掉，再处理"><a href="#方法7：将白色边框中的多余的部分用-gui（画图-ps）剪掉，再处理" class="headerlink" title="方法7：将白色边框中的多余的部分用 gui（画图 / ps）剪掉，再处理"></a>方法7：将白色边框中的多余的部分用 gui（画图 / ps）剪掉，再处理</h3><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/0054.jpg"></p>
<p>既然纠偏和裁剪顺序定下来了，那我们顺便把命令也集成在一起。</p>
<p>看起来虽然剪掉了多余的部分让 <code>-fuzz</code> 和 <code>-define trim:percent-background</code> 不需要那么高（低）就能识别出真正边框的大致轮廓；但要确定下具体轮廓，好像还是不行（意思是还是有白边），看起来应该是纠偏没有办法纠的太正？</p>
<p><code>-fuzz</code> 下：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">convert 0052.png   -deskew 40% -fuzz 70% -bordercolor white -border 1x1 +repage -trim 005_magick5.png</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/005_magick5.jpg"></p>
<p>分辨率 2448x3434。这次本方法能剪出一个比较完整的图像而不会把头发的一部分都给当框削了。</p>
<p><code>-define trim:percent-background</code> 下：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">magick 0052.png  -define trim:percent-background=15% -define trim:background-color='#ffffff' -trim -background white -deskew 40% -define trim:percent-background=15% -define trim:background-color='#ffffff' -trim 005_magick6.png</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/005_magick6.jpg"></p>
<p>分辨率 2439x3431。白边反而还比 <code>-fuzz</code> 那边要大了，效果还比没有用 gui 修改前的还差。。。（也许是我命令写的有问题，但我感觉就算命令写的没问题白框也削不掉）</p>
<h3 id="方法-8：去除噪点"><a href="#方法-8：去除噪点" class="headerlink" title="方法 8：去除噪点"></a>方法 8：去除噪点</h3><p>就这样放弃了吗？不！我又查到了一篇新的参考文章：<a href="https://superuser.com/questions/1219030/trimming-exterior-empty-space-with-imagemagick-does-not-work-on-scanned-document">Trimming exterior empty space with ImageMagick does not work on scanned documents</a>，说是扫描件的噪点会干扰软件的判断。</p>
<p>那就试试先去噪点：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">convert 0052.png -write MPR:source -morphology close rectangle:3x4 -morphology erode square    MPR:source -compose Lighten -composite -morphology erode square    MPR:source -composite -morphology erode square    MPR:source -composite -morphology erode square    MPR:source -composite -morphology erode square    MPR:source -composite -morphology erode square    MPR:source -composite -morphology erode square    MPR:source -composite -morphology erode square    MPR:source -composite -morphology erode square    MPR:source -composite 0053.png</span><br></pre></td></tr></tbody></table></figure>

<p>再用 <code>-fuzz</code>。合起来的命令效果不如分开的，那就保险起见用分开的命令。<code>-fuzz</code>需要进一步调低。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">convert 0053.png -background white -deskew 40% 005_tem.png</span><br><span class="line">convert 005_tem.png  -fuzz 50% -border 1x1 +repage -trim +repage 005_magick7.png</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/005_magick7.jpg"></p>
<p>分辨率 2445x3434。仍有白边。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">magick 0053.png  -define trim:percent-background=15% -define trim:background-color='#ffffff' -trim 005_tem.png</span><br><span class="line">magick 005_tem.png  -background white -deskew 40%  005_tem1.png</span><br><span class="line">magick 005_tem1.png  -define trim:percent-background=15% -define trim:background-color='#ffffff' -trim 005_magick8.png</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/005_magick8.jpg"></p>
<p>分辨率 2737x3429，有白边。</p>
<hr>
<p>结论：在这个时间点，不好用。</p>
<h2 id="图像拼接"><a href="#图像拼接" class="headerlink" title="图像拼接"></a>图像拼接</h2><p>多张表情包合成（x</p>
<p><code>-append</code>：竖着拼。如果是 <code>+append</code> 就是横着拼。</p>
<p><code>-resize</code>：几张图中如果不是尺寸一致一定就会有的图长有的图短。这就要看个人考量了，比如要竖着拼的话，是把窄的图等比缩放到和宽得一样宽，还是把宽的图缩放到和最窄的一样窄，那就在要缩放的图后面加 <code>-resize</code>。<code>resize</code> 的参数是 <code>长x宽</code>，如果有其中一个参数不用改动可以留空，但是要保留 x 号。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">convert a.jpg  b.jpg -resize 814x -append   0.jpg</span><br></pre></td></tr></tbody></table></figure>

<h2 id="tgs-转换与加速"><a href="#tgs-转换与加速" class="headerlink" title="tgs 转换与加速"></a>tgs 转换与加速</h2><p>tgs 是 telegram 内动态表情包的专用格式。telegram 内的表情包可以通过机器人 <a href="https://t.me/Stickerdownloadbot">@Stickerdownloadbot</a> 导出单张或批量导出一整个表情包系列的图片，对于静态图片 bot 会同时导出为包含三种不同格式内容的压缩包；但对于动态图片就只会导出为一个内含 tgs 格式文件的压缩包，后续就还需要通过以下方法进行转换才能在其他地方使用。</p>
<h3 id="tgs-转换"><a href="#tgs-转换" class="headerlink" title="tgs 转换"></a>tgs 转换</h3><h4 id="lottie"><a href="#lottie" class="headerlink" title="lottie"></a>lottie</h4><p>桌面平台，python 里面一个叫 <a href="https://pypi.org/project/lottie/">lottie</a> 的包，建议在 Linux 下使用，windows 下安装繁琐；</p>
<p>linux：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">pip3 install lottie</span><br><span class="line">sudo pip3 install --upgrade pip</span><br><span class="line">pip3 install cairosvg opencv-python</span><br><span class="line">pip3 install lottie</span><br><span class="line">lottie_convert.py 0.tgs 0.gif</span><br></pre></td></tr></tbody></table></figure>

<p>windows：</p>
<p>参考<a href="https://weasyprint.readthedocs.io/en/stable/install.html#windows">https://weasyprint.readthedocs.io/en/stable/install.html#windows</a>，先安装 <a href="https://github.com/tschoonj">tschoonj</a>/<strong><a href="https://github.com/tschoonj/GTK-for-Windows-Runtime-Environment-Installer">GTK-for-Windows-Runtime-Environment-Installer</a></strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">pip install cairosvg pillow</span><br><span class="line">pip install opencv-python</span><br><span class="line">python -m pip install --upgrade pip setuptools</span><br><span class="line">python -m pip install WeasyPrint</span><br><span class="line">pip3 install lottie</span><br><span class="line">python lottie_convert.py 0.tgs 0.gif</span><br></pre></td></tr></tbody></table></figure>

<h4 id="shu"><a href="#shu" class="headerlink" title="shu"></a>shu</h4><p>ios 上的 shu，美区有售。可将 tgs 批量导出为各种格式，如 webp、gif、pngs 等。</p>
<h4 id="tgs-to-gif-12-14-更新"><a href="#tgs-to-gif-12-14-更新" class="headerlink" title="tgs-to-gif (12.14 更新)"></a>tgs-to-gif <strong>(12.14 更新)</strong></h4><p>上面两个软件，前者免费但容易出现各类错误，且安装繁琐；后者需要付费但效果尚可。</p>
<p>最近又出现一个新的 tgs 转换工具 <a href="https://github.com/ed-asriyan">ed-asriyan</a>/<a href="https://github.com/ed-asriyan/tgs-to-gif">tgs-to-gif</a>，前面两个工具转换一些 tgs 会出现重影（经过测试不是下面我 gif 速度优化的锅，而是转换出来的帧里面本身就有重影的帧出现），这个工具基本解决了重影的问题，且大部分 gif 也不存在速度过慢的问题。缺点是转换出来的 gif 质量低于前面两个软件，且在 windows 的 irfanview 下播放会出现花屏现象，原因不明。</p>
<p>在 pc 和虚拟机上上使用建议借助 nodejs 安装；在国外 vps 上使用建议借助 docker 安装。</p>
<p>原因嘛，docker 方便但因为网络原因安装速度可能会很慢，docker 内部比较难上代理，docker 加速器在这里无效因为跑 docker 的时候我发现这个东西不仅拉镜像还在跑 apt；但 vps 上用 nodejs 还需要非 root 账号，因为本项目用到了 puppeteer，还不一定成功，我在两台 debian 的机子上都掉坑一台找不到 browser 另一台装不上 gifski，找不到 browser 那一回 nodejs 我用了 15，后面发现 15 不行；装不上 gifski 是因为 cargo 都装不上，掉进新坑用命令 <code>rustup install stable</code> 运行到一般就被 kill 了估计是内存都不够了，也不想划虚拟内存了，懒得爬出来了。</p>
<p>另外 nodejs 运行时的运行目录必须在项目内（但 tgs 文件不需要放在项目内），docker 不需要但写 tgs 文件夹路径的时候得写绝对路径，各有各的麻烦。</p>
<p>nodejs：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">curl https://sh.rustup.rs -sSf | sh #并 ctrl+d</span><br><span class="line">curl -sL https://deb.nodesource.com/setup_14.x | bash - #目前不支持15</span><br><span class="line">apt-get install -y nodejs</span><br><span class="line">cargo install gifski</span><br><span class="line">git clone https://github.com/ed-asriyan/tgs-to-gif.git</span><br><span class="line">cd tgs-to-gif</span><br><span class="line">npm install</span><br></pre></td></tr></tbody></table></figure>

<p>即可使用</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#转换多个 tgs</span><br><span class="line">node cli.js 0.tgs 1.tgs...</span><br><span class="line">#转换整个文件夹</span><br><span class="line">node cli.js /home/zbttl/tgs</span><br></pre></td></tr></tbody></table></figure>

<p>docker：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">git clone https://github.com/ed-asriyan/tgs-to-gif.git</span><br><span class="line">cd tgs-to-gif</span><br><span class="line">docker build -t tgs-to-gif .</span><br></pre></td></tr></tbody></table></figure>

<p>即可使用</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">docker run --rm -v &lt;文件夹绝对路径&gt;:/source tgs-to-gif</span><br></pre></td></tr></tbody></table></figure>

<p><strong>（12 月 23 日更新）</strong> docker 版和 nodejs 效果居然不一样。。。。docker 版出来的效果需要加速，所以只推荐 nodejs 版。至于为什么效果会不一样。。。我猜测是因为 gifski 版本的原因，docker 里面 gifski 版本还是 0.10.4，我在实机中安装的版本已经是 1.22 了。但话说回来，issue 里面刚好就有个人吐槽长度宽度参数不生效 [The –height HEIGHT –width WIDTH don’t work #25](The –height HEIGHT –width WIDTH don’t work #25)，作者给的意见是更换为 gifski 旧版。。。。另外一点，托之前忘记安装 gifski 的福，我看到了部分运行命令：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201223071937.png"></p>
<p>合着这质量还只有百分之 80。。。但我在项目中完全查不到这些个帧数质量啥的在哪调，所以没辙。</p>
<p>先说一下踩进去的坑，不想看的可以跳过下面这一段：</p>
<h3 id="鉴坑扯淡"><a href="#鉴坑扯淡" class="headerlink" title="鉴坑扯淡"></a>鉴坑扯淡</h3><p>样张：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/1gGuvCbBVJqMRtj.gif"></p>
<p>用 shu 转完后，发现发出去的图片在 qq 中播放速度相当慢 。</p>
<p>肯定是啥参数不对。。。查参数的软件，我一开始只记得查视频用的 mediainfo，打开一看，这玩意就不是用来看 gif 参数的。。。只有一个图像格式 87a 和我手上其他 gif 不同，其他 gif 是 89a（后来的后来经过调查，87a 和 89a 的差别，是 87a 是旧标准，不支持半透明参数）。不过还是尝试转一下吧。</p>
<p>按<a href="https://blog.mutoo.im/2015/01/gif-87a-vs-89a/">检测 GIF 版本的方法</a>，图片确实变成 89a 了，但是出现了严重的重影。。。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Zv9YCok1ql784Hi.gif"></p>
<p>后续我用了各种类型的软件转换和测试，大概的测试结果如下图：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>张数</th>
<th>码率</th>
<th>fps</th>
<th>tbr</th>
<th>duration</th>
<th>delay</th>
<th>irfanview 5s（循环次）</th>
<th>windowsqq 10s</th>
<th>androidqq（10s）</th>
<th>张数/时间</th>
<th>张数/时间+delay</th>
</tr>
</thead>
<tbody><tr>
<td>ps转视频再改回gif</td>
<td>11</td>
<td>1646</td>
<td>33.33</td>
<td>33.33</td>
<td>0.33</td>
<td>0.03</td>
<td>16</td>
<td>16</td>
<td>20</td>
<td>0.03</td>
<td>0.06</td>
</tr>
<tr>
<td>ezgif（从webp转换）</td>
<td>13</td>
<td>1691</td>
<td>20</td>
<td>20</td>
<td>0.65</td>
<td>0.05</td>
<td>7</td>
<td>13</td>
<td>15</td>
<td>0.05</td>
<td>0.1</td>
</tr>
<tr>
<td>源</td>
<td>23</td>
<td>2395</td>
<td>33.33</td>
<td>33.33</td>
<td>0.69</td>
<td>0.03</td>
<td>8</td>
<td>8</td>
<td>12</td>
<td>0.03</td>
<td>0.06</td>
</tr>
<tr>
<td>ezgif（加速）</td>
<td>23</td>
<td>3481</td>
<td>50</td>
<td>50</td>
<td>0.46</td>
<td>0.02</td>
<td>8</td>
<td>8</td>
<td>12</td>
<td>0.02</td>
<td>0.04</td>
</tr>
<tr>
<td>ps改帧数</td>
<td>12</td>
<td>646</td>
<td>14</td>
<td>28</td>
<td>0.84</td>
<td>0.07</td>
<td>6</td>
<td>15</td>
<td>11</td>
<td>0.07</td>
<td>0.14</td>
</tr>
<tr>
<td>ps改帧数改延迟</td>
<td>12</td>
<td>452</td>
<td>10</td>
<td>10</td>
<td>1.2</td>
<td>0.01</td>
<td>25</td>
<td>15</td>
<td>9</td>
<td>0.1</td>
<td>0.11</td>
</tr>
<tr>
<td>imageonline</td>
<td>23</td>
<td>716</td>
<td>10</td>
<td>10</td>
<td>2.3</td>
<td>0</td>
<td>15</td>
<td>4</td>
<td>4</td>
<td>0.1</td>
<td>0.1</td>
</tr>
</tbody></table>
<ol>
<li><p>上面这些转换方法转出来的图片都是没有重影的；</p>
</li>
<li><p>前面的这些参数来自 ffprobe 和 imagemagick 的 identify 工具，ffmpeg 的 tbr/duration 参数含义参考这里：<a href="http://ffmpeg-users.933282.n4.nabble.com/What-does-the-output-of-ffmpeg-mean-tbr-tbn-tbc-etc-td941538.html">What does the output of ffmpeg mean? tbr tbn tbc etc?</a>；</p>
<blockquote>
<p>FFmpeg中的时间戳有三种不同的时基。实际打印的 值是这些值的倒数，即1 / tbr，1 / tbn和1 / tbc。<br>我认为tbn是AVStream中来自容器的时基 。它用于所有AVStream时间戳。<br>tbc是AVCodecContext中用于特定流的编解码器的时基 。它用于所有AVCodecContext和相关时间戳。<br>tbr是从视频流中推测出来的，它是用户在寻找视频帧速率时希望看到的值 ，只是有时由于场速率与帧速率的关系，它是预期值的两倍 。</p>
<p>时基：确定帧定时的依据；avstream：音频/视频顺序数据；容器：可以包含音频/视频数据通道的文件格式，例如avi，mp4或mkv；</p>
<p>我想他们选择报告TBR，是因为ffmpeg对帧率实际是最好的猜测。在许多容器上，fps字段（更具体地说AVStream.avg_frame_rate是）不可用，因此不能真正依靠它。</p>
</blockquote>
<p>以及：<a href="https://stackoverflow.com/questions/43333542/what-is-video-timescale-timebase-or-timestamp-in-ffmpeg">What is video timescale, timebase, or timestamp in ffmpeg?</a>]</p>
</li>
<li><p>有的情况下帧数越高播放速度反而越慢，不同平台下同样的两种图片有可能速度表现完全相反。这跟 gif 下的 fps 定义和各软件对 gif 定义的理解有关；</p>
</li>
<li><p>综合比较 ps 转视频加速改回 gif 效果是最好的。（又是 ps，ps 万能）</p>
</li>
</ol>
<p>另外，shu 也可以把 tgs 换成其他多种格式，但直接能动的就两种：gif 和 webp。上面我用 ezgif 讲 webp 转成 gif，发现速度大体正常，综合参数，我提出一个大胆的假设：应该蛮多软件不看 <code>delay</code> 而是直接以张数作为播放速度的依据。至于为什么不看延迟？可能跟所谓 <a href="https://legacy.imagemagick.org/Usage/anim_basics/#zero">gif 零延迟</a>有关：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">好吧，它们很重要，那又是什么呢？因为许多应用程序不喜欢它们，或者处理不当。他们认为“零延迟帧”是一件坏事，即使您出于某种原因故意将它们添加到动画中也是如此。</span><br><span class="line">这是我了解或被告知“做错事”的应用程序的摘要...</span><br><span class="line">金普	不会保存“零延迟帧”，它们总是向具有零时延的任何帧添加最小的时延。:-(</span><br><span class="line"> </span><br><span class="line">火狐	在这样的帧上会稍有非零的停顿。大概是这样，根本没有时间延迟的动画会耗尽所有计算机的CPU周期。但是firefox，如果动画的总显示时间为非零，则“ ”仍不能放松该限制。</span><br><span class="line"> </span><br><span class="line">IE浏览器	最小时间延迟为6厘秒，并且忽略小于此时间的任何延迟。</span><br><span class="line">如果任何图像帧超出了第一帧设置的动画范围，Internet Explorer 8版本也会失败（立即重新启动循环）。我将其归类为主要错误。</span><br></pre></td></tr></tbody></table></figure>

<p>因为 0 延迟可能报错，所以干脆就不用延迟来计算了。。。。</p>
<p>如同这篇文章：<a href="https://www.easeus.com/amp/video-editing-tips/gif-speed-changer.html">Top 10 Best GIF Speed Changers: How to Speed up or Slow down GIF Easily</a> 给出的所有手段几乎都是在 gif 的 delay 参数上动手脚，而 delay 参数又似乎和 fps 挂钩（参考这里：<a href="https://superuser.com/questions/1449366/do-60-fps-gifs-actually-exist-or-is-the-maximum-50-fps">Do 60 FPS GIF’s actually exist? Or is the maximum 50 FPS?</a>)，但如果软件不认可你的 delay 参数，那自然就没有用。那么 gif 就会按照 timebase，也就是 0.04s 一张这个速度进行播放。另外为什么说 delay 似乎和 fps 挂钩呢？因为 delay 设置为 2 和 3 的时候，ffprobe 显示帧数分别为 50fps 和 33.33fps。但！delay 设置为 1 的时候，ffprobe 又显示帧数只有 10fps。。。可能是因为触发了 ffprobe 的最小延迟机制（要求最小延迟为 2，只能显示 50fps）。其实不止 ffprobe，还有许多看图软件的最小延迟也设定为 2。如果 delay 写 1 的话 gif 显示速度反而会变慢。</p>
<p>本次转换的主要目的是 tgs 转换的 gif 在 qq 上播放较慢。不过后续测试发现是部分 gif 调整 delay 后播放速度没有改观；而本身 delay 较大的 gif 修改 delay 后明显感觉播放速度加快。至于那部分能够修改 delay 加速的 gif 有没有 delay 阈值我倒是没有认真进行过测试。但减少帧数是一定能奏效的（</p>
<p>另外除了重影，某些软件转换到 gif 过程中会导致背景从透明变为白色，这也是要解决的问题。</p>
<p>减少 gif 张数，我目前得知两种方法：</p>
<ol>
<li><p>抽取关键帧（Image.n_frames），关键帧的概念参见：<a href="https://buildmedia.readthedocs.org/media/pdf/pillow/latest/pillow.pdf">Pillow (PIL Fork) Documentation</a></p>
<blockquote>
<p>Image.n_frames:  intThe number of frames in this image.This attribute is only defined by image plugins that support animated images.  Plugins may leave this attributeundefined if they don’t support loading animated images, even if the given format supports animated images.Given that this attribute is not present for all images usegetattr(image, “n_frames”, 1)to checkthe number of frames that Pillow is aware of in an image regardless of its format</p>
</blockquote>
<p>但只对那些优化过的 gif 有用（优化过的 gif 是啥意思？参考压缩 gif 一文中的参考文章 3 gif modification）</p>
</li>
<li><p>转换成其他格式（比如视频）然后加速后再转回去。上面用 ps 处理过一次，但 ps 是个 gui，批量转换肯定不能用 ps。</p>
</li>
</ol>
<p>另外，对于修改 delay，也建议使用 imagemagick 而不是那些原理不明的工具。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">convert -delay 2 0.gif 0_change.gif</span><br></pre></td></tr></tbody></table></figure>

<p>具体修改到什么程度可以参考以下两篇文章：</p>
<ol>
<li><p><a href="https://superuser.com/questions/1449366/do-60-fps-gifs-actually-exist-or-is-the-maximum-50-fps">Do 60 FPS GIF’s actually exist? Or is the maximum 50 FPS?</a> 上面引用过了，另外这篇文章里面还有个「暴论」</p>
<blockquote>
<p>这意味着，对于100 FPS的图像速率，最小值为1（在大多数显示器上很难呈现…），对于50 FPS的图像速率，其下一个最小值为2，而对于下一个值为3图像速率为33.3 FPS。因此，完全不可能达到60 FPS。</p>
<p>请注意，此扩展是针对少数几秒钟延迟的帧（最大延迟约为600秒），因此1/100秒的分辨率就足够了。这当然不是视频的意思，这就是为什么该字段编码延迟而不是帧速率的原因。</p>
<p>制作视频GIF确实是对规范的滥用（即使现在如此普遍，以至于大多数人可能没有意识到这一点，就像大多数人没有意识到GIF和JPEG使用不同类型的压缩一样，并且应该被使用）在不同种类的图像上）。</p>
</blockquote>
</li>
<li><p><a href="https://davidwalsh.name/how-to-change-animated-gif-speed">How to Change Animated GIF Speed</a></p>
</li>
</ol>
<p>转换后听说还可能遭遇再次转回 mp4 出错的问题，可以参考这篇文章：<a href="https://my.oschina.net/u/4404738/blog/3412123">（原）关于使用imagemagick将gif叠加到图片或者画布上的方法，以及疑难杂症</a>（我一开始解决重影问题也是看得这篇文章，后面发现下面正文的参考文章中有更详细的理解，就是比较长）</p>
<p>除此之外还有很多神秘问题，比如转换后最后一帧和第一帧之间有停顿，闪屏，花屏等，某些问题可以看压缩 gif 一文中的参考文章 3 gif modification。</p>
<hr>
<h3 id="转换为-tgs-后可能会出现的问题"><a href="#转换为-tgs-后可能会出现的问题" class="headerlink" title="转换为 tgs 后可能会出现的问题"></a>转换为 tgs 后可能会出现的问题</h3><p>回到正题。总结一下 tgs 转换到 gif 后，要让转换的 gif 达到能看的级别，需要解决：</p>
<ol>
<li>转换前动画速度过慢</li>
<li>转换后的重影</li>
<li>转换后透明度丢失</li>
</ol>
<p>操作后建议用一些工具检测一下参数（比如 delay、张数等）</p>
<ol>
<li><p>ffprobe（ffmpeg 随附，可显示码率、tbr/duration、fps）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ffprobe 0.gif</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>imagemagick 中的 identify 工具（magick7 以后的版本都要以 magick 命令打头）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">(magick) identify 0.gif</span><br></pre></td></tr></tbody></table></figure>

<p>identify 主要用来看延迟的，那么可以修改一下命令：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">identify -verbose 0.gif  | grep Delay</span><br></pre></td></tr></tbody></table></figure>

<p>或者用 identify 自身的通配符（参考：<a href="https://imagemagick.org/script/escape.php">Percent Escape Handling</a> 和 <a href="https://m.656463.com/wenda/ImagemagickGraphicsMagicktxywzml_607">Imagemagick GraphicsMagick image mean command</a>）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">identify -format "%m:%f %wx%h %T\n" .\0.gif</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p><a href="https://legacy.imagemagick.org/Usage/scripts/gif_anim_montage">gif_anim_montage</a> 脚本。可将每帧的形状，处理方式和延迟以顺序的方式集合到一张图片中。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">./gif_anim_montage 0.gif 0.jpg</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>查看视频 / gif 总帧数</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ffprobe -v error -count_frames -select_streams v:0  -show_entries stream=nb_read_frames -of default=nokey=1:noprint_wrappers=1 0.gif </span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h3 id="转换为-tgs-后对于动画速度较慢的处理方法"><a href="#转换为-tgs-后对于动画速度较慢的处理方法" class="headerlink" title="转换为 tgs 后对于动画速度较慢的处理方法"></a>转换为 tgs 后对于动画速度较慢的处理方法</h3><h4 id="ps-转换加速法"><a href="#ps-转换加速法" class="headerlink" title="ps 转换加速法"></a>ps 转换加速法</h4><p>就是我一开始说的方法，因为效果不错先放上来。</p>
<ol>
<li><p>安装相同年度版本的 ps 和 media encoder，可能要装 pr（因为经过试验 2019 ps cc 无法唤起 2020 ps pr）</p>
</li>
<li><p>在 ps 中打开 gif，点击窗口 -&gt; 时间轴</p>
</li>
<li><p>点击时间轴右下角的“转换为视频时间轴”按钮</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/FEsgkbz2OBZC9xd.jpg"></p>
</li>
<li><p>点击“渲染视频”（转换为视频时间轴成功后这个按钮就在附近），渲染为有 alpha 通道的 quicktime 视频（否则透明背景就会强制被白的背景填充）。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Y8mt1nDfcKizoZC.png"></p>
</li>
<li><p>打开导出的视频，点击时间轴上面的小箭头，调整至相应速度（比如加速两倍，调整为 200%）</p>
<p><img src="https://i.loli.net/2020/12/10/7PpRFV624QdyA8Z.jpg" alt="小箭头.jpg"></p>
</li>
<li><p>文件-&gt;导出-&gt;存储为 web 可用格式，按自己的习惯调整参数即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/BxqDHbuKkhpwVnM.gif" alt="0.gif"></p>
<p>用命令 4 解析出来显示 23 张，和原视频相比没少？但用命令 3 解开就会发现实际上是实施了优化。虽然张数增多了，但实际大小应该是降低的。</p>
</li>
</ol>
<h4 id="ps-直接加速法"><a href="#ps-直接加速法" class="headerlink" title="ps 直接加速法"></a>ps 直接加速法</h4><ol>
<li>在 ps 中打开 gif，点击窗口 -&gt; 时间轴</li>
<li>点击时间轴右下角的“转换为视频时间轴”按钮</li>
<li>点击时间轴窗口右上角，选择设置时间轴帧速率功能</li>
<li>降低帧率。然后修改延迟</li>
<li>导出即可</li>
</ol>
<p>帧数减少的同时 delay 参数也会增加。另外这个方法其实没法准确控制最后获得的张数，要慢慢调，好处就是不用导出到视频。</p>
<h4 id="webp-转换法"><a href="#webp-转换法" class="headerlink" title="webp 转换法"></a>webp 转换法</h4><p>需要 imagemagick 7+</p>
<p><code>-coalesce</code>：把 gif 每帧拆分出来</p>
<p><code>-set dispose background</code>：让下一帧显示时先清空上一帧显示的所有内容（把上一帧被描绘的像素统统删成透明） 。不使用这个参数就会造成重影。也可以把这个参数写在输入文件的前面，并改成 <code>-dispose background</code>。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">magick  "(" 0.webp -coalesce ")"  -set dispose background -loop 0 ./0.gif</span><br></pre></td></tr></tbody></table></figure>

<p>但在 windows 下最新版本好像可以直接转了。。。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">magick 0.webp 0.gif</span><br></pre></td></tr></tbody></table></figure>

<p>最后成品帧数只有 13。</p>
<h4 id="借助-ffmpeg-转换加速"><a href="#借助-ffmpeg-转换加速" class="headerlink" title="借助 ffmpeg 转换加速"></a>借助 ffmpeg 转换加速</h4><p><code>setpts=0.5*PTS</code>：加速两倍</p>
<p><code>-vcodec qtrle</code>：一个支持 argb（带透明通道）的编码。也可以换为 <code>-vcodec png</code>（rgba 编码，没有本质上区别）和 <code>-vcodec rawvideo</code>（体积很大，可能还要配合 <code>-pix_fmt rgba</code>）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg -i 0.gif -movflags faststart -vcodec qtrle -vf "scale=trunc(iw/2)*2:trunc(ih/2)*2" -filter:v "setpts=0.5*PTS" 0.mov</span><br></pre></td></tr></tbody></table></figure>

<p>然后使用 magick，<code>-delay</code> 需要用 ffprobe 查一下原 gif 的还原进去。不过光是 qq 用不管也可以。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">convert -dispose background -quiet -delay 3 0.mov 0_change.gif</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/tiRkpv5cmNV2Cq4.gif" alt="01.gif"></p>
<p>如果遭遇最后一帧和第一帧直接有卡顿，需要加上 <code>-deconstruct</code> 参数。要注意使用此参数后动画速度可能进一步提高（原因不明），需要把 <code>-delay</code> 值拉大。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">convert -dispose background -deconstruct -quiet -delay 5 0.mov 0_change.gif</span><br></pre></td></tr></tbody></table></figure>

<p>此时输出的 gif 已经足够小，没有必要再使用优化参数进行优化（另一个原因是我使用 <code>-layers optimize</code> 参数后部分文件大小反而增加了）。</p>
]]></content>
      <categories>
        <category>影音</category>
      </categories>
      <tags>
        <tag>ffmpeg</tag>
        <tag>imagemagick</tag>
      </tags>
  </entry>
  <entry>
    <title>路由器跑分 &amp;&amp; 刷机</title>
    <url>/lu-you-qi-pao-fen-shua-ji/</url>
    <content><![CDATA[<p>本来是为了对比一下旧路由（小新 new wifi mini，padavan）和极路由 2 （官方系统）和华硕 ac86u （官方系统）的性能。顺便物尽其用，给 newifi mini 刷个 openwrt。</p>
<h2 id="跑分工具"><a href="#跑分工具" class="headerlink" title="跑分工具"></a>跑分工具</h2><h3 id="linux-内置浮点分数显示"><a href="#linux-内置浮点分数显示" class="headerlink" title="linux 内置浮点分数显示"></a>linux 内置浮点分数显示</h3><p>命令</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cat /proc/cpuinfo</span><br></pre></td></tr></tbody></table></figure>

<p>其中的 bogomips 大概就是核心的浮点分数。</p>
<p><img src="https://i.imgur.com/oicnOOy.png"></p>
<p>极路由得分：385.84</p>
<p>ac86u 得分：100 （这个显然不正常）</p>
<p>由于不是实时跑分，所以准确性也最差。</p>
<h3 id="coremark"><a href="#coremark" class="headerlink" title="coremark"></a>coremark</h3><p>来自：<a href="https://github.com/eembc">eembc</a>/<strong><a href="https://github.com/eembc/coremark">coremark</a></strong></p>
<p>不过遗憾的是，我只成功在 ubuntu 下编译了 linux 版，在 windows 下使用 cygwin 和 在 linux 下尝试交叉编译 windows 版本均未成功。</p>
<p>好在 padavan 和 openwrt 下附带有本测试工具，也不用我编译了。</p>
<h3 id="dhrystone"><a href="#dhrystone" class="headerlink" title="dhrystone"></a>dhrystone</h3><p>来自：<a href="https://www.openwrtdl.com/wordpress/%E6%9D%A5%E6%B5%8B%E6%B5%8B%E8%B7%AF%E7%94%B1%E5%99%A8cpu%E6%80%A7%E8%83%BD%E8%B7%91%E5%88%86">[源码]来测测路由器cpu性能跑分</a></p>
<p>另一个二进制跑分工具。其中的二进制文件 <code>gcc_dry2-mt7621</code> 在 mt7620A 路由极路由 2 原版系统下可以直接运行。但在 newifi mini padavan 下运行结果报 0。而另一个含有 mt7620 的二进制文件 <code>dhrystone_2.1-1_ramips_1004kc_mt7621.ipk</code> 在两个设备上运行都报错（毕竟原本就应该是在 openwrt 下安装运行的） 。另外 x86 二进制在 linux 下不能运行，另外也没有 ac86u 用的版本（bcm4903）。但不知道其他固件是否附带有相应版本。</p>
<h2 id="（21-1-30-更新）openssl-跑分"><a href="#（21-1-30-更新）openssl-跑分" class="headerlink" title="（21.1.30 更新）openssl 跑分"></a><strong>（21.1.30 更新）</strong>openssl 跑分</h2><p>在翻油管<a href="https://www.youtube.com/watch?v=7xKGoveWmrs&amp;t=316s">软路由相关视频</a>时偶然发现的。适用于自带 openssl 命令的设备（基本上 linux 都带的）。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">openssl speed -evp aes-256-gcm</span><br></pre></td></tr></tbody></table></figure>

<p><code>aes-256-gcm</code> 也可以换成其他加密方式，比如 <code>chacha20-poly1305</code> 啥的。</p>
<h2 id="刷机（mt7620-gt-openwrt）"><a href="#刷机（mt7620-gt-openwrt）" class="headerlink" title="刷机（mt7620->openwrt）"></a>刷机（mt7620-&gt;openwrt）</h2><p>直接编译上面那几个工具不管用。</p>
<p>看来只能刷点定制版本然后从库里面找看看。先刷 newifi mini / 极路由 2。这两款路由同样是 mt7620A 方案，128m ram，8m flash。区别只有 newifi mini 的无线方案是 <a href="https://www.mediatek.cn/products/broadbandWifi/mt7612e">MediaTek | MT7612E</a>（参数来源：<a href="https://www.igao7.com/news/201501/2krIHZXzLCFRAVLO.html">迷你也满血，联想新路由newifi mini评测 | 爱搞机</a>），极路由的无线方案是 <a href="https://www.mediatek.com/products/broadbandWifi/mt7610e">MediaTek | MT7610E</a>（参数来源：<a href="https://www.zhihu.com/question/21971379/answer/19977583">如何评价极路由公司 2013 年 11 月发布的「极贰」路由器？ - 张导的回答 - 知乎</a>)。前者是 2x2，后者弱一些 1x1（但 5g wifi 速度同样是 433mhz）。还有！极路由 2 刷机前请用 breed 事先备份好 key，就在固件备份里面有一个单独的选项（我直接掉坑里爬不出来了，但到后面人家直接把这条路都铲了。。。详情可以看月底的后日谈）。</p>
<p>注意：刷 breed 和 breed 怎么操作这个东西，本文不涉及，百度吧。</p>
<p>在 breed 下，这两台机子显示的参数都一模一样：</p>
<p>newifi mini：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/chrome_sdRzlaQ63w.png"></p>
<p>极路由 2:</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/chrome_Wek4pLE69b.png"></p>
<p>openwrt 的话，选择大佬的 <a href="https://github.com/coolsnowwolf/lede">coolsnowwolf/lede: Lean’s OpenWrt source</a>。我们面前有两条路线：</p>
<ol>
<li><p>直接上 linux 编译</p>
<p>参考文章：</p>
<ul>
<li><a href="https://sspai.com/post/61463">看完这篇，自定义 OpenWrt/LEDE 路由固件不求人 - 少数派</a></li>
<li><a href="https://p3terx.com/archives/openwrt-compilation-steps-and-commands.html">OpenWrt 编译步骤与命令详解 - P3TERX ZONE</a></li>
<li><a href="https://davidli.fun/useful_note/2485/">编译 Lean 的 Openwrt 固件全攻略 - 😊Welcome</a></li>
</ul>
</li>
<li><p>借助 github action。参考文章：<a href="https://p3terx.com/archives/build-openwrt-with-github-actions.html/comment-page-1">使用 GitHub Actions 云编译 OpenWrt - P3TERX ZONE</a></p>
</li>
</ol>
<p>前者步骤繁琐倒是其次，最大的障碍是网络和空间。必须要有可靠的科学工具，以及 10 多 G 的空余空间（最后我的项目文件夹大概有 12g，也就是最少需要 13g 才能编译成功，剩余空间少于 1g 就会强行停止编译）。后者只需要大概 1g 不到的空间，完成 menuconfig 文件的生成即可（不过还是会用到 linux），但，前者一旦编译成功，后续修改 menuconfig 内容再次编译耗费的时间就会大幅缩短（视修改内容的多少，一般 5-10 分钟即可），而后者每次都需要等待 1 个半小时左右的时间。因为后者步骤中的一部分包括在前者中，所以我两个都谈一下。</p>
<h3 id="Linux-编译"><a href="#Linux-编译" class="headerlink" title="Linux 编译"></a>Linux 编译</h3><p>Linux 编译需要较多空间，我本地的虚拟机 ubuntu 只分了 30g 根本不够我又不想扩容（因为扩容要删快照，扩容后想还原还挺麻烦）。所以我索性在 tx 的轻量云上操作了。不过按我的习惯（不知道是不是大家也有这样的习惯）远程的 vps 默认情况下都是以 root 用户登录，而不是像桌面端一样用非 root 用户（毕竟 ubuntu 桌面端默认不创建 root 用户）。所以我还得新建一个非 root 用户，添加 sudo 授权，<a href="https://zbttl.github.io/2020/2%E6%9C%8824%E6%97%A5%EF%BC%88%E5%AF%92%E5%81%87%E7%AC%AC%E5%9B%9B%E5%8D%81%E4%B8%89%E5%A4%A9%EF%BC%89/#zsh">换用 zsh</a>，加虚拟内存（尽管轻量云内存已达 2g 但编译过程中还是报内存不够，我又加了 2g 虚拟内存才行），这些我就不详细谈了。</p>
<ol>
<li><p>安装相关依赖（许多教程里面没有 rsync，但我这边编译的时候报错就因为没装这个东西所以我加上了）</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3.5 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget swig rsync</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>克隆项目，下源码和软件包（这一步需要科学工具）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">git clone https://github.com/coolsnowwolf/lede</span><br><span class="line">cd lede</span><br><span class="line">./scripts/feeds update -a</span><br><span class="line">./scripts/feeds install -a</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>重点，调整 Open­Wrt 系统组件。毕竟自己编译就是为了只添加自己想要的功能。第一次编译建议只选择相应框架，因为第一次编译成功后后续增添删除组件再次编译所需时间会大幅缩短。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></tbody></table></figure>

<p>后续怎么调整组件？可以参考下面这两篇文章：</p>
<ul>
<li><a href="https://www.right.com.cn/forum/thread-1237348-1-1.html">【2020-01-14 更新】OpenWrt入门编译 make menuconfig配置参考说明与自动生成脚本 - OPENWRT专版 - 恩山无线论坛 - Powered by Discuz!</a></li>
<li><a href="https://www.right.com.cn/forum/thread-344825-1-1.html">OpenWrt 编译 LuCI-&gt; Applications 添加插件应用说明 - L 大【2020.11.1】 - OPENWRT 专版 - 恩山无线论坛 - Powered by Discuz!</a></li>
</ul>
<p>我这里也给一张表格，大致说明一下我在默认配置的基础上改了哪里。仅供参考。</p>
<p>注意，许多功能可以不直接集成到固件中而是单单编译为模块。因为使用主流的 <code>squashfs</code> 固件格式的话，集成到固件的功能是删不掉的，而模块（ipx）可以通过 opkg 随意安装和卸载（就是可能遇到依赖问题，装一个功能可能得同时装几个模块）。能这么做的功能，按空格第一次显示为 M，是编译为模块；再按一次显示为 * 则为集成到固件中。至于该选那个大家自己抉择。</p>
<p>下面表格参数尾部有 - 号标记代表我并未做改动但有些东西需要提醒；编译 x 说明这是原来开着我关掉的内容。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210102073119.png"></p>
<p>LuCI 要改的好多。。。原因是 LuCI 相关内容在 webui 下生效且不依赖其他配置（即基本不存在某个在 LuCI 中开启的功能需要在 LuCI 菜单外开启后 LuCI 处才生效的事儿）；其他功能（特别是 Utilities 里面的）在 ssh 等位置生效，在 webui 下不可见。众所周知图形界面的功能浪费的空间比较多嘛。。。</p>
<p>编辑完后用下面的 save 保存为 <code>.config</code>，待会编译的时候就会读取这个文件的配置。</p>
</li>
<li><p>开始编译（如果上面这步添加了许多功能，则需要开科学工具）。轻量服务器只有一个核心，所以 <code>-j1</code>，如果用物理机则看自己的配置改了。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">make -j1 V=s</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>编译成功的固件和模块，在 <code>lede/bin/targets/ramips/mt7620</code> 里面，注意，如果按默认配置编译了 squashfs 版本的话，里面的 bin 应该有两个版本，一个叫 <code>xxxx.initramfs-kernel</code>，一个叫 <code>xxxxx.squashfs-sysupgrade</code>，记得刷后者！前者是只读的，我看后者有个 upgrade，还以为是更新专用的 rom，首次刷机不应该刷这个；刷完 initramfs-kernel 后我还纳闷软件包怎么可用空间为 0，配置好了重启一下怎么重置了，折腾了两天居然是这里出了问题-_-</p>
</li>
<li><p>刷完以后看看剩余空间，5g wifi，usb 驱动有没有问题（这几个地方容易出问题）。</p>
</li>
</ol>
<h3 id="github-action"><a href="#github-action" class="headerlink" title="github action"></a>github action</h3><p>参考文章：<a href="https://p3terx.com/archives/build-openwrt-with-github-actions.html/comment-page-2#comments">使用 GitHub Actions 云编译 OpenWrt - P3TERX ZONE</a></p>
<p>作者说的很清楚了。先做 linux 编译的前三步，获得 <code>.config</code> 文件。</p>
<p>然后照抄作者的步骤：</p>
<blockquote>
<ul>
<li>进入 <a href="https://p3terx.com/go/aHR0cHM6Ly9naXRodWIuY29tL1AzVEVSWC9BY3Rpb25zLU9wZW5XcnQ=">P3TERX/Actions-OpenWrt</a> 项目页面，点击页面中的 Use this template（使用这个模版）按钮。</li>
<li>填写仓库名称，然后点击 <code>Create repository from template</code>（从模版创建储存库）按钮。</li>
<li>经过几秒钟的等待，页面会跳转到新建的仓库，内容和我的项目是相同的。然后点击<code>Create new file</code>（创建新文件）按钮。</li>
<li>文件名填写为 <code>.config</code>，把生成的 <code>.config </code></li>
<li>文件的内容复制粘贴到下面的文本框中。</li>
<li>翻到页面最下方，点击 <code>Commit new file</code>（提交新文件）按钮。</li>
<li>在 Actions 页面选择<code>Build OpenWrt</code>，然后点击<code>Run Workflow</code>按钮，即可开始编译。</li>
</ul>
</blockquote>
<p>嗯。。。增加几个注意小事项（当然作者的文章里也提到过了，方便我自己查阅而已）：</p>
<ol>
<li><p>点 <code>Build OpenWrt</code> 弹出的框框里，<code>SSH connection to Actions</code> 如果你没有 ssh 连接需求的话不要开启，会编译失败。</p>
</li>
<li><p>默认只会生成 rom 压缩文件。如果你之前有功能做成了模组，那你还得修改项目的 <code>.github/workflows/build-openwrt.yml</code> 文件，把 <code>UPLOAD_BIN_DIR</code> 值改为 <code>true</code>。</p>
</li>
<li><p>可以修改默认网关地址。在 <code>diy-part1.sh</code> 中把</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"># Modify default IP</span><br><span class="line">#sed -i 's/192.168.1.1/192.168.2.1/g' package/base-files/files/bin/config_generate</span><br></pre></td></tr></tbody></table></figure>

<p>第二句前面的注释符号取消，<code>192.168.2.1</code> 改为其他网关即可。我一开始是改的，因为我家的拓扑结构是：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">光猫（192.168.1.1）-&gt;ac86u（192.168.x.1）-（无线）-&gt;笔记本</span><br></pre></td></tr></tbody></table></figure>

<p>刷路由时，路由跟笔记本用有线的方式连接，显然路由默认地址  <code>192.168.1.1</code> 和光猫网关地址冲突。不过，后面我发现路由的默认网关地址能稳定覆盖住光猫的网关地址，也就是说我不用断开无线就可以直接进要刷的路由的 breed，以及刷完后路由的配置界面；反而是如果我改了网关的话，就得断掉无线或者连上路由的无线才能配置了。可能是 dhcp 的锅？</p>
</li>
</ol>
<h2 id="刷机（asus-官方-gt-asus-梅林）"><a href="#刷机（asus-官方-gt-asus-梅林）" class="headerlink" title="刷机（asus 官方->asus 梅林）"></a>刷机（asus 官方-&gt;asus 梅林）</h2><p>ac86u 刷机就简单了，也不用刷什么 breed，起码对于我现在官方-&gt;梅林arm384 来说直接在固件升级里面把新版固件怼上去就行，最多最多刷前重置一下。</p>
<p>ac86u 目前有三个品种的第三方固件，分别是官改，arm380，arm384。我在官方下载站还看到有 arm386，但文件夹是空的。</p>
<p>官改可以理解为官方版 + 软件中心。而 arm380 和 arm384，官方是这么说的：</p>
<blockquote>
<p>从 arm380 升级到 arm384 固件会失去什么</p>
<ol>
<li>网件、linksys、华为这些机型，非常大概率不会有 arm384 固件，目前 arm384 仅有华硕机型；</li>
<li>arm384 固件没有 arm380 固件的 wifi 全信道 + 高功率了，以后要高功率就老实澳大利亚 + 固定信道吧；</li>
<li>arm384 固件没有 multiPPP support（单线多拨）功能；</li>
<li>arm384 固件的首页没有温度、网速等信息的状态显示；</li>
<li>arm384 固件的内存占用率将会比 arm380 系列高得多；</li>
</ol>
<p>从 arm380 升级到 arm384 固件能得到什么</p>
<ol>
<li>AiMesh ；</li>
<li>1.5 代的软件中心；</li>
<li>更多的安全更新和功能更新；</li>
</ol>
</blockquote>
<p>具体的固件下载，注意事项，刷机流程可以参考：</p>
<ul>
<li><a href="https://koolshare.cn/thread-164857-1-1.html#f-arm384ml%E6%94%B9%E7%89%88-%E5%88%B7-%E5%8E%9F%E5%8E%82%E5%9B%BA%E4%BB%B6">【新提醒】【20200703】华硕ARMv7系列 384.18_0 改版固件 - 华硕固件 - KoolShare - 源于玩家 服务玩家</a></li>
<li><a href="https://koolshare.cn/forum.php?mod=viewthread&amp;tid=127878">【新提醒】【20200821】RT-AC86U_384.19_0 改版固件 - 华硕固件 - KoolShare - 源于玩家 服务玩家</a></li>
</ul>
<p>刷完以后进系统管理，开启 <code>Format JFFS partition at next boot</code> 和 <code>Enable JFFS custom scripts and configs</code> 再重启一遍。</p>
<p>重启后软件中心上线，就能安装华硕这边的 dhrystone 了！</p>
<p>参考：<a href="http://firmware.koolshare.cn/binary/dhrystone/">Index of /binary/dhrystone/ - KoolShare 固件下载服务器</a></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /koolshare/bin</span><br><span class="line">wget http://firmware.koolshare.cn/binary/dhrystone/dhrystone_hnd </span><br><span class="line">chmod +x dhrystone_hnd</span><br><span class="line">dhrystone_hnd</span><br></pre></td></tr></tbody></table></figure>

<h2 id="跑分结果"><a href="#跑分结果" class="headerlink" title="跑分结果"></a>跑分结果</h2><h3 id="coremark-1"><a href="#coremark-1" class="headerlink" title="coremark"></a>coremark</h3><p>newifi padavan：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/newifi%20padavancoremark.png"></p>
<p>newifi openwrt：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/newifi%20openwrt%202020.png"></p>
<p>极路由 2 openwrt：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/hc5761%20coremark%20openwrt.png"></p>
<p>极路由 2 和 newifi 相同的配置，newifi 性能略占优势。但不同的系统差距有点大喔。</p>
<p>华硕的梅林既没有预装也没有软件包，没法测。</p>
<h3 id="dhrystone-1"><a href="#dhrystone-1" class="headerlink" title="dhrystone"></a>dhrystone</h3><p>极路由原厂系统：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E6%9E%81%E8%B7%AF%E7%94%B1.png"></p>
<p>newifi openwrt pandora：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/newifi%20pandorabox.png"></p>
<p>newifi openwrt 2016（这张图截歪了，但数字能看个大概）：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/newifi%20openwrt%202016.png"></p>
<p>有请终极 boss ac86u：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/bcm4906.png"></p>
<p>7620A 那几个菜鸡互啄，感觉不同系统差距不大？nono，其实我还测出过 280 多分忘记截图了，不记得是哪个拉跨系统了。。。但这几个比较正一点的系统看起来速度都还差不多。但到 ac86u 这里画风突变，10 倍杀。。。</p>
<h3 id="openssl"><a href="#openssl" class="headerlink" title="openssl"></a>openssl</h3><p>极路由 2：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210130060354.png"></p>
<p>ac86u：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210130060150.png"></p>
<p>30 倍，直接秒成渣。。。</p>
<h2 id="其他参考文章和小发现"><a href="#其他参考文章和小发现" class="headerlink" title="其他参考文章和小发现"></a>其他参考文章和小发现</h2><ol>
<li><p>openwrt 目前还有几个小问题处理不掉，比如 ssh 中会突然出现乱码，特别是想按 tab 自动不全的时候，前面的命令可能就会突然冒出几个符号导致最后整条命令都错了。极路由 2 装上 openwrt 已联网提示灯亮不起来了。</p>
</li>
<li><p>有没有发现 dhrystone 7620a 测试的系统画风有点不太对？因为我都用的留着的 16 年左右的旧系统测试的，极路由在 18 年也停更了，所以能跑的出分数。最新编译的 openwrt 已经无法运行当年编译好的 dhrystone 了，可能是库问题，运行二进制告诉我 no found；ipk 文件发现本身的框架是 <code>ramips_24kec</code>，而 opkg.conf 里面没有这个框架，按照<a href="https://github.com/dafeiyoung/sguclient/wiki/%E4%BF%AE%E6%94%B9opkg.conf%E8%A7%A3%E5%86%B3incompatible-with-the-architectures-configured%E9%97%AE%E9%A2%98">修改 opkg.conf 解决 incompatible with the architectures configured 问题・dafeiyoung/sguclient Wiki</a>记载的方法强行安装，仍然提示 no found；直接通过 ash（没错，openwrt 默认不带 bash，只有 ash）运行，则报那个非常常见的哪行哪行 <code>（</code> expected 的 error。我还想过编译（作者在 github 页面<a href="https://github.com/siasjack/dhrystone4OP">siasjack/dhrystone4OP: dhrystone for openwrt package</a>记载了编译方法），结果带上 sdk 编译出来的固件就 30m 了，路由器根本装不了（16m rom），更别谈装上后再编译了。</p>
</li>
<li><p>除了 lede 版本的 openwrt，还有一个 lieno 版本的 <a href="https://github.com/Lienol/openwrt">Lienol/openwrt: Lienol’s Modified OpenWrt source</a>，暂时没研究。</p>
<p>其他关于 openwrt 的参考文章：</p>
</li>
</ol>
<ul>
<li>官方文档：<a href="https://openwrt.org/zh-cn/doc/howto/build">[OpenWrt Wiki] OpenWrt编译 – 说明</a></li>
<li>常用配置路径<a href="https://www.529i.com/archives/344.html">LEDE编译教程 - 憶の年</a></li>
<li><a href="https://www.jinbo123.com/7672.html">编译 Lean 大神的 OpenWrt (x86_x64) 固件教程汇总 | 佐仔志添加Passwall插件|</a></li>
<li><a href="https://www.bilibili.com/read/cv1820955/">7620 k2 openwrt固件的编译(WSL,Ubuntu18.04) - 哔哩哔哩</a></li>
<li><a href="https://wp.gxnas.com/4439.html">如何从零开始编译 OpenWRT (LEDE) 固件【Lean 大源码】 - GXNAS 博客</a></li>
<li><a href="http://www.linvon.cn/posts/%E8%AE%A4%E8%AF%86%E4%B8%8E%E4%BA%86%E8%A7%A3openwrt/">认识与了解 OpenWrt（meneconfig 解析）</a></li>
</ul>
]]></content>
      <categories>
        <category>路由器</category>
      </categories>
      <tags>
        <tag>openwrt</tag>
        <tag>padavan</tag>
        <tag>merlin</tag>
      </tags>
  </entry>
  <entry>
    <title>花式折腾小米推送框架</title>
    <url>/hua-shi-zhe-teng-xiao-mi-tui-song-kuang-jia/</url>
    <content><![CDATA[<p>「人生的坑爹遭遇有很大一部分来源于手贱」</p>
<p>自上个月写完了安卓短信/通讯录/流量信息备份相关的内容，然后我更新完了系统折腾掉所有坑以后，这台狗米 note7pro 可以稳定很久不用动了。然而话是这么说，人不作死就不会死。。。我手贱点开了 tg 的小米推送框架群，看到了新版本，push 和 framework 合在一起了，不过 comments 里面已经有老哥说更新以后会出现推送错误的问题。</p>
<p>管他呢！更新。结果更新完真的就提示注册异常，不过好消息是还能推送。另外新的二合一 app 和原来的 framework app 签名不一样，包名也不一样，原来的 framework app 打开即闪退。</p>
<p>好家伙，不能忍。删除装回原版，发现没有用了。。。注册还是失败。转了一圈尝试了各种方法，得出了一些结论：</p>
<ol>
<li><p>某米服务器那边应该是改了验证机制，导致现在得用一些比较奇葩的方法才能保证应用能够注册上。原来已经注册上的就不受影响，所以如果我用原版没有问题就应该毛事没有。</p>
</li>
<li><p>奇特的方法包括：安装成为系统应用；使用旧版；安装 xposed 欺骗框架；安装 magisk 欺骗框架。</p>
</li>
<li><p>经过我的实验，装 2018 年的版本，无论怎么样应用都没法注册上，连推送出错都没有发生，直接就「使用小米推送，但尚未注册」；而安装最新的二合一版本，就算上了 xposed 欺骗框架 + magisk 欺骗框架 + 安装成系统应用，仍然会弹出推送错误的提示。</p>
</li>
<li><p>在 framework app 中，打开「应用注册时显示通知」 的开关，正常情况下打开支持小米推送的应用，应该会弹出注册推送的 toast。另外第一次注册的应用会在记录中留下四条注册推送成功的讯息（比如下图中的 tx 加速器），少一条都有可能是出了问题的征兆。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/sTMlXGt.png"></p>
</li>
<li><p>无论用什么手段。。。设置里全局伪装为小米设备的开关在关闭 framework apk 重新打开后都会发现被自动关上了。另外 Q&amp;A 中提到的重装 framework app 和 push app 后需要重装注册过的应用才会摆脱「注册异常」的提示，我应用后并没有改善，后续解决该问题也不是靠的重装应用。可能是因为我这台设备本来就是小米，只不过刷了类原生而已。。。</p>
</li>
<li><p>伪装为小米设备有好多种方法。其中，旧版（2018 版）会自动在 xposed 里面装一个 push 模块；旧版的 magisk 里可以下到不需要 riru 的 xposed 欺骗模块；还可以用 magisk props config 手动修改 props 文件（具体修改步骤百度/在酷安搜索）；比较新的两个方法是使用 riru 模块 <a href="https://github.com/MiPushFramework/MiPushFakeForRiru">MiPushFakeForRiru</a>；或者是使用 edxposed 中可以在仓库中搜到的 <a href="https://repo.xposed.info/module/org.meowcat.xposed.mipush">MiPush Framework Enhancement</a>。总而言之让相关应用能够识别出你在用 miui 就成功了。所以强烈推荐其中的 <a href="https://repo.xposed.info/module/org.meowcat.xposed.mipush">MiPush Framework Enhancement</a>，就算没有生效它也能读出你被伪装成什么版本的 miui，伪装到了何种程度（另外这个软件要生效，不仅在 edxposed 中需要启动，打开软件后还要把工作模式设为黑名单，默认的已禁用模式软件也不生效）。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/hGq1EI3.png"></p>
</li>
<li><p>开启 selinux 的情况下也会出现注册异常的状况。但注册成功的应用即使在 selinux 开启的情况下仍然能够正常推送。</p>
</li>
</ol>
<p>回到正题，在我这台类原生 pe 的红米 note7 pro 上，我具体做了这么几部：</p>
<ol>
<li>关闭 selinux。可以用各种终端软件（比如 termux），获取 root 后输入 <code>setenforce 0</code> 即可。也可以用各种 kernel manager，开机自动运行该命令。</li>
<li>安装 200315 版本的 push 和 framework app。</li>
<li>使用 magisk 模块 App Systemizer 将两个应用全部移入 <code>/system/priv-app</code> 中。粗略步骤是安装模块后重启，在终端中获取 su 后输入 systemize，然后按提示操作。注意两个都要移进去，移一个的话我试过一次，照样出错。</li>
<li>安装上文提到的 MiPushFakeForRiru （如果没装过 riru 还得装 riru 模块，不过都装了 xposed，riru 我觉得大家都应该装了）和 MiPush Framework Enhancement，后者记得正确启用。（前者其实不一定有用，但后者一定要装）</li>
<li>打开软件，正确给予权限。</li>
<li>打开支持小米推送的应用，此时回到 framework app 会发现提示注册失败。稍安勿躁，等个几个钟头就会奇迹般的变成注册成功了（</li>
<li>相关的推送还要等半天到一天才会恢复正常。不要指望刚装上应用注册成功就会有推送来找你（</li>
</ol>
<p>大概就是这样。还可以通过 <a href="https://github.com/MiPushFramework/MiPushTester">MiPushTester</a> 来验证推送是不是真的正常了。不过话说回来，第一次我按上面的大概步骤做了以后，正常了几天，后面推送是出来了，点击推送相关应用弹不出来。。。看日志是 intent 卡住了，后来我又重装试了一通新旧版本，再后来我又大概按上面的步骤做了一次，又正常了。。。这次正常使用了十来天，我觉得应该是彻底正常了。所以上面的步骤 1-5，也不用太严格遵守啦，毕竟我没有严格测试过那步放在后面就会 crash，我大概回忆了一下差不多是这样，再严格测试出什么幺蛾子那又麻烦了（</p>
<p>总之不要手贱，能用的就不要东搞西搞（</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>magisk</tag>
        <tag>xposed</tag>
        <tag>mipush</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Virtual Devices（AVD） root/Magisk/xposed</title>
    <url>/android-virtual-devices-avd-root-magisk-xposed/</url>
    <content><![CDATA[<p>在 windows 下操作，终端使用 powershell。</p>
<h2 id="旧系统（如-4-4-kitkat）-supersu"><a href="#旧系统（如-4-4-kitkat）-supersu" class="headerlink" title="旧系统（如 4.4 kitkat）+ supersu"></a>旧系统（如 4.4 kitkat）+ supersu</h2><p>主要参考文章：<a href="https://juejin.im/post/6844903840026722311">搞机：AS自带模拟器AVD Root 和 Xposed安装</a></p>
<p>旧系统可以安装 supersu + 旧版本 xposed。</p>
<ol>
<li><p>在 as 中查询 sdk 目录位置（一般在 <code>%localappdata%\Android\Sdk</code>），将其中的 <code>platform-tools</code> 和 <code>tools</code> 加入系统变量 path 中（一般来说，前者包含有 adb.exe，大多数人都已经加了。后者包含有 emulator.exe，大多数人没加但待会要用，如果不想加进去的话用这个命令的时候带上路径也可以；另外 emulator.exe 在 <code>%localappdata%\Android\Sdk\emulator</code> 下也有一份，有时候高版本安卓要用 emulator 目录的打开才行。可以先用 emulator 命令带上路径启动虚拟机看看）</p>
</li>
<li><p>查询要 root 的虚拟机名字</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">emulator -list-avds</span><br></pre></td></tr></tbody></table></figure>

<p>以可读状态启动虚拟机（启动后这个终端窗口就别关了，后面的操作新建一个新终端窗口）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">emulator -avd [刚刚查到的虚拟机名字] -writable-system</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>解除 selinux</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb remount</span><br><span class="line">adb shell</span><br><span class="line"># 这里进入到虚拟机那边的 shell 中</span><br><span class="line">&gt; setenforce 0</span><br><span class="line">&gt; exit</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>替换 su。需要获取对应的 su.pie。获取方法有这么几个：</p>
<ul>
<li>文章里面有<a href="https://pan.baidu.com/s/1hRrPZhRxbHRtBkJxNxO1rQ">百度网盘</a>，提取码 cg08，网盘里面有个压缩包，解压待用。</li>
<li>github 的某个项目 <a href="https://github.com/meefik/avd-root">meefik/avd-root</a>。同样是里面的压缩包，版本还比较新。值得一提的是这个其实是个 avd 一键 root 工具，但脚本适用于 shell，但应该是 linux 下使用的或者在虚拟机 sdcard 内展开然后用 adb shell 进去，总之我不太明白怎么用。。。</li>
<li>编译。这个我有疑问，也挺麻烦，所以后面说。</li>
</ul>
<p>将其中的两个 su.pie 用 adb push 到相应位置。如果是通过前两个方法，解压后进入文件夹中运行终端，然后输入：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">adb push .\x86\su.pie /system/bin/su</span><br><span class="line">adb push .\x86\su.pie /system/xbin/su</span><br><span class="line">chmod 0755 /system/bin/su</span><br><span class="line">chmod 0755 /system/xbin/su</span><br><span class="line">su --install</span><br><span class="line">su --daemon&amp;</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>再新建终端窗口。这次是装软件，要装 supersu 的管理器和 xposed 管理器。supersu 同样在上面前两个获取项目中有。如果你的模拟器用的是 5.0-8.0 版本，那上面的 xposed-framework 也能用。但这是旧系统，也就是 4.4，就需要用更低版本的，不好找，在这个帖子：<a href="https://forum.xda-developers.com/xposed/development/xposed-android-4-4-4-fixed-please-t3633573">Xposed for android 4.4.4 is NOT fixed, please compile 87v for sdk19</a> 里这里找到一个能用的：<a href="https://forum.xda-developers.com/attachment.php?attachmentid=4223376&amp;d=1501026273">Xposed 2.7.1 by Sola Warez.apk</a>。另外 4.4 版本 avd 没有文件管理器，也得装一个；装一个钛备份测试 root 结果，等等等等。可使用 adb install 命令安装，以 supersu 和 xposed 为例：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">adb install .\SuperSU-v2.82-SR5.apk</span><br><span class="line">adb install .\Xposed_2.7.1_by_Sola_Warez.apk</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>此时打开钛备份就会弹出 root 提示了。注意打开 supersu 会提示你更新 su 文件，不要点击确认，不管它，点击 cancel 即可。</p>
</li>
<li><p>如果要重启就比较麻烦。文章建议用 <code>adb reboot</code> 但亲测无效。另外两个方法是使用 xposed 软重启和直接通过 gui 进行软重启。重启后可能还需要再运行一次 <code>su --daemon&amp;</code>。关闭的话，不要通过 gui 的电源关机，直接点右上角的 x 让 avd 保存快照就好了。但未来启动仍然需要通过 <code>emulator</code> 命令启动而不是通过 avd gui 直接启动。</p>
</li>
</ol>
<h3 id="其他参考资料"><a href="#其他参考资料" class="headerlink" title="其他参考资料"></a>其他参考资料</h3><ul>
<li><a href="https://stackoverflow.com/questions/5095234/how-to-get-root-access-on-android-emulator">How to get root access on Android emulator?</a> 这里似乎给出了固化 root 的方法。</li>
<li><a href="https://github.com/0xFireball/root_avd">Rooting the Android Studio AVDs</a> 这是另一个教程，补充了重启后失效的内容。</li>
<li>su.pie 编译方法获取：<a href="https://bbs.pediy.com/thread-226115.htm">[原创]学习Androidx86模拟器root安装xposed</a>。这同时也是另一个教程。不过看得我有些云里雾里：编译时应该用 supersu 项目的代码还是安卓源码？如果是安卓源码那就有点麻烦了。。。安卓源码非常大，需要谷歌的专门 cli 工具（基于 git 开发的）下载还要先下载一个 30g 的 base 包；然后再下载相应分支（系统版本）的代码。。。但看这篇教程，好像只编译了部分代码？但要获取部分代码也很麻烦：谷歌将不同组件分散在一大堆库中，你得找到相应的库才有对应的文件（当然，在网页端点开相应的库，没点错的话就会直接让你选择系统分支了）。而且貌似<a href="https://android.googlesource.com/platform/system/extras/+/refs/heads/kitkat-release/su/">对应源码目录的结构</a>还和教程中的结构不太一样（少一个 mk 文件），所以我倾向于编译 supersu 的源码。更多关于安卓源码下载的文章：<ul>
<li><a href="https://github.com/foxleezh/AOSP/issues/1">如何下载Android源码 #1</a> 谷歌那一大堆库中比较重要的几个仓库</li>
<li><a href="https://blog.csdn.net/xx326664162/article/details/86354616">Android 系统源码——下载到编译</a> 手把手源码下载教学</li>
</ul>
</li>
<li>第三方 su 生效原理<ul>
<li><a href="https://zhuanlan.zhihu.com/p/47661378">Android系统su命令源码分析</a></li>
<li><a href="https://blog.csdn.net/oLevin/article/details/18796435">Android 获取ROOT权限原理解析</a></li>
</ul>
</li>
<li>听说该方法不能用在 google play 版本系统中（待验证）</li>
</ul>
<h2 id="新系统（android-10）-magisk"><a href="#新系统（android-10）-magisk" class="headerlink" title="新系统（android 10）+ magisk"></a>新系统（android 10）+ magisk</h2><p>先给两篇参考文章，分别代表了两种思路：</p>
<ul>
<li><a href="https://github.com/shakalaca">shakalaca</a>/<strong><a href="https://github.com/shakalaca/MagiskOnEmulator">MagiskOnEmulator</a></strong></li>
<li><a href="https://anthony-f-tannous.medium.com/android-10-emulation-of-magisk-supersu-on-an-aosp-avd-de93ed080fad">Android 10: Emulation of Magisk/SuperSU on an AOSP AVD</a></li>
</ul>
<p>建议使用第一种。第二种需要手工编译并下载 sdk，操作繁琐的多。唯一的好处就是不用放修改后的 ramdisk.img 到 sdk 镜像里面。</p>
<h3 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h3><ol>
<li><p>到第一篇参考文章中，将整个项目拖下来（git clone / 直接下载源码压缩包）。</p>
</li>
<li><p>查询虚拟机名字后（见上文），启动虚拟机。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">emulator -avd [刚刚查到的虚拟机名字]</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>找到 sdk 目录下的 <code>system-images</code> 文件夹，在你所启动的对应版本系统文件夹里面找到 <code>ramdisk.img</code> ，先在原地复制并粘贴（为了保留一份副本），再将该文件拷到项目文件夹中。</p>
</li>
<li><p>确认虚拟机和 adb 正常启动并运行的情况下，运行项目文件夹中的 <code>patch.bat</code>。</p>
</li>
<li><p>运行完毕后将项目文件夹中的 <code>ramdisk.img</code> 拷回 <code>system-images</code> 对应版本系统文件夹中覆盖，关闭虚拟机并进行冷启动即可。</p>
</li>
</ol>
<h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><ul>
<li><p>本方法是关键文件是项目文件夹里面的 <code>magisk_emu.zip</code>。这个 zip 其实和官网 release 下载到的不同版本 magisk zip recovery 安装包是一个性质的东西。不同的地方在于，存在于项目文件夹的这个文件是 debug 版本的，文件大小要比 release 版大一倍。</p>
</li>
<li><p>也正因如此，如果要升级 magisk / 使用 release 版本，替换这个 magisk 文件然后走一下 3~5 步即可。</p>
</li>
<li><p>不直接运行 <code>patch.bat</code>，而是在 powershell 中运行，能查看到运行日志。release 版的压缩包，运行起来会会多显示一句</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">run-as: package not debuggable: com.topjohnwu.magisk</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://i.imgur.com/IHo0bTR.png"></p>
<p>也明显能感觉到 <code>patch.bat</code> 使用 release 包时比 canary 包慢。</p>
</li>
<li><p>阅读文档，patch.bat 还能跑一个 canary 的参数。其实只是改为在线获取而已。</p>
</li>
<li><p>使用 release 版本，附带的 magisk manager 有可能因为某些原因（版本过旧[^1]/网络太差[^2]）无法正常识别所安装的 magisk。覆盖安装最新版的 magisk manager 可解（在目前这个时间点，release 版本低于 v20.3 用的都是旧版 ui 客户端，基本都会报错；v20.4 虽然已经用了新版 ui 客户端但还是报错，只有 v21.0 不需要覆盖装 manager 本身就正常）。</p>
</li>
<li><p><strong>（软件兼容性问题）</strong> 非 google play rom 版本下钛备份无法正常使用，获取不到 root。原因是钛备份读取的是 <code>/system/xbin/su</code>，而用上面方法整出来的 magisk，生效文件在 <code>/sbin/su</code>。用 Root Checker Pro 就能发现问题，supersu 能够读取处 su 版本。</p>
<p><img src="https://i.imgur.com/FS9wKgj.png"></p>
<p>magisk 这里就会显示有问题。</p>
<p><img src="https://i.imgur.com/hDnPPiO.png"></p>
<p>实机 magisk 因为 <code>/system/xbin/su</code> 处没有文件，所以钛备份就才会读取 <code>/sbin/su</code>。那虚拟机这里怎么会有文件呢？原来这里的 <code>/system/xbin/su</code> 是给 adb 用的。。。</p>
<p>解决方法，给一个硬连接。</p>
<ol>
<li><p>先用可读 system 和 selinux 宽松模式启动虚拟机</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">emulator -avd [刚刚查到的虚拟机名字] -writable-system -selinux permissive</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>remount adb 的 su</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb remount</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>给上硬连接。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ln -sf /sbin/su /system/xbin/su</span><br></pre></td></tr></tbody></table></figure>

<p>即可。重启不影响效果。和修改前的区别就是以后使用 <code>adb root</code> 时需要在系统内的 magisk 弹窗确认。</p>
</li>
</ol>
</li>
<li><p>（系统兼容性）经测试不存在该问题。是否 google play 版本不影响 magisk 生效。另外 google play 版本不需要解决软件兼容性问题，因为本身就不运行在 adb 内运行 root，也就不会有 <code>/system/xbin/su</code> 的存在。</p>
</li>
</ul>
<h3 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h3><p>简单提一下，主要是编译坑多。编译步骤还可以看一下 <a href="https://github.com/topjohnwu/Magisk">magisk 项目</a> 底下说明，参考文章里面用的是最新版的编译方法，旧一点的版本（低于 v21.0） build.py 里面就没有 ndk 的编译选项。如果要编译旧版本，可以从 magisk 项目切换到旧版本的 tag 就能在底下看到旧版本的对应说明了。</p>
<ol>
<li><p>克隆项目。项目所在目录首选你系统的用户目录，其次是驱动器盘根目录（如果你的用户名是中文的话）。切记别放在路径有中文的目录中。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">git clone --recurse-submodules https://github.com/topjohnwu/Magisk.git</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>安装 jdk8，python 3.6，设置好 path，另外旧版本 magisk 需要设置 <code>ANDROID_HOME</code> 这个用户变量；而新版本 magisk 需要设置 <code>ANDROID_SDK_ROOT</code> 这个用户变量。两个用户变量都是指向 sdk 目录的。</p>
</li>
<li><p>装个 colorma。或者删掉 colorma 在 build.py 中的依赖代码（显示个代码颜色，不用不会死）。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">pip install colorama</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>将文件 <code>config.prop.sample</code> 复制并改为 <code>config.prop</code>。修改内容，要修改的内容类似于下面这两串代码。（其实是成功安装后在 magisk manager 里面显示出来的版本号，都自己编译了，别按下面模板改，该非亿点就非一点）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"># The version name and version code of Magisk</span><br><span class="line">version=20.4</span><br><span class="line">versionCode=20400</span><br><span class="line">​</span><br><span class="line"># The version name and version code of Magisk Manager</span><br><span class="line">appVersion=7.5.1</span><br><span class="line">appVersionCode=267</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>开始编译</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">python build.py ndk</span><br><span class="line">python build.py all</span><br></pre></td></tr></tbody></table></figure>

<p>可能会有很多报错坑，类似下 ndk 压缩包的时候网络慢报错（挂代理）；</p>
<p>类似编译 ndk 的时候出现</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">'gbk' codec can't decode byte 0x8b in position 79: illegal multibyte...</span><br></pre></td></tr></tbody></table></figure>

<p>这个需要修改 build.py 的相关位置，类似于</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">125     with open(file, 'r') as f:</span><br></pre></td></tr></tbody></table></figure>

<p>改成</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">125     with open(file, 'r',encoding='utf-8') as f:</span><br></pre></td></tr></tbody></table></figure>

<p>（话说回来这个错误在我把项目放在 c 盘根就出现了，放在用户目录就不会出现）</p>
<p>还有编译 all 的时候出现</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">windows javax.net.ssl.SSLException</span><br></pre></td></tr></tbody></table></figure>

<p>这个得挂代理。</p>
<p>等等等。</p>
</li>
<li><p>一顿操作</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb push native\out\x86\busybox scripts\emulator.sh /data/local/tmp</span><br><span class="line">adb push native\out\x86\magiskinit64 /data/local/tmp/magiskinit</span><br><span class="line">adb shell "mkdir -p /data/adb/magisk"</span><br><span class="line">adb shell "cp /data/local/tmp/busybox /data/adb/magisk/"</span><br><span class="line">adb push scripts\util_functions.sh /data/adb/magisk/</span><br><span class="line"></span><br><span class="line">adb shell sh /data/local/tmp/emulator.sh</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>验证一下</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">adb shell "ps -ef | grep -i magisk"</span><br></pre></td></tr></tbody></table></figure>

<p>出现</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">root  ..... 00:00:00 magiskd</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>然后装 magisk manager 就行了。</p>
</li>
</ol>
<h4 id="拓展-1"><a href="#拓展-1" class="headerlink" title="拓展"></a>拓展</h4><ul>
<li>这个方法也会生成一个 zip 文件，也是个典型的 magisk.zip 文件。但这个 magisk-debug.zip 放到方法 1 里面用，用 Root Checker Pro 检查，su 参数正确但 root 确认框一闪而过，没法正常使用。。。</li>
<li>这个方法同样有钛备份的兼容问题，解决方法同上。</li>
</ul>
<hr>
<p>[^1]: 让模拟器 magisk 正常运行的 emulator.sh 放出时间不早于 v20.0。<br>[^2]:  让 magisk 网络功能在大陆能够比较畅快使用 cdn 功能的客户端大概版本也不低于 8.0。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>magisk</tag>
        <tag>xposed</tag>
        <tag>simulator</tag>
      </tags>
  </entry>
  <entry>
    <title>xbox 跨区羊毛（神界原罪 2）小记</title>
    <url>/xbox-kua-qu-yang-mao-shen-jie-yuan-zui-2-xiao-ji/</url>
    <content><![CDATA[<p>这都能被我薅到。。。</p>
<p>前情提要：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/j8Upwjz.jpg"></p>
<p>那时候已经 5.16 了，我的毕业论文 5.18 就要答辩了。。。。但神界原罪 2 我一直挺想玩的，主要是听说有同屏可以和朋友愉快玩耍，于是禁不住诱惑从 3 点到 7 点浪费了宝贵的 4 个小时，试图薅到一根羊毛（可都是 deadline 时光！deadline 时光人战斗力很旺盛的，一个小时顶平常一个月呢！）。</p>
<p>然而。。。很遗憾，想想，留一个码吧，起码留点我努力过的痕迹，于是又去另外一家问，10 元买了个码。</p>
<p>后面不甘心又试了试，谷歌搜索找到一堆哥伦比亚的梯子，找到个疑似能用的梯子时候的时候已经晚上 7 点了，听比价助手评论区说 7 点后临时工就被枪毙了，多买的码全废了。。。</p>
<p>但是，过了几个小时听说又能薅了？到了第二天开咸鱼，全部涨价到了 40 ？？？有猫腻。我又做了点尝试，还是提示地区不对，还是不能薅，要继续实验太浪费时间了，搁置，接着肝答辩 ppt。</p>
<p>时间过去一个月，回顾一下 xbox 比价助手的神界原罪评论区。根据比价助手评论区老哥的说法，有的到澳区成功？</p>
<p>澳大利亚的 vps 在 vultr 能开，开一个拿来做点小实验顺手再试试？转眼就开了四天，开一天花一天钱，想想无论如何也要再做尝试把羊毛薅到。</p>
<p>最后确定澳大利亚的 vps 确实没用。然后一个个试哥伦比亚的 ip，还是在老地方试，windows 桌面版商店 app，试到某一个，成功进到领游戏的地方，结果到最后一步点确定提示是在别的区购买的码，无法兑换。</p>
<p>再谷歌看看！看到湾湾 16 年说在网页端能换。反正已经下了个 firefox（方便用来验证 ip 是否可用的），顺手拿这个开微软商店也不费多少时间。众所周知电信晚上 2 点后过了晚高峰，也许好一点。</p>
<p>到了两点，先试了两个 ip，在微软商店处都报错，连领游戏的界面都进不去。网页版点击兑换，标题后面地区始终显示是在香港而不是哥伦比亚，我尝试调了我自己的 xbox 地区到哥伦比亚，又把账单全部调到哥伦比亚，结果进去还是显示香港。。。不管了，开开代理直接输入兑换码，结果。。。等了好一阵成功了，惊了！不过打开 xbox，游戏库里面没刷出来，进入商店找神界原罪 2，显示已购买，直接下载，成了！（激动.jpg）</p>
]]></content>
      <categories>
        <category>Game</category>
      </categories>
      <tags>
        <tag>跨区</tag>
        <tag>羊毛</tag>
        <tag>xbox</tag>
      </tags>
  </entry>
  <entry>
    <title>wireshark 抓代理工具包</title>
    <url>/wireshark-zhua-dai-li-gong-ju-bao/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="你不对劲！" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ba4cd431dd7b37825a0b49768745a2a1530656410bd778d7699d0f77e588ee99"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">天王盖地虎</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>kcptun</tag>
        <tag>finalspeed</tag>
        <tag>wireshark</tag>
      </tags>
  </entry>
  <entry>
    <title>「麻雀虽小，五脏俱全」：Android 端 terminal termux 上手调校指南</title>
    <url>/ma-que-sui-xiao-wu-zang-ju-quan-android-duan-terminal-termux-shang-shou-diao-xiao-zhi-nan/</url>
    <content><![CDATA[<p>Android 端 terminal 选择挺多的，甚至除了本地 terminal 之外，专精于 ssh 连接的工具（例如 juicessh、termius），那些个能给 Android 装上 Linux 子系统的工具都能或多或少的执行 Terminal 的工作。本文的主角 termux 就是其中一个轻量级本地 terminal。论界面和易用性，termux 绝对是排倒数的，教程、界面选择、各种设置啥的一概没有；但 terminal 该做的东西，比如软件生态，自启，服务，它都有；比他更全能的 Linux 虚拟机又太过臃肿，和它一样轻量的本地 terminal 们除了运行点二进制外就啥也没有了。但要发挥出 termux 的功力，免不了得折腾一番。</p>
<p>参考文章：</p>
<ol>
<li><a href="https://p3terx.com/archives/termux-tutorial-1.html">Termux 使用教程 #1 - Android 手机安装 Linux</a>：快捷键，ssh</li>
<li><a href="https://p3terx.com/archives/termux-tutorial-2.html">Termux 使用教程（二）：打造手机上的最强终端</a>：自定义扩展输入栏，换源，oh-my-zsh 和插件</li>
<li>国光：<a href="https://www.sqlsec.com/2018/05/termux.html">Termux 高级终端安装使用配置教程</a> 信息安全类的包</li>
<li><a href="https://www.jianshu.com/p/b688c9df69c6">神器Termux的使用记录</a> php+nginx+wordpress</li>
<li><a href="http://www.huangpan.net/posts/ji-ke/2019-08-19-termux.html">Termux 学习笔记</a> hexo，和一些 cli 文件管理工具</li>
</ol>
<h2 id="修改源"><a href="#修改源" class="headerlink" title="修改源"></a>修改源</h2><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">vi $PREFIX/etc/apt/sources.list</span><br></pre></td></tr></tbody></table></figure>

<p>将原来的源注释掉，加入清华源</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/termux stable main</span><br></pre></td></tr></tbody></table></figure>

<h2 id="安装必须软件"><a href="#安装必须软件" class="headerlink" title="安装必须软件"></a>安装必须软件</h2><p>其中，可选的：</p>
<ul>
<li>pynat 测梯子 udp 连通性和 nat 类型</li>
<li>tldr 命令例子，类似 man</li>
<li>tsu 没有 root 不用装，在 tsu 下既可以获得 su 的权限又不用忍受 su 的界面</li>
<li>supervisor，自启</li>
<li>openssh，后面某些步骤操作比较复杂（特别是自启那个地方），用电脑远程 ssh 连接效率较高（不过平时本来手机就到处带，如果不涉及路径的反复操作意义不大）</li>
<li>neofetch，打开终端时的欢迎界面</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">pkg update</span><br><span class="line">pkg install vim tsu tmux python openssh neofetch</span><br><span class="line">pip install pynat tldr</span><br></pre></td></tr></tbody></table></figure>



<h2 id="自定义扩展功能按键"><a href="#自定义扩展功能按键" class="headerlink" title="自定义扩展功能按键"></a>自定义扩展功能按键</h2><p>打开相关文档</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">vim ~/.termux/termux.properties</span><br></pre></td></tr></tbody></table></figure>

<p>将原来的配置注释或删掉，新增一行</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">extra-keys = [['ESC','/','-','HOME','UP','END'],['TAB','CTRL','ALT','LEFT','DOWN','RIGHT']]</span><br></pre></td></tr></tbody></table></figure>

<h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sshd</span><br></pre></td></tr></tbody></table></figure>

<p>需要密钥的话参考第二篇文章，在 github 中设置公钥，然后使用一键脚本设置：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">bash &lt;(curl -Ls git.io/ikey.sh) -g zbttl</span><br></pre></td></tr></tbody></table></figure>

<p>查看一下手机当前的 ip 地址</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></tbody></table></figure>

<p>之后使用 xshell 之类的 ssh 工具通过本手机的内网 ip 和密钥连接 8022 （不是 22）端口就行了。</p>
<p>ssh 下，尽管是局域网，输入命令运行时仍会感到明显的延迟。原因不明。</p>
<h2 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h2><h3 id="安装-zsh"><a href="#安装-zsh" class="headerlink" title="安装 zsh"></a>安装 zsh</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">pkg i -y zsh</span><br></pre></td></tr></tbody></table></figure>

<h3 id="安装-Oh-My-Zsh"><a href="#安装-Oh-My-Zsh" class="headerlink" title="安装 Oh My Zsh"></a>安装 Oh My Zsh</h3><p>使用 curl 下载安装</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"</span><br></pre></td></tr></tbody></table></figure>

<p>Oh My Zsh 安装完成后会提示你设置 zsh 为默认 shell 。如果没有提示，输入下面的命令进行设置：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">chsh -s zsh</span><br></pre></td></tr></tbody></table></figure>

<h3 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h3><p>直接在 <code>.zshrc</code> 中修改</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></tbody></table></figure>

<p>修改这一行</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ZSH_THEME="[主题名]"</span><br></pre></td></tr></tbody></table></figure>

<p>或者使用命令</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sed -i '/^ZSH_THEME=/c\ZSH_THEME="[主题名]"' ~/.zshrc</span><br></pre></td></tr></tbody></table></figure>

<p>这里推荐两个主题：</p>
<ol>
<li><p>自带的 agnoster</p>
</li>
<li><p><a href="https://github.com/romkatv/powerlevel10k">powerlevel10k</a>，符号全，但需要安装</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">git clone --depth=1 https://github.com/romkatv/powerlevel10k.git $ZSH_CUSTOM/themes/powerlevel10k</span><br></pre></td></tr></tbody></table></figure>

<p>修改 <code>~/.zshrc</code></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ZSH_THEME="powerlevel10k/powerlevel10k"</span><br></pre></td></tr></tbody></table></figure>

<p>重启 termux 后，输入命令进入配置</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">p10k configure</span><br></pre></td></tr></tbody></table></figure>

<p>根据自己喜好选择。可以通过输入该命令反复修改。</p>
</li>
</ol>
<h3 id="安装-Oh-My-Zsh-插件"><a href="#安装-Oh-My-Zsh-插件" class="headerlink" title="安装 Oh My Zsh 插件"></a>安装 Oh My Zsh 插件</h3><p>安装 <a href="https://p3terx.com/go/aHR0cHM6Ly9naXRodWIuY29tL3pzaC11c2Vycy96c2gtc3ludGF4LWhpZ2hsaWdodGluZw==">zsh-syntax-highlighting</a>（代码高亮）</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting $ZSH_CUSTOM/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></tbody></table></figure>

<p>安装 <a href="https://p3terx.com/go/aHR0cHM6Ly9naXRodWIuY29tL3pzaC11c2Vycy96c2gtYXV0b3N1Z2dlc3Rpb25z">zsh-autosuggestions</a>（自动建议）</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</span><br></pre></td></tr></tbody></table></figure>

<p>安装 <a href="https://p3terx.com/go/aHR0cHM6Ly9naXRodWIuY29tL3pzaC11c2Vycy96c2gtY29tcGxldGlvbnM=">zsh-completions</a>（自动补全）</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-completions $ZSH_CUSTOM/plugins/zsh-completions</span><br></pre></td></tr></tbody></table></figure>

<p>安装 autojump（快速跳转）（可选）（粗略使用方法为用 <code>j xxx</code> 进入安装 autojump 以后进入过的文件夹。用 <code>j --stat</code> 查看当前 autojump 记录你进过的文件夹）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">git clone git://github.com/joelthelion/autojump.git</span><br><span class="line">cd autojump</span><br><span class="line">./install.py</span><br></pre></td></tr></tbody></table></figure>

<p>运行后会弹出提示，让你加内容到 <code>.zshrc</code> 中。</p>
<p><img src="https://i.imgur.com/XIwtL6V.png"></p>
<p><del>或是直接输入命令</del>（sed 命令一键操作已经执行该内容）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">echo "[[ -s $HOME/.autojump/etc/profile.d/autojump.sh ]] &amp;&amp; source $HOME/.autojump/etc/profile.d/autojump.sh" &gt;&gt; ~/.zshrc</span><br></pre></td></tr></tbody></table></figure>

<p>zsh-com­ple­tions 插件还需把 <code>autoload -U compinit &amp;&amp; compinit</code> 添加到<code>.zshrc</code>。输入命令可一键添加：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[ -z "`grep "autoload -U compinit &amp;&amp; compinit" ~/.zshrc`" ] &amp;&amp; echo "autoload -U compinit &amp;&amp; compinit" &gt;&gt; ~/.zshrc</span><br></pre></td></tr></tbody></table></figure>

<p>把需要启用的插件写入到配置文件中，使用 <code>sed</code> 命令一键操作。</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sed -i '/^plugins=/c\plugins=(git z zsh-syntax-highlighting zsh-autosuggestions zsh-completions)' ~/.zshrc</span><br><span class="line"><span class="meta">#</span><span class="bash">加入autojump</span></span><br><span class="line">sed -i '/^plugins=/c\plugins=(git z zsh-syntax-highlighting zsh-autosuggestions zsh-completions autojump)' ~/.zshrc</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>如果你有自己想添加的插件，写在括号内即可，插件名称用空格隔开。</p>
</blockquote>
<p>最后应用配置</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></tbody></table></figure>

<h2 id="应用自启"><a href="#应用自启" class="headerlink" title="应用自启"></a>应用自启</h2><p>辅以一个例子：kcptun 客户端打开 termux 时自启，kcptun 二进制文件放在用户根目录 <code>~/</code> 下</p>
<p>原命令：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">~/kcptun -l :2580 -r [IP:PORT] -key [PASSWORD] -crypt none -nocomp -datashard 0 -parityshard 0 -conn 4 -mtu 1200 -sndwnd 1024 -rcvwnd 3500 -mode normal</span><br></pre></td></tr></tbody></table></figure>

<h3 id="直接写入-bash-文件中"><a href="#直接写入-bash-文件中" class="headerlink" title="直接写入 bash 文件中"></a>直接写入 bash 文件中</h3><p>最便捷的方法。持续运行的命令需要配合重定向命令运行在后台。直接将命令放入 bash 文件中（默认为 <code>.bashsrc</code>，经过我们上面的修改后为 <code>.zshrc</code>)，还可通过重定向命令将输入放在文件中便于查错。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">~/kcptun -l :2580 -r [IP:PORT] -key [PASSWORD] -crypt none -nocomp -datashard 0 -parityshard 0 -conn 4 -mtu 1200 -sndwnd 1024 -rcvwnd 3500 -mode normal &gt;~/kcptun.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></tbody></table></figure>

<p>另外也可以通过 jobs 指令查看后台已经运行了几个这样的进程。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">jobs -l</span><br></pre></td></tr></tbody></table></figure>

<p>但缺点时启动多个 termux 窗口或使用终端复用时，每新增一个窗口就会多运行一次这个指令，如果运行的命令没有自动限制自己只能运行一个实例的功能，那么可能会引起冲突和 bug。</p>
<p>实际上，这个功能比较适合需要更换终端窗口时重复运行的程序（比如终端欢迎界面 neofetch），和拥有独立控制，但需要随 termux 自启的 supervisor（这个我们之后讲），对于 kcptun 以及我手机上运行的另一个项目 UnblockNeteaseMusic 来说只是勉强合适，如果不开多终端没问题，开了多个终端以后就算后面又关到只剩一个终端甚至重启 termux 也会发现有项目正在运行或者运行不正常但在 jobs 命令中找不到，只能重启手机或者利用 <code>kill -9</code> 指令强行杀掉。</p>
<p><strong>（20.5.28 更新）</strong> 经过一番研究，可能写在 <code>./.zprofile</code> 中会比较好。因为 profile 文件中的命令只在第一次启动登录时会运行，而 bash 文件会在每一次打开命令行窗口时运行（适合放入系统变量一类的东西）。</p>
<h3 id="termux-services"><a href="#termux-services" class="headerlink" title="termux-services"></a>termux-services</h3><p>参考文章：</p>
<ul>
<li><a href="https://github.com/termux/termux-services/issues/4">how to add self service #4</a></li>
<li><a href="https://wiki.termux.com/wiki/Termux-services">Termux-services</a></li>
<li><a href="https://github.com/termux/termux-packages/blob/53de8cdd264228255c02388f30c38f90d3f9eab2/packages/openssh/build.sh#L87">termux-packages/packages/openssh/build.sh</a></li>
<li><a href="https://blog.csdn.net/diyiday/article/details/78709949">runit 快速入门</a></li>
</ul>
<p>官方推荐的方法。实际上改自 runit，不过日志部分直接通过链接方法获得了。其实前三篇参考文章写的大同小异，不过都有错漏，我就列一起了。</p>
<ol>
<li><p>安装 termux-services</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">pkg i termux-services </span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>指定程序名，按自己的喜好起</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">tpath='kcptun'</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>建立 run 文件，down 文件和 log 目录</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">mkdir -p $PREFIX/var/service</span><br><span class="line">cd $PREFIX/var/service</span><br><span class="line">mkdir -p ${tpath}/log</span><br><span class="line">vim ${tpath}/run</span><br></pre></td></tr></tbody></table></figure>

<p>run 文件的内容，仅供参考</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">exec ~/kcptun -l :2580 -r [IP:PORT] -key [PASSWORD] -crypt none -nocomp -datashard 0 -parityshard 0 -conn 4 -mtu 1200 -sndwnd 1024 -rcvwnd 3500 -mode normal 2&gt;&amp;1</span><br></pre></td></tr></tbody></table></figure>

<p>给权限，新建 down。down 文件实际上是近期开关，后面 enable 和 disable 的凭据实际上就是目录下存不存在 down 文件，我们建立 down 文件实际意思就是默认先关着。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">chmod +x ${tpath}/run</span><br><span class="line">touch ${tpath}/down</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>链接 log 文件</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ln -sf $PREFIX/share/termux-services/svlogger ${tpath}/log/run</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>启动 <code>sv up ${tpath}</code></p>
<p>查看状态 <code>sv status ${tpath}</code></p>
<p>查看日志 <code>cat $PREFIX/var/log/sv/${tpath}/current</code></p>
<p>关闭 <code>sv down ${tpath}</code></p>
<p>一切没问题就可以开启自启 <code>sv-enable ${tpath}</code>，开启自启时程序会自动打开</p>
<p>不想用的时候可以关闭自启 <code>sv-disable ${tpath}</code></p>
</li>
</ol>
<h3 id="supervisor"><a href="#supervisor" class="headerlink" title="supervisor"></a>supervisor</h3><p>参考文章：<a href="https://blog.csdn.net/tyy649909457/article/details/99348032">termux 安装supervisor</a></p>
<p>和 runit 相比，supervisor 是 linux 下相对成熟的自启和后台管理方案，命令比 runit 丰富的多。而且相对于 runit 建文件夹控制的方法，supervisor 大部分控制依靠文件配置，需要配置多个自启的时候理论上要更方便。但，因为不是 termux 推荐的方案，导致配置文件里包含的各类文件需要自己创建，且其自启依赖普通 linux 发行版中的 systemd，termux 没有，导致自启还需要放到 bash 文件中，总体易用性其实差一点。</p>
<ol>
<li><p>安装 supervisor</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">pip install supervisor -y</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>新建一个 supervisord.conf 文件</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cd $PREFIX/etc</span><br><span class="line">vim supervisord.conf</span><br></pre></td></tr></tbody></table></figure>

<p>内容如下：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">;[unix_http_server]</span><br><span class="line">;file=/data/data/com.termux/files/usr/var/run/supervisor.sock ; the path to the socket file</span><br><span class="line">;chmod=0700 ; socket file mode (default 0700)</span><br><span class="line">;chown=nobody:nogroup ; socket file uid:gid owner</span><br><span class="line">;username=user ; default is no username (open server)</span><br><span class="line">;password=123 ; default is no password (open server)</span><br><span class="line"></span><br><span class="line">[inet_http_server] ; inet (TCP) server disabled by default</span><br><span class="line">port=127.0.0.1:9001 ; ip_address:port specifier, *:port for all iface</span><br><span class="line">;username=user ; default is no username (open server)</span><br><span class="line">;password=123 ; default is no password (open server)</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line">logfile=/data/data/com.termux/files/usr/var/log/supervisord.log ; main log file; default $CWD/supervisord.log</span><br><span class="line">logfile_maxbytes=50MB ; max main logfile bytes b4 rotation; default 50MB</span><br><span class="line">logfile_backups=10 ; # of main logfile backups; 0 means none, default 10</span><br><span class="line">loglevel=info ; log level; default info; others: debug,warn,trace</span><br><span class="line">pidfile=/data/data/com.termux/files/usr/var/run/supervisord.pid ; supervisord pidfile; default supervisord.pid</span><br><span class="line">nodaemon=false ; start in foreground if true; default false</span><br><span class="line">minfds=1024 ; min. avail startup file descriptors; default 1024</span><br><span class="line">minprocs=200 ; min. avail process descriptors;default 200</span><br><span class="line">;umask=022 ; process file creation umask; default 022</span><br><span class="line">;user=supervisord ; setuid to this UNIX account at startup; recommended if root</span><br><span class="line">;identifier=supervisor ; supervisord identifier, default is ‘supervisor’</span><br><span class="line">;directory=/tmp ; default is not to cd during start</span><br><span class="line">;nocleanup=true ; don’t clean up tempfiles at start; default false</span><br><span class="line">;childlogdir=/tmp ; ‘AUTO’ child log dir, default $TEMP</span><br><span class="line">;environment=KEY=“value” ; key value pairs to add to environment</span><br><span class="line">;strip_ansi=false ; strip ansi escape codes in logs; def. false</span><br><span class="line"></span><br><span class="line">[rpcinterface:supervisor]</span><br><span class="line">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line">;serverurl=unix:///data/data/com.termux/files/usr/var/run/supervisor.sock ; use a unix:// URL for a unix socket</span><br><span class="line">serverurl=http://127.0.0.1:9001 ; use an http:// url to specify an inet socket</span><br><span class="line">;username=chris ; should be same as in [_http_server] if set</span><br><span class="line">;password=123 ; should be same as in [_http_server] if set</span><br><span class="line">;prompt=mysupervisor ; cmd line prompt (default “supervisor”)</span><br><span class="line">;history_file=~/.sc_history ; use readline history if available</span><br><span class="line"></span><br><span class="line">[include]</span><br><span class="line">files = /data/data/com.termux/files/usr/etc/supervisor.d/*.conf</span><br></pre></td></tr></tbody></table></figure>


</li>
</ol>
<p>注意，咱也不想用 <code>/data/data/com.termux/files/usr/</code> 这个这么长的路径的，但 supervisor 这边所有的配置文件都不认 <code>$PREFIX</code>，甚至连 <code>~</code> 都不认。</p>
<ol start="3">
<li><p>新建具体到程序的配置文件</p>
<p>首先获取当前用户的用户名</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">id</span><br></pre></td></tr></tbody></table></figure>

<p>假设是 u0_a999</p>
<p>然后新建文件 kcptun.conf</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">tpath='kcptun'</span><br><span class="line">mkdir supervisor.d/</span><br><span class="line">vim supervisor.d/${tpath}.conf</span><br></pre></td></tr></tbody></table></figure>

<p>内容为</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[program:kcptun]</span><br><span class="line">user=u0_a999</span><br><span class="line">command=/data/data/com.termux/files/home/kcptun -l :2580 -r [IP:PORT] -key [PASSWORD] -crypt none -nocomp -datashard 0 -parityshard 0 -conn 4 -mtu 1200 -sndwnd 1024 -rcvwnd 3500 -mode normal</span><br><span class="line">autostart=true</span><br><span class="line">redirect_stderr = true</span><br><span class="line">stdout_logfile_maxbytes = 1MB</span><br><span class="line">stdout_logfile = ~/tmp/kcptun.log </span><br></pre></td></tr></tbody></table></figure>

<p>这里的 logfile，supervisor 自己就不会新建，我们得手动建：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">mkdir ~/tmp</span><br><span class="line">touch ~/tmp/kcptun.log</span><br></pre></td></tr></tbody></table></figure>

<p>最后启动试试看：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">supervisord</span><br><span class="line">supervisorctl</span><br></pre></td></tr></tbody></table></figure>

<p>看到 kcptun 这个进程是 running 的就行。</p>
</li>
<li><p>将 supervisord 加入 bash 文件中。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">echo "supervisord" &gt;&gt; ~/.zshrc</span><br></pre></td></tr></tbody></table></figure>


</li>
</ol>
<h2 id="不推荐的配置"><a href="#不推荐的配置" class="headerlink" title="不推荐的配置"></a>不推荐的配置</h2><h3 id="termux-boot"><a href="#termux-boot" class="headerlink" title="termux-boot"></a>termux-boot</h3><p>号称可以开机自启 termux。但需要开启唤醒锁才行，开启后手机的休眠会受到影响，耗电大幅增加（起码在我的 pe 安卓 10 是这样）。</p>
<h3 id="访问外部存储功能"><a href="#访问外部存储功能" class="headerlink" title="访问外部存储功能"></a>访问外部存储功能</h3><p>开启后访问内部储存内容会方便不少，但如果使用钛备份会默认把开启内部储存的几个位置的内容也当成需要备份的资料，生成的资料大小极为感人。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>termux</tag>
        <tag>zsh</tag>
        <tag>terminal</tag>
      </tags>
  </entry>
  <entry>
    <title>一个臭打游戏的对 fullcone 的高谈阔论</title>
    <url>/yi-ge-chou-da-you-xi-de-dui-fullcone-de-gao-tan-kuo-lun/</url>
    <content><![CDATA[<h2 id="fullcone-是啥？"><a href="#fullcone-是啥？" class="headerlink" title="fullcone 是啥？"></a>fullcone 是啥？</h2><p>也称 nat1 或者是 nat 开放。简单来说，通讯中对方能获取你未修改的源 ip 和源端口基本就能识别成 fullcone nat。nat 一共有四种，就不细展开了。</p>
<p>fullcone nat 的好处在许多网络游戏（尤其是 cod），只有 fullcone nat 才能匹配到最多的人，nat1 可以匹配 nat 全类型的人，相比之下 nat3 只能匹配到 nat1 和 nat3 的人，nat4 就只能匹配到 nat4 的人，也就是基本鬼服。另外在电驴和 ed2k 网络中，fullcone 能连到最多的节点，ed2k 想要获取 high id 也需要在 fullcone 下。</p>
<p><strong>（21.2.6 更新）</strong> 推荐阅读 xray 作者 rprx 的最新力作：<a href="https://github.com/XTLS/Xray-core/discussions/237">进阶必读：代理协议 UDP 全方位透彻解析 · Discussion #237 · XTLS/Xray-core</a></p>
<h2 id="为啥拿不到-nat1？"><a href="#为啥拿不到-nat1？" class="headerlink" title="为啥拿不到 nat1？"></a>为啥拿不到 nat1？</h2><p>从原理上来说，因为全球的 ip 地址不足以及安全上的原因，一般我们拿到的公网 ip 会被 nat 再次处理为内网 ip，如果对方收到的是设备的内网 ip 或者是被 nat 设备转发过的端口号，无法将数据准确返回，则会标为其他类型 nat。</p>
<p>因此我一开始以为是内网 ip 的锅，毕竟公网 ip 比较难获取。后来发现并不是，虽然电信分配的并不是个固定 ip，但也是一个唯一的 ip，并没有其他人跟我共用这一个分配的 ip。</p>
<p>真正的原因是，常见的路由器和光猫所使用的系统基于 linux 内核，linux 默认 nat 转发类型就是 Symmetric NAT，只要通过其进行转发，就会变成其他类型的 nat。</p>
<p>另外，windows 防火墙的错误设置，以及对 udp 的限制（nat 的测试是在 udp 基础上进行的），都会造成 nat 测试结果变为其他类型。</p>
<h2 id="nat-测试"><a href="#nat-测试" class="headerlink" title="nat 测试"></a>nat 测试</h2><h3 id="测试-nat-的工具"><a href="#测试-nat-的工具" class="headerlink" title="测试 nat 的工具"></a>测试 nat 的工具</h3><p>各类 nat 测试工具原理上有一些差异，导致测试出的结果经常会让人感到迷惑：例如 linux 本身的 nat 实际上是 nat4，但部分测试工具测出来的结果却是 nat2。不过从另一个角度说，nat 类型影响到的应用场景很有限，大部分情况也就是下载和游戏这两个场景受到的影响较大，所以直接通过下载软件、游戏测试当然最好。如果没有呢？测试用到了虚拟机，总不能让人装个 200g 的 cod 进虚拟机。。。</p>
<h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4><ol>
<li>NatTypeTester。注意，该软件默认情况下可能不会触发 windows 防火墙的放行通知，导致测试出来的结果出错，得手动放行。</li>
<li>pynat。可使用 pip 安装。<del>推荐，但极少数时候服务器出错会导致结果为 block。</del></li>
<li><strong>（21.1.18 更新）</strong> <a href="https://github.com/HMBSbige/NatTypeTester">HMBSbige/NatTypeTester: 测试当前网络的 NAT 类型（STUN）</a>。多个 stun 地址，支持 socks 代理。</li>
<li><strong>（21.1.18 更新）</strong><a href="https://github.com/NetchX/Netch">NetchX/Netch: Game network accelerator. Support Socks5, Shadowsocks, ShadowsocksR, Trojan, VMess, VLess proxies. UDP NAT FullCone</a>。是测试工具，同时也是加速工具。</li>
</ol>
<h4 id="android"><a href="#android" class="headerlink" title="android"></a>android</h4><ol>
<li>STUNner。谷歌商店能下到，不过在 vpn 环境下（比如 wireguard）似乎不是很准。</li>
<li>pynat。通过终端模拟器（推荐 termux） ，用 pip 安装运行。</li>
</ol>
<h3 id="测-udp-是否联通的手段（搭着梯子亦可测）"><a href="#测-udp-是否联通的手段（搭着梯子亦可测）" class="headerlink" title="测 udp 是否联通的手段（搭着梯子亦可测）"></a>测 udp 是否联通的手段（搭着梯子亦可测）</h3><p>udp 阻塞也是 nat 类型不为开放的原因之一。下文 nat 测试结果提到的某些工具，比如 kcptun-sip003 的 tcp 通过 udp 转发后 udp 直接被拦阻了；<del>以及几乎所有的手机端代理公族，都不转发 udp</del>（虽然手机端游戏很少有 nat 的说法，但阻塞的 udp 一定程度上会导致游戏加速效果不佳）。而测试 udp 是否连通，方法有以下几种。</p>
<ol>
<li><p>iperf（参考 17.2.10 日记）</p>
</li>
<li><p>dig udp dns</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">dig '@208.67.222.222' -p 443 www.twitter.com</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>udpping</p>
</li>
</ol>
<h3 id="vpn-代理软件-nat-测试结果（21-1-18-证明已作废）"><a href="#vpn-代理软件-nat-测试结果（21-1-18-证明已作废）" class="headerlink" title="vpn 代理软件 nat 测试结果（21.1.18 证明已作废）"></a><del>vpn 代理软件 nat 测试结果（21.1.18 证明已作废）</del></h3><p>socks 系代理配合 mellow。</p>
<p>开放：</p>
<ul>
<li>ss 原版</li>
<li>v2 原版</li>
<li>v2 + tls</li>
<li>v2 + kcptun</li>
<li>ss + kcptun + udpspeeder</li>
<li><del>ss + cloak 2.0</del>（原 ss 的 udp 未做处理，但 tcp 被拦阻，所以实际上是 ss 原版）</li>
<li>trojan</li>
</ul>
<p>无 udp：</p>
<ul>
<li>ss + kcptun-sip003 </li>
<li>ss + cloak 1.0</li>
<li>v2ray mkcp</li>
</ul>
<p>对称：</p>
<ul>
<li>wireguard</li>
<li>openvpn</li>
</ul>
<h3 id="socks-代理软件-fullcone-测试结果"><a href="#socks-代理软件-fullcone-测试结果" class="headerlink" title="socks 代理软件 fullcone 测试结果"></a>socks 代理软件 fullcone 测试结果</h3><p>促使我再做一次测试的导火索，是 xray 1.21 的更新日志：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@master/img/20210118082936.png"></p>
<p>可我上次测试出的结论是 vmess 支持 fullcone 啊？后来我发现自己忽略了一个重要的问题：代理工具只转发 tcp 流量时，udp 可能 blocked 也可能直连，直连的情况下 fullcone 测试结果将套用的是本地路由的 nat 类型。。。而测试时我路由器安装的系统是 padavan，已经被我设置为光猫桥接 + nat1 模式了，最终造成报道上出了偏差（</p>
<p>第二次测试不带那些正经的 vpn 玩了（正经的 vpn 都是全流量转发，不存在漏网之鱼的），只带上主流的 socks 代理工具，ss、trojan 和 v2ray（xray） 这三个。同时测试本次 xray 更新究竟能带来什么效果。这次我专门套了一个 nat3 的 openwrt 极路由用来测试。</p>
<p>测试结果如下面两张图所示。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/pcfullcone.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/androidfullcone.png"></p>
<p>第一张结果来自 windows，第二张结果来自 android。本来只计划测试 pc 端效果。后来发现 各 nat 测试工具连直连测试测出来的结果都不一致，索性把手机拉进来一起测，找找规律。</p>
<p>测试结果不算太严谨，有少数几个测试的结果前面的测试做完就水落石出了，我觉得没必要再去测了，比如手机端的 xray 1.21-&gt; server 端 xray 1.22，更新日志里面都写了两边都要大于 1.21 的版本就会获得 fullcone，电脑这边也测过了，手机这边就不测了 。</p>
<ul>
<li><p>测试到一半我基本就理解 xray 的更新日志中这个 fullcone 指的是什么了，即<strong>旧版本 xray/v2ray/v2fly 的 ss 和 trojan udp 机制有问题导致 nat 类型错误</strong>，原版 ss 和 trojan/trojan-go 并不存在这个问题；vmess/vless 也有这个问题但对于它们来说这不是 bug 而是 feature。。。所以，更新前，server 和 client 有一端使用了 v2ray（xray) 本身的 trojan/ss 功能的话会出问题，更新后无论是 xray 内部的 trojan/ss 还是原版 ss/trojan 两两互联 nat 都不会有问题。值得一提的是，xray trojan 即使是使用 xray 的新特性由 vless+tcp 同端口 fallback 而来的，nat 也能保持在 1。</p>
</li>
<li><p>nat 测试工具中，我原本最为信任的 pynat 反而效果最为拉跨，只要用了代理就弹 fullcone；本身应该弹 fullcone 的反而弹 nat3（使用 mellow 时，不过不排除是 mellow 本身的问题）。新版 NatTypeTester 尚可，没出现什么原则性错误，就是有时用不同的 stun 测试机结果可能会不一样，个人感觉 <code>stun.qq.com</code> 比较准，而默认的 syncthing stun 在 Symmetric 下经常会报 UnsupportServer。netch 虽然准却有「既当运动员又当裁判」的嫌疑；手机端 stunner 除了需要多次测试出结果外，准确率也尚可。</p>
</li>
<li><p>某些场景下出现了「假打洞」的现象：多次测试后本身结果应为 nat3 的会慢慢变成 nat2 甚至是 nat1。常出现于在虚拟机 vmware 中使用 pynat 和在 android 中使用 pynat 的情况，偶尔也出现在 NatTypeTester 测试中（无论是虚拟机还是实机）。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210116050102.png"></p>
</li>
<li><p>所以原则上我不用虚拟机进行 nat 测试，但。。。mellow 现在的表现实在拉跨，我在实机上开几次才能成功连上一次，bug 不少。用较为干净的虚拟机，清理了注册表后，勉强能进行测试，不过嘛。。。看这测试效果，也许是我配置错了什么地方？</p>
</li>
<li><p>标黄色部分的 pynat 测试结果，nat 测出 3 是因为刚开始我不太会配置 netch 的进程模式。之后用 mellow 的时，通过内置的流量路径监控日志才观察到 pynat 的流量路径是这样的：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">windowsTerminal.exe-&gt;powershell.exe-&gt;pynat.exe-&gt;python.exe</span><br></pre></td></tr></tbody></table></figure>

<p>把这些全加到代理的进程列表中就行了。不过看后续的测试效果，也能估计出那些标黄的应该都是 nat1，没有改变 pynat 拉跨的结论（该标 3 的全部给标 1 了）。</p>
</li>
<li><p>netch 通过 socks 配合其他代理使用只能在进程模式下生效。在 tap 模式没办法排除进程会导致无限 loopback；<del>用除了 socks 以外的代理，启动时都会开一个 socks5 一个 http 代理端口，但用 socks5 的话 netch 就只会开一个 http 端口，好死不死 NatTypeTester 不支持 http 代理</del>（废话，http 代理不支持 udp 还测个啥）。。。所以除了 tun/tap 的测试中我没引入加了二级代理才有的功能。</p>
</li>
</ul>
<p><strong>(21.2.14 更新)</strong> xray 的最新更新通过巧妙的方法解决了 fullcone 的问题，鼓掌！而且通过测试 mkcp 也能正常的获取 fullcone 了。另外当时我的 netTester 版本为 3.4，目前最新的版本据悉已经解决了 vmess 显示为 unsupported 的诡异问题（待测试）。</p>
<h2 id="如何解决不是-nat1-的问题？"><a href="#如何解决不是-nat1-的问题？" class="headerlink" title="如何解决不是 nat1 的问题？"></a>如何解决不是 nat1 的问题？</h2><h3 id="修改路由器，使用桥接模式或换用支持-nat1-的固件"><a href="#修改路由器，使用桥接模式或换用支持-nat1-的固件" class="headerlink" title="修改路由器，使用桥接模式或换用支持 nat1 的固件"></a>修改路由器，使用桥接模式或换用支持 nat1 的固件</h3><p>之前说过 linux 内核设备只要经过流量转发 nat 就不是 fullcone 了。换言之，通过 ssh 连进路由器，在路由器上运行 nat 检测那还会是 fullcone nat，但在连入路由器的设备上检测那就都是 nat4了。</p>
<p>更别说许多家庭用户使用光猫 + 路由器的组合，而光猫也处在路由模式下，就会造成双重 nat。</p>
<p>解决方法有几种，包括：</p>
<ol>
<li>使用 dmz 和 upnp。通过搜索引擎能查到最常见的方法，实际使用中就会发现一个是在多重 nat 环境中配置复杂，<del>而且实际上我没配置好 upnp 后就没生效成功过，</del> dmz 一次只对一个设备有效，设置了 dmz 也只能保证内网里其中一台设备的 nat 为 1。</li>
<li>在需要 nat1 的设备上进行拨号，将 linux 设备设置为桥接。对于光猫后面挂着路由器的用户来说，完全没有必要用光猫进行路由，或者家中只有一台网络设备（比如电脑），或者能够进行多拨的地区，就算是直接链接光猫也可以这么设置，因为完全没必要路由。但如果家中有多台设备且不能多拨，那如此设置的话就只有其中进行拨号的那台设备能上网了。另外，想要把光猫设置为桥接模式可能需要超级管理员帐号。</li>
<li>使<del>需要进行拨号并</del>开启路由的设备支持 fullcone 转发，比如使用 windows 系统的软路由；或是是刷入支持 fullcone 模式的固件，新版本的 padavan 和 openwrt 应该都可以。意料之外的是某些光猫也支持设置为 fullcone 模式，比如臭名昭著的 tewa-e500。。。不过同样需要超管帐号。</li>
</ol>
<p>总结一下，对于大部分光猫 + 路由的用户，将光猫设置为桥接，路由开启 fullcone 转发即可。而单光猫或者无光猫单路由则需要在光猫上开启 fullcone，或者直接用需要 nat1 的设备拨号（比如 windows 电脑，比如 xbox/ps4）。</p>
<hr>
<p>不过，如果是配合代理使用，上述措施均不需要。请看下文。</p>
<h3 id="正确配置防火墙"><a href="#正确配置防火墙" class="headerlink" title="正确配置防火墙"></a>正确配置防火墙</h3><p>最简单的，vps 面板端的防火墙端口全开 + 系统内关闭防火墙。不过不够安全就是。</p>
<p>比较推荐的方法，对入站端口进行限制，在 web 端和系统端同时添加代理 / 游戏端口，对于一些代理工具，还需要添加高位端口（10000 以上的端口）。</p>
<p>如果系统使用 windows 那就更简单了，可以添加应用到防火墙例外情况中。</p>
<p>出站端口不用管，无论打开还是关闭基本都不影响效果。</p>
<h3 id="使用第三方加速器-vps"><a href="#使用第三方加速器-vps" class="headerlink" title="使用第三方加速器 / vps"></a>使用第三方加速器 / vps</h3><p>最省心的方法。只要你购买的服务器/加速器上 nat 转发配置正确，经过代理后你的 nat 就会处于开放类型。你只需要付钱即可。</p>
<p>当然，比较低端便宜的加速器技术人员这方面可能弄得不太行（最典型的，雷神加速器就是这样）。</p>
<p>对于 bt 下载也是如此，你可以将直接使用 vps 上搭建的相关工具下载，下载完后再拖回本地，vps 的 ip 一般处在公网且位于国外，能获取到质量最好的 tracker。小心蜜罐种子就是。</p>
<hr>
<p>然而使用本地的 pc bt 工具（比如 qbitorrent）通过代理下载 bt 时，就要考虑代理性能问题了（虽然一般的游戏用的 vpn / 加速器禁止 bt）。udp 不通的代理查看流量走向的话，会发现软件流量走代理， bt 不走代理（不过我怀疑 tcp 方面的流量代理上了有部分加速效果）。而 udp 通畅但 nat 类型不对的话可能代理后效果比代理前还差（存疑）。</p>
<h3 id="修改内核，实现-fullcone"><a href="#修改内核，实现-fullcone" class="headerlink" title="修改内核，实现 fullcone"></a>修改内核，实现 fullcone</h3><p><del>对于本身会修改规则和转发的代理工具来说，直接代理（socks 代理）就会实现 nat1，比如 ss，v2ray，不过他们本身用于科学用途，流量经过多重加密，性能反而一般，用在游戏上拖慢速度和丢包。</del> 其实综合来算 socks 代理效率要高于 vpn（vpn 要保证安全性，使用的加密算法强度普遍较高），不过部分 socks 代理的 udp 代理实现有问题，而正经一点的 vpn（wireguard，openvpn 等），不存在这方面的问题。（虽然有另一种说法 wireguard + udpspeeder 是代理加速游戏最好的方案，但我目前用本地电信实验效果并不理想，况且我家电信还没有受到 udp qos 影响）。</p>
<p>然而全流量代理的会直接套用被代理设备系统 netfilter 的 nat，造成测出的 nat 变为 4。</p>
<p>解决方案是，让系统支持 fullcone nat 并修改其 iptables 使中转流量全部按 fullcone nat 处理。</p>
<p>参考文章：</p>
<ol>
<li>指南类</li>
</ol>
<ul>
<li><a href="https://kotori.net/2020/01/08/%e7%ae%80%e5%8d%95%e6%93%8d%e4%bd%9c%e4%bd%bf-centos-%e6%94%af%e6%8c%81-fullcone-nat/">简单操作使 CentOS 支持 Fullcone NAT</a></li>
<li><a href="https://www.jianshu.com/p/88e7cd6a0c95">Centos 7当网关启用Fullcone nat</a></li>
<li><a href="https://888777.xyz/vpstalk/45203.html">有玩实况足球在线对战的朋友么，需要买哪里的服务器？（详情见评论区）</a></li>
</ul>
<ol start="2">
<li>细节类</li>
</ol>
<ul>
<li><a href="https://www.centos.bz/2017/08/upgrade-centos-7-6-kernel-to-4-12-4/">升级Centos 7/6内核版本到4.12.4的方法</a></li>
<li><a href="https://www.jianshu.com/p/fdf6bb6c5b9c">CentOS 7. × 系统及内核升级指南</a></li>
<li><a href="https://blog.csdn.net/xu_Melon/article/details/79043320">解决service iptables save出错please try to use systemctl.</a></li>
<li><a href="https://linux.vbird.org/linux_server/centos6/0250simple_firewall.php#netfilter_syntax_policy">第九章、防火牆與 NAT 伺服器</a></li>
<li><a href="https://dev.to/isabelcmdcosta/installing-nftables-from-sources-ondebian--4ic">Installing nftables from sources on Debian</a></li>
<li><a href="https://blog.csdn.net/w504430863/article/details/42964133">设置未识别的网络默认为专用网络</a></li>
<li><a href="https://askubuntu.com/questions/1052919/iptables-reload-restart-on-ubuntu-18-04">Iptables reload/restart on Ubuntu 18.04</a></li>
<li><a href="https://blog.csdn.net/hunanchenxingyu/article/details/38867931">ubuntu/debian 模块加载方式</a></li>
</ul>
<p>尽管我常用 debian，不过好像没有找到 debian 类系统的教学（主要不同点在于内核更换，模块的加载，还有 iptables 的自启上），centos 的倒是蛮多。但 centos 坑也不少，所以先试试 centos7 的。</p>
<h4 id="centos7-内核改装"><a href="#centos7-内核改装" class="headerlink" title="centos7 内核改装"></a>centos7 内核改装</h4><ol>
<li><p>更换内核。先吐槽一句，centos 更换内核比 debian 麻烦多了，后者下好内核和 header 就能用，centos 还得多下 devel 之类的几样东西，而且还得在官方源里面下，自己下载上传的不好装。。。</p>
<p>fullcone-nat 模块对内核版本还是有一定要求，太新不行太旧也不行，好消息是支持 bbr 那几个内核基本都成，连 bbr-plus 那个自制内核都成。但锐速那个旧内核，和 centos7 默认定制的这个 3.10 就不要想了。。。</p>
<p>先添加源</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">rpm -import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span><br></pre></td></tr></tbody></table></figure>

<p>查看有哪些内核能用：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">yum --disablerepo="*" --enablerepo="elrepo-kernel" list available</span><br></pre></td></tr></tbody></table></figure>

<p>现阶段能看到，mainline 的内核有点新，都是 5.x 系的；而长期支持版内核符合要求，装 lt 就好了。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">yum -y --enablerepo=elrepo-kernel install kernel-lt.x86_64</span><br></pre></td></tr></tbody></table></figure>

<p>装完重启。</p>
<p>重启以后查看默认内核顺序</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">awk -F\' '$1=="menuentry " {print $2}' /etc/grub2.cfg</span><br></pre></td></tr></tbody></table></figure>

<p>改 lt 内核顺序到开机顺序第一位</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">vim /etc/default/grub</span><br></pre></td></tr></tbody></table></figure>

<p>改这句的数字到刚刚查看开机顺序看到 lt 内核所在的未知，注意位置是从 0 开始算。</p>
<p>打个比方查看到的内核顺序，lt 内核在第二位</p>
<p>那么，改 grub 文件的这一行为</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">GRUB_DEFAULT=1</span><br></pre></td></tr></tbody></table></figure>

<p>更新 grub</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br></pre></td></tr></tbody></table></figure>

<p>重启后查看当前内核对不对</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></tbody></table></figure>

<p>然后查看当前内核与相关的编译模块有哪些</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">rpm -qa | grep kernel</span><br></pre></td></tr></tbody></table></figure>

<p>原来 3.10 相关的 devel 和 header 等等等，全部删掉，否则待会会干扰 lt 内核其他模块的安装（下面这个命令只是打个比方，肯定不止这一个模块）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">yum remove -y kernel-tools-3.10.0-514.26.2.el7.x86_64</span><br></pre></td></tr></tbody></table></figure>

<p>然后安装剩下的 lt 模块，如果不知道还剩哪些的话，可以用「查看有哪些内核能用」那里的命令再确认一下。下面的命令也是仅供参考：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">yum -y --enablerepo=elrepo-kernel install kernel-lt-devel.x86_64 kernel-lt-headers.x86_64 kernel-lt-tools.x86_64 </span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>安装依赖。注意，安装依赖一定在更新内核之后，因为依赖和内核版本挂钩。然后待会的编译一定在安装依赖之后，原因相同。如果发现装的内核不对的话，更新完内核还要再装一边依赖，然后再去编译，否则大概率出现奇奇怪怪的问题。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">yum install gcc gcc-c++ autoconf autogen libmnl libmnl-devel libtool-devel libtool git -y</span><br></pre></td></tr></tbody></table></figure>

<p>另外，装一个原版的 iptables，先把 firewalld 干了（不过我感觉大部分 centos7 默认都不装这玩意）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl mask firewalld</span><br></pre></td></tr></tbody></table></figure>

<p>然后安装，设置开机启动</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">yum install iptables-services</span><br><span class="line">systemctl enable iptables</span><br></pre></td></tr></tbody></table></figure>

<p>看看版本，应该是 v1.42</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">iptables -V</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>下载所要编译的三个模块源码，一个是 fullcone-nat 模块的依赖，一个是模块本身，另一个是 iptables 模块</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">git clone git://git.netfilter.org/libnftnl.git</span><br><span class="line">git clone git://git.netfilter.org/iptables.git</span><br><span class="line">git clone https://github.com/Chion82/netfilter-full-cone-nat.git</span><br></pre></td></tr></tbody></table></figure>

<p>然后就是编译安装</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#编译 libnftnl</span><br><span class="line">cd libnftnl</span><br><span class="line">sh autogen.sh</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">cd ..</span><br><span class="line"></span><br><span class="line">#编译fullcone-nat</span><br><span class="line">cd ~/netfilter-full-cone-nat</span><br><span class="line">make</span><br><span class="line">modprobe nf_nat</span><br><span class="line">insmod xt_FULLCONENAT.ko</span><br><span class="line"></span><br><span class="line">cd ..</span><br><span class="line"></span><br><span class="line">#编译 iptables</span><br><span class="line">cp ~/netfilter-full-cone-nat/libipt_FULLCONENAT.c ~/iptables/extensions/</span><br><span class="line">ln -sfv /usr/sbin/xtables-multi /usr/bin/iptables-xml</span><br><span class="line">./autogen.sh</span><br><span class="line">PKG_CONFIG_PATH=/usr/local/lib/pkgconfig</span><br><span class="line">export PKG_CONFIG_PATH</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>关闭原来 iptables 的 service，换入现在 iptables 的 service，因为刚刚安装的位置和真正 iptables services 指向的位置不一样，没有执行替换的话，待会写入带 FULLCONENAT 的 nat 规则后用 <code>service iptables save</code> 保存就会报错。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#先关闭iptables</span><br><span class="line">systemctl  stop iptables</span><br><span class="line">#删除原来的iptables</span><br><span class="line">rm -rf /sbin/iptables</span><br><span class="line">rm -rf /sbin/iptables-restore</span><br><span class="line">rm -rf /sbin/iptables-save</span><br><span class="line">#复制你自己编译的iptables</span><br><span class="line">cd /usr/local/sbin</span><br><span class="line">cp /usr/local/sbin/iptables /sbin/     </span><br><span class="line">cp /usr/local/sbin/iptables-restore /sbin/</span><br><span class="line">cp /usr/local/sbin/iptables-save /sbin/</span><br><span class="line">#检验iptables版本，应该是 1.8.4</span><br><span class="line">iptables -V</span><br></pre></td></tr></tbody></table></figure>

<p>注意那三句 cp 一句句执行，因为每句都要按一次 y，全部一起执行的话只会出一次 y，只替换第一个 iptables 文件。</p>
</li>
<li><p>设置开机自动加载 Fullcone 模块</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">kernel=`uname -r`</span><br><span class="line">cp ~/netfilter-full-cone-nat/xt_FULLCONENAT.ko  /lib/modules/$kernel/</span><br><span class="line">depmod</span><br><span class="line">echo "modprobe xt_FULLCONENAT" &gt; /etc/sysconfig/modules/xt_FULLCONENAT.modules</span><br><span class="line">chmod 755 /etc/sysconfig/modules/xt_FULLCONENAT.modules</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>重启，检查</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">lsmod | grep xt_FULLCONENAT</span><br></pre></td></tr></tbody></table></figure>

<p>有输出即可。</p>
</li>
<li><p>未来保存规则，可通过</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">service iptables save</span><br><span class="line">service iptables restart</span><br></pre></td></tr></tbody></table></figure>

<p>生效。</p>
</li>
</ol>
<h4 id="debian-内核改装"><a href="#debian-内核改装" class="headerlink" title="debian 内核改装"></a>debian 内核改装</h4><ol>
<li><p>安装内核。跳过。一键脚本那么多，教程也写的这么多了。</p>
</li>
<li><p>安装依赖。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">apt install build-essential libtool libnfnetlink0 libnfnetlink-dev libpcap0.8-dev libtool autoconf autogen git -y</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>下载四个模块的源码。原因是 apt 库中没有 libnftnl 模块的依赖 libmnl 下。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">git clone git://git.netfilter.org/libmnl</span><br><span class="line">git clone git://git.netfilter.org/libnftnl.git</span><br><span class="line">git clone git://git.netfilter.org/iptables.git</span><br><span class="line">git clone https://github.com/Chion82/netfilter-full-cone-nat.git</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>编译安装。又一个和 centos 不一样的地方，debian 没有 iptables-xml，也没有 pkg_config_path</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#编译libmnl</span><br><span class="line">cd libnftnl</span><br><span class="line">sh autogen.sh</span><br><span class="line">./configure --disable-dependency-tracking</span><br><span class="line">#直接configure好像报错</span><br><span class="line">#./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">#编译 libnftnl</span><br><span class="line">cd libnftnl</span><br><span class="line">sh autogen.sh</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">cd ..</span><br><span class="line"></span><br><span class="line">#编译fullcone-nat</span><br><span class="line">cd ~/netfilter-full-cone-nat</span><br><span class="line">make</span><br><span class="line">modprobe nf_nat</span><br><span class="line">insmod xt_FULLCONENAT.ko</span><br><span class="line"></span><br><span class="line">cd ..</span><br><span class="line"></span><br><span class="line">#编译 iptables</span><br><span class="line">cp ~/netfilter-full-cone-nat/libipt_FULLCONENAT.c ~/iptables/extensions/</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>设置开机加载模块</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">kernel=`uname -r`</span><br><span class="line">cp ~/netfilter-full-cone-nat/xt_FULLCONENAT.ko  /lib/modules/$kernel/</span><br><span class="line">depmod</span><br><span class="line">echo "xt_FULLCONENAT"&gt;&gt;/etc/modules</span><br></pre></td></tr></tbody></table></figure>

<p>重启，检测</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">lsmod | grep xt_FULLCONENAT</span><br></pre></td></tr></tbody></table></figure>

<p>另外这里不需要检测 iptables 版本号，因为 debian 默认情况下就安装了最新版的 iptables，所以无论是安装修改版 iptables 之前还是之后，查看版本号都是 1.8.4。</p>
</li>
<li><p>安装 iptables 自动加载服务。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">apt install iptables-persistent -y</span><br></pre></td></tr></tbody></table></figure>

<p>未来保存规则时，需要用以下命令</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">iptables-save &gt; /etc/iptables/rules.v4</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h4 id="iptables-fullcone-设置"><a href="#iptables-fullcone-设置" class="headerlink" title="iptables fullcone 设置"></a>iptables fullcone 设置</h4><ol>
<li><p>先看目前的 iptables 表，尽管其实一共三张表，但有一张默认不怎么管，一开始也是空的，所以只看 nat 表和 filter 表就够了</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">iptables -L -v</span><br><span class="line">iptables -L -t nat -v</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>默认情况下，貌似有 drop 规则会干扰使用，需要删掉</p>
<p>或者直接清空路由表：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">iptables -F</span><br><span class="line">iptables -Z</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>理论上，只用添加下面这两句就能生效了</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -o eth0 -j FULLCONENAT</span><br><span class="line">iptables -t nat -A PREROUTING -i eth0 -j FULLCONENAT</span><br></pre></td></tr></tbody></table></figure>

<p>还有两个可选规则（准备给 wireguard 的），我测试过没啥用</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -i wg0 -j FULLCONENAT</span><br><span class="line">iptables -t nat -A POSTROUTING -s 10.0.0.0/24 -o wg0 -j MASQUERADE</span><br></pre></td></tr></tbody></table></figure>

<p>另外也可以把命令中的 -A 换成 -I 强制添加规则到第一行（不过大部分时候 chain 里面都只有这一条规则）</p>
<p>而有的 wireguard 教程里面的 postup 和 postdown 也可以加，非 fullcone 下必加，但 fullcone nat 模块开启后就可以不加了</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">PostUp = iptables -I FORWARD -i wg0 -j ACCEPT; iptables -I FORWARD -o wg0 -j ACCEPT</span><br><span class="line">PostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -D FORWARD -o wg0 -j ACCEPT</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>初步判断 iptables 规则是否有用，可以跑一段时间流量后通过第一步的两个查询命令查看是否有流量通过。注意，有流量通过的规则并不一定是关键有效的，比如 postup 和 postdown 这两句执行后会发现也有流量经过，但去掉了也不影响连通性。</p>
<p>修改了以后重新观察是否连通正确可以先执行 <code>iptables -Z</code> 清空流量统计。</p>
</li>
<li><p>修改后记得保存，然后重启后通过第一步或者 <code>iptables-save</code> 查看是否重启时自动加载了路由表。</p>
</li>
</ol>
<h3 id="使用类-vpn-工具"><a href="#使用类-vpn-工具" class="headerlink" title="使用类 vpn 工具"></a>使用类 vpn 工具</h3><p>类 vpn 工具同样代理全部流量，区别在于它们的 udp 流量经过特殊处理，能够保证 nat 类型为 fullcone。目前有以下这么几种：</p>
<ul>
<li><a href="https://github.com/zhxie/ikago">zhxie/ikago: IkaGo is a proxy which helps bypassing UDP blocking, UDP QoS and NAT firewall written in Go.</a>（不太推荐）<br> 使用体验：<a href="https://zbttl.github.io/ikago-he-pcap2socks-shi-yong-ti-yan/#ikago">ikago 和 pcap2socks 使用体验 | Bao’s 备忘录</a></li>
<li><a href="https://github.com/wangyu-/tinyfecVPN">wangyu- / tinyfecVPN：专为有损链接而设计的VPN，具有内置的前向纠错（FEC）支持。 在高延迟有损链路上提高网络质量。</a></li>
</ul>
<p>ikago 不推荐的原因是 bug 较为影响使用。</p>
<h3 id="使用-socks-代理转-vpn-工具"><a href="#使用-socks-代理转-vpn-工具" class="headerlink" title="使用 socks 代理转 vpn 工具"></a>使用 socks 代理转 vpn 工具</h3><ul>
<li><a href="https://www.proxifier.com/">Proxifier - The Most Advanced Proxy Client</a></li>
<li><a href="https://github.com/FQrabbit/SSTap-Rule/releases/tag/SSTap%E5%B8%B8%E7%94%A8%E7%89%88%E6%9C%AC%E5%8F%8A%E5%8E%BB%E5%B9%BF%E5%91%8A">SSTAP</a></li>
<li><a href="https://github.com/mellow-io/mellow">mellow</a>（不太推荐）<br> 使用体验：<a href="https://zbttl.github.io/mellow-shi-yong-ti-yan/?highlight=mellow">mellow 使用体验 | Bao’s 备忘录</a></li>
<li><a href="https://github.com/zhxie/pcap2socks">zhxie/pcap2socks: Redirect traffic to SOCKS proxy with pcap.</a>（不太推荐）</li>
<li><a href="https://github.com/zhxie/pcap2socks-gui">zhxie/pcap2socks-gui: A front-end interface for pcap2socks.</a><br> 使用体验：<a href="https://zbttl.github.io/ikago-he-pcap2socks-shi-yong-ti-yan/#pcap2socks-%E5%92%8C-pcap2socks-gui">ikago 和 pcap2socks 使用体验 | Bao’s 备忘录</a></li>
<li><a href="https://github.com/NetchX/Netch">NetchX/Netch: Game network accelerator. Support Socks5, Shadowsocks, ShadowsocksR, Trojan, VMess, VLess proxies. UDP NAT FullCone</a><br> 使用体验：<a href="https://zbttl.github.io/netch-shi-yong-ti-yan-dai-li-gui-ze-huo-qu/">netch 使用体验（代理规则获取） | Bao’s 备忘录</a></li>
</ul>
<p>mellow 和 pcap2socks 不推荐的原因同样是 bug 不少，另外 mellow 的配置门槛还挺高的。不过 mellow 的最大贡献是应该本身 go 的 tun/tap 实现。pcap2socks 就比较神秘，cli 界面用着用着就会报错，但 gui 并不会报错。</p>
<p>剩下的几个，Proxifier 专注于进程代理，能给多个进程配置不同的代理和 dns，我觉得更适合作为那些个长期挂在后台，需要代理却不支持 http 代理也没有 socks 配置设置的应用使用。</p>
<p>netch 是这几个中我最为推荐的，直接支持多种协议不需要再用二级代理进行转发（除非是使用 mkcp+seed，目前 netch 中还不支持相关配置）。不过之前也提到，tun/tap 全局代理尚未可用（容易 loopback）。且 netch 的 tun/tap，确实也有几次上不去网的状况发生，不算非常稳定。</p>
<p>SSTAP 可用全局代理，通过设置路由能够避免 loopback 的产生。不过人家在项目主页上也说了，使用 sstap 不仅不能解决 nat 问题，nat 还会永远被固定在 Symmetric 的状态。</p>
<p>上面这些工具，除了 pcap2socks 外工作方式无非进程代理和 tun/tap 转发两种。tun/tap 转发在建立了正确 ip 表的前提下效果完美，但可靠性欠佳（极少情况下反复开关几回以后网卡都工作不正常了，表现为啥网页都开不开，重启后才正常）。而进程代理方式有可能会遗漏一些游戏进程外的相关进程，就会造成类似 cod16 中游戏流量显然已经被加速过（丢包减少，能进游戏），然而丢包显示错误（始终为 0）的情况，或者是类似微软系第一方游戏上未加速 xbox live 服务导致云同步工作不正常的情况。</p>
<p>pcap2socks 工作方式又和上面这些不太一样，大概应该属于旁路由，好处是可以给主机加速，坏处是加速设备不能和游戏设备是同一台，各类第三方加速器的主机加速模式也是这个原理。类 vpn 工具中的 ikago 同样也是旁路由原理，不过是 ikago 还拥有转发流量到 vps 的功能，而 pcap2socks 则把这个功能交给了 socks 代理来实现。</p>
<p>话说回来，几种 socks 代理工具中，ss 和 ssr 属于 UOU（udp over udp），能够配合 udpspeeder/udp2raw/kcptun 使用；trojan 和 vless 属于 UOT（udp over tcp），只能配合 kcptun 使用。还有一个问题，就是在部分游戏的丢包显示中（比如 cod16），使用 UOT 代理做隧道的话，丢包显示不准确，始终为 0。未来 xray 如果能实现 smux 功能的话，就能部分替代 udpspeeder/kcptun 的加速效果。</p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>游戏加速</tag>
        <tag>socks</tag>
        <tag>nat</tag>
        <tag>fullcone</tag>
      </tags>
  </entry>
  <entry>
    <title>暴力整合 windows terminal 到系统各处快捷菜单中</title>
    <url>/bao-li-zheng-he-windows-terminal-dao-xi-tong-ge-chu-kuai-jie-cai-dan-zhong/</url>
    <content><![CDATA[<p>参考文章：</p>
<ul>
<li><a href="https://poychang.github.io/run-windows-terminal-as-administrator-with-elevated-admin-permissions/">使用系统管理员身分开启Windows Terminal 分页</a></li>
<li><a href="https://printempw.github.io/windows-terminal-setup-guide/">Windows Terminal 安装与配置指南</a></li>
</ul>
<h2 id="添加管理员模式-powershell"><a href="#添加管理员模式-powershell" class="headerlink" title="添加管理员模式 powershell"></a>添加管理员模式 powershell</h2><ol>
<li><p>安装 gsudo</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">choco install gsudo -y</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>新增 json 配置块，点击加号-&gt;settings，在 profiles-&gt;list 中添加。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">    "guid": "{0667cbea-6f8d-43d6-b50a-e4f795569d86}",</span><br><span class="line">    "name": "Elevated PowerShell",</span><br><span class="line">    "commandline": "gsudo.exe PowerShell",</span><br><span class="line">    "icon": "C:/Users/zbttl/Pictures/powershell_red_scale-200.ico",</span><br><span class="line">    "hidden": false,</span><br><span class="line">    "colorScheme": "AdventureTime"</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure>

<p>其中，icon 里的图标可从参考文章 1 中下载，下载后需要处理，图片像素缩小为 32x32（否则会出现明显的锯齿）。并转为 .ico 格式，主要保留透明度（即保证背景不是黑色的而是透明的），因为后面一步注册表中的参数不认得 ico 格式以为的图片。这些修改都可以用 ifranview 搞掂。</p>
<p>而 colorScheme，可以从这里找：<a href="https://github.com/mbadolato/iTerm2-Color-Schemes/tree/master/windowsterminal">mbadolato/iTerm2-Color-Schemes</a>，选好想要的主题，找到对应的配置文件，将其中的代码加到 schemes 中。修改的目的是让管理员模式和普通用户模式有区分度。</p>
</li>
<li><p>保存后在加号处就能看到该配置了。</p>
</li>
</ol>
<h2 id="添加进右键菜单"><a href="#添加进右键菜单" class="headerlink" title="添加进右键菜单"></a>添加进右键菜单</h2><ol>
<li><p>输入代码</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$basePath = "Registry::HKEY_CLASSES_ROOT\Directory\Background\shell"</span><br><span class="line">New-Item -Path "$basePath\wt" -Force -Value "Windows Terminal"</span><br><span class="line">New-ItemProperty -Path "$basePath\wt" -Force -Name "Icon" -PropertyType ExpandString -Value "X:\path\to\terminal.ico"</span><br><span class="line">New-Item -Path "$basePath\wt\command" -Force -Type ExpandString -Value '"%LOCALAPPDATA%\Microsoft\WindowsApps\wt.exe" -p "Windows PowerShell" -d "%V"'</span><br></pre></td></tr></tbody></table></figure>

<p>其中，<code>"X:\path\to\terminal.ico"</code> 修改为上一步通过修改的 ico 文件路径。最后一句中 -p 后面的参数 <code>Windows PowerShell</code> 改成自己配置文件中 powershell 所在代码块的 name。当然如果输错也可以进入注册表中再做修改，键值在 <code>HKEY_CLASSES_ROOT\Directory\Background\shell\wt</code> 中。</p>
</li>
<li><p>上面添加的是在文件管理器中右键以普通用户打开 windows terminal。而以管理员模式打开，还需要再新建键值。在上面代码块的第二句 <code>$basePath\wt</code> 中的 wt 键值需要修改为其他名字，-p 后的代码块也要更换，图标最好也更换一下。打个比方：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">New-Item -Path "$basePath\wtAdmin" -Force -Value "Windows Terminal(Admin)"</span><br><span class="line">New-ItemProperty -Path "$basePath\wtAdmin" -Force -Name "Icon" -PropertyType ExpandString -Value "X:\path\to\terminal.ico"</span><br><span class="line">New-Item -Path "$basePath\wtAdmin\command" -Force -Type ExpandString -Value '"%LOCALAPPDATA%\Microsoft\WindowsApps\wt.exe" -p "Elevated PowerShell" -d "%V"'</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<p><strong>（21.1.30 更新）</strong> windows Terminal 新版本已经将快捷方式自动加入右键菜单中。但目前还不成熟：</p>
<ol>
<li><p>没有管理员模式打开。</p>
</li>
<li><p>在 Directory Opus 等第三方文件管理器中不生效。</p>
</li>
<li><p>其实只在少数文件夹（如桌面）下生效。在其他文件夹下打开报错「服务器出现意外情况」。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210130034849.png"></p>
</li>
</ol>
<h2 id="添加进-win-x-快速链接菜单"><a href="#添加进-win-x-快速链接菜单" class="headerlink" title="添加进 win+x 快速链接菜单"></a>添加进 win+x 快速链接菜单</h2><p>参考文章：</p>
<ul>
<li>[How to Add or Remove Default Items on Win+X Quick Link Menu in Windows 10](How to Add or Remove Default Items on Win+X Quick Link Menu in Windows 10)</li>
<li><a href="https://github.com/riverar/hashlnk">riverar/hashlnk</a></li>
</ul>
<p>很多时候我们要右键打开 powershell 还要退到桌面或是资源管理器处，如果在快速链接菜单（右键 windows 徽标）就能打开 windows terminal 就会方便很多。</p>
<p>右键菜单的结构，取决于 <code>%LocalAppdata%\Microsoft\Windows\WinX</code> 这个目录的结构。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/yipzGkz.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/7aWLpPK.jpg"></p>
<p>总结一下，有这么几个规律：</p>
<ol>
<li><p>里面的项目都是快捷方式，这个应该一眼就能看出来。你看到的文件名并不是真实的文件名，用第三方资源管理器或者用 dir 命令查看就知道</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/2nY5sPB.png"></p>
</li>
<li><p>但修改某项文件名不会使该项消失，而是会改变某项的位置。具体位置取决于真实文件名按名称方式倒序排列后的位置。</p>
<ul>
<li>也就是说，如果你想让新加进来的项目排在 group 的最顶上，其实什么都不用动，因为一般来说程序都是以字母开头，字母开头一定会排在原来这些数字开头程序的上面（倒序）。</li>
<li>反过来，如果你要把新增的项目放在中间，那就要修改其中一个项目的真实文件名，比如你要将新建的项目放在计算机管理的后面，并把计算机管理调到最前，你可以将计算机管理的真实文件名前面的序号改成 11，在新增项目的真实文件名前面加上 <code>03 - </code>；</li>
<li>如果不想调整计算机管理的位置，那么将新增项目的真实文件名前面加上 <code>02b - </code> 应该也可以；如果想把新增项目放在最后，将新增项目的真实文件名前面加上 <code>00 - </code> 就行。</li>
</ul>
<p>另外，因为 group3 项目比较多，所以才用两位数字的前缀，group2 就用的是一个数字的前缀，但原理相同。</p>
</li>
<li><p>不过，新增的项目不会立刻生效，而其前缀也会在资源管理器中表现出来，而不是和原有的项目一样自动将前缀隐藏。原因是，原有的项目在注册表中绑定了，绑定的依据是快捷方式属性中的「目标」这一项。所以你想通过修改原来快捷方式的目标直接让其打开其他程序这个方法是不行的。直接将新增项目放进文件夹里面也不会识别，修改这些原有项目的文件名不会使快捷链接中项目的名字被变更。但反过来，直接删除这些快捷方式的话，是能够生效的。</p>
</li>
<li><p>所以，如果要新增项目的话，就需要用上面参考文章的 hashlnk 这款软件。使用方法也很简单，先把快捷方式放到相应位置，快捷方式的参数也可以进行适当修改。之后，就需要运行命令（powershell 不认 %LOCALAPPDATA%，只能用全名）。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">hashlnk.exe 'C:\Users\[用户名]\AppData\Local\Microsoft\Windows\WinX\Group3\[快捷方式名]'</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>要修改快捷链接中的名字也可以，在相应项目属性中修改描述就行了。</p>
</li>
</ol>
<p>综上，我们要添加 windows terminal，按以下步骤：</p>
<ol>
<li><p>复制 <code>%LOCALAPPDATA%\Microsoft\WindowsApps\wt.exe</code>，在 <code>%LocalAppdata%\Microsoft\Windows\WinX\Group3</code> 中粘贴<strong>快捷方式</strong>。</p>
</li>
<li><p>修改快捷方式 <code>wt.exe</code> 的属性和文件名。文件名修改成你顺耳的，并且我想让其挨在 powershell 的项目旁边。所以我将名字修改为 <code>00 - windowsTerminal</code>。属性中，目标修改为 <code>"%LOCALAPPDATA%\Microsoft\WindowsApps\wt.exe" -p "Windows PowerShell"</code>，描述修改为 <code>Windows Terminal</code>。</p>
</li>
<li><p>在 hashInk.exe 所在目录运行</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">.\hashlnk.exe 'C:\Users\zbttl\AppData\Local\Microsoft\Windows\WinX\Group3\00 - windowsTerminal.lnk'</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Uz0jDk6.png"></p>
</li>
</ol>
<p>重启资源管理器即可。</p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>terminal</tag>
        <tag>powershell</tag>
      </tags>
  </entry>
  <entry>
    <title>双向加速软件</title>
    <url>/shuang-xiang-jia-su-ruan-jian/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="你不对劲！" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="7f82245f25a9bae650c8adbccc25fb2e754a516e8e78ba8ce9fe8d0de2242bbe"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">天王盖地虎</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>gost</tag>
        <tag>kcptun</tag>
        <tag>finalspeed</tag>
      </tags>
  </entry>
  <entry>
    <title>桌面版 ubuntu &amp; debian 踩坑</title>
    <url>/zhuo-mian-ban-ubuntu-debian-cai-keng/</url>
    <content><![CDATA[<h2 id="debian-安装时"><a href="#debian-安装时" class="headerlink" title="debian 安装时"></a>debian 安装时</h2><p>是否使用网络安装一定要选是，然后选 163 源，否则后面安装虽然说默认从本地 iso 安装但 kde 之类的东西实际上还是远程安装，默认的国外源非常慢。</p>
<h2 id="debian-安装-vmware-tools"><a href="#debian-安装-vmware-tools" class="headerlink" title="debian 安装 vmware-tools"></a>debian 安装 vmware-tools</h2><ol>
<li><p>先到 <code>etc/apt/sources.list</code> 里面把光盘源删掉，并保证里面剩余的源来自 163。</p>
</li>
<li><p>安装编译其他依赖：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">apt-get install autoconf automake binutils cpp gcc linux-headers-$(uname -r) make psmisc</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>点击 vmware 外界面中的「安装 vmware tools」，弹出文件夹后以命令行方式运行 <code>vmware-install.pl</code>，一路回车，重启搞掂。</p>
</li>
</ol>
<h2 id="python-版本问题"><a href="#python-版本问题" class="headerlink" title="python 版本问题"></a>python 版本问题</h2><p>ubuntu 的 python2 和 python3 是共存的，带来一系列问题</p>
<ol>
<li><p>要用 python3 需要写 <code>python3</code> 而不是 python，有点麻烦，可以通过 alias 解决。</p>
</li>
<li><p>某些 python3 下的模块用 pip3 装以后不能直接用，因为 python3 不在用户变量里面，需要加进去</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">export PATH=/usr/lib/python3/dist-packages/:$PATH</span><br></pre></td></tr></tbody></table></figure>

<p>然后用 pip 装模块的时候需要在前面加 sudo。</p>
</li>
</ol>
<h2 id="语言问题"><a href="#语言问题" class="headerlink" title="语言问题"></a>语言问题</h2><p>ubuntu 可以直接在设置里面换源。换源之后再添加语言，添加后退出一遍就能看到。</p>
<p>设置为中文后会提示你要不要把用户文件夹里的子文件夹改成中文。最好不要。</p>
<h2 id="root-用户问题"><a href="#root-用户问题" class="headerlink" title="root 用户问题"></a>root 用户问题</h2><p>桌面版的 debian&amp;&amp;ubuntu 默认都没有开启 root 用户，取而代之的是给当前用户 sudo 的权限。</p>
<p>想要开启 root 用户可以直接 sudo passwd root 搞定。不过即使这样登录的时候也不能直接用 root 而是只能在登录普通用户后用 <code>su</code> 切换。</p>
<p>另外还有一个问题，那就是系统变量/alias。只有 root 用户的话写在 <code>/root/.bashrc</code> 或 <code>/root/.profile</code> 下就好了。而现在应该写在具体用户目录下的这两个文件内，即 <code>%HOME/.bashrc</code> 或 <code>%HOME/.profile</code>，但此时一旦使用 <code>sudo</code> 或者用 <code>su</code> 切换到 root 下时，这两个系统变量就会失效。解决方法是把内容写到 <code>/etc/bashrc</code> 或 <code>/etc/profile</code> 下，这两个目录下的文件名前面没有 <code>.</code>，也就是不隐藏的。</p>
<p>sudo 很麻烦但非常常用，许多命令不用 sudo 的话会报错和显示找不到（特别是新装了个新软件结果发现敲命令提示 no found，不是没装好而是没用 sudo），比如 <code>ifconfig</code> 和 <code>service</code>，还有 <code>make install</code> 也需要 sudo 才能顺利安装。</p>
<p>因为帐号一开始就有 sudo 权限，实际上在 debian 中帐号已经写入 <code>visudo</code> 中了。如果需要 sudo 不设密码的话，直接加 <code>NOPASSWD:</code>，比如：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">zbttl ALL=(ALL:ALL) NOPASSWD:ALL</span><br></pre></td></tr></tbody></table></figure>

<p>另外还有些 gui 下的软件需要 root 模式下启动（比如 vscode），可以用 <code>sudo [软件名] &amp;</code> 启动，比如</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo wireshark &amp;</span><br></pre></td></tr></tbody></table></figure>

<p>如果不知道软件名，可以打开后用 top 查看。</p>
<p>另外，还有特殊一点的，vscode 的某些插件需要 root 下才能生效（比如换背景那个插件），但使用 sudo 打开的话，没办法读取当前用户的配置，就没法生效。正确的办法是：<a href="https://github.com/vscode-extension/vscode-background-cover/issues/28">参考文章</a></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">chown -R 你的用户名  /usr/share/code</span><br><span class="line">#insiders 版本</span><br><span class="line">chown -R 你的用户名  /usr/share/code-insiders</span><br></pre></td></tr></tbody></table></figure>



<h2 id="文件浏览器-root-开启，以及开启地址栏"><a href="#文件浏览器-root-开启，以及开启地址栏" class="headerlink" title="文件浏览器 root 开启，以及开启地址栏"></a>文件浏览器 root 开启，以及开启地址栏</h2><p>没有 root 模式的话很多文件没法直接复制粘贴。</p>
<p>ubuntu：安装 nautilus-admin</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get install nautilus-admin</span><br></pre></td></tr></tbody></table></figure>

<p>刷新一遍 natuilus</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">nautilus -q</span><br></pre></td></tr></tbody></table></figure>

<p>然后就可以右键管理员模式打开文件夹了。</p>
<p>原来的地址栏可以通过 ctrl+l 打开全路径编辑样式，但我倾向于一直开着而不是使用默认的块状路径样式。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210702014320.png"></p>
<center>块状路径样式</center>

<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210702014602.png"></p>
<center>全路径样式</center>

<p>安装 dconf-editor</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install dconf-editor -y</span><br></pre></td></tr></tbody></table></figure>

<p>打开后，按下 ctrl+L，进入路径 <code>/org/gnome/nautilus/preferences/</code></p>
<p>开启 <code>always-use-location-entry</code> 这项即可。</p>
<h2 id="wireshark-安装"><a href="#wireshark-安装" class="headerlink" title="wireshark 安装"></a>wireshark 安装</h2><p>参考文章：<a href="https://www.itdaan.com/tw/9a3a0e3fe1182c4af85ac6fb42c54cc6">【Tools】Wireshark 在 Linux 系統下的安裝及使用</a></p>
<p>wireshark 可以通过 apt 安装旧版，也可以通过 ppa 安装新版。安装时会出现弹窗，大概意思是要不要授予非 root 用户监听权限，选 yes。</p>
<p>之后</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo vim /etc/group</span><br></pre></td></tr></tbody></table></figure>

<p>找到 wireshark 这一行，冒号后面添加当前用户，比如</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">wireshark:x:124:</span><br></pre></td></tr></tbody></table></figure>

<p>改为</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">wireshark:x:124:zbttl</span><br></pre></td></tr></tbody></table></figure>

<p>重启即可。</p>
<h2 id="vscode-点击关闭按钮整个界面卡死"><a href="#vscode-点击关闭按钮整个界面卡死" class="headerlink" title="vscode 点击关闭按钮整个界面卡死"></a>vscode 点击关闭按钮整个界面卡死</h2><p>20.7.2 在 code-insiders 可复现。</p>
<p>解决方法：</p>
<ol>
<li><p>先关掉 code-insiders。通过其他 tty 或者 ssh 链接，使用命令 <code>top</code>，一般前两个 cpu 占用大户，即 code-insider 和 gnome-shell，是本次卡死问题的主角，记住他们的进程号（pid）。</p>
</li>
<li><p>强行关闭 code-insiders。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">kill -9 [code-insiders pid]</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>获取 gnome-shell 重启指令</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ps -ef | grep gnome-shell </span><br></pre></td></tr></tbody></table></figure>

<p>一般会出好几条，找到对的上上面卡死的 gnome-shell pid 的那条，一般是</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">/usr/bin/gnome-shell</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>干掉 gnome-shell</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">kill -9 [gnome-shell pid]</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>重启</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">/usr/bin/gnome-shell</span><br></pre></td></tr></tbody></table></figure>

<p>此时如果用的 xshell，估计会叫你下载 xmanager，不用管，取消就好。然后实际那边应该就能动了。</p>
</li>
</ol>
<h2 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h2><p>直接参考 19.4.14 的 termux 文章。。。</p>
<p>结果发现不太对，很多细节对不上，重写吧。那篇文章详细写的部分我就一笔带过。</p>
<p>安装</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install zsh -y</span><br><span class="line">zsh</span><br></pre></td></tr></tbody></table></figure>

<p>第一次打开会弹出欢迎界面（仅桌面端），提醒你对 zsh 进行一些设置</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/q6xrR3g.png"></p>
<p>当然你可以选 1 看看，但由于后面我们装了 Oh My Zsh 后这些设置就没用了，所以推荐选 2 就行了。</p>
<h3 id="坑-1：修改默认-shell"><a href="#坑-1：修改默认-shell" class="headerlink" title="坑 1：修改默认 shell"></a>坑 1：修改默认 shell</h3><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">chsh -s zsh</span><br></pre></td></tr></tbody></table></figure>

<p>提示需要输入密码。如果是 vps，这时别不输入密码就退出了！否则 ssh 和 vnc 都进不来了。。。只能重装。（另外，也可以执行完下面的步骤再来运行这个指令）。</p>
<p>但输入密码后大概率会提示 zsh 无效。</p>
<p>参考这里的解决方案：<a href="https://askubuntu.com/questions/812420/chsh-always-asking-a-password-and-get-pam-authentication-failure">chsh always asking a password , and get <code>PAM: Authentication failure</code></a></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">vim /etc/pam.d/chsh</span><br></pre></td></tr></tbody></table></figure>

<p>将</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">auth       required   pam_shells.so</span><br></pre></td></tr></tbody></table></figure>

<p>改为</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">auth       sufficient   pam_shells.so</span><br></pre></td></tr></tbody></table></figure>

<p>或者直接运行：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo sed s/required/sufficient/g -i /etc/pam.d/chsh </span><br></pre></td></tr></tbody></table></figure>

<p>如果仍然错误（提示 shell 不存在 <code>chsh: Warning: zsh does not exist</code>），查看一下 shell 列表：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IigBKYQ.png"></p>
<p>然后使用 <code>which zsh</code> 看一眼。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/qK0mouw.png"></p>
<p>看起来得改改命令：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo chsh -s /usr/bin/zsh zbttl</span><br></pre></td></tr></tbody></table></figure>

<p>再去 <code>/etc/passwd</code> 看看，或者用下一个命令刷新生效（也许还需要重启，vps 一般直接用 root，所以断开重连就行，<strong>下面再涉及这个操作，我都用重连来替代</strong>）后使用 <code>echo $shell</code>，确认已经在使用 zsh 了。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></tbody></table></figure>

<p>安装 oh my zsh，更换主题。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"</span><br><span class="line">git clone --depth=1 https://github.com/romkatv/powerlevel10k.git $ZSH_CUSTOM/themes/powerlevel10k</span><br><span class="line">sed -i '/^ZSH_THEME=/c\ZSH_THEME="powerlevel10k/powerlevel10k"' ~/.zshrc</span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></tbody></table></figure>

<p>转换为 zsh 后，之前的 bash 里的历史记录不再显示，但可以迁移过来。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">wget https://gist.githubusercontent.com/goyalankit/a1c88bfc69107f93cda1/raw/ed58ae6b8929021353001b1826694780c033291a/bash_to_zsh_history.rb</span><br><span class="line">ruby bash_to_zsh_history.rb</span><br></pre></td></tr></tbody></table></figure>

<h3 id="坑-2：字体支持"><a href="#坑-2：字体支持" class="headerlink" title="坑 2：字体支持"></a>坑 2：字体支持</h3><p>之后重连，进入 p10k 设置界面，来了。这个坑在 vps 端和桌面端都有。vps 端，只要 vps 控制端（windows，windows 下字体相当好装）装好 powerline 的字体，问题都不大。但 vps 端本身也有问题，问题出在 xshell 等 terminal 上：xshell 在 powerlevel10k 的设置中无法进入 prompt style 这项中（一路下一步你发现没有这项），最后设置完效果是纯字符型的，不好看；但如果从能够弹 prompt stlye 的地方设置好了，再从 xshell 进入你会发现显示没问题（我在本地端的 debian 上开开 ssh 然后用 xshell 链接发现了这个问题）。</p>
<p>那么 vps 远程端没办法实机登录（vnc 下字体不好设）怎么办呢，换个 terminal 就好了。windows terminal 并未出现这个问题。</p>
<p>单纯的桌面端，debian 下安装字体比较麻烦。直接从字体管理器安装字体会直接卡死，得手动命令行装。将字体放到某一个文件夹中，在文件夹内打开终端。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo mkdir /usr/share/fonts/truetype/CustomizedFonts</span><br><span class="line">sudo cp *.ttf /usr/share/fonts/truetype/CustomizedFonts</span><br><span class="line">sudo chmod 777 -R /usr/share/fonts/truetype/CustomizedFonts </span><br><span class="line">cd /usr/share/fonts/truetype/CustomizedFonts</span><br><span class="line">sudo mkfontscale</span><br><span class="line">sudo mkfontdir</span><br><span class="line">sudo fc-cache</span><br></pre></td></tr></tbody></table></figure>

<p>重启后在终端启用新字体即可。另外字体可以从我以前写的 powershell 攻略中的 nerd fonts github 项目内获取。我也尝试过用那个方法手工做的 Cascadia Code，后来发现会导致错位，还是直接用官方的好。</p>
<p>另外字体以显示（控制）端为准，也就是即使 vps 远程端装好了字体，控制端没装好也是乱码；反之亦然。</p>
<h3 id="坑-3：系统-用户变量-alias"><a href="#坑-3：系统-用户变量-alias" class="headerlink" title="坑 3：系统 / 用户变量 /alias"></a>坑 3：系统 / 用户变量 /alias</h3><p>参考文章：</p>
<ul>
<li><a href="https://superuser.com/questions/183870/difference-between-bashrc-and-bash-profile">Difference between .bashrc and .bash_profile</a></li>
<li><a href="https://askubuntu.com/questions/566399/why-isnt-profile-sourced-when-opening-a-terminal">Why isn’t .profile sourced when opening a terminal?</a></li>
</ul>
<p>其实也不能算个坑，可以说是个 feature。</p>
<p>我们先了解一下 linux 这个系统变量是怎么整的：</p>
<ol>
<li>用户变量：只对当前用户有效，放在用户目录下，文件以隐藏形式呈现（前面加.）<ol>
<li>rc 文件：启动终端时加载，如默认的 <code>.bashrc</code>，zsh 的 <code>.zshrc</code>。一般放快捷路径（alias）。</li>
<li>profile 文件：登录后第一次打开终端加载，如默认的 <code>.profile</code>，zsh 的 <code>.zprofile</code>。一般放懒得使用 systemd 或 supervisor 启动的自启程序，以及系统/用户变量（export xxx）。but，从图形界面运行的终端默认不加载这个文件，如果要加载，需要在终端中找到类似「以登录 shell 方式运行命令」的选项。当然有种说法，这么干会搞乱登录环境，那么对于这些变量，也可以直接写在 rc 文件中（后果是反复用 source 或者打开多个终端的时候，查看变量的话会发现重复加载了若干个写在 rc 文件中的变量，但并没有什么严重的后果；而自启程序就用 systemd 等替代就好了）。</li>
</ol>
</li>
<li>系统变量。对所有用户起效。放在 <code>/etc/</code> 目录下，不一定是某一个文件（默认文件名和系统有关），也不一定直接位于<code>/etc</code> 下（zsh 就位于 <code>/etc/zsh</code> 下）。和用户变量不同，不需要隐藏。<ol>
<li>rc 文件。默认的可能是 <code>bash.bashsrc</code>；zsh 固定为 <code>zshrc</code>；</li>
<li>profile 文件：默认为 <code>profile</code>；zsh 为 <code>zprofile</code>。</li>
</ol>
</li>
</ol>
<p>所以，接下来我所讲的部分变量设置我将以放在 <code>/etc/zshrc</code> 处写命令，而重连则使用</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo source /etc/zsh/zshrc</span><br></pre></td></tr></tbody></table></figure>

<h3 id="坑-4-：zsh-下-ssh-键位错误"><a href="#坑-4-：zsh-下-ssh-键位错误" class="headerlink" title="坑 4 ：zsh 下 ssh 键位错误"></a>坑 4 ：zsh 下 ssh 键位错误</h3><p>参考：<a href="https://www.jianshu.com/p/f867f786b584">zsh 中加入 home end，以及小键盘的支持</a></p>
<p>小键盘区和功能键区在 zsh 下功能错误。这次就不是 xshell 的锅了，ssh 过去的都这个毛病。解决方法有两种：</p>
<ol>
<li><p>通过 xshell。在属性中，选择终端-&gt;终端类型，改为 linux。</p>
</li>
<li><p>在 <code>/etc/zsh/zshrc</code> 中加入</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"># key bindings</span><br><span class="line">bindkey "\e[1~" beginning-of-line</span><br><span class="line">bindkey "\e[4~" end-of-line</span><br><span class="line">bindkey "\e[5~" beginning-of-history</span><br><span class="line">bindkey "\e[6~" end-of-history</span><br><span class="line"># for rxvt</span><br><span class="line">bindkey "\e[8~" end-of-line</span><br><span class="line">bindkey "\e[7~" beginning-of-line</span><br><span class="line"># for non RH/Debian xterm, can't hurt for RH/DEbian xterm</span><br><span class="line">bindkey "\eOH" beginning-of-line</span><br><span class="line">bindkey "\eOF" end-of-line</span><br><span class="line"># for freebsd console</span><br><span class="line">bindkey "\e[H" beginning-of-line</span><br><span class="line">bindkey "\e[F" end-of-line</span><br><span class="line"># completion in the middle of a line</span><br><span class="line">bindkey '^i' expand-or-complete-prefix</span><br><span class="line"># Fix numeric keypad  </span><br><span class="line"># 0 . Enter  </span><br><span class="line">bindkey -s "^[Op" "0"</span><br><span class="line">bindkey -s "^[On" "."</span><br><span class="line">bindkey -s "^[OM" "^M"</span><br><span class="line"># 1 2 3  </span><br><span class="line">bindkey -s "^[Oq" "1"</span><br><span class="line">bindkey -s "^[Or" "2"</span><br><span class="line">bindkey -s "^[Os" "3"</span><br><span class="line"># 4 5 6  </span><br><span class="line">bindkey -s "^[Ot" "4"</span><br><span class="line">bindkey -s "^[Ou" "5"</span><br><span class="line">bindkey -s "^[Ov" "6"</span><br><span class="line"># 7 8 9  </span><br><span class="line">bindkey -s "^[Ow" "7"</span><br><span class="line">bindkey -s "^[Ox" "8"</span><br><span class="line">bindkey -s "^[Oy" "9"</span><br><span class="line"># + - * /  </span><br><span class="line">bindkey -s "^[Ol" "+"</span><br><span class="line">bindkey -s "^[Om" "-"</span><br><span class="line">bindkey -s "^[Oj" "*"</span><br><span class="line">bindkey -s "^[Oo" "/"</span><br></pre></td></tr></tbody></table></figure>

<p>重连生效。</p>
</li>
</ol>
<p>接着装一堆插件</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install python</span><br><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting $ZSH_CUSTOM/plugins/zsh-syntax-highlighting</span><br><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</span><br><span class="line">git clone https://github.com/zsh-users/zsh-completions $ZSH_CUSTOM/plugins/zsh-completions</span><br><span class="line">git clone git://github.com/joelthelion/autojump.git</span><br><span class="line">cd autojump</span><br><span class="line">./install.py</span><br><span class="line">cd</span><br><span class="line">[ -z "`grep "autoload -U compinit &amp;&amp; compinit" ~/.zshrc`" ] &amp;&amp; echo "autoload -U compinit &amp;&amp; compinit" &gt;&gt; ~/.zshrc</span><br><span class="line">sed -i '/^plugins=/c\plugins=(git z zsh-syntax-highlighting zsh-autosuggestions zsh-completions autojump)' ~/.zshrc</span><br><span class="line">source ~/.zshrc</span><br><span class="line">#实际上不需要，除非是单独安装的autojump，sed那条命令已经包含了下面这条命令的功能。</span><br><span class="line">#echo "[[ -s $HOME/.autojump/etc/profile.d/autojump.sh ]] &amp;&amp; source $HOME/.autojump/etc/profile.d/autojump.sh" &gt;&gt; ~/.zshrc</span><br><span class="line">#不一定需要，如果使用中输入cd经常报错 _z_dirs:2: no such file or directory:/root/.z 就运行一句</span><br><span class="line">#wget https://raw.githubusercontent.com/rupa/z/master/z.sh -O ~/.z</span><br></pre></td></tr></tbody></table></figure>

<h3 id="坑-5：因不正常关机导致-zsh-history-报错"><a href="#坑-5：因不正常关机导致-zsh-history-报错" class="headerlink" title="坑 5：因不正常关机导致 zsh history 报错"></a>坑 5：因不正常关机导致 zsh history 报错</h3><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cp .zsh_history zsh_history</span><br><span class="line">rm -f .zsh_history </span><br><span class="line">strings zsh_history&gt;.zsh_history</span><br><span class="line">fc -R .zsh_history</span><br></pre></td></tr></tbody></table></figure>

<p>最后一句是仅存在于zsh中的fc语句，意思是从某文件中读取历史记录</p>
<p>另外 zsh 还有个 feature（但不一定每一次都能触发），复制粘贴多行的时候并不会和传统 bashrc 一行行运行而是堆在一起，回车时才会一起运行。好处是如果是几句常用的命令，利用上下方向键找历史记录时会直接找到拼成一块的这几个语句；坏处是利用 history 查看历史的时候看见这些句子被拼成一句，中间用 <code>\n</code> 做间隔，直接复制出来没法用，得自己处理。</p>
<h2 id="debian-和-ubuntu-显著区别（以及-debian-ppa-使用）"><a href="#debian-和-ubuntu-显著区别（以及-debian-ppa-使用）" class="headerlink" title="debian 和 ubuntu 显著区别（以及 debian ppa 使用）"></a>debian 和 ubuntu 显著区别（以及 debian ppa 使用）</h2><ol>
<li><p>debian 的内核比较旧而稳定，ubuntu 通常用的是最新内核。旧内核也有好处，bbr 和锐速，以及 fullcone 的那个内核组件比较好装。</p>
</li>
<li><p>debian 以下操作均只能通过命令完成：</p>
<ul>
<li>换源</li>
</ul>
</li>
<li><p>ubuntu 在非 root 状态下使用的命令若尚未安装，会给一句 apt 命令提示告诉你应该装啥。</p>
</li>
<li><p>ubuntu 的文件管理器的地址栏切换为可复制的文字路径的方法很隐蔽，需要快捷键 ctrl+L。当然也有办法让其一直工作在可复制文件路径下。需要先安装 dconf-editor。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">apt install dconf-editor -y</span><br></pre></td></tr></tbody></table></figure>

<p>搜索应用程序 dconf，就能看到 dconf 系统配置编辑器。打开后从 org –&gt; gnome –&gt; nautilus –&gt; preferences 进入就能看到相关选项了。</p>
</li>
<li><p>debian 没有 ppa 功能，虽然也能用，但比较麻烦（但因为 ubuntu 内核新 ppa 里面有些内容也很新，所以 debian 死活装不上，比如最新的 wireshark，<del>而旧版 wireshark 无法探测到本地的网卡，导致其实没法用</del>。debian 下 ppa 的具体使用方法参考这里：<a href="https://blog.skk.moe/post/add-ppa-to-debian/">在 Debian 上添加 PPA 并安装软件包</a>。文章中有一部比较难以理解：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$ sudo sed -i 's/disco/bionic/g' /etc/apt/sources.list.d/lazygit-team-ubuntu-daily-disco.list</span><br></pre></td></tr></tbody></table></figure>

<p>实际上就是进入 <code>/etc/apt/sources.list.d</code>，在上一步 ppa 中会下载两个跟你要装的软件相关的源文件，里面的系统名太新了（比如我下到的就是 groovy，而上面那行代码是 bionic，作者选择替换成当时最新的 lts bionic 系统）可以 <a href="https://zh.wikipedia.org/wiki/Ubuntu">wiki 查看</a>，选择一个合适的版本。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/vKqB7kT.png"></p>
<p>另外也可以通过软件 ppa 页面，查看当前版本是否有相关的包，比如 <a href="https://launchpad.net/~wireshark-dev/+archive/ubuntu/stable?field.series_filter=">wireshark 界面</a>：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/xZwC5zQ.png"></p>
<p>很明显确实没有最新的 groovy 版本，而只有上一个版本 focal 版，那么我们可以改成 focal 或者直接复制粘贴图中的两行代码。</p>
<p>另外也可以翻翻 sid 包，有没有相关的包，我反正翻到 sid 包里面也有 <a href="https://packages.debian.org/sid/amd64/wireshark/download">wireshark 的最新版本</a>。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/rPP1F98.png"></p>
<p>从这里找一个最近的源，比如 <a href="http://ftp.cn.debian.org/debian%EF%BC%8C%E6%8C%89%E7%BD%91%E9%A1%B5%E9%A1%B6%E4%B8%8A%E7%9A%84%E8%A6%81%E6%B1%82%E6%8B%BC%E6%8E%A5%E4%B8%80%E4%B8%8B%E3%80%82%E4%B8%BA%E4%BA%86%E9%81%BF%E5%85%8D%E5%92%8C%E6%AD%A3%E5%B8%B8%E6%BA%90%E6%B7%B7%E5%9C%A8%E4%B8%80%E8%B5%B7%EF%BC%8C%E6%88%91%E4%BB%AC%E6%96%B0%E5%BC%80%E4%B8%80%E4%B8%AA%E6%BA%90%E6%96%87%E4%BB%B6%EF%BC%8C%E5%91%BD%E5%90%8D%E4%B8%BA">http://ftp.cn.debian.org/debian，按网页顶上的要求拼接一下。为了避免和正常源混在一起，我们新开一个源文件，命名为</a> sid.list。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo sh -c 'printf "deb http://ftp.cn.debian.org/debian sid main " &gt; /etc/apt/sources.list.d/sid.list'</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt -t sid install wireshark -y</span><br></pre></td></tr></tbody></table></figure>

<p>但很遗憾，无论用 ppa 直接安装，ppa 直接编译还是 sid 源的方法安装 wireshark 都报错，依赖不对，估计手动编译也是一样的结果。</p>
</li>
</ol>
<h2 id="（12-22-更新）-过期的-ubuntu"><a href="#（12-22-更新）-过期的-ubuntu" class="headerlink" title="（12.22 更新） 过期的 ubuntu"></a><strong>（12.22 更新）</strong> 过期的 ubuntu</h2><p>虚拟机的 ubuntu 是去年才装的。</p>
<p>看了一下 ubuntu 有普通版和 long-term 版，long-term 版？应该是和 windows ltsb / ltsc 一个性质的东西吧。</p>
<p>「装在虚拟机里面的东西要什么 long-term，给我来最新的」然后我就装了 19.10。</p>
<p>结果最近 apt update 总是报错，说是什么</p>
<blockquote>
<p>仓库 “<a href="http://mirrors.tuna.tsinghua.edu.cn/ubuntu">http://mirrors.tuna.tsinghua.edu.cn/ubuntu</a> eoan-updates Release” 没有 Release 文件。</p>
</blockquote>
<p>是不是清华的源又整活了？用「软件与更新」换个源看看。</p>
<p>结果选择最佳服务器的时候就告诉我网络有问题（肯定不是网络原因，科学和 dns 这些我熟的很），退出的时候整个软件直接崩了。。。</p>
<p>兜兜转转我得出一个结论：这个 ubuntu 版本今年 7 月过期，连着源一块过期访问不到了。（这比 windows 10 版本寿命还短）</p>
<p>怎么办？尝试升级，好在和 window 不一样，普通版本也能升到 lt 版，升到 lt 版不折腾了。</p>
<p>关键是升级前要 apt update 的啊，这 apt update 都运行不了怎么办？</p>
<h3 id="apt-update-失效"><a href="#apt-update-失效" class="headerlink" title="apt update 失效"></a>apt update 失效</h3><p>参考 <a href="https://www.digitalocean.com/community/questions/unable-to-apt-update-my-ubuntu-19-04">Unable to ‘apt update’ my Ubuntu 19.04</a>，旧的源过期了不过会存档起来，但网址也改了。但我用的是镜像源，镜像源我猜不会改网址而是直接删库。。。保险起见找一下初始源。结果没找到官方的，找到一个这样的：<a href="https://gist.github.com/malikalichsan">malikalichsan</a>/<a href="https://gist.github.com/malikalichsan/860b8134a74c65a394efe09711d0b95f">sources.list</a></p>
<p>瞄了下大概的地址格式</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">deb http://id.archive.ubuntu.com/ubuntu/ eoan main restricted</span><br></pre></td></tr></tbody></table></figure>

<p>用 vscode 把 archive 批量替换为 old-releases</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">deb http://id.old-releases.ubuntu.com/ubuntu/ eoan main restricted</span><br></pre></td></tr></tbody></table></figure>

<p>update 一看，找不到仓库。对比一下网上的其他源地址，我们这个地址前面的 id 好突兀，删掉</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">deb http://old-releases.ubuntu.com/ubuntu/ eoan main restricted</span><br></pre></td></tr></tbody></table></figure>

<p>成了。</p>
<h3 id="do-release-upgrade-也失效"><a href="#do-release-upgrade-也失效" class="headerlink" title="do-release-upgrade 也失效"></a>do-release-upgrade 也失效</h3><p>ubuntu 也有专属的系统更新命令，那就是 <code>sudo do-release-upgrade</code>。然后我运行了一边，又告诉我没网络了。。。。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Failed to connect to https://changelogs.ubuntu.com/meta-release. Check your Internet connection or proxy settings</span><br></pre></td></tr></tbody></table></figure>

<p>继续问谷歌：<a href="https://askubuntu.com/questions/1200494/failed-to-connect-to-http-changelogs-ubuntu-com-meta-release-lts-after-upgrade">Failed to connect to http://changelogs.ubuntu.com/meta-release-lts after upgrade</a></p>
<p>说是删掉 <code>/var/lib/ubuntu-release-upgrader/release-upgrade-available</code> 这个文件，然后用 <code>/var/lib/ubuntu-release-upgrader/release-upgrade-motd</code> 这个程序再获取一遍地址。</p>
<p>没用，甚至运行这个 <code>release-upgrade-motd</code> 直接报错无网络。</p>
<p>算了，直接大力出奇迹好了。用 debian 的更新方法。</p>
<p>但话说 ubuntu 最新 lts 的版本缩写在 url 内怎么表示？等等上面那个报错信息里面不是有个网址。</p>
<p>打开看看。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201222235724.png"></p>
<p>很好，直接换：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo cp  /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line">sudo sed -i 's/eoan/focal/g' /etc/apt/sources.list</span><br></pre></td></tr></tbody></table></figure>

<p>更新：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt update&amp;&amp;sudo apt upgrade&amp;&amp;sudo apt dist-upgrade</span><br></pre></td></tr></tbody></table></figure>

<p>收工。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>zsh</tag>
        <tag>terminal</tag>
        <tag>wireshark</tag>
        <tag>vscode</tag>
        <tag>debian</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>mellow 使用体验</title>
    <url>/mellow-shi-yong-ti-yan/</url>
    <content><![CDATA[<p><a href="https://github.com/mellow-io/mellow">mellow</a> 竞品我都用过，所以一图流：</p>
<p><img src="https://mlgbgtf8qq4t.i.optimole.com/Mvdl5Q-pbiVlKII/w:720/h:681/q:auto/https://i0.wp.com/files.catbox.moe/q4fdfx.png" alt="github新项目mellow也能访问谷歌等知名网站"></p>
<p>就是用来 socks5 代理转 vpn 的。</p>
<p>不过虽然看起来功能很多，但因为全部依赖配置文件所以用起来繁琐，而且因为本身不像 sstap 就是为 socks5 转 vpn 服务的，所以本身连防本地环回的功能都没搞。。。</p>
<ol>
<li><p>抄官方的默认配置，或者导入 url（可能有点困难，github raw 这个网址被墙了）：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">https://raw.githubusercontent.com/ConnersHua/Profiles/master/Mellow/Pro.conf</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>修改，主要修改 <code>[Endpoint]</code></p>
<p>我只用 v2-tls 和 v2+kcptun，对于 v2-tls，mellow 原生支持，但没有详细写描述怎么配置，只能找猫画虎：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Proxy-1, vmess1, vmess1://75da2e14-4d08-480b-b3cb-0079a0c51275@example.com:443/path?network=ws&amp;tls=true&amp;ws.host=example.com</span><br></pre></td></tr></tbody></table></figure>

<p>注意 path 和 host。</p>
<p>对于另一种，需要通过 sokcs 转接，官网上 socks 用了 Socks-Out 这种标法，如果没有做 <code>[EndpointGroup]</code> 照抄会出错，正确的写法是：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Proxy-1, builtin, socks, address=127.0.0.1, port=3080</span><br></pre></td></tr></tbody></table></figure>

<p>然后！在 <code>[RoutingRule]</code> 里面加上代理的 app，防止本地环回，本例中，是这样：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">PROCESS-NAME, kcptun.exe, Direct</span><br><span class="line">PROCESS-NAME, wv2ray.exe, Direct</span><br><span class="line">PROCESS-NAME, v2rayN.exe, Direct</span><br></pre></td></tr></tbody></table></figure>

<p>然后保存，重载配置，connect，按提示安装虚拟网卡，即可使用。</p>
<p><strong>（21.1.17 更新）</strong> 几点小注意（bug）：</p>
<ol>
<li><p>启动不起来，或者启动报错，看下安装日志，很有可能是虚拟网卡创建失败或者名字不对。解决方案是将 mellow 用的虚拟网卡（网络适配器）<code>TAP-Windows Adapter V9</code> 卸载后打开软件自动重装，仍然错误再手动更名为 <code>mellow-tap0</code>。</p>
</li>
<li><p>socks 转接的话，转接的代理工具配置文件中地址得用 ip 而不能用域名。如果一定要用域名，需要在 mellow 配置文件中增加 host，类似于：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[DnsHost]</span><br><span class="line">; domain = ip</span><br><span class="line">xxx.xxx = [vps的ip]</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>内置 vmess 似乎不支持 tcp http 伪装。</p>
</li>
<li><p>不建议 socks 转接时使用重新连接功能，经常报错端口占用，应该是进程退不干净。如要重新连接最好断开连接过段时间再连。</p>
</li>
<li><p>和一些 tap 代理工具有冲突，比如 clash。使用前请关闭，否则也报端口占用。也许更改初始端口可以解决（待验证）。</p>
</li>
<li><p>仍然大量报错的话建议用工具清理注册表。</p>
</li>
<li><p>本工具已经略显过时，主要是因为配置麻烦和 bug 过多。如果不是为了全局 tap/tun 代理并忽略部分进程，建议使用 netch 替代（netch 全局代理暂不可用）。</p>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>socks</tag>
        <tag>mellow</tag>
      </tags>
  </entry>
  <entry>
    <title>powershell 全攻略</title>
    <url>/powershell-quan-gong-lue/</url>
    <content><![CDATA[<p>我一直以为 powershell 没啥好玩的。。。不过最近了解了一下，比 cmd 强很多，特别是 cmd 没有历史记录这点差评，另外还有包管理器什么的，感觉发现了新世界~</p>
<p>参考文章：</p>
<ul>
<li><a href="https://beta.sspai.com/post/52868">告别 Windows 终端的难看难用，从改造 PowerShell 的外观开始</a></li>
</ul>
<h2 id="安装包管理器-chocolatey"><a href="#安装包管理器-chocolatey" class="headerlink" title="安装包管理器 chocolatey"></a>安装包管理器 chocolatey</h2><p>嘛。。。虽然市面上有两个包管理器，另一个叫做 scoop 理论上更合适程序员使用，但是 chocolatey 更合适懒人使用。。。于是我选择后者。</p>
<p>安装方法，一行流：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))</span><br></pre></td></tr></tbody></table></figure>

<p>几个常用的命令：</p>
<ol>
<li><p>查找</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">clist xxx</span><br></pre></td></tr></tbody></table></figure>

<p>几乎所有开源常用的软件和大多数免费的非商业都有。</p>
</li>
<li><p>找到了以后安装</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">choco install xxx</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>查看目前系统中 chocolate 安装的所有应用</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">clist -l</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>套代理（永久）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">choco config set proxy http://127.0.0.1:3081</span><br></pre></td></tr></tbody></table></figure>

<p>取消代理</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">choco config unset proxy</span><br></pre></td></tr></tbody></table></figure>

<p>临时代理（以安装为例）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">choco install --proxy=127.0.0.1:3081 xxx</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>卸载</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cuninstall xxx</span><br></pre></td></tr></tbody></table></figure>


</li>
</ol>
<p>另外，因为国内网络因素和程序设计影响，chocolatey 不可避免的会遇到下载失败的问题，一般从几个方面去解决：</p>
<ol>
<li>使用<code>--pre</code>参数</li>
<li>下载前一个或后一个版本</li>
<li>使用<code>--checksum64+正确的md5</code>或者是<code>--ignore-checksums</code>参数</li>
</ol>
<p>另外，提一下，还有另一个比较热门的包管理器叫 scoop，我不打算写使用方法了，可以参考下面三篇文章：</p>
<ul>
<li><a href="https://www.jianshu.com/p/50993df76b1c">scoop——强大的Windows命令行包管理工具</a></li>
<li><a href="https://sspai.com/post/52496">「一行代码」搞定软件安装卸载，用 Scoop 管理你的 Windows 软件</a></li>
<li><a href="https://sspai.com/post/52710">给 Scoop 加上这些软件仓库，让它变成强大的 Windows 软件管理器</a></li>
</ul>
<p>和 chocolatey 相比，有几个优点</p>
<ol>
<li>支持 aria2c 进行多线程下载</li>
<li>可以添加个人仓库，github 里面有几个热门仓库，你甚至可以考虑自己做一个</li>
</ol>
<p>但缺点也很多</p>
<ol>
<li>速度仍然堪忧，仍然有可能遭遇哈希值错误</li>
<li>加仓库前还要先装 git</li>
<li>不加仓库的话原有的软件包根本不够用，太少了</li>
<li>就算是加了仓库也不够。。。github 上热门的就前几个仓库，加了仍然找不到小狼毫，而且加仓库的操作不能说不繁琐，仓库软件分布的很分散，甚至连 java 环境都有一个专门的仓库管理，想用还要加那个仓库</li>
<li>search 本来就慢，加仓库更慢</li>
</ol>
<p>中间这两个生态问题，相当致命，除非是有精力自己建仓库，否则不推荐使用。</p>
<h2 id="微软默认-powershell-美化"><a href="#微软默认-powershell-美化" class="headerlink" title="微软默认 powershell 美化"></a>微软默认 powershell 美化</h2><p>默认的 powershell 界面从颜色和字体上看都比较丑。。。有两个方案，一个是美化这个预装版，还有一个是装一个第三方，预装版的优点是加载快，所以先说怎么美化这个预装版。</p>
<h3 id="界面颜色美化"><a href="#界面颜色美化" class="headerlink" title="界面颜色美化"></a>界面颜色美化</h3><p>利用 colortool 这个工具</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">choco install -y colortool</span><br></pre></td></tr></tbody></table></figure>

<p>查看有多少种颜色方案</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">colortool -s</span><br></pre></td></tr></tbody></table></figure>

<p>然后预览一下</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">colortool xxx.itermcolors</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@master/img/iiHvIIn.png"></p>
<p>发现问题了，这颜色咋那么奇怪呢？</p>
<p>原来是 colortool 默认是按 powershell 背景为全黑的时候设计的，当然因为 powershell 现阶段默认背景早已经是蓝色了，所以作者已经把这点当做 bug 在处理了。<a href="https://github.com/microsoft/terminal/issues/1150">Bug Report: ColorTool and changing colours causes strange behaviour since Windows 10 1903 #1150</a></p>
<p>至于临时的解决方案，就是右击窗口，将颜色和默认值都调到第一个颜色上，再用 colortool 命令设置颜色。</p>
<p>而如果要永久设置主题的话，加上 -b 参数，再右键窗口进入默认值和属性中各点一次确定生效。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">colortool -b OneHalfDark.itermcolors</span><br></pre></td></tr></tbody></table></figure>

<h3 id="修改字体"><a href="#修改字体" class="headerlink" title="修改字体"></a>修改字体</h3><p>修改字体就麻烦一些。<a href="https://www.zhihu.com/question/36344262">为什么 Windows 下 cmd 和 PowerShell 不能方便地自定义字体？</a>因为 powershell 要求字体需要满足微软规范（否则 powershell 默认值里面根本看不到）和编码代码页语言编码要求（否则等宽字体只能在默认值中看到，属性里面看不到），最好支持 powerline（待会有用），所以一共有三种方法可供使用。</p>
<ul>
<li>安装符合微软规范的等宽字体（符合规范的等宽字体能够在注册表相应项中找到），修改注册表，打上 powerline 补丁</li>
<li>安装符合微软规范的字体，给所有字体打上 powerline 补丁（和当年通过工具撤销系统字体的 graph 优化然后替换是如出一辙的方法）</li>
<li>安装符合微软规范且支持 powerline 的字体</li>
</ul>
<p><del>打 powerline 补丁的方法都很麻烦。。而且如果你安装的字体比较多的话，有些字体没有必要打上补丁的也打上了（打补丁不止会打符合规范的字体而是所有补丁都打），就会浪费时间和空间。</del></p>
<p>而符合微软中文编码规范的字体，找来找去就两种，知乎 belleve 大佬的<a href="https://github.com/be5invis/Sarasa-Gothic">更纱黑体</a>（Inziu Iosevka）和 <a href="https://github.com/Microsoft/BashOnWindows/files/1362006/Microsoft.YaHei.Mono.zip">Microsoft YaHei Mono</a>，后者同样要打上 powerline 补丁。全部支持的就只有更纱黑体，在 powershell 中兼容性相当不错。但是。。。我觉得字形不太好看了，非常扁。（也可能是微软的规范下只能做出这样的字形？）</p>
<p>当然还有传说中的支持 powerline 却不符合微软规范的字体。。。在这里不适用，看下面。</p>
<p>补充：关于第一个，各种教程都写得很不详细。。。我决定补一下。</p>
<p>参考文章：</p>
<ul>
<li><a href="http://www.voidcn.com/article/p-ueteeqcm-bdx.html">Windows 微软雅黑（Microsoft YaHei）+ Monaco 字体整合方案</a></li>
<li><a href="https://www.cnblogs.com/RhinoC/p/4470338.html">修改 cmd 控制台字体、巧用 FontLink 使中英文独立设置</a></li>
<li><a href="https://www.zhihu.com/question/54724102">win10下,cmd,power shell设置默认编码为‘UTF-8’?</a></li>
</ul>
<ol>
<li><p>安装等宽字体。安装时记住名字（字体管理器里面会有写）。然后去注册表里面确认一下名字（<strong>注意！只是确认有没有安装，第二步里面的字体名字以字体管理器的为准，不要用下面注册表的！</strong>），如果是为自己安装的字体名称在<code>HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Fonts</code>，为系统安装或者默认就有的字体在<code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Fonts</code>，有种方法是在<code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Console\TrueTypeFont</code>以名称加 0 的方法添加各新编码字体，但我试了试，根本没用。</p>
</li>
<li><p>记好名字以后，在<code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\FontLink\SystemLink</code>配置中文 fallback。具体来说，新建一个多行字符串值，名称为你选的等宽字体，填入的参数为检测到中文时回退到的字体。比如你决定用<code>Cascadia Code</code>做 powershell 的字体，中文回退到微软雅黑，那么新建一个名字为<code>Cascadia Code</code>的多行字符串值，值为</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">MSYH.TTC,Microsoft YaHei UI,154,115</span><br><span class="line">MSYH.TTC,Microsoft YaHei UI</span><br></pre></td></tr></tbody></table></figure>

<p>这个大小大概按照英文字体<em>比例来写。英文字体基本上是 128\</em>96，而大部分英文字体对雅黑的比例都是 1.6，所以填上面这两个数字。如果你感觉宽了或者窄了，稍微改改也可以。最后让默认值和属性都指向你想用的这个字体，改完以后重启电脑。</p>
</li>
<li><p>进入 powershell，更改编码，默认中文编码为 GBK，改成 GB2312 就能更改为默认字体且正确的显示中文了。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">chcp 54936</span><br></pre></td></tr></tbody></table></figure>

<p>然后去属性里面改成你刚刚改的字体再重启就 ok 了。</p>
<p>当然，每次启动前都要打这一串才能转到 gb2312，如果要启动时自动设定的话，需要动一点手脚。（1909 前的系统不需要动手脚，每次启动默认出来的就是进入 gb2312 模式后设置的字体，不过属性面板里面还写着点阵字体而已，如果还要修改需要回到 gb2313 去，写入配置文件中反而会导致中文字体挤在一起）。新建 powershell 的配置文件。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">if (!(Test-Path -Path $PROFILE )) { New-Item -Type File -Path $PROFILE -Force }</span><br><span class="line">notepad $PROFILE</span><br></pre></td></tr></tbody></table></figure>

<p>然后在弹出的 notepad 里面输入：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[System.Console]::OutputEncoding=[System.Text.Encoding]::GetEncoding(54936)</span><br></pre></td></tr></tbody></table></figure>

<p>就 ok 了。</p>
<p><del>另外，上面的文章 1 里面给了一个文件，是 monako 字体加一个注册表文件，使用完那个注册表文件以后甚至不用该编码。。。原来的 gbk 下的点阵字体直接就变成 monako 了，原因未知。</del>（其实就是进去以后改成了 monako 字体，那个注册表文件只是修改了 monako 的 fontlink）</p>
</li>
<li><p><strong>（21.1.9 更新）</strong> 实验过，改成 utf-8（65001）也没出什么岔子。而且我的系统经过一番操作，没加啥代码，他自动帮我换成 utf-8 了。。。另外，参考<a href="https://www.jianshu.com/p/cd3a7b196ab3">正确解决 VS Code / GCC / Clang 编译时中文乱码问题 - 简书</a>，这里有另一个指令，能修改编码为 utf-8，同样是写在 <code>notepad $PROFILE</code> 中：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$OutputEncoding = [console]::InputEncoding = [console]::OutputEncoding = New-Object System.Text.UTF8Encoding</span><br></pre></td></tr></tbody></table></figure>

<p>和上面那个指令不同的是，这个指令对 chcp 同样有效（即只输入 <code>chcp</code> 会显示你当前窗口的编码，但实际上 powershell 真正的编码在属性-&gt;选项-&gt;当前编码页中。4 的命令只会修改属性里面的，而这个指令同时修改属性和 chcp 的）。不过从实际效果来看，无论是用那个指令，修改成 gb2312 还是 utf-8，暂时没发现区别。</p>
</li>
</ol>
<h2 id="安装-oh-my-posh-和一些其他的东西"><a href="#安装-oh-my-posh-和一些其他的东西" class="headerlink" title="安装 oh-my-posh 和一些其他的东西"></a>安装 oh-my-posh 和一些其他的东西</h2><p>其实就是 oh-my-zsh 的 windows 版。。。</p>
<p>参考文章：</p>
<ul>
<li><a href="https://blog.csdn.net/itanders/article/details/75305163">PowerShellGet系列(二)：用PowerShellGet管理你的模块包</a></li>
<li><a href="https://blog.csdn.net/WPwalter/article/details/78937346">将美化进行到底，把 PowerShell 做成 oh-my-zsh 的样子</a></li>
<li><a href="https://github.com/JanDeDobbeleer/oh-my-posh">JanDeDobbeleer/oh-my-posh</a></li>
</ul>
<h3 id="先给出一些-powershell-上一些常用的操作"><a href="#先给出一些-powershell-上一些常用的操作" class="headerlink" title="先给出一些 powershell 上一些常用的操作"></a>先给出一些 powershell 上一些常用的操作</h3><ol>
<li><p>安装模块</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Install-Module xxx</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>查看当前模块版本</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Get-Module xxx</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>寻找可用模块</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Find-Module -Name xxx -AllVersions</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>卸载模块</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">remove-module posh-git</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h3 id="主要安装步骤"><a href="#主要安装步骤" class="headerlink" title="主要安装步骤"></a>主要安装步骤</h3><ol>
<li><p>开启策略（注意，如果你的个人文档在 d 盘，系统在 c，重装系统后其实不用再走下面的步骤了，但是要走这一步；如果之前安装了 chocolatey，这一步也不用做了）</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Set-ExecutionPolicy Bypass</span><br><span class="line">#Set-ExecutionPolicy Unrestricted </span><br><span class="line">#使用该策略可能会导致管理员模式下不可安装模块，需要进入普通用户模式安装</span><br></pre></td></tr></tbody></table></figure>

<p> （可选）安装模块时候经常遇到提示「不受信任的储存库」，可以按 A 或 Y 跳过，也可以直接关闭检测：</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Set-PSRepository -Name PSGallery -InstallationPolicy Trusted</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>安装依赖模块 posh-git 和 psreadline</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Install-Module posh-git -Scope CurrentUser</span><br><span class="line">Install-Module -Name PSReadLine  -Scope CurrentUser -Force -SkipPublisherCheck                 </span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>安装模块 oh-my-posh</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Install-Module oh-my-posh -Scope CurrentUser</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>然后按美化 powershell 修改字体里面的第三部新建配置文件（如果建了就不用了），填入</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Import-Module posh-git</span><br><span class="line">Import-Module oh-my-posh</span><br><span class="line">Set-Theme Paradox</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<p>重启 powershell 生效。</p>
<h3 id="补充注意"><a href="#补充注意" class="headerlink" title="补充注意"></a>补充注意</h3><ol>
<li><p>安装的 posh-git 和 psreadline 都安装的是非最新版，如果要安装最新测试版可以考虑把这两个原版卸掉，然后更新 powershellget（自带的 powershell get 好像无法识别测试版的安装参数），并重启。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">remove-module posh-git</span><br><span class="line">remove-module psreadline</span><br><span class="line">Install-Module -Name PowerShellGet -Force</span><br></pre></td></tr></tbody></table></figure>

<p>然后安装最新测试版（版本号可以去 powershell 官网要）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Install-Module -Name PSReadLine -RequiredVersion 2.1.0-beta2 -AllowPrerelease</span><br><span class="line">Install-Module -Name posh-git -RequiredVersion 1.0.0-beta4 -AllowPrerelease	</span><br></pre></td></tr></tbody></table></figure>

<p><strong>（20.8.10 更新）</strong> 可以尝试直接强制更新，而不是卸载。关闭所有 powershell 窗口，在 cmd 下运行。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">powershell -noprofile -command "Install-Module PSReadLine -Force -SkipPublisherCheck -AllowPrerelease"</span><br><span class="line">powershell -noprofile -command "Install-Module posh-git -Force -SkipPublisherCheck -AllowPrerelease"</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>自动补全有另一种形式，就是显示出所有候选项的形式，可以通过</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Set-PSReadLineKeyHandler -Key Tab -Function Complete</span><br></pre></td></tr></tbody></table></figure>

<p>来打开。当然这是暂时的打开，永久打开添加到 $profile 里就行了。</p>
</li>
<li><p><del>然而就算如此，教程里面展现的什么都没调整就能享受到的带方向键的自动补全。。。实在是搞不出来</del></p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/3lMO1jJ.png"></p>
<p>如果要使用方向键式自动补全，修改 2 的语句为</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Set-PSReadLineKeyHandler -Key Tab -Function MenuComplete</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>智能提示。需更新到 2.1.0-beta1 后版本。参考：<a href="https://github.com/PowerShell/PSReadLine/issues/687">Fish-like autocompletion</a></p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">set-psreadlineoption -predictionsource history</span><br><span class="line">get-psreadlineoption | % predictionsource</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p> 其他有用的功能。比如上下翻选时根据当前已输入的内容进行筛查而不是安装当前历史记录。可参照配置文件 <a href="https://github.com/PowerShell/PSReadLine/blob/master/PSReadLine/SamplePSReadLineProfile.ps1"><strong>SamplePSReadLineProfile.ps1</strong></a>。需要将其所有内容放到 <code>profile.ps1</code> 的最前端。</p>
</li>
<li><p>如果遭遇 <code>Install-Module : A parameter cannot be found that matches parameter name AllowPrerelease.</code>，先更新 PowerShellGet。参考：<a href="https://evotec.xyz/install-module-a-parameter-cannot-be-found-that-matches-parameter-name-allowprerelease/">Install-Module : A parameter cannot be found that matches parameter name AllowPrerelease.</a></p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Install-Module -Name PowerShellGet -Force</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h2 id="powerline-补丁"><a href="#powerline-补丁" class="headerlink" title="powerline 补丁"></a>powerline 补丁</h2><p>oh-my-posh 装好后，使用主题会发现各种乱码，因为主题是靠各种 powerline 字体实现的。</p>
<p>在修改字体那里说过，要么上支持 powerline 的字体要么给字体打补丁。</p>
<p>打补丁的工具叫做 <a href="https://github.com/ryanoasis/nerd-fonts">nerd-fonts</a>，需要在 linux 环境下才能使用。当然，系统比较新的话，可以考虑用 wsl ubuntu。下文就是用这玩意进行补丁的。</p>
<p>参考文章：</p>
<ul>
<li><a href="https://www.hanselman.com/blog/PatchingTheNewCascadiaCodeToIncludePowerlineGlyphsAndOtherNerdFontsForTheWindowsTerminal.aspx">Patching the new Cascadia Code to include Powerline Glyphs and other Nerd Fonts for the Windows Terminal</a></li>
<li><a href="https://coolcode.org/2018/03/16/how-to-make-your-powershell-beautiful/">PowerShell 美化指南</a></li>
</ul>
<ol>
<li><p>安装依赖</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get install software-properties-common</span><br><span class="line">sudo add-apt-repository ppa:fontforge/fontforge</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install fontforge</span><br><span class="line">sudo apt install python-pip</span><br><span class="line">sudo pip install configparser</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>通过 git 或者下载源码的方式，主要是将项目目录下的 src 文件夹和 font-patcher 脚本下载到本地</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/phxn8xp.png"></p>
</li>
<li><p>通过<code>explorer.exe .</code>命令，将第二部的文件以及字体全部拖到执行文件夹中。</p>
</li>
<li><p>打补丁</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">fontforge -script font-patcher Cascadia.ttf -c</span><br></pre></td></tr></tbody></table></figure>

<p>打好补丁的字体会存在执行文件夹中，安装就是了。安装后可能还需要返回修改字体那部对字体的汉字 fallback 进行设置（另外打完补丁的字体名字会发生改变）</p>
</li>
</ol>
<h3 id="已知问题关于每行「〉」符号乱码的解决方法"><a href="#已知问题关于每行「〉」符号乱码的解决方法" class="headerlink" title="已知问题关于每行「〉」符号乱码的解决方法"></a><del>已知问题</del>关于每行「〉」符号乱码的解决方法</h3><p><del>在 powershell 中，尽管字体打完了补丁，但还是有一个符号会显示为方框，就是每行开头的「〉」符号。而且使用更纱黑体，换用其他终端都没问题。已向作者提出 issue：<a href="https://github.com/ryanoasis/nerd-fonts/issues/375">The symbol ‘〉’ can not display in powershell</a>。</del></p>
<p>提问半小时，解决五分钟。。。还是自己解决的，不过还有些小疑点，看看有没有人回我 issue~</p>
<p>简而言之，那个方框符号其实和我猜的差不多，不在 powerline 里面（因为我提问前搜索了一下 powershell 相关的 issue，也有个问题作者回了「你乱码的符号其实不是 powerline 符号」，但和我提问的符号不一样，所以我就开 issue 了」）</p>
<p>那问题出在哪呢？另外两个 terminal 都没问题哦？突然想起，在 terminus 里面看中文和 powershell 里面我配置过 fallback 的中文字形明显不太一样，而且就算我没配过 fallback，terminus 那边的字形也还属于「能看」级别的。</p>
<p>那我大概知道问题在哪了</p>
<ol>
<li>那个符号应该是靠 fallback 到正确字体显示出来的</li>
<li>国外用的是英文 windows 操作系统，和中文操作系统的 fallback 回退可能不太一样，它们回退到了能够正确显示那个符号的字体，而我们大概率是回退到了垃圾宋体</li>
</ol>
<p>那问题就很好解决了，从参考文章第二篇我们可以看到作者这么处理了方框文字：</p>
<blockquote>
<p>在其中新建多字符串值，名称为：<code>Sarasa Term SC</code>，内容为：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">MICROSS.TTF,Microsoft Sans Serif,108,122</span><br><span class="line">MICROSS.TTF,Microsoft Sans Serif</span><br><span class="line">MINGLIU.TTC,PMingLiU</span><br><span class="line">MSMINCHO.TTC,MS PMincho</span><br><span class="line">BATANG.TTC,Batang</span><br><span class="line">MSYH.TTC,Microsoft YaHei UI</span><br><span class="line">MSJH.TTC,Microsoft JhengHei UI</span><br><span class="line">YUGOTHM.TTC,Yu Gothic UI</span><br><span class="line">MALGUN.TTF,Malgun Gothic</span><br><span class="line">SEGUISYM.TTF,Segoe UI Symbol</span><br></pre></td></tr></tbody></table></figure>

<p>这段内容是复制的宋体SimSun的，如果你愿意的话，可以用同样的方法把 <code>Sarasa</code> 系列的都注册一下，如果像我这么懒的话，只修改这一个，然后重启计算机也是可以了。修改之后的效果是这样的：</p>
</blockquote>
<p>当然我们知道，现在最新的 sarasa（更纱黑体）已经解决这个问题了。而是否需要复制这么多的 fallback 呢。。。我尝试了一下，只需要最后一行好像就行了。当然我也不确定这样做后面会有什么新问题，这就是为什么那边的 issue 我想继续开着的原因。</p>
<h2 id="其他黑科技"><a href="#其他黑科技" class="headerlink" title="其他黑科技"></a>其他黑科技</h2><p>以下内容设置完后记得关键指令保存到配置文件里面去~</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">notepad $PROFILE</span><br></pre></td></tr></tbody></table></figure>

<h3 id="彩色标记文件"><a href="#彩色标记文件" class="headerlink" title="彩色标记文件"></a>彩色标记文件</h3><p>使用 pscolor 模块。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Install-Module PSColor</span><br><span class="line">#关键指令</span><br><span class="line">Import-Module PSColor</span><br></pre></td></tr></tbody></table></figure>

<h3 id="显示全部历史记录"><a href="#显示全部历史记录" class="headerlink" title="显示全部历史记录"></a>显示全部历史记录</h3><p>参考文章：<a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/set-alias?view=powershell-6">Set-Alias</a></p>
<p>默认的<code>history</code>指令只能显示当前窗口的历史记录。如果要显示全部的历史记录，需要输入命令：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cat (Get-PSReadlineOption).HistorySavePath</span><br></pre></td></tr></tbody></table></figure>

<p>但这命令太长又不好记，所以用<code>alias</code>简化。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#下面两个都是关键指令</span><br><span class="line">function his {cat (Get-PSReadlineOption).HistorySavePath}</span><br><span class="line">set-alias -name allhistory -value his</span><br></pre></td></tr></tbody></table></figure>

<p>往后用 <code>his</code> 或 <code>allhistory</code>就能看到所有的历史记录了。不过有一个 bug 我暂时不知道怎么处理，历史记录中若是有中文，会显示为乱码（但乱的很整洁，起码字符数没变。。。影响不算太大）。</p>
<h3 id="启动时显示机器信息"><a href="#启动时显示机器信息" class="headerlink" title="启动时显示机器信息"></a>启动时显示机器信息</h3><p>可能会拖慢启动速度，慎用。</p>
<h4 id="screenfetch"><a href="#screenfetch" class="headerlink" title="screenfetch"></a>screenfetch</h4><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Install-Module -Name windows-screenfetch</span><br></pre></td></tr></tbody></table></figure>

<p>使用 </p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#关键指令</span><br><span class="line">screenfetch</span><br></pre></td></tr></tbody></table></figure>

<p>启动。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/5nlZs9k.png"></p>
<h4 id="winfetch"><a href="#winfetch" class="headerlink" title="winfetch"></a>winfetch</h4><p>磁盘信息显示没有上面这个全（只会显示系统盘），快一些，但咱不用 scoop，所以安装略微麻烦。有两种安装方法：</p>
<ol>
<li><p>直接通过命令安装</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Install-Script -Name winfetch</span><br></pre></td></tr></tbody></table></figure>

<p>安装出来的是 v1.0 版本，界面和最新版有些差距</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/3znd7v3.png"></p>
</li>
<li><p>通过 <a href="https://github.com/lptstr/winfetch">github</a> 获取</p>
<p><em>根据作者写的 wiki：<a href="https://github.com/lptstr/winfetch/wiki/Installation">Basic Usage</a>，先需要去自己的 github 中添加一个公钥，并将对应的私钥放在自己 git 目录下的 <code>.ssh</code> 文件夹中，最后通过 <code>ssh -vT git@github.com</code> 命令处理后才能运行 wiki 中的第一条命令拷贝库。</em></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">git clone git@github.com:lptstr/winfetch.git winfetch</span><br></pre></td></tr></tbody></table></figure>

<p>不过最后验证出来是大费周章。。。直接 git 源库就好了</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">git clone https://github.com/lptstr/winfetch.git</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>然后处理一下，最新版本是 v1.2.0 来着（可选，否则安装的是最新分支的测试版，如果要做第五步的自定义的话这步是必须的，测试版报错，不过经过测试，正式版也可能报错。。。）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cd winfetch</span><br><span class="line">git reset --hard v1.2.0</span><br></pre></td></tr></tbody></table></figure>

<p>拷贝到 windows powershell script 默认目录下，windows 应该会自动帮你添加到系统路径里面，大概是 <code>C:\Program Files\WindowsPowerShell\Scripts</code>，如果拷进去发现不能运行的话，说明没帮你添加，需要自行添加。</p>
</li>
<li><p>最后运行</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#关键指令</span><br><span class="line">winfetch</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/So5ntqV.png"></p>
</li>
<li><p>自定义 winfetch 显示内容</p>
<p>参考文章：<a href="https://github.com/lptstr/winfetch/wiki/Configuration">Configuration</a></p>
<p>下载配置文件</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">winfetch -genconf</span><br></pre></td></tr></tbody></table></figure>

<p>如果报错下载不下来，可以自己创建</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">notepad C:\Users\[用户名]\.config/winfetch/config.ps1</span><br></pre></td></tr></tbody></table></figure>

<p>内容大概是</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"># ===== WINFETCH CONFIGURATION =====</span><br><span class="line"></span><br><span class="line"># Remove the '#' from any of the lines in</span><br><span class="line"># this file to **enable** their output.</span><br><span class="line"></span><br><span class="line">@(</span><br><span class="line">    'None'</span><br><span class="line">    'Show_Title'</span><br><span class="line">    'Show_Dashes'</span><br><span class="line">    'Show_OS'</span><br><span class="line">    'Show_Computer'</span><br><span class="line">    'Show_Uptime'</span><br><span class="line">    'Show_CPU'</span><br><span class="line">    'Show_GPU'</span><br><span class="line">    'Show_Memory'</span><br><span class="line">    'Show_Pkgs'    </span><br><span class="line">#    'Show_Terminal'</span><br><span class="line">#    'Show_Disk'</span><br><span class="line">#    'Show_Pwsh'</span><br><span class="line">) -join ','</span><br></pre></td></tr></tbody></table></figure>

<p>将不需要显示的注释掉就好了，默认情况下注释掉了下面三个（如果不创建这个文件的话，其实是全部显示的）。</p>
</li>
</ol>
<h3 id="proxychains-powershell-版（20-6-26-更新）"><a href="#proxychains-powershell-版（20-6-26-更新）" class="headerlink" title="proxychains powershell 版（20.6.26 更新）"></a>proxychains powershell 版（20.6.26 更新）</h3><p>linux 那边（19.11.12）的 proxychains4 在 powershell 这边也有相应的版本，就叫 proxychains。</p>
<p>在这里下载：<a href="https://github.com/shunf4/proxychains-windows/releases">shunf4/proxychains-windows</a></p>
<p>解压后将其中的 exe 和 dll 全部转移到一个好找的文件夹里面，比如 <code>D:\proxychains</code>。</p>
<p>然后将该文件夹添加到系统变量 PATH 中。</p>
<p>再把其中的 <code>proxychains.conf</code> 解压到 <code>%USERPROFILE%\.proxychains\</code> 里面，修改最后一行（其实这行默认适配 ss，如果用的是 ss 默认配置就别改了），改为</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">socks5 [ip] [端口]</span><br></pre></td></tr></tbody></table></figure>

<p>然后添加 alias 简化</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#关键指令</span><br><span class="line">set-alias -name  fan -value proxychains_win32_x64</span><br></pre></td></tr></tbody></table></figure>

<p>测试（注意用的是命令是 curl.exe 而不是 curl，原因见这里：<a href="https://www.cnblogs.com/sx00xs/p/11478936.html">powershell中调用 curl 的正确方法</a>）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">fan curl.exe cip.cc </span><br></pre></td></tr></tbody></table></figure>

<h3 id="curl-中文问题（不完美解决）（20-6-26-更新）"><a href="#curl-中文问题（不完美解决）（20-6-26-更新）" class="headerlink" title="curl 中文问题（不完美解决）（20.6.26 更新）"></a>curl 中文问题（不完美解决）（20.6.26 更新）</h3><p>首先</p>
<p>相信上一步运行时，之前没通过 <code>chcp 54936</code> 改编码（其实改了也乱码，要改成 <code>chcp 65001</code> 才有用）的诸位发现问题了。</p>
<p>curl 出来的都是乱码。</p>
<p>除了修改编码，还有一种方法能够解决。但必须进入 cmd，在 powershell 下除非临时改编码否则暂时无解。</p>
<p>参考文章：<a href="https://blog.csdn.net/aganliang/article/details/84403923">CURL 中文乱码解决方法</a></p>
<p>进入 <a href="http://gnuwin32.sourceforge.net/packages/libiconv.htm">LibIconv for Windows</a> 下载 <a href="https://sourceforge.net/projects/gnuwin32/files/libiconv/1.9.2-1/libiconv-1.9.2-1.exe/download?use_mirror=netix&amp;download=">Complete package, except sources</a>，安装。</p>
<p>增加系统变量（以默认的安装位置来说）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">C:\Program Files (x86)\GnuWin32\bin</span><br></pre></td></tr></tbody></table></figure>

<p>进入 cmd，然后运行</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cmd</span><br><span class="line">proxychains_win32_x64 curl cip.cc| iconv -f utf-8 -t gbk</span><br></pre></td></tr></tbody></table></figure>











]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>zsh</tag>
        <tag>terminal</tag>
        <tag>powershell</tag>
      </tags>
  </entry>
  <entry>
    <title>一步到位的 vps 从入门到放弃</title>
    <url>/yi-bu-dao-wei-de-vps-cong-ru-men-dao-fang-qi/</url>
    <content><![CDATA[<p>包含网盘，下载工具，远程控制，端口穿透，科学上网工具，以及上面这些技术的环境基础搭建</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>debian 9,512m/1024m 内存 vps</p>
<p>下文默认在 root 下执行</p>
<h2 id="基础环境搭建"><a href="#基础环境搭建" class="headerlink" title="基础环境搭建"></a>基础环境搭建</h2><p>基础环境我选择 lnmp （或者叫做 lemp）</p>
<p>安装前务必卸载 nginx，php 和 mysql（通过 apt remove 卸载），因为所使用的目录不同（apt 安装使用的目录是 /etc，而 lnmp 会安装到 /usr/local 下）</p>
<p>另外如果遇到安装 lnmp 后某些组件无法自启，请使用 systemctl unmask 和 enable 命令进行修复</p>
<p>比如我就是 nginx 出现了问题：</p>
<ol>
<li><p><code>service status nginx</code>，检测出结果为 unmask </p>
<p> <img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/w4xUEnd.png"></p>
<p> 但使用 <code>lnmp nginx start</code> 可以启动</p>
</li>
<li><p><code>systemctl unmask nginx.service</code> 后 <code>systemctl enable nginx</code>，重启发现 nginx 正常启动</p>
<p> <img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/ZXc7uEo.png"></p>
</li>
</ol>
<h3 id="使用-lnmp-一键包（和宝塔二选一）"><a href="#使用-lnmp-一键包（和宝塔二选一）" class="headerlink" title="使用 lnmp 一键包（和宝塔二选一）"></a>使用 lnmp 一键包（和宝塔二选一）</h3><p>参考文章：<a href="https://lnmp.org/install.html">lnmp 一键安装包.org</a></p>
<p>因为我的机器是 512m 的，所以推荐安装 lnmp 1.6 测试版，因为该版本自动分配了 1g 的虚拟内存，避免编译时因为内存太小而编译失败</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">wget http://soft.vpser.net/lnmp/lnmp1.6beta.tar.gz -cO lnmp1.6beta.tar.gz &amp;&amp; tar zxf lnmp1.6beta.tar.gz</span><br></pre></td></tr></tbody></table></figure>
<p>运行完后得到 lnmp1.6 文件夹，修改其中的 lnmp.conf ，将<code>Enable_PHP_Fileinfo</code>这项改为<code>'y'</code>，除非接下来你不需要安装<a href="#Cloudreve">Cloudreve</a>。如果安装前这步忘记做了，可以安装后通过<a href="http://www.laozuo.org/11801.html">该文</a>所写补装 fileinfo。</p>
<p>之后，安装 lnmp，需要大概 40 分钟</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cd lnmp1.6 &amp;&amp; ./install.sh lnmp</span><br></pre></td></tr></tbody></table></figure>
<p>中途会叫你输入 mysql 相关的管理员密码，自己设定并记住这个密码，后面要用到。其他选项保持默认即可。</p>
<p>安装完后，输入 <code>which nginx</code>和<code>which lnmp nginx</code>，查看前者显示的路径里面是否在后者显示的路径中有包含。建议对 mysql 和 php 也做相似的操作。如果都有的话证明安装成功。</p>
<p>然后运行<code>php -m</code>，查看其中时候是否有 fileinfo 和 gd 两个扩展。</p>
<p>全部检查完毕，证明 lnmp 部署成功。</p>
<h3 id="使用宝塔面板进行安装（和-lnmp-二选一）"><a href="#使用宝塔面板进行安装（和-lnmp-二选一）" class="headerlink" title="使用宝塔面板进行安装（和 lnmp 二选一）"></a>使用宝塔面板进行安装（和 lnmp 二选一）</h3><p>宝塔面板操作更简单，但是所需内存也更大。</p>
<p>安装：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; bash install.sh</span><br></pre></td></tr></tbody></table></figure>
<p>安装后会显示面板地址和账户密码，马上输入面板地址和账户密码并更改密码以及放行端口（特别是对于改过 ssh 端口的），如果能进入 ssh 却忘记了密码的，可以通过<code>bt指令</code>来更改密码。另外，一开始是用<code>ip地址:端口号/目录</code>给定面板地址，有的时候绑上域名后反而打不开面板，可能需要改端口号解决，同样是使用<code>bt</code>指令。</p>
<p>因为宝塔面板在 debian 使用的是 ufw 防火墙，若是觉得宝塔面板的防火墙碍事，可以通过命令关闭</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">systemctl disable ufw.service</span><br></pre></td></tr></tbody></table></figure>
<p>登录面板后通过提示安装 lnmp+phpadmin（php 可视化管理工具），安装完后再插件页面选中安装的 php，插件管理处添加 fileinfo 即可。</p>
<h3 id="docker-安装及一些基本操作"><a href="#docker-安装及一些基本操作" class="headerlink" title="docker 安装及一些基本操作"></a>docker 安装及一些基本操作</h3><p>参考文章：<a href="http://get.daocloud.io/#install-docker">Docker 极速下载</a></p>
<ol>
<li><p>安装 docker:</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></tbody></table></figure>
<p> 安装 docker-compose</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.23.2/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>常用命令（此处的 xxx 可以是 id 也可以是 name）</p>
<table>
<thead>
<tr>
<th>用途</th>
<th>命令</th>
</tr>
</thead>
<tbody><tr>
<td>查看系统内现存的镜像</td>
<td><code>docker image ls</code></td>
</tr>
<tr>
<td>删除系统内现存镜像</td>
<td><code>docker rmi xxx</code></td>
</tr>
<tr>
<td>查看容器</td>
<td><code>docker ps -a</code></td>
</tr>
<tr>
<td>停止容器</td>
<td><code>docker stop xxx</code></td>
</tr>
<tr>
<td>删除容器</td>
<td><code>docker rm xxx</code></td>
</tr>
<tr>
<td>添加自启（container 正在运行时）</td>
<td><code>docker update --restart=always xxx</code></td>
</tr>
<tr>
<td>docker-compose 文件加载（后台运行带 -d 参数）</td>
<td><code>docker-compose up -d</code></td>
</tr>
<tr>
<td>docker-compose 文件卸载</td>
<td><code>docker-compose down</code></td>
</tr>
<tr>
<td>查看容器错误信息</td>
<td><code>docker logs xxx</code></td>
</tr>
</tbody></table>
<p> 这里说一下 docker-compose 的原理：将 docker 模块的参数写在一个文件中，运行加载命令就会把模块和参数一起配置好运行，如果发现其中有的模块镜像还没有被拉取会先行拉取，拉去过就会直接部署。如果要对其中已经部署成容器的模块进行修改，不能直接进入容器修改，而是需要使用相同的文件利用卸载命令进行卸载后再修改文件里面的参数然后再重新加载。</p>
<p> 所以：</p>
<ul>
<li>如果要运行两个不同的 docker-compose 的话，建议下载到不同的文件夹中或者使用不同的便于分辨的名字；</li>
<li>修改前一定记得用未修改的原文件进行卸载！如果使用修改后的文件不卸载直接加载可能会遭遇莫名其妙不好处理的错误。</li>
</ul>
</li>
<li><p>进入容器中进行操作</p>
<p> 参考文章:<a href="https://blog.csdn.net/zzy1078689276/article/details/77389177/">docker容器中文件的上传与下载</a></p>
<p> 最常用的方法是使用 docker 内的 bash 程序，这时需要用到 docker 的 exec 命令</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">docker exec -it xxxx /bin/sh</span><br></pre></td></tr></tbody></table></figure>
<p> 这里的和下面的 xxxx 需要填写容器的 id（可通过 ps 命令查询）</p>
<p> <code>/bin/sh</code>有可能在别的路径或者是别的 bash，需要根据不同程序自己修改，但大部分是这个，不过也可能没有。。。那就没辙了</p>
<p> 此时如果需要复制本机的文件到 docker 或者反过来操作，可以通过 docker cp 指令</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">docker cp xxxx:/root/test.txt /root/</span><br></pre></td></tr></tbody></table></figure>
<p> 冒号后面的是 docker 内路径，另一个就是本机路径。</p>
</li>
</ol>
<h3 id="新建一个用户"><a href="#新建一个用户" class="headerlink" title="新建一个用户"></a>新建一个用户</h3><p>后面某些应用（caddy，transmission）需要非 root 下运行，如果不自己新建用户的话，他们默认的用户会冲突，表现在两者共有的文件夹在其中一个应用中无法进行某些操作（如删除）。</p>
<p>新建方法</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">useradd -d [用户目录] -m [用户名]</span><br><span class="line"># 然后记得改密码</span><br><span class="line">passwd [用户名]</span><br></pre></td></tr></tbody></table></figure>

<p>下面教程以我的用户名 zbttl 为例。</p>
<h3 id="安装-screen-和-sudo"><a href="#安装-screen-和-sudo" class="headerlink" title="安装 screen 和 sudo"></a>安装 screen 和 sudo</h3><p><code>apt install screen sudo -y</code></p>
<p>screen 常用命令（xxx 为自己起的名字）<br>| 作用                 | 命令                  |<br>| ——————– | ——————— |<br>| 打开一个 screen 窗口 | screen -S xxx         |<br>| 查看已经打开的窗口   | screen -ls            |<br>| 进入正在运行的窗口   | screen -r xxx         |<br>| 强退一个窗口         | screen -X -S xxx quit |</p>
<h3 id="其他各项依赖"><a href="#其他各项依赖" class="headerlink" title="其他各项依赖"></a>其他各项依赖</h3><ol>
<li><p>系统更新</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get dist-upgrade -y</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>gcc 编译相关</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">apt-get install -y libcurl4-openssl-dev libevent-dev ca-certificates libssl-dev pkg-config build-essential intltool libgcrypt-dev libssl-dev libxml2-dev gcc</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>进程守护 supervisor</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">apt install supervisor -y</span><br></pre></td></tr></tbody></table></figure>

<p> 注意，如果往后发现下面通过 supervisor 设定的自启不正常了，可以检查一下<code>/etc/supervisor/supervisord.conf</code>，里面应该有这么一行</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">files = /etc/supervisor/conf.d/*</span><br></pre></td></tr></tbody></table></figure>

<p> 这行东西如果后面跟了什么后缀或者没写到文件里面都有可能造成异常，通过<code>supervisorctl</code>也可以获知哪些程序自启了哪些没有或者没正常自启。</p>
</li>
<li><p>python</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">apt install python python-pip -y</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>买一个域名，将 vps 指向域名，可以多做几个三级域名以免去 nginx location 项的编写。</p>
</li>
<li><p><del>修改时间</del></p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">tzselect</span><br></pre></td></tr></tbody></table></figure>

<p> <del>按照提示选择国家与地区，最后会得到一行代码，运行后 vps 时间就会校准为你当前所在地区的时间。如果你在大陆的话，一般直接运行以下代码：</del></p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">TZ='Asia/Shanghai'; export TZ</span><br></pre></td></tr></tbody></table></figure>

<p> <del>确认一下</del></p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">date -R</span><br></pre></td></tr></tbody></table></figure>

<p> 划掉的这个方法，是临时改时间的方法；要永久生效的话需要将 <code>TZ='Asia/Shanghai'; export TZ</code> 写入 profile 文件中，而且还不知道是否在系统中全局生效（可能只在终端中生效？）</p>
<p> 好处是泛用性比较好。</p>
<p> 适用于 debian，永久更改时区的办法，参考：<a href="https://www.myfreax.com/how-to-set-or-change-timezone-on-debian-9/">如何在Debian 9上设置或更改时区</a></p>
<p> 查看时区代码，找到其中你所在时区对应的时区代码</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">timedatectl list-timezones</span><br></pre></td></tr></tbody></table></figure>

<p> 修改，和上面一样，人在大陆，这么输</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">timedatectl set-timezone Asia/Shanghai</span><br></pre></td></tr></tbody></table></figure>

<p> 确认</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">timedatectl</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>更改语言</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">dpkg-reconfigure locales</span><br></pre></td></tr></tbody></table></figure>

<p> 在弹出的窗口一路 page down 找到<code>zh_CN.UTF-8 UTF-8</code>，按下空格勾选，回车后选择默认语言，同样选到<code>zh_CN.UTF-8</code>，重启即可。</p>
</li>
</ol>
<h3 id="目录设计"><a href="#目录设计" class="headerlink" title="目录设计"></a>目录设计</h3><p>web：<code>/home/web</code></p>
<p>证书：<code>/home/ssl</code></p>
<p>用户目录：<code>/home/zbttl</code></p>
<p>下载目录: <code>/home/zbttl/download</code></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">mkdir /home/web /home/ssl</span><br><span class="line">sudo chown zbttl /home/web /home/ssl</span><br><span class="line">su - zbttl</span><br><span class="line">mkdir /home/zbttl/download</span><br><span class="line">sudo chmod 0770 /home/ssl</span><br></pre></td></tr></tbody></table></figure>



<h2 id="lnmp-配置"><a href="#lnmp-配置" class="headerlink" title="lnmp 配置"></a>lnmp 配置</h2><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>apt install 安装的 nginx 配置文件位于 <code>/etc/nginx</code> 处，而 lnmp 一键包安装则位于 <code>/usr/local/nginx/conf</code> 内，宝塔的是<code>/www/server/nginx/conf</code> 内。如果使用后两者的界面来配置站点的话，它们还会把配置文件里面的站点扔到 conf 目录的 vhost 文件夹里面。虽然后两者都配有界面可以安装修改站点，要纠错或者是改点内容的话还是手工到目录里面改比较好。</p>
<h4 id="配置站点"><a href="#配置站点" class="headerlink" title="配置站点"></a>配置站点</h4><ul>
<li><p>apt 安装的 nginx。默认的 nginx 会读取 <code>/etc/nginx/modules-enabled/</code> 里面的 conf 文件，所以把下面提到的手工配置的 <code>server</code> 代码块放到自建的文件里就好。也可以仿照 lnmp 的，在 <code>nginx.conf</code> 的 <code>http</code> 代码块内新增一行</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">include vhosts/*.conf;</span><br></pre></td></tr></tbody></table></figure>

<p>然后也在 <code>vhosts</code> 文件夹里面放文件（server 代码块）。</p>
</li>
<li><p>lnmp 一键包：<code>lnmp vhost add</code>，第一个问题输入自己的三级域名，第二个问题直接回车，第三个问题输入网站所在目录，第四个问题根据所要配置的站点而决定（比如 cloudreve 就要求 rewrite 到 thinkphp），第五个问题决定你的站点能不能访问到 phpinfo（可以查看当前 php 状态和所安装的组件的页面），第六个问题问你写不写日志，第七个问题要不要创建同名数据库（实际上大多数情况都是自己创建数据库，选 n 或者直接回车就好了），第七个问题要不要做证书（我选择手工做，待会会讲到）。之后回车搞定。</p>
<p>如果要查看已经制作了几个站点，输入<code>lnmp vhost list</code>。</p>
<p>如果想要删除站点，输入<code>lnmp vhost del</code>。</p>
</li>
<li><p>宝塔面板：这个就方便多了，点进网站，添加站点，如果想上面那样一路 n 下来的话，只需要填两个地方就行了</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/yX456qs.png"></p>
</li>
</ul>
<p>以下假设我配置了一个 708hentai.baobaobao.xxx 的站点。</p>
<h4 id="基本的手工配置"><a href="#基本的手工配置" class="headerlink" title="基本的手工配置"></a>基本的手工配置</h4><p>进入 <code>vhost</code> 目录，打开站点 conf 文件，大概会是这样的：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/qYYUQUl.png"></p>
<p>listen：nginx 所在的端口，如果填写 80 证明是 http 端口，443 是 https 端口，这两种情况下地址后面无需附上端口号。</p>
<p>server_name：三级域名</p>
<p>index：主页</p>
<p>root：站点所在目录</p>
<p>include：包括的扩展性配置文件，这里的两个 include 后面指的就刚刚的 rewrite 和 phpinfo 是否启用的配置。</p>
<p>location：跟在网址和端口后面「/xxxx」的，相当于站点目录的相关配置，一般「/」这个代表默认目录。这里的四个 location 建议删掉，否则容易出问题。</p>
<h4 id="关于各程序的详细配置"><a href="#关于各程序的详细配置" class="headerlink" title="关于各程序的详细配置"></a>关于各程序的详细配置</h4><h4 id="关于证书的配置"><a href="#关于证书的配置" class="headerlink" title="关于证书的配置"></a><span id="cert">关于证书的配置</span></h4><p>参考资料：</p>
<ul>
<li><a href="https://www.jianshu.com/p/b6b172f69c14">acme.sh + Let’s Encrypt + nginx 配置通配符HTTPS</a></li>
<li><a href="https://www.imydl.tech/lnmp/394.html">Let’s Encrypt通配符证书申请办法，实测有效</a></li>
<li><a href="https://www.sooele.com/1684.html">Linux 下使用 acme.sh 配置 Let’s Encrypt 免费 SSL 证书 + 通配符证书</a></li>
</ul>
<p>因为是同一个二级域名下衍生的大量三级域名，所以建议申请泛域名证书。除非是 <a href="https://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md">api网站</a> 中写明支持可以获得 api key 的域名商，否则，请把域名的 dns 解析托管到 cloudfare 上。下文以域名已托管到 cloudfare 为例。</p>
<ol>
<li><p>打开 CF 的 <a href="https://dash.cloudflare.com/profile">api 网址</a>，找到最底部的 Global API Key，点击 view，记下字符串。</p>
</li>
<li><p>在 ssh 处输入下列代码，key 后面的 xxx 输入刚刚记下的字符串，email 后面的 xxx 则输入你的 cf 登录邮箱。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">export CF_Key="xxxxxx"</span><br><span class="line">export CF_Email="xxxxxx"</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>下载，安装，申请证书，注意里面一个是二级域名一个是泛域名，两个缺一不可（<code>-k ec-256</code> 可选，ecc 证书兼容性稍差无法兼容安卓 2.2 等超旧版本，但速度快于普通 rsa 证书）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">curl  https://get.acme.sh | sh</span><br><span class="line">source ~/.bashrc</span><br><span class="line">acme.sh --issue --dns dns_cf -d example.com -d *.example.com -k ec-256</span><br></pre></td></tr></tbody></table></figure>

<p>例如我的域名是 baobaobao.xxx，那么就应该这么写</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">acme.sh --issue --dns dns_cf -d baobaobao.xxx -d *.baobaobao.xxx -k ec-256</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>安装证书，<code>keypath</code> 和 <code>fullchainpath</code> 后面的路径和名字自定，建议放到同一目录，可以放到 <code>/home</code> 或者 <code>/etc</code>，后续还要再给读写权限。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">acme.sh --installcert -d baobaobao.xxx --keypath /home/ssl/baobaobao.key --fullchainpath /home/ssl/baobaobao.crt --reloadcmd "nginx -s reload" --ecc</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>生成 <code>dhparam.pem</code>文件，生成目录跟上面两个文件的目录保持一致（仅 nginx 使用，caddy 跳过该步骤）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">openssl dhparam -out /home/ssl/dhparam.pem 2048</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>填入 nginx 中即可。</p>
</li>
<li><p>可通过 <a href="https://www.ssllabs.com/ssltest/index.html">Qualys SSL Labs’s SSL Server Test</a> 或者 <a href="https://www.httpsecurityreport.com/">HTTP Security Report</a> 进行测试。拿到 a 即可，如果想要拿到 a+，需要开启 hsts。</p>
</li>
<li><p>acme 的其他命令</p>
<p>查看注册了哪些域名：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">acme.sh list</span><br></pre></td></tr></tbody></table></figure>

<p>移除域名：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">acme.sh remove xxx [--ecc]</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h4 id="关于效果测试"><a href="#关于效果测试" class="headerlink" title="关于效果测试"></a>关于效果测试</h4><p>https 因为有 hsts 的特性，一旦输入过 https 的网址，浏览器就会自动对相同网址的 host 部分进行不全，此时 web 服务器协议就算回到 http，在相同浏览器上因为补全为 https 的原因，会打不开。所以建议测试的时候用浏览器的隐身模式，不会记录下 hsts。如果不慎受到 hsts 影响，可以通过<code>chrome://net-internals/#hsts</code> 进行清除。</p>
<p>另外，有时候关掉服务器后页面仍然能加载，是因为缓存的原因，可以通过右键刷新按钮，选择硬性加载来强制刷新缓存。或者一开始就用隐身模式进行调试。</p>
<p>另外，如果 nginx 开不起来，也可能是配置文件有问题，可通过</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></tbody></table></figure>

<p>检测配置文件。</p>
<p>另外也可以在 <code>/var/log/nginx</code> 中检视日志文件。（不过 nginx 的日志做转发的时候很不直观）</p>
<h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><p>在宝塔面板上添加删除 mysql 用户很方便，gui 一把梭，不再赘述。只谈谈 lnmp 一键包的（当然宝塔也适用使用以下步骤）。另外宝塔编辑表也可以用自带的 phpadmin 而不需要在自己的电脑上安装 navicat，或者，在相应数据库内设置访问权限为所有人，才能用 navicat  登陆。</p>
<h4 id="登录-mysql"><a href="#登录-mysql" class="headerlink" title="登录 mysql"></a>登录 mysql</h4><p>输入<code>mysql -p</code>，再输入你 lnmp 安装时创建的密码即可登录。</p>
<p>不过推荐使用 mysql 自动补全工具来登录</p>
<p>先安装</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">pip install tldr mycli</span><br></pre></td></tr></tbody></table></figure>

<p>然后敲入 mycli 输入密码即可登录。</p>
<h4 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h4><p>因为一直使用 root 用户去创建其他服务所用的数据库有一定危险性，所以先去创建一个用户。先查看默认有什么数据库<code>show databases;</code>，应该会有名为<code>mysql</code>的默认数据库。进入<code>use mysql;</code>，查看目前的账户情况：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">select Host,user,Password,plugin from user;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/DDCb0Xz.png"></p>
<p>host 是允许登录的主机，user 代表用户，password 表示密码（这里显示的密码是通过加密的），plugin 只要是空的就不用管。</p>
<p>然后我们新建一个名为 zbttl 的用户，xxxx处填入密码：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">CREATE USER 'zbttl'@'%' IDENTIFIED BY 'xxxx';</span><br></pre></td></tr></tbody></table></figure>

<p>给予权限</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO 'zbttl'@'%';</span><br></pre></td></tr></tbody></table></figure>

<p><code>ALL PRIVILEGES</code>表示操作（select，update）这些，on 后面表示数据库，这里也可以自己自定义，多个操作用逗号隔开，我选择全给。</p>
<p>然后再次查看目前的帐号情况，发现用户已经被添加进去了：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/cPWaH8W.png"></p>
<p>然后我们需要刷新一下权限表：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></tbody></table></figure>

<h4 id="允许外网-ip-通过其他工具登录"><a href="#允许外网-ip-通过其他工具登录" class="headerlink" title="允许外网 ip 通过其他工具登录"></a>允许外网 ip 通过其他工具登录</h4><p>想要从主机上用 navicat 登录 mysql，发现无法登陆？</p>
<p>刚刚建立的用户，localhost 一栏写的是 %，代表可以从任何地址进行访问。不过因为防火墙没有开，所以仍然不能进行访问，需要配置一下路由表：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">iptables -I INPUT -p tcp --dport 3306 -j ACCEPT</span><br></pre></td></tr></tbody></table></figure>

<p>而 root 用户因为没有配置 % 这个地址，所以只能从 ssh 内进行访问。如果也想用 navicat 访问，需要添加 % 这一行，在上一步给予权限的位置加上这一步（xxxx 同样是密码）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'xxxx' WITH GRANT OPTION;</span><br></pre></td></tr></tbody></table></figure>

<p>即可。</p>
<h2 id="各功能安装"><a href="#各功能安装" class="headerlink" title="各功能安装"></a>各功能安装</h2><h3 id="docker-类"><a href="#docker-类" class="headerlink" title="docker 类"></a>docker 类</h3><h4 id="百度一键签到"><a href="#百度一键签到" class="headerlink" title="百度一键签到"></a>百度一键签到</h4><p>参考文章：<a href="https://github.com/MoeNetwork/Tieba-Cloud-Sign">MoeNetwork/Tieba-Cloud-Sign</a></p>
<ol>
<li><p>下载 compose 文件</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">mkdir -p /root/docker-compose/tieba/&amp;&amp;cd /root/docker-compose/tieba/</span><br><span class="line">wget https://raw.githubusercontent.com/zsnmwy/Tieba-Cloud-Sign/master/docker-compose.yml</span><br></pre></td></tr></tbody></table></figure>
<p> 然后打开文件，修改 <code>CSRF:"true"</code>为 false<br>“80:8080”中的 80 最好修改成其他数字，比如 90，避免和 nginx 的 http 端口冲突</p>
<p> web 里的 <code>DB_USER</code> 和 <code>DB_NAME</code> 可以改，和底下 db 的 <code>MYSQL_DATABASE</code> 和 <code>MYSQL_ROOT_PASSWORD</code> 对的上就可以。</p>
</li>
<li><p>部署<code>docker-compose up -d</code></p>
</li>
<li><p>在浏览器输入 <code>ip:端口号</code>，比如我 vps ip 是 45.27.100.100 那么这里就是 <code>45.27.100.100:90</code></p>
</li>
<li><p>根据提示前往安装，不可写主机处选否，自动获得数据库配置信息填是，然后填入名字，邮箱和密码（登录的时候要用），确定后即可进入登录界面。</p>
</li>
<li><p>获取 BDUSS（直接帐号登录的功能基本是废的），方法页面里有说明，结束。</p>
</li>
<li><p>记得添加自启。可以通过 docker update 命令。也可以通过在 compose 文件中模块下写入</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">restart: always</span><br></pre></td></tr></tbody></table></figure>

<p> 一共就两个模块，都写进去就好了。</p>
</li>
<li><p><strong>（20.11.12 更新）</strong> 用 tx 轻量服务器搭，出现 2002 错误。有一些解决方法有待参考：</p>
<ul>
<li><p>安装时 <code>dpkg-reconfigure locales</code> 改回 <code>en_US.UTF-8</code></p>
</li>
<li><p>运行 <code>docker-compose down</code> 后删除 <code>/opt/tieba</code> 再重装。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">rm -r /opt/tieba</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>官方教程中提到可以改 <code>mysql_autoload.php</code>，这个文件在 <code>tieba_web_1</code> 容器中的 <code>/srv/www/lib/</code> 文件夹内。我改了没用，因为问题也不是在那个地方。</p>
<h4 id="rsshub"><a href="#rsshub" class="headerlink" title="rsshub"></a>rsshub</h4></li>
</ul>
</li>
</ol>
<p>参考文章：</p>
<ul>
<li><a href="https://docs.rsshub.app/install/#tian-jia-pei-zhi">docker-compose 部署</a></li>
</ul>
<p>下载 <a href="https://github.com/DIYgod/RSSHub/blob/master/docker-compose.yml">docker-compose.yml</a></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">mkdir -p /root/docker-compose/rsshub&amp;&amp;<span class="built_in">cd</span> /root/docker-compose/rsshub</span><br><span class="line">wget https://raw.githubusercontent.com/DIYgod/RSSHub/master/docker-compose.yml</span><br></pre></td></tr></tbody></table></figure>

<p>创建 volume 持久化 Redis 缓存</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker volume create redis-data</span><br></pre></td></tr></tbody></table></figure>

<p>启动</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></tbody></table></figure>

<p>然后就能通过 url <code>ip:1200/参数</code> 进行订阅了。参数看这里：<a href="https://docs.rsshub.app/social-media.html">社交媒体</a></p>
<p>当然你也可以直接白嫖默认的域名参数来用，我 pixiv 就是这么订阅的，否则要翻墙（</p>
<h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ol>
<li><p>如果遭遇 rss 订阅错误，可以将完整 url 放入浏览器中，会弹出相应的错误提示。</p>
</li>
<li><p>如果墙内 vps 要订阅支持 pixiv，需要在 compose 文件 <code>service.rsshub</code> 的 <code>enviroment</code> 下指明自己的 pixiv 帐号密码（即使只是为了订阅日榜周榜）：</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">PIXIV_USERNAME:</span> <span class="string">'xxx'</span></span><br><span class="line"><span class="attr">PIXIV_PASSWORD:</span> <span class="string">'xxx'</span></span><br></pre></td></tr></tbody></table></figure>

<p>同时还要写下代理配置，同样是写在<code>service.rsshub</code> 的 <code>enviroment</code> 下：</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">PROXY_PROTOCOL:</span> <span class="string">'socks'</span></span><br><span class="line"><span class="attr">PROXY_HOST:</span> <span class="string">'127.0.0.1'</span></span><br><span class="line"><span class="attr">PROXY_PORT:</span> <span class="number">3080</span></span><br></pre></td></tr></tbody></table></figure>

<p>不过，因为 docker 实际上和本机的端口是不互通的，所以想要连上本机的代理，无非两种方法：</p>
<ol>
<li><p>本机代理监听的地址从 localhost（127.0.0.1）改为 0.0.0.0（不推荐，没上密码就可能被人盗用）</p>
</li>
<li><p>该 docker 模块使用 host 模式启动（<a href="https://stackoverflow.com/questions/35960452/docker-compose-running-containers-in-nethost">参考文章</a>）。在<code>service.rsshub</code>下写入：</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">network_mode:</span> <span class="string">"host"</span></span><br></pre></td></tr></tbody></table></figure>
</li>
</ol>
</li>
<li><p>不正确的卸载 rsshub / 贴吧一键签到可能会遭遇 <code>network has active endpoints</code> 问题，解决方法参考这篇文章：<a href="https://www.cnblogs.com/Dong-Ge/p/9634351.html">docker 解决network has active endpoints</a></p>
<blockquote>
<p> 使用 <code>docker network disconnect -f {network} {endpoint-name}</code>，其中的 {endpoint-name} 可以使用命令 <code>docker network inspect {network}</code> 获得 </p>
<p>而 network 通过 <code>docker network ls</code> 获得</p>
<p>最后运行 <code>docker-compose up -d</code> 即可</p>
</blockquote>
</li>
</ol>
<h4 id="filemanager（docker）"><a href="#filemanager（docker）" class="headerlink" title="filemanager（docker）"></a>filemanager（docker）</h4><p>参考资料：</p>
<ul>
<li><a href="https://blog.51cto.com/536410/2318111?source=dra">利用docker 搭建File Browser 文件管理系统</a>  </li>
<li><a href="https://github.com/filebrowser/filebrowser/issues/522">BaseUrl not longer honored when in url of static assets</a></li>
</ul>
<p>下载 filebrowser 镜像</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">docker pull filebrowser/filebrowser</span><br></pre></td></tr></tbody></table></figure>
<p>选好 filebrowser 配置文件夹和主文件夹（即 filebrowser 的生效文件夹）所指向的目录，注意配置文件夹不能是主文件夹的子目录，否则会有危险。配置文件夹我选择的是<code>/home/filebrowser</code>，主文件夹便是 zbttl 的默认目录 <code>/home/zbttl</code>，如果是通过 root 权限运行那么无所谓，不是的话需要注意配置文件夹权限。</p>
<p>之后在配置文件夹里面新建一个 <code>filebrowser.db</code> 文件，否则程序运行时就会自动创建同名的<strong>文件夹</strong>导致错误（我也不知道为什么会那么沙雕，反正是作者承认的 bug，当然也可以选择在下一步不映射这个文件，但如果将来要迁移 filebrowser 的话没有这个文件夹就需要重新配置）。还可以手工建一个名为 <code>.filebrowser.json</code> 的文件，如果运行时映射了但之前没建的话就会使用默认配置，root 并有单独域名的情况下使用默认配置没有问题，但如果考虑到我们的使用环境（在 zbttl 这个用户下使用），必须要做出修改，或者运行时将参数写在命令中。</p>
<p><code>.filebrowser.json</code> 这个文件的<a href="https://github.com/filebrowser/filebrowser/blob/master/.docker.json">默认配置</a>长这样：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  "port": 80,</span><br><span class="line">  "baseURL": "",</span><br><span class="line">  "address": "",</span><br><span class="line">  "log": "stdout",</span><br><span class="line">  "database": "/database.db",</span><br><span class="line">  "root": "/srv"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>我们需要修改 port（非 root 下 1000 以下端口受限，容器内容器外都是），假设我们用 7777 这个端口。另外还有一个 baseurl，这个待会再提。</p>
<p>不修改 baseurl 的话，最后成果长这样：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  "port": 7777,</span><br><span class="line">  "baseURL": "",</span><br><span class="line">  "address": "",</span><br><span class="line">  "log": "stdout",</span><br><span class="line">  "database": "/database.db",</span><br><span class="line">  "root": "/srv"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>然后看一眼教程里面的默认命令</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">docker run -d -v /home/file_browser:/srv -v /home/file_browser/config.json:/etc/config.json -v /home/file_browser/database.db:/etc/database.db -p 100:80 filebrowser/filebrowser</span><br></pre></td></tr></tbody></table></figure>
<p>冒号前是实机目录，冒号后是容器内目录。刚刚说过 config.json  实际上默认自带不需要映射，但我们修改过里面的内容（比如接下来我们要修改的 baseurl）又不想在命令里面写明的话可以做映射。选择映射到实机 100 端口，避开 http 的 80 端口。-d 的意思是，后台运行</p>
<p>根据我们的配置，做出修改：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">docker run -u 1000 --name filebrowser -v /home/zbttl:/srv -v /home/filebrowser/filebrowser.db:/database.db -v /home/filebrowser/.filebrowser.json:/.filebrowser.json -p 7777:7777 filebrowser/filebrowser</span><br></pre></td></tr></tbody></table></figure>

<p>-u 的意思是运行用户的 uid，可以通过 id 命令查询 <code>id zbttl</code>。不使用后台，看看报不报错。</p>
<p>然后用浏览器 ip:7777 即可打开。通过浏览器访问，默认账号密码：admin</p>
<p>加上后台和自启（也可以选择强行停止然后删除原容器后加上 -d 和自启参数再次运行）：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">docker ps -a</span><br><span class="line">#复制容器名</span><br><span class="line">docker container update --restart=always 容器名字</span><br><span class="line">docker start 容器名字</span><br></pre></td></tr></tbody></table></figure>


<p>另外如果想映射到虚拟主机目录下（比如域名使用 xxx/filemanager:777 时有效)，需要加入 –baseurl 参数，可以写在刚刚的配置文件中，这里以写在命令中为例。务必加在镜像名后，如：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">docker run -d -u 1000 -v /home/zbttl:/srv -v /home/filebrowser/filebrowser.db:/database.db -v /home/filebrowser/.filebrowser.json:/.filebrowser.json -p 7777:7777 filebrowser/filebrowser --baseurl /filemanager/</span><br></pre></td></tr></tbody></table></figure>
<p>主要用于你想用手上现有的域名 + 虚拟主机而不是另开新的三级域名来搭建 filemanager 时使用（后面讲 nginx 时我会再提到）</p>
<h4 id="aria2-docker"><a href="#aria2-docker" class="headerlink" title="aria2 docker"></a>aria2 docker</h4><p>有条件先去看离线下载类的 aria2，配置文件和破解线程限制的指南在那里。</p>
<p><strong>(21.3.8 更新)</strong> 线程破解啥的，P3TERX 大佬喂到嘴里了。。。详情见：<a href="https://github.com/P3TERX/Aria2-Pro-Core">P3TERX/Aria2-Pro-Core: Aria2 static binaries for GNU/Linux with some powerful feature patches. | 破解无限线程 防掉线程优化 静态编译 二进制文件 增强版</a>。</p>
<p>现在作者推荐使用新版 dockerr 配合直接使用网桥模式，将 docker 端口直接透出来；bt 端口默认重新配置过，不再需要另外指定以防和 transmission 产生冲突；我思索了一下，和 transmission 相比，aria2 没法管理已经下载好的文件，所以和 vps 内 filebrowser 配合使用的 transmission 才需要正确设置权限，aria2 现在只用于直接下载然后和 rclone 配合上传文件到 onedrive，不接触 vps 内文件，就懒得老老实实配置用户给它了。</p>
<p>所以我现在的使用方法是，不做修改直接使用作者给的带有 rclone 功能的命令。将之前配置好的 rclone 文件（配置方法参考<a href="#rclone">网盘类 rclone</a>，配置完后在 <code>/root/.config/rclone/rclone.conf</code>）和证书（使用 acme.sh，参考<a href="#%E5%85%B3%E4%BA%8E%E8%AF%81%E4%B9%A6%E7%9A%84%E9%85%8D%E7%BD%AE">关于证书的配置</a>，使用 <code>acme.sh install</code> 安装到相应目录）放 / 安装到 <code>/root/aria-config</code> 中；修改 <code>aria2.conf</code> 的证书配置；修改 <code>script.conf</code> 的 rclone 网盘名和上传目的地文件夹名（和 rclone 原命令不同，目的地文件夹中有中文也不要加单引号）；配置好 <a href="#%E9%85%8D%E7%BD%AE%E5%89%8D%E7%AB%AF">aria2NG 前端</a>（因为我想配合 cf 使用，且我现在使用的 caddy 能自动帮我加证书，但 aria2NG 这边用 caddy 反代开启 https 后要求 aria2 本身也开启 ssl，开启 aria2NG ssl 后 aria2NG 协议下拉菜单 http 选项是禁用不能选的，所以上文我给 aria2 也上了 ssl），运行官方命令：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name aria2-pro \</span><br><span class="line">--restart unless-stopped \</span><br><span class="line">--log-opt max-size=1m \</span><br><span class="line">--network host \</span><br><span class="line">-e PUID=$UID \</span><br><span class="line">-e PGID=$GID \</span><br><span class="line">-e RPC_SECRET=[登录密码] \</span><br><span class="line">-e RPC_PORT=6800 \</span><br><span class="line">-e LISTEN_PORT=6888 \</span><br><span class="line">-v $PWD/aria2-config:/config \</span><br><span class="line">-v $PWD/aria2-downloads:/downloads \</span><br><span class="line">-e SPECIAL_MODE=rclone \</span><br><span class="line">p3terx/aria2-pro</span><br></pre></td></tr></tbody></table></figure>

<p>即可。</p>
<p>参考文章：<a href="https://p3terx.com/archives/docker-aria2-pro.html">Aria2 Pro - 更好用的 Aria2 Docker 容器镜像</a></p>
<hr>
<p>官方命令：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name aria2-pro \</span><br><span class="line">    --restart unless-stopped \</span><br><span class="line">    --log-opt max-size=1m \</span><br><span class="line">    -e PUID=$UID \</span><br><span class="line">    -e PGID=$GID \</span><br><span class="line">    -e RPC_SECRET=&lt;TOKEN&gt; \</span><br><span class="line">    -p 6800:6800 \</span><br><span class="line">    -p 6888:6888 \</span><br><span class="line">    -p 6888:6888/udp \</span><br><span class="line">    -v ~/aria2-config:/config \</span><br><span class="line">    -v ~/downloads:/downloads \</span><br><span class="line">    p3terx/aria2-pro</span><br></pre></td></tr></tbody></table></figure>

<p>和 aria2 一键脚本相比，添加了 PUID 和 PGID 两个参数，方便以指定的身份下载文件，不过实现的方法和通用方法 -u 参数（参见 filemanager docker）不同，用了 -e 参数（实测，-e 和 -u 不可混用，需要配合具体容器使用）。两个 -v 对应的目录一个是配置目录一个是下载，这里还可以开一个 -v，链接破解过线程的 aria2 二进制文件，注意该文件需要提前加够 755 权限。另外，这里的 TOKEN 是密码，也需要进行定义。</p>
<p>根据非 docker aria2 的默认设置，下载文件放置于 <code>/home/zbttl/download/aria2</code>，程序放置于 <code>/usr/local/bin</code>，docker 内 aria2 同样放置于 <code>/usr/local/bin/</code>，配置文件 <code>aria2.conf</code> 由于和原来有一些出入（不过大概只有目标目录那里需要验证，默认的 <code>/root/Downloads</code> 不知道能不能改），所以首次使用不建议修改映射，但可以部署完后进行修改保存，下次放入 <code>/root/aria2-config/</code> 继续用。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name aria2-pro \</span><br><span class="line">    --restart unless-stopped \</span><br><span class="line">    --log-opt max-size=1m \</span><br><span class="line">    -e PUID=1000 \</span><br><span class="line">    -e PGID=$GID \</span><br><span class="line">    -e RPC_SECRET=[登录密码] \</span><br><span class="line">    -p 6800:6800 \</span><br><span class="line">    -p 6888:6888 \</span><br><span class="line">    -p 6888:6888/udp \</span><br><span class="line">    -v ~/aria2-config:/config \</span><br><span class="line">    -v /home/zbttl/download/aria2:/downloads \</span><br><span class="line">    -v /usr/local/bin/aria2c:/usr/local/bin/aria2c \</span><br><span class="line">    p3terx/aria2-pro</span><br></pre></td></tr></tbody></table></figure>

<p>另外，这里有一个不算啥问题的问题。。。如果和 aria2 一键脚本混用且 aria2 一键脚本已安装并启动，同时打开该容器（在端口经过修改没有冲突程序打开成功的情况下），此时停止 aria2 脚本安装的 aria2 程序，然后再次运行启动脚本，会提示该脚本启动的 aria2 仍在开启。不过也不会有人无聊到混用的吧。</p>
<h4 id="amule（docker）"><a href="#amule（docker）" class="headerlink" title="amule（docker）"></a>amule（docker）</h4><p>参考文章：<a href="https://hub.docker.com/r/tchabaud/amule">tchabaud/amule</a></p>
<p>不是官方的，不能保证更新，不过官方都几百年不更新了，无所谓了。</p>
<p>官方示例：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">docker run -p 4712:4712 -p 4662:4662 -p 4672:4672/udp \</span><br><span class="line">    -e PUID=[wanted_uid] -e PGID=[wanted_gid] \</span><br><span class="line">    -e GUI_PWD=[wanted_password_for_gui] \</span><br><span class="line">    -v ./amule/conf:/home/amule/.aMule -v ./amule/incoming:/incoming -v ./amule/tmp:/temp tchabaud/amule</span><br></pre></td></tr></tbody></table></figure>

<p>其实经过前几个 docker 的搭建这些参数我都差不多熟悉了。。。不过这里有个小坑。 -v 这里有三个目录，按理来说，我们需要修改的 conf 参数在 docker 命令中已经包括了，所以实际上 -v 只需要映射 <code>/incoming</code> 目录就好了。然而我这么做了以后，发现下载速度比原版 amule 慢了不少。。。试了两三次，只有最后一次，放置了两三个小时后，amule 的 kad 正确的连接了，速度才正常了起来，而当正确的映射三个目录的时候，运行正常。所以看来还是得乖乖映射两个没啥用的目录。。。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">mkdir /home/zbttl/download/amule&amp;&amp;cd /home/zbttl/download/amule</span><br><span class="line">mkdir ./conf</span><br><span class="line">mkdir ./tmp</span><br><span class="line">mkdir ./incoming</span><br><span class="line">chown -R zbttl ./conf ./tmp ./incoming</span><br><span class="line">docker run -d -p 4711:4711 -p 4662:4662 -p 4672:4672/udp     -e PUID=1000 -e PGID=1000     -e WEBUI_PWD=[登录密码]    -v /home/zbttl/download/amule/conf:/home/amule/.aMule -v /home/zbttl/download/amule/incoming:/incoming -v /home/zbttl/download/amule/tmp:/temp tchabaud/amule</span><br></pre></td></tr></tbody></table></figure>

<p>当然，不要和通常版 amule 一起使用，即使端口错开，后开那个也只能得到 low id。</p>
<h4 id="mldonkey（docker）"><a href="#mldonkey（docker）" class="headerlink" title="mldonkey（docker）"></a>mldonkey（docker）</h4><p>参考文章：<a href="https://github.com/logicwar">logicwar</a>/<strong><a href="https://github.com/logicwar/mldonkey">mldonkey</a></strong></p>
<p>mldonkey 普通版的配置真是一顶一的麻烦。。。而 docker 版版本旧一些（只到 3.1.5），不过作者加了一些源，而且把限速解开了无需配置，推荐使用。</p>
<p>官方示例：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">docker create --name=mldonkey \</span><br><span class="line">              -v &lt;path for config files&gt;:/var/lib/mldonkey:rw \</span><br><span class="line">              -v &lt;path for temporary files&gt;:/mnt/mldonkey_tmp:rw \</span><br><span class="line">              -v &lt;path for completed downloaded files&gt;:/mnt/mldonkey_completed:rw \</span><br><span class="line">              -e PGID=&lt;gid&gt; \</span><br><span class="line">              -e PUID=&lt;uid&gt; \</span><br><span class="line">              -e TZ=&lt;timezone&gt; \</span><br><span class="line">              -p 4000:4000 \</span><br><span class="line">              -p 4001:4001 \</span><br><span class="line">              -p 4080:4080 \</span><br><span class="line">              -p 20562:20562 \</span><br><span class="line">              -p 20566:20566/udp \</span><br><span class="line">              -p 16965:16965 \</span><br><span class="line">              -p 16965:16965/udp \</span><br><span class="line">              -p 6209:6209 \</span><br><span class="line">              -p 6209:6209/udp \</span><br><span class="line">              -p 6881:6881 \</span><br><span class="line">              -p 6882:6882 \</span><br><span class="line">              -p 3617:3617/udp \</span><br><span class="line">              -p 4444:4444 \</span><br><span class="line">              -p 4444:4444/udp \</span><br><span class="line">              logicwar/mldonkey</span><br></pre></td></tr></tbody></table></figure>

<p>这次去掉不必要的映射就没啥副作用了。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">docker run --name=mldonkey \</span><br><span class="line">              -v /home/zbttl/download/mldonkey:/mnt/mldonkey_completed:rw \</span><br><span class="line">              -e PGID=1000 \</span><br><span class="line">              -e PUID=1000 \</span><br><span class="line">              -p 4000:4000 \</span><br><span class="line">              -p 4001:4001 \</span><br><span class="line">              -p 4080:4080 \</span><br><span class="line">              -p 20562:20562 \</span><br><span class="line">              -p 20566:20566/udp \</span><br><span class="line">              -p 16965:16965 \</span><br><span class="line">              -p 16965:16965/udp \</span><br><span class="line">              -p 6209:6209 \</span><br><span class="line">              -p 6209:6209/udp \</span><br><span class="line">              -p 6881:6881 \</span><br><span class="line">              -p 6882:6882 \</span><br><span class="line">              -p 3617:3617/udp \</span><br><span class="line">              -p 4444:4444 \</span><br><span class="line">              -p 4444:4444/udp \</span><br><span class="line">              logicwar/mldonkey</span><br></pre></td></tr></tbody></table></figure>

<h4 id="vscoder"><a href="#vscoder" class="headerlink" title="vscoder"></a>vscoder</h4><p>参考文章：<a href="https://hub.docker.com/r/linuxserver/code-server">linuxserver/code-server</a></p>
<p>新建了一个 coder 用户，用户文件夹为 <code>/home/coder</code>，<code>id coder</code> 查询结果喂 1003。</p>
<p>docker-compose.yml：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">version: "2.1"</span><br><span class="line">services:</span><br><span class="line">  code-server:</span><br><span class="line">    image: linuxserver/code-server</span><br><span class="line">    container_name: code-server</span><br><span class="line">    environment:</span><br><span class="line">      - PUID=1003</span><br><span class="line">      - PGID=1003</span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">      - PASSWORD=[登录密码] #optional</span><br><span class="line">      - SUDO_PASSWORD=[linux用户密码] #optional</span><br><span class="line">    volumes:</span><br><span class="line">      - /home/coder/:/config</span><br><span class="line">    ports:</span><br><span class="line">      - 8443:8443</span><br><span class="line">    restart: unless-stopped</span><br></pre></td></tr></tbody></table></figure>

<p>另外还有一种 <a href="https://github.com/cdr/code-server">cdr/code-server</a> 我试了半天都没办法用非 root 用户映射本地目录，算了。</p>
<h3 id="离线下载类"><a href="#离线下载类" class="headerlink" title="离线下载类"></a>离线下载类</h3><h4 id="aria2（19-11-18-更新）"><a href="#aria2（19-11-18-更新）" class="headerlink" title="aria2（19.11.18 更新）"></a>aria2（19.11.18 更新）</h4><p>因为 aria2 有线程限制，所以建议自己下载源码修改以后进行编译。<del>不过编译过后的二进制文件好像会大很多的样子。。。</del></p>
<p><del>如果不需要解除线程限制的话，推荐脚本一步到位（当然也可以运行完脚本以后再把编译好的已破解限制的二进制扔进去）：<a href="https://github.com/P3TERX/aria2.sh">Aria2 一键安装管理脚本</a></del>(有权限问题，如果不在乎可以继续用，现在更推荐 docker 版，介绍在 docker 类中。)</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">wget -N https://git.io/aria2.sh &amp;&amp; chmod +x aria2.sh &amp;&amp; bash aria2.sh</span><br></pre></td></tr></tbody></table></figure>

<h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><p>之前：</p>
<ol>
<li><a href="https://blog.csdn.net/daloyanf/article/details/78919749">linux编译安装aria2，远程下载设置</a></li>
<li><a href="https://doubibackup.com/bizht36j-3.html">BT/种子/磁力链接/HTTP/FTP 离线下载工具 —— Aria2 新 手动安装教程</a></li>
<li><del><a href="https://everdream.xyz/2017/08/aria2c-spam/">10240 线程暴力膜改版 Aria2c</a></del></li>
<li>（systemd 相关）<a href="https://my.oschina.net/lemos/blog/839600">Debian 如何搭建使用 aria2c 作为下载工具 原</a></li>
</ol>
<p>编译相关：</p>
<ol>
<li><a href="https://aria2.github.io/manual/en/html/README.html#how-to-build">官方编译指南</a></li>
<li>解决编译时的 deprecated 问题 <a href="https://weair.xyz/build-aria2/">编译安装aria2</a></li>
<li><a href="https://www.v2ex.com/t/446659">为什么自己编译的 aria2 体积很大</a></li>
</ol>
<p>文件修改：</p>
<ol>
<li><a href="https://www.52pojie.cn/thread-762859-1-1.html">Windows <strong>下载工具aria2 1.34.0 解除单服务器线程数限制编译版</strong> </a></li>
<li><a href="https://github.com/myfreeer/aria2-build-msys2">aria2-build-msys2</a>  上一个参考资料的 github 库</li>
<li><a href="https://hguandl.com/post/8f0b723a.html">Aria2 魔改解除线程数限制</a></li>
<li><a href="https://github.com/hguandl/aria2-patch">aria2-patch</a> 上一个参考资料的 github 库</li>
<li><a href="https://www.yooomu.com/archives/22.html">修改源码突破aria2线程限制</a></li>
</ol>
<h5 id="环境和下载"><a href="#环境和下载" class="headerlink" title="环境和下载"></a>环境和下载</h5><ol>
<li><p>环境：虽然我们一开始装了一堆 gcc 编译相关环境了，但毕竟官方给了环境列表，我就一起整理列出来了</p>
 <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">apt install  libssh2-1-dev libc-ares-dev libxml2-dev zlib1g-dev libsqlite3-dev pkg-config   libcppunit-dev autoconf automake autotools-dev autopoint libtool libssl-dev -y</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>到<code>https://github.com/aria2/aria2/releases/</code>找最新的 release，我写这篇文章的时候在 <del>1.34.0</del>1.35.0，所以输入</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">aria2_new_ver="1.35.0"</span><br><span class="line">wget https://github.com/aria2/aria2/releases/download/release-${aria2_new_ver}/aria2-${aria2_new_ver}.tar.bz2</span><br></pre></td></tr></tbody></table></figure>
<p> 当然你也可以吧 tar.bz2 结尾的文件下载到电脑上再做处理。或者，用 git（那就可以跳过第三步了）</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">git clone https://github.com/aria2/aria2.git</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>解压</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">tar jxvf "aria2-${aria2_new_ver}.tar.bz2"</span><br></pre></td></tr></tbody></table></figure>
<p> 上权限</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">tar jxvf "aria2-${aria2_new_ver}.tar.bz2"</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h5 id="编译源文件修改"><a href="#编译源文件修改" class="headerlink" title="编译源文件修改"></a>编译源文件修改</h5><ol>
<li><p>需要修改的是那些以 cc 为后缀的编译源文件，具体是哪几个文件可以去看参考资料 2 里面的 .patch 文件。但因为我们最主要的是修改服务器最大连接数和服务器最小分割尺寸，所以只需要修改其中的 OptionHandlerFactory.cc。</p>
</li>
<li><p>寻找 OptionHandlerFactory.cc 文件，一般在 aria2 的 src 目录里面，可以通过 find 命令来寻找</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">find / -name OptionHandlerFactory.cc</span><br></pre></td></tr></tbody></table></figure>
<p>假设在 aria2 目录下的<code>/src/OptionHandlerFactory.cc</code>内，那么输入</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">vim /root/aria2-${aria2_new_ver}/src/OptionHandlerFactory.cc</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>文件里代码密密麻麻，有用的是类似这样的代码块：</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function">OptionHandler* <span class="title">op</span><span class="params">(<span class="keyword">new</span> NumberOptionHandler(PREF_MAX_CONNECTION_PER_SERVER,</span></span></span><br><span class="line"><span class="function"><span class="params">                                               TEXT_MAX_CONNECTION_PER_SERVER,</span></span></span><br><span class="line"><span class="function"><span class="params">                                               <span class="string">"1"</span>, <span class="number">1</span>, <span class="number">16</span>, <span class="string">'x'</span>))</span></span>;</span><br></pre></td></tr></tbody></table></figure>

<p>其中的跟在 TEXT 后面的 <code>MAX_CONNECTION_PER_SERVER</code> 就是 aria.conf 中的 <code>max-connection-per-server</code>，也就是单服务器最大连接数，没错，就是把小写换大写，横杠换斜杠，前面加 TEXT 而已。。。所以，其他所要修改的参数名可以通过 conf 文件获取，也可以去看参考资料 1、3 里面的 patch 文件，github 已经很贴心的帮我们标了颜色进行标记了，可以按参考资料 1、3 修改过的地方，直接照抄。当然我觉得那两个改的是有点过头，比如参考资料 1 的</p>
<blockquote>
<ul>
<li>默认同时下载数改为 128</li>
<li>默认同服务器连接数改为 64，解除了之前 16 的限制</li>
</ul>
</blockquote>
<p>其实，注意到那 <code>MAX_CONNECTION_PER_SERVER</code> 后面到括号前的那几个参数了吗</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">"1", 1, 16, 'x'</span><br><span class="line">默认值，最小值，最大值，单位</span><br></pre></td></tr></tbody></table></figure>

<p>限制了最小值和最大值的，其实就只有单服务器最大连接数和最小分块大小而已。 w网上最多的，是类似于参考文章 5 那样的修改，其中对默认值的修改，我认为见仁见智，其实最后直接修改配置文件也行。</p>
<p><del>然后输入<code>/TEXT_MAX_CONNECTION_PER_SERVER</code>搜索这个字符串，利用方向键切换到后面的 16 ，按下 i 改成任意整数（这里改成 10240，注意避免整型溢出），像下面这样</del></p>
<ol>
<li><p>解除单服务器连接限制，取消最大 16 的限制，默认连接设为 32 </p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">OptionHandler* op(new NumberOptionHandler(PREF_MAX_CONNECTION_PER_SERVER,</span><br><span class="line">                                               TEXT_MAX_CONNECTION_PER_SERVER,</span><br><span class="line">                                               "1", 1, 16, 'x'));</span><br></pre></td></tr></tbody></table></figure>

<p>修改为</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">OptionHandler* op(new NumberOptionHandler(PREF_MAX_CONNECTION_PER_SERVER,</span><br><span class="line">                                               TEXT_MAX_CONNECTION_PER_SERVER,</span><br><span class="line">                                               "32", 1, -1, 'x'));</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>最小文件分片大小，取消最小 1m 的限制，默认设为 1m</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">PREF_MIN_SPLIT_SIZE, TEXT_MIN_SPLIT_SIZE, "20M", 1_m, 1_g, 'k'));</span><br></pre></td></tr></tbody></table></figure>
<p>修改为</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">PREF_MIN_SPLIT_SIZE, TEXT_MIN_SPLIT_SIZE, "1M", 1_k, 1_g, 'k'));</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>最大分片数，默认设为 48。分片数和前两项也有关，比如在 http 下载环境下（必定是单服务器）如果单服务器连接限制 &lt; 最大分片数，或是剩余文件大小 / 最小文件分片大小 &lt; 最大分片数，就会取其中的最小值做当前分片数。分片做的多速度可能就快（多线程原理），但最后拼接的时候可能消耗的算力就大，连接过多也可能遭到远程服务器的限制。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">new NumberOptionHandler(PREF_SPLIT, TEXT_SPLIT, "5", 1, -1, 's'));</span><br></pre></td></tr></tbody></table></figure>
<p>修改为</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">new NumberOptionHandler(PREF_SPLIT, TEXT_SPLIT, "48", 1, -1, 's'));</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>片段长度，取消最小 1m 的限制，默认不变。和最小文件分片大小的区别是，片段长度适用于 http 下载，将媒体文件进行分片，下好的分片部分即可进行播放。这是完成度上的参数而不是下载线程上的参数，所以该参数优先级也会小于最小文件分段长度。一般来说，这个参数比最小文件分段长度就行了。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">PREF_PIECE_LENGTH, TEXT_PIECE_LENGTH, "1M", 1_m, 1_g));</span><br></pre></td></tr></tbody></table></figure>
<p>修改为</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">PREF_PIECE_LENGTH, TEXT_PIECE_LENGTH, "1M", 1_k, 1_g));</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>（可选）连接超时时间，缩短为 30s</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">PREF_CONNECT_TIMEOUT, TEXT_CONNECT_TIMEOUT, "60", 1, 600));</span><br></pre></td></tr></tbody></table></figure>
<p>修改为</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">PREF_CONNECT_TIMEOUT, TEXT_CONNECT_TIMEOUT, "30", 1, 600));</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>（可选）连接重试次数，增加到 2 次。应该能看出来，5 和 6 是配合使用的，效果就是缩短超时，快速重试</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">new NumberOptionHandler(PREF_RETRY_WAIT, TEXT_RETRY_WAIT, "0", 0, 600));</span><br></pre></td></tr></tbody></table></figure>
<p>修改为</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">new NumberOptionHandler(PREF_RETRY_WAIT, TEXT_RETRY_WAIT, "2", 0, 600));</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<p>然后按 ESC，输入 <code>:wq</code> 保存</p>
</li>
</ol>
<h5 id="编译和安装"><a href="#编译和安装" class="headerlink" title="编译和安装"></a>编译和安装</h5><ol>
<li><p>编译（512m 机子需要开虚拟内存了）</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cd&amp;&amp;cd aria2-${aria2_new_ver}</span><br><span class="line">autoreconf -i</span><br></pre></td></tr></tbody></table></figure>

<p> 这里可能会遇到两个坑：</p>
<ol>
<li><p>运行 <code>autoreconf -i</code> 后提示 <code>./ltmain.sh no found</code>。输入 <code>libtoolize</code> 解决。</p>
</li>
<li><p>提示 </p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">configure.ac:731: warning: The 'AM_PROG_MKDIR_P' macro is deprecated, and its use is discouraged.</span><br></pre></td></tr></tbody></table></figure>

<p> 找到 <code>configure.ac</code> 文件的 <code>AM_GNU_GETTEXT_VERSION([0.18])</code> 并修改为 <code>AM_GNU_GETTEXT_VERSION([0.19])</code>，重新执行 </p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">autoreconf -i --force</span><br></pre></td></tr></tbody></table></figure>

<p>然后</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></tbody></table></figure>

<p>当然这么编译出来的二进制文件只有本机能用，开启静态编译后就可以在 amd64 机子上通用了。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">./configure ARIA2_STATIC=yes</span><br></pre></td></tr></tbody></table></figure>

<p>另外，默认不加参数的情况下用了 libxml2 这个库，这个库有个毛病，静态编译出来的二进制体积不小，通过 without 禁止调用该库系统就会自动换用  libexpat  这个库，有效降低体积。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">./configure ARIA2_STATIC=yes --without-libxml2</span><br></pre></td></tr></tbody></table></figure>

<p>最后</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></tbody></table></figure>

<p>耐心等待。</p>
</li>
</ol>
</li>
<li><p>安装</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cd src                 #编译好的aria2在这里</span><br><span class="line">cp aria2c /usr/local/bin</span><br></pre></td></tr></tbody></table></figure>

<p> 另外说一句，这里使用<code>make install</code>也可以，区别在于 make install 会把使用文档也一起拷过去，另外用 make unistall 也就可以快速卸载（不过也就只是删两个文件而已）。此时你也可以将编译好的 aria2c 文件留档保存，开新的 vps 的时候拷过去就是了。</p>
<p> 如果是使用一键脚本安装的想用编译好的无限制的二进制替换原来的 aria2c，需要先找到原来的 aria2c 放哪了 <code>which aria2c</code></p>
<p> 文章开头的这个脚本会放在 <code>/usr/bin</code> 里面，就将第二条指令改为</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cp aria2c /usr/bin</span><br></pre></td></tr></tbody></table></figure>

<p> 另外，编译好的文件大小相当感人（1.34.0 77m，1.35.0 100m，静态 1.35.0 145m），是因为里面带了无用的 symbol</p>
<blockquote>
<p>  默认是动态链接生成的可执行文件，同时也包含了许多调试信息，可执行文件比较大</p>
</blockquote>
<p> 可以通过指令去除</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">strip -s aria2c</span><br></pre></td></tr></tbody></table></figure>

<p> 最后大小测量出来是 2m 左右。不过如果是静态编译的话，就会达到 37m，解决方法就是上面说的换库，更换完以后大小约为 9.77m，不过官方静态编译出来的只有 7.99m，通过 <code>aria2c -v</code> 命令进行比对，官方使用的库中 sqlite3 和 c-ares 的版本较新（但 openssl 和 libssh2 的版本较旧），通过 sid 源更新了版本再次编译，emmm，缩小了到 9.55m，还是没有官方小。然后我尝试过降级，把库降级到官方静态版编译时用的版本</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"># Libraries: zlib/1.2.11 expat/2.2.6 sqlite3/3.30.1 OpenSSL/1.1.1d c-ares/1.15.0 libssh2/1.8.0</span><br><span class="line">Libraries: zlib/1.2.11 expat/2.2.6 sqlite3/3.30.0 OpenSSL/1.0.2t c-ares/1.15.0 libssh2/1.7.0</span><br><span class="line"># 上面那个是我编译出的 aria2 使用的库</span><br></pre></td></tr></tbody></table></figure>

<p> 结果发现坑巨大。。。apt 本身不收录历史版本，所以只得用手动编译的方法。一共编译三个东西：</p>
<ul>
<li><p><a href="https://www.howtoforge.com/tutorial/how-to-install-openssl-from-source-on-linux/">openssh</a></p>
</li>
<li><p><a href="https://blog.csdn.net/jinzhu1911/article/details/81329240">sqlite3</a></p>
</li>
<li><p><a href="http://www.linuxfromscratch.org/blfs/view/svn/general/libssh2.html">libssh2</a></p>
<p>前两个表现形式是二进制文件，最后一个是库。库最好装，二进制文件的话麻烦的多，参考第一篇文章，但需要做出两个改动：</p>
</li>
<li><p>debian 的环境变量改那个文件没有用，需要写到 <code>~/.bashrc</code> 才行</p>
</li>
<li><p>需要手动删除或 apt remove 或者一次性备份 <code>/usr/bin</code> 的同名二进制，自己安装的二进制才能被识别为系统默认。</p>
<p>然而。。。最后发现也没有用，编译时只认 apt 装的，手动装的不认。遂放弃。</p>
</li>
</ul>
</li>
</ol>
<h5 id="下载配置建立"><a href="#下载配置建立" class="headerlink" title="下载配置建立"></a>下载配置建立</h5><ol>
<li><p>接下来需要创建两个相关文件，分别是 aria2.conf（配置文件），aria2.session（下载任务暂存）</p>
<ol>
<li><p><code>aria2.conf</code></p>
<p> 主要需要修改的地方是文件保存路径，进度相关路径，rpc 端口和令牌；</p>
<p> 另外还建议修改以下内容（下面已经基本修改好了）</p>
<ul>
<li>aria2 配置的 <code>split</code> 和 <code>max-connection-per-server</code> 最好设置成相同的值，这样能够最大化利用每个线程来下载;</li>
<li>把 <code>max-tries</code> 设为 0，<code>retry-wait</code> 设为 5（大于零整数，不要太小），这样当线程太多而被服务器返回 50X 时能自动重连，保持总线程数不下降;</li>
<li><code>max-file-not-found</code> 设为 0 （此项默认就是 0），无限等待服务器发送数据直到完成下载。</li>
</ul>
</li>
</ol>
<ul>
<li><p>（如果要和 transmission 混用下载 bt 的话，我个人觉得没有必要，bt 全部交给 tm 就好）<code>listen-port</code> 改成其他数字，51413 和 tm 有冲突。 </p>
<ul>
<li><p>某些老古董（比如 tx 云）还在使用 ext3，那么就需要修改 <code>file-allocation</code>，除了 <code>falloc</code> 以外都可以。</p>
<p>还有一个要手工添加的 bt-tracker，需要在最末尾添加<code>bt-tracker=</code>,等号后面跟上 tracker 网址。tracker 网址可以从<a href="https://github.com/ngosang/trackerslist">这里</a>找，然后复制到有正则功能的编辑器里面（比如 notepad++，注意 vscode 不行），将<code>(?&lt;=\r\n)\r\n</code>替换为空，将<code>\r\n</code>替换为逗号，即可。</p>
<p>例子：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">    ## '#'开头为注释内容, 选项都有相应的注释说明, 根据需要修改 ##</span><br><span class="line">    ## 被注释的选项填写的是默认值, 建议在需要修改时再取消注释  ##</span><br><span class="line">    </span><br><span class="line">    ## 文件保存相关 ##</span><br><span class="line">    </span><br><span class="line">    # 文件的保存路径(可使用绝对路径或相对路径), 默认: 当前启动位置</span><br><span class="line">    dir=/home/zbttl/download/aria2</span><br><span class="line">    # 启用磁盘缓存, 0为禁用缓存, 需1.16以上版本, 默认:16M</span><br><span class="line">    #disk-cache=32M</span><br><span class="line">    # 文件预分配方式, 能有效降低磁盘碎片, 默认:prealloc</span><br><span class="line">    # 预分配所需时间: none &lt; falloc ? trunc &lt; prealloc</span><br><span class="line">    # falloc和trunc则需要文件系统和内核支持</span><br><span class="line">    # NTFS建议使用falloc, EXT3/4建议trunc, MAC 下需要注释此项</span><br><span class="line">    # file-allocation=none</span><br><span class="line">    # 断点续传</span><br><span class="line">    continue=true</span><br><span class="line">    </span><br><span class="line">    ## 下载连接相关 ##</span><br><span class="line">    </span><br><span class="line">    # 最大同时下载任务数, 运行时可修改, 默认:5</span><br><span class="line">    max-concurrent-downloads=10</span><br><span class="line">    # 同一服务器连接数, 添加时可指定, 默认:1</span><br><span class="line">    max-connection-per-server=32</span><br><span class="line">    # 最小文件分片大小, 添加时可指定, 取值范围1M -1024M, 默认:20M</span><br><span class="line">    # 假定size=10M, 文件为20MiB 则使用两个来源下载; 文件为15MiB 则使用一个来源下载</span><br><span class="line">    min-split-size=1M</span><br><span class="line">    # 单个任务最大线程数, 添加时可指定, 默认:5</span><br><span class="line">    split=32</span><br><span class="line">    # 整体下载速度限制, 运行时可修改, 默认:0</span><br><span class="line">    #max-overall-download-limit=0</span><br><span class="line">    # 单个任务下载速度限制, 默认:0</span><br><span class="line">    #max-download-limit=0</span><br><span class="line">    # 整体上传速度限制, 运行时可修改, 默认:0</span><br><span class="line">    max-overall-upload-limit=1M</span><br><span class="line">    # 单个任务上传速度限制, 默认:0</span><br><span class="line">    #max-upload-limit=1000</span><br><span class="line">    # 禁用IPv6, 默认:false</span><br><span class="line">    disable-ipv6=false</span><br><span class="line">    </span><br><span class="line">    ## 进度保存相关 ##</span><br><span class="line">    </span><br><span class="line">    # 从会话文件中读取下载任务</span><br><span class="line">    input-file=/root/aria2/aria2.session</span><br><span class="line">    # 在Aria2退出时保存`错误/未完成`的下载任务到会话文件</span><br><span class="line">    save-session=/root/aria2/aria2.session</span><br><span class="line">    # 定时保存会话, 0为退出时才保存, 需1.16.1以上版本, 默认:0</span><br><span class="line">    save-session-interval=60</span><br><span class="line">    </span><br><span class="line">    ## RPC相关设置 ##</span><br><span class="line">    </span><br><span class="line">    # 启用RPC, 默认:false</span><br><span class="line">    enable-rpc=true</span><br><span class="line">    # 允许所有来源, 默认:false</span><br><span class="line">    rpc-allow-origin-all=true</span><br><span class="line">    # 允许非外部访问, 默认:false</span><br><span class="line">    rpc-listen-all=true</span><br><span class="line">    # 事件轮询方式, 取值:[epoll, kqueue, port, poll, select], 不同系统默认值不同</span><br><span class="line">    #event-poll=select</span><br><span class="line">    # RPC监听端口, 端口被占用时可以修改, 默认:6800</span><br><span class="line">    rpc-listen-port=6800</span><br><span class="line">    # 设置的RPC授权令牌, v1.18.4新增功能, 取代 --rpc-user 和 --rpc-passwd 选项</span><br><span class="line">    rpc-secret=[登录密码]</span><br><span class="line">    # 设置的RPC访问用户名, 此选项新版已废弃, 建议改用 --rpc-secret 选项</span><br><span class="line">    #rpc-user=&lt;USER&gt;</span><br><span class="line">    # 设置的RPC访问密码, 此选项新版已废弃, 建议改用 --rpc-secret 选项</span><br><span class="line">    #rpc-passwd=&lt;PASSWD&gt;</span><br><span class="line">    # 是否启用 RPC 服务的 SSL/TLS 加密,</span><br><span class="line">    # 启用加密后 RPC 服务需要使用 https 或者 wss 协议连接</span><br><span class="line">    #rpc-secure=true</span><br><span class="line">    # 在 RPC 服务中启用 SSL/TLS 加密时的证书文件(.pem/.crt)</span><br><span class="line">    #rpc-certificate=/root/xxx.pem</span><br><span class="line">    # 在 RPC 服务中启用 SSL/TLS 加密时的私钥文件(.key)</span><br><span class="line">    #rpc-private-key=/root/xxx.key</span><br><span class="line">    </span><br><span class="line">    ## BT/PT下载相关 ##</span><br><span class="line">    </span><br><span class="line">    # 当下载的是一个种子(以.torrent结尾)时, 自动开始BT任务, 默认:true</span><br><span class="line">    follow-torrent=true</span><br><span class="line">    # BT监听端口, 当端口被屏蔽时使用, 默认:6881-6999</span><br><span class="line">    listen-port=51414</span><br><span class="line">    # 单个种子最大连接数, 默认:55</span><br><span class="line">    #bt-max-peers=55</span><br><span class="line">    # 打开DHT功能, PT需要禁用, 默认:true</span><br><span class="line">    enable-dht=true</span><br><span class="line">    # 打开IPv6 DHT功能, PT需要禁用</span><br><span class="line">    #enable-dht6=false</span><br><span class="line">    # DHT网络监听端口, 默认:6881-6999</span><br><span class="line">    #dht-listen-port=6881-6999</span><br><span class="line">    # 本地节点查找, PT需要禁用, 默认:false</span><br><span class="line">    #bt-enable-lpd=true</span><br><span class="line">    # 种子交换, PT需要禁用, 默认:true</span><br><span class="line">    enable-peer-exchange=true</span><br><span class="line">    # 每个种子限速, 对少种的PT很有用, 默认:50K</span><br><span class="line">    #bt-request-peer-speed-limit=50K</span><br><span class="line">    # 客户端伪装, PT需要</span><br><span class="line">    peer-id-prefix=-TR2770-</span><br><span class="line">    user-agent=Transmission/2.77</span><br><span class="line">    # 当种子的分享率达到这个数时, 自动停止做种, 0为一直做种, 默认:1.0</span><br><span class="line">    seed-ratio=0.1</span><br><span class="line">    # 强制保存会话, 即使任务已经完成, 默认:false</span><br><span class="line">    # 较新的版本开启后会在任务完成后依然保留.aria2文件</span><br><span class="line">    force-save=true</span><br><span class="line">    # BT校验相关, 默认:true</span><br><span class="line">    #bt-hash-check-seed=true</span><br><span class="line">    # 继续之前的BT任务时, 无需再次校验, 默认:false</span><br><span class="line">    bt-seed-unverified=true</span><br><span class="line">    # 保存磁力链接元数据为种子文件(.torrent文件), 默认:false</span><br><span class="line">    #bt-save-metadata=true</span><br><span class="line">    </span><br><span class="line">    #把 max-tries 设为 0，retry-wait 设为 5（大于零整数，不要太小），这样当线程太多而被服务器返回 50X 时能自动重连，保持总线程数不下降;</span><br><span class="line">    max-tries=0</span><br><span class="line">    retry-wait=5</span><br><span class="line">    #max-file-not-found 设为 0 （此项默认就是 0），无限等待服务器发送数据直到完成下载。</span><br><span class="line">max-file-not-found=0</span><br></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ol start="2">
<li><code>aria2.session</code> 只要建立在 conf 内写的相应目录处就可以了</li>
</ol>
</li>
</ul>
</li>
<li><p>配置自启动</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">nano /etc/supervisor/conf.d/aria2</span><br></pre></td></tr></tbody></table></figure>

<p> 然后输入（注意 conf 路径）</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[program:aria2]</span><br><span class="line">command=aria2c --conf-path=/root/aria2/aria2.conf -D</span><br><span class="line">autorestart=true  </span><br><span class="line">user=root </span><br></pre></td></tr></tbody></table></figure>

<p> 通过 supervisorctl reload 进行重启</p>
<p> 或者也可以使用 systemd 来配置自启，输入<code>nano /usr/lib/systemd/system/aria2c.service</code></p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Aria2c</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">ExecStart=/usr/bin/aria2c --conf-path=/etc/aria2/aria2.conf</span><br><span class="line">ExecReload=/bin/kill -HUP $MAINPID</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=42s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></tbody></table></figure>

<p> 保存后启动服务</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">systemctl enable aria2c.service</span><br><span class="line">systemctl restart aria2c.service</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h5 id="配置前端"><a href="#配置前端" class="headerlink" title="配置前端"></a>配置前端</h5><p>从<a href="https://github.com/mayswind/AriaNg/releases">这里</a>下载 AriaNG 最新版。</p>
<p>然后放到上传到一个文件夹里面，我选择<code>/home/ariaNG/</code></p>
<p>然后再 nginx 配置文件中的某一个站点写入</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">location /aria2 {</span><br><span class="line">   #用alias表示最终url不包含中/aria2/目录</span><br><span class="line">      alias /home/ariaNG/;</span><br><span class="line">      index index.html;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>即可通过<code>网址/aria2</code>打开前端，输入密码即可使用。</p>
<h4 id="transmission（选用）"><a href="#transmission（选用）" class="headerlink" title="transmission（选用）"></a>transmission（选用）</h4><p>一般而言，http 下载我偏爱 aria2，而挂 pt 我就喜欢用 transmission 了。</p>
<p>参考文章：</p>
<ul>
<li><a href="https://github.com/ronggang/transmission-web-control/wiki/Linux-Installation-CN">在 Linux 下安装与更新</a></li>
<li><a href="https://wiki.debian.org/BitTorrent/Transmission">Transmission</a></li>
<li><a href="https://tsukkomi.org/post/set-ngxin-https-reverse-proxy-to-transmission-web-ui">Ngxin HTTPS代理Transmission Web UI</a></li>
<li><a href="https://www.ephestione.it/change-user-of-transmission-daemon-under-debian-and-raspbian/">CHANGE USER OF TRANSMISSION-DAEMON UNDER DEBIAN AND RASPBIAN</a></li>
<li><a href="https://github.com/transmission/transmission/issues/342">Failed to set receive buffer UDP in Debian Solution?</a></li>
</ul>
<ol>
<li><p>安装 transmission</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">apt install  transmission</span><br><span class="line">apt install  transmission-daemon</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>建立下载文件夹</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">mkdir -p /home/zbttl/download/transmission</span><br><span class="line">chmod 777 /home/zbttl/download/transmission</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>修改配置</p>
<ol>
<li><p>先停止服务</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">service transmission-daemon stop</span><br></pre></td></tr></tbody></table></figure>

<p>注意一定要停止后再修改，而不能修改完再重启。</p>
</li>
<li><p>修改 <code>/etc/init.d/transmission-daemon</code>，将其中的 user 等号后面的名字改成 zbttl。</p>
</li>
<li><p>修改<code>/lib/systemd/system/transmission-daemon.service</code>，同样是将 Service 中的 user 改成 zbttl。然后使用<code>systemctl daemon-reload</code>刷新配置。</p>
</li>
<li><p>寻找配置文件。这里注意一件事，未修改用户之前 transmission 的默认用户为 www-data，通过<code>cat /etc/passwd</code>可以看到默认目录在<code>/var/lib/transmission-daemon/</code>，所以配置文件就为其目录下的<code>.config/transmission-daemon/settings.json</code>。当然为了配置方便，该文件其实是连接到<code>/etc/transmission-daemon/settings.json</code>里的，直接去改这玩意也行。不过，更换了用户以后，配置文件就跑到用户目录下<code>.config/transmission-daemon/settings.json</code>，可以通过带连接的 cp 命令把 /etc/transmission-daemon/ 整个考过来，也可以等其生成后再停下来改。不过卸载的时候这三者都不会被删除，但是如果你手动删掉 /etc 下的这个快捷方式文件夹，重新安装之后不会自动生成。而另外两个文件夹内文件会自动在运行时生成。我们这里选择自动生成。</p>
<p>不过上面说的这些实际执行起来还有各种诡异的变化，表现在两点：</p>
<ol>
<li><code>/etc/transmission-daemon/ </code>里面的配置文件和 <code>.config/transmission-daemon/settings.json</code> 里面的配置文件部分不同步，注意是部分，在我这里反映出就是目录用户密码都同步了，但 <code>rpc-whitelist-enabled</code> 用户文件那边变成 <code>true</code> 了，然后就弹出 403 错误；</li>
<li>权限不一致。<code>/etc/transmission-daemon/ </code> 里面的数据库文件莫名其妙拥有者变成了默认用户，导致原来种子的资料读不出来。</li>
</ol>
<p>对症下药把，也没摸出什么规律来。</p>
<p>回到正题。</p>
<p>先切换用户<code>su zbttl</code></p>
<p>测试前台开启命令<code>transmission-daemon -f</code></p>
<p>此时会看见日志里面有自带创建文件的提示。同时非 root 下还会出现 udp failed 的提示，这里我们先不管，下面解决。</p>
</li>
<li><p>打开生成的文件<code>nano /home/zbttl/.config/transmission-daemon/settings.json</code></p>
<p>修改配置文件：</p>
<p>我打算修改一下<code>"download-dir": "/var/lib/transmission-daemon/downloads"</code>修改到<code>/home/zbttl/download/transmission</code>里面，另外还有<code>rpc-password</code>和<code>rpc-username</code>要设置，<code>rpc-whitelist-enabled</code>更改为false，默认 rpc 端口 9091，如果有冲突也需要修改一下。<code>port-forwarding-enabled</code>改成 false，<code>rpc-authentication-required</code>改成 true，允许使用域名代替 ip 访问。</p>
<p>设置完后经过前台开始命令，并通过浏览器查看是否能够访问。</p>
</li>
<li><p>切换回来<code>su</code> </p>
<p>针对 udp failed 问题，修改<code>/etc/sysctl.conf</code>，新增下面两行</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">net.core.rmem_max = 4194304</span><br><span class="line">net.core.wmem_max = 1048576</span><br></pre></td></tr></tbody></table></figure>

<p>应用</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></tbody></table></figure>

<p>最后重新启动</p>
 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">service transmission-daemon start </span><br></pre></td></tr></tbody></table></figure>
</li>
</ol>
</li>
<li><p>安装美化</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">wget https://github.com/ronggang/transmission-web-control/raw/master/release/install-tr-control-cn.sh|bash</span><br></pre></td></tr></tbody></table></figure>

<p>按下「1」即可。</p>
<p>此时输入<code>ip:9091</code>，之后输入 <code>rpc-password</code>和<code>rpc-username</code> 就能顺利登录了。如果不能正常加载美化界面，请使用硬性重新加载。</p>
</li>
<li><p>和 nginx 配合使用</p>
<p>如果需要通过网址访问，则需要在nginx 配置文件中的某一个站点写入</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">    location ^~ /transmission {</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">        proxy_set_header X-NginX-Proxy true;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Connection "";</span><br><span class="line">        proxy_pass_header X-Transmission-Session-Id;</span><br><span class="line">        add_header   Front-End-Https   on;</span><br><span class="line"></span><br><span class="line">        location /transmission/rpc {</span><br><span class="line">            proxy_pass http://127.0.0.1:9091;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        location /transmission/web/ {</span><br><span class="line">            proxy_pass http://127.0.0.1:9091;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        location /transmission/upload {</span><br><span class="line">            proxy_pass http://127.0.0.1:9091;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        location /transmission/web/style/ {</span><br><span class="line">            alias /usr/share/transmission/web/style/;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        location /transmission/web/javascript/ {</span><br><span class="line">            alias /usr/share/transmission/web/javascript/;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        location /transmission/web/images/ {</span><br><span class="line">            alias /usr/share/transmission/web/images/;</span><br><span class="line">        }</span><br><span class="line">        location /transmission/ {</span><br><span class="line">            return 301 http://$server_name/transmission/web;</span><br><span class="line">            #如果是使用 https 请换成这句</span><br><span class="line">            #return 301 https://$server_name/transmission/web;</span><br><span class="line">        }</span><br><span class="line">        #另外，我想要访问网址的 /download 后缀也能进入 transmission</span><br><span class="line">        location /download {</span><br><span class="line">            return 301 http://$server_name/transmission/web;</span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>即可使用。</p>
</li>
</ol>
<h4 id="Simple-Torrent（选做）"><a href="#Simple-Torrent（选做）" class="headerlink" title="Simple Torrent（选做）"></a>Simple Torrent（选做）</h4><p>参考文章：<a href="https://www.moerats.com/archives/1023/">Simple Torrent：一个支持边下边播、无版权限制和自动上传的BT离线下载程序</a></p>
<p>相比 aria2 和 transmission，这玩意能开 obfs 混淆一定程度防止 bt 追查。</p>
<p>这玩意有 docker，但不支持指定用户，只能硬着头皮上通常版了。</p>
<ol>
<li><p>一键脚本安装</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">bash &lt;(wget -qO- https://raw.githubusercontent.com/boypt/simple-torrent/master/scripts/quickinstall.sh)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>修改 <code>/etc/systemd/system/multi-user.target.wants/cloud-torrent.service</code></p>
<p>修改以下项目</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">User=zbttl #运行用户</span><br><span class="line">WorkingDirectory=/home/zbttl #运行用户的主目录</span><br><span class="line">ExecStart=/usr/local/bin/cloud-torrent -c /home/zbttl/download/cloudtorrent/cloud-torrent.json --host 0.0.0.0 --disable-log-time #cloud-torrent 最好改成绝对路径</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>改 <code>/root/cloud-torrent.json</code></p>
<p>修改以下项目</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">"downloaddirectory": "/home/zbttl/download/cloudtorrent/downloads", #待会用的下载文件夹</span><br><span class="line">"obfsrequirepreferred": true, #obfs 加密优先</span><br><span class="line">"trackerlisturl": "https://trackerslist.com/all.txt", #想要tracker全一点</span><br><span class="line">"watchdirectory": "/home/zbttl/download/cloudtorrent/torrents" #待会用的种子文件夹</span><br></pre></td></tr></tbody></table></figure>

<p>复制到第二部写的 cloud-torrent 路径里面，修改所有者</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cp /root/cloud-torrent.json/home/zbttl/download/cloudtorrent/cloud-torrent.json</span><br><span class="line">chown zbttl/home/zbttl/download/cloudtorrent/cloud-torrent.json</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>新建下载和种子文件夹</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">mkdir -p /home/zbttl/download/cloudtorrent/downloads</span><br><span class="line">mkdir -p /home/zbttl/download/cloudtorrent/torrents</span><br><span class="line">chown zbttl /home/zbttl/download/cloudtorrent/downloads /home/zbttl/download/cloudtorrent/torrents</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>重启服务</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart cloud-torrent</span><br></pre></td></tr></tbody></table></figure>

<p>通过 ip:3000 访问</p>
</li>
</ol>
<h4 id="filebrowser（普通）"><a href="#filebrowser（普通）" class="headerlink" title="filebrowser（普通）"></a>filebrowser（普通）</h4><p>不依赖 caddy 和 docker 的普通版 filebrowser。</p>
<p>参考资料：</p>
<ul>
<li><p><a href="https://docs.filebrowser.xyz/">官方文档</a></p>
</li>
<li><p><a href="https://www.mivm.cn/filebrowser/">File Browser 安装及使用</a></p>
</li>
</ul>
<ol>
<li><p>安装</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">curl -fsSL https://filebrowser.xyz/get.sh | bash</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>配置。filebrowser 支持两种方法的配置：数据库配置和文件配置。数据库配置不能直接编辑，可以通过数条命令进行编辑。而文件配置方法可以先用命令导出编辑后再导入，但是貌似没有什么例子来说明如何修改导出的文件。。。于是我们选用数据库方案。<a href="https://2333blog.com/post/26/">配置文件法参考</a></p>
<p>新建一个数据库，建立在 <code>/etc/filebrowser</code></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">filebrowser -d /etc/filebrowser.db config init</span><br></pre></td></tr></tbody></table></figure>

<p>设置监听地址，这里可以写实机外部 ip，也可以写 0.0.0.0，但是不能写 127.0.0.1</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">filebrowser -d /etc/filebrowser.db config set --address 0.0.0.0</span><br></pre></td></tr></tbody></table></figure>

<p>设置端口</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">filebrowser -d /etc/filebrowser.db config set --port 100</span><br></pre></td></tr></tbody></table></figure>

<p>设置语言环境</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">filebrowser -d /etc/filebrowser.db config set --locale zh-cn</span><br></pre></td></tr></tbody></table></figure>

<p>设置日志位置</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">filebrowser -d /etc/filebrowser.db config set --log /var/log/filebrowser.log</span><br></pre></td></tr></tbody></table></figure>

<p>添加用户</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">filebrowser -d /etc/filebrowser.db users add root password --perm.admin</span><br></pre></td></tr></tbody></table></figure>

<p>启动</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">filebrowser -d /etc/filebrowser.db</span><br></pre></td></tr></tbody></table></figure>

<p>此时即可通过 ip 进行访问。</p>
<p>确定可使用后，中段程序，设置自启：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">nano /etc/supervisor/conf.d/filebrowser</span><br></pre></td></tr></tbody></table></figure>

<p>打入代码</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[program:filebrowser] </span><br><span class="line">command=filebrowser -d /etc/filebrowser.db</span><br><span class="line">autorestart=true  </span><br><span class="line">user=root  </span><br></pre></td></tr></tbody></table></figure>

<p>重启 supervisor <code>supervisorctl restart</code></p>
</li>
</ol>
<h4 id="amule（选用）"><a href="#amule（选用）" class="headerlink" title="amule（选用）"></a>amule（选用）</h4><p>还有某些 ed2k 链接 tr 和 aria2 是搞不掂的。得用专用的电驴下载工具（其实比较著名的 ed2k 也就是 msdn 了）。不过其实 amule 协议由于某种原因在和 bt 的竞争中已经落于下风濒临死亡，目前常用的两个工具都许久没有更新，都有比较要命的 bug，所以我两个都说一下，任选其一安装。</p>
<p>参考文章：</p>
<ul>
<li><a href="https://wiki.debian.org/aMule">aMule</a></li>
<li>[How to setup AMule and control it via web interface on a Raspberry Pi](How to setup AMule and control it via web interface on a Raspberry Pi)</li>
<li><a href="https://tieba.baidu.com/p/5508629232?red_tag=2301445028#116899889402l">Debian系统如何安装aMule ?</a></li>
</ul>
<ol>
<li><p>安装 amule-daemon（没错，只要装这个就好了，其他都不用）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">apt install amule-daemon</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>修改 amule 的启动用户和启动文件夹</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">vim /etc/default/amule-daemon</span><br></pre></td></tr></tbody></table></figure>

<p>这里我的 user 设置为 zbttl，文件夹设置为 <code>/home/zbttl/download/amule</code></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">AMULED_USER="zbttl"</span><br><span class="line">AMULED_HOME="/home/zbttl/download/amule"</span><br></pre></td></tr></tbody></table></figure>

<p>设置完以后重启一遍服务</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">service amule-daemon start</span><br></pre></td></tr></tbody></table></figure>

<p>接下来才会在刚刚设置的文件夹里面放置程序文件</p>
<p>然后停止进程（也许不需要）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">service amule-daemon stop</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>运行一边 amuled 命令</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">amuled</span><br></pre></td></tr></tbody></table></figure>

<p>在刚刚设置的文件夹里就会出现关键配置文件 amule.conf</p>
<p>修改其中的几个参数 `</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ECPassword=[处理过的密码]</span><br><span class="line">[WebServer]</span><br><span class="line">Enabled=1</span><br><span class="line">Password=[处理过的密码]</span><br></pre></td></tr></tbody></table></figure>

<p>其中的两个密码需要通过命令处理生成</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">echo -n [密码] | md5sum | cut -d ' ' -f 1</span><br></pre></td></tr></tbody></table></figure>

<p>两个密码可以填一样的，实际上登录的时候只有后一个密码有用，前一个密码填啥都行</p>
<p>上面的配置方法其实是抄了近路，正经的配置方法是只配置 <code>ECPassword</code>，保存后</p>
<p>用命令生成并配置 webserver 的密码</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">amuleweb --write-config --host=localhost --password=[未处理过的Password] --admin-pass=[未处理过的 ECPassword]</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>重启，即可使用，通过 <code>ip:4711</code> 访问</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">service amule-daemon start</span><br></pre></td></tr></tbody></table></figure>

<p>不进行调试的情况下，普遍 amule 下载速度貌似比下面这个快。但缺点是有时候会出现奇怪的错误，需要手动重启进程，这个错误在官方 github 上面可以找到类似的（还是两个，下面这是其中一个）：<a href="https://github.com/amule-project/amule/issues/121">../../src/CFile.cpp(370): assert “Assert failure” failed in doSeek(): ((IsOpened()))</a>。</p>
<p>opened 了很久，无人解决，上一次更新在 2015 年，估计凉了。</p>
</li>
</ol>
<h4 id="mldonkey（选用）"><a href="#mldonkey（选用）" class="headerlink" title="mldonkey（选用）"></a>mldonkey（选用）</h4><p>mldonkey 相对比较稳定，但部署上确实比较麻烦。。。</p>
<p>参考文章：</p>
<ul>
<li><a href="https://forum.ubuntu.com.cn/viewtopic.php?t=327518">Ubuntu自带的mldonkey-server启动脚本详解</a></li>
<li><a href="https://www.polarxiong.com/archives/Ubuntu-MLDonkey%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4%E5%92%8C%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.html">Ubuntu:MLDonkey安装步骤和一些注意事项</a>（改配置文件法，不成功）</li>
<li><a href="http://mldonkey.sourceforge.net/Quickstart_guide#Initial_Setup_and_Usage">Quickstart guide</a>（官方安装文档）</li>
<li><a href="http://mldonkey.sourceforge.net/MLdonkeyOptionsExplained#Download">MLdonkeyOptionsExplained</a>（官方文档，全配置参数）</li>
<li><a href="http://mldonkey.sourceforge.net/MultiUser">MultiUser</a>（官方文档，用户管理）</li>
</ul>
<ol>
<li><p>安装 mldonkey 和 telnet</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">apt install mldonkey-server</span><br><span class="line">apt install telnet</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>停止程序运行</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo /etc/init.d/mldonkey-server stop</span><br></pre></td></tr></tbody></table></figure>

<p>运行一遍程序</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">mlnet</span><br></pre></td></tr></tbody></table></figure>

<p>开启另一个 ssh 窗口，尝试使用 telnet 登录配置端</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">telnet 127.0.0.1 4000</span><br></pre></td></tr></tbody></table></figure>

<p>成功的话输入 <code>exit</code> 退出。</p>
</li>
<li><p>修改用户和下载目录配置文件 <code>/etc/default/mldonkey-server</code>，修改以下部分</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">MLDONKEY_DIR=/home/zbttl/download/mldonkey #mldonkey 程序配置文件目录</span><br><span class="line">MLDONKEY_USER=zbttl #运行用户</span><br><span class="line">MLDONKEY_GROUP=zbttl</span><br></pre></td></tr></tbody></table></figure>

<p>拷贝原来的 mldonkey 配置文件到新的程序配置文件目录，默认在 <code>/root/.mldonkey</code></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cp -r /root/.mldonkey/* /home/zbttl/download/mldonkey/</span><br></pre></td></tr></tbody></table></figure>

<p>修改运行配置文件 <code>/etc/init.d/mldonkey-server</code>，修改以下部分</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">PIDDIR=/home/zbttl/download/mldonkey #配置程序文件目录</span><br><span class="line">LOGFILE=/home/zbttl/download/mldonkey/mldonkey-server.log #日志目录1</span><br><span class="line">SERVERLOG=/home/zbttl/download/mldonkey/mlnet.log #日志目录2</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>修改配置文件/日志目录的用户，像我一样把所有文件放一块的，对一个文件夹配置就好了</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">chown -R zbttl /home/zbttl/download/mldonkey</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>重启服务</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">sudo /etc/init.d/mldonkey-server restart</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>再次登录 telnet</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">telnet 127.0.0.1 4000</span><br></pre></td></tr></tbody></table></figure>

<p>初始用户 admin，进入 telnet 时未重置过密码即使用该用户，通过 passwd 命令设置密码</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">passwd [密码]</span><br></pre></td></tr></tbody></table></figure>

<p>密码在 telnet 和 web 下通用。</p>
<p>下次登录 telnet 时需要输入密码才可相应各个命令</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">auth admin [密码]</span><br></pre></td></tr></tbody></table></figure>

<p>还可通过 useradd 添加新用户</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">useradd zbttl [密码] </span><br></pre></td></tr></tbody></table></figure>

<p>关闭 ip 限制</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">set allowed_ips 0.0.0.0/0</span><br></pre></td></tr></tbody></table></figure>

<p>此时就可以通过 <code>ip:4080</code> 登录 web 界面。</p>
<p>剩下的参数，可以查询官方文档参数名，然后通过 set 指令调整，如果想知道当前参数默认值，可以通过 grep -r 查询，比如：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">grep -r allowed_ips</span><br></pre></td></tr></tbody></table></figure>

<p>另外在 gui 里面大部分参数亦可以调节，不过 gui 要找到参数的文件可能更麻烦。。。</p>
</li>
<li><p>web 内参数较 amule 多很多，但最重要的是 settings 里面的 max_hard_download_rate，初始限速 50kb。往高了调吧。</p>
</li>
</ol>
<p>另外，第六部有的教程里是通过直接调节 download.ini 文件内容，我之前尝试了一下，姿势不对，调节完 mldonkey 进程的启动不起来了，甚至需要重启来解决，重启后配置又还原了。。。</p>
<h3 id="远程控制类"><a href="#远程控制类" class="headerlink" title="远程控制类"></a>远程控制类</h3><h4 id="vnc"><a href="#vnc" class="headerlink" title="vnc"></a>vnc</h4><p>有时候，下载某些不可描述的东西会碰到一些下的慢又限制重复 ip 的网盘，用自己的电脑下的话，又久，一断电又前功尽弃了。这时不如远程操作 vps，使用上面的远程桌面来下载，在 vps 上下完再下到自己的电脑上。linux 的远程桌面，一般我们使用 vnc。</p>
<p>参考资料：</p>
<ul>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-vnc-on-debian-9"> How to Install and Configure VNC on Debian 9</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/26843097">VPS开启VNC服务，并解决中文乱码的方法——ubuntu系统</a></li>
</ul>
<ol>
<li><p>安装 tightvnc</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">apt install tightvncserver</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>安装语言包</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">apt-get install ttf-wqy-zenhei</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>启动<code>vncserver</code>，会提示让你输入密码，最多 8 位，多于 8 位会警告并被截断。输入完密码后会提醒你是否创建 view-only 密码，选择否。之后查看 ssh 内输出，应该是<code>主机名:1</code>，这里的「:1」的意思是 「5900+1」，也就是 vnc 运行在 5901 端口。</p>
</li>
<li><p>下载 windows 端 vnc viewer，新建一个远程主机，地址为<code>ip:5901</code>，然后输入密码，便能够看到图形界面了。如果发现连不上，有可能是你开着代理，或者是 vnc viewer 自动识别了你的代理地址，左上角<code>file-&gt;preferences-&gt;proxy</code>，选择第一项。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/3vV2Bp4.png"></p>
<p>我们看到这里实际上只有一个命令行窗口在工作，是因为系统里面还没有图形化桌面。图形化桌面有名的有 kde，ghome，xfce，由于我们的 vps 内存较小，我们就选择占用最小的 xfce 来安装。</p>
</li>
<li><p>安装 xfce</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">apt install xfce4 xfce4-goodies</span><br></pre></td></tr></tbody></table></figure>

<p>然后重启 vnc</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">vncserver -kill :1</span><br><span class="line">vncserver</span><br></pre></td></tr></tbody></table></figure>

<p>即可在 windows 端查看效果（不需要像其他教程那样修改 xstartup 文件）。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Dufepps.png"></p>
</li>
<li><p>安装浏览器</p>
<p>firefox 是最容易安装的，不过资源占用可能有点大</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">apt install firefox-esr</span><br></pre></td></tr></tbody></table></figure>

<p>安装完后，vnc 内的浏览器图标才能够正常打开。</p>
</li>
</ol>
<h4 id="tiny-remote-desktops-（20-12-23-更新）"><a href="#tiny-remote-desktops-（20-12-23-更新）" class="headerlink" title="tiny-remote-desktops （20.12.23 更新）"></a>tiny-remote-desktops <strong>（20.12.23 更新）</strong></h4><p>来自：<a href="https://renzhn.github.io/posts/vps-remote-de/">Linux VPS一键搭建远程桌面（包含Chrome和Firefox）教程</a></p>
<p>一个 rdp + vnc + noVNC 的 docker。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo docker run -d --name rdpvnc -v /home/zbttl/rdp_download:/root -p 3389:3389 -p 5901:5901 -p 6901:6901   soff/tiny-remote-desktop</span><br></pre></td></tr></tbody></table></figure>

<p>下载的文件会被放在 <code>/home/zbttl/rdp_download/Downloads</code>。但没有办法用非 root 方式运行，试过 <code>-u</code> 运行不起来，<code>-e</code> 没用。</p>
<p>如果要用密码连接的话：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo docker run -d --name rdpvnc -v /home/zbttl/rdp_download:/root -p 5901:5901 -p 6901:6901 -e VNC_PASSWORD="vncpassword"  soff/tiny-remote-desktop</span><br></pre></td></tr></tbody></table></figure>

<p>但这样就不能开 rdp 了。</p>
<h3 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h3><h4 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h4><p>参考文章：</p>
<ul>
<li><a href="https://www.zhihu.in/archives/261">内网穿透工具frp服务器端frps一键安装教程</a></li>
<li><a href="https://www.zhihu.in/archives/2119">内网穿透工具frp Windows客户端frpc安装及使用教程</a></li>
<li><a href="https://blog.51cto.com/sonlich/2126175">利用vps+frp实现访问公司内网windows远程桌面</a></li>
<li><a href="https://www.hi-linux.com/posts/25686.html">推荐一款很好用的内网穿透工具 FRP</a></li>
<li><a href="https://diannaobos.com/post/405.html">创建windows计划任务使FRP开机启动</a></li>
</ul>
<p>最重要的用途是拿来穿透到主机上做远程控制，部分代替 teamviewer。</p>
<p>在服务器端使用一键脚本安装</p>
<h5 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h5><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/clangcn/onekey-install-shell/master/frps/install-frps.sh -O ./install-frps.sh</span><br><span class="line">chmod 700 ./install-frps.sh</span><br><span class="line">./install-frps.sh install</span><br></pre></td></tr></tbody></table></figure>

<p>   回车后，需要设置参数，有几个参数要注意：</p>
<p>第一第二个的 frp 通信端口和 dashboard 端口如果不是端口冲突的话建议默认，dashboard 密码自己设，要记牢；</p>
<p>后面三个需要修改，</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Please input frps vhost_http_port [1-65535](Default vhost_http_port: 80):</span><br><span class="line">#输入frp进行http穿透的http服务端口，按Enter键表示默认80，否则手动输入新端口，一般不建议默认80，防止和caddy/nginx冲突</span><br><span class="line"></span><br><span class="line">Please input frps vhost_https_port [1-65535](Default vhost_https_port: 443):</span><br><span class="line">#输入frp进行https穿透的https服务端口，按Enter键表示默认443，否则手动输入新端口,建议不用默认，防止和caddy/nginx冲突</span><br><span class="line"></span><br><span class="line">Please input privilege_token (Default: WEWLRgwRjIJVPx2kuqzkGnvuftPLQniq):</span><br><span class="line">#输入frp服务器和客户端通信的密码，默认是随机生成的，按Enter键表示按默认来，否则手动输入。frpc客户端需要这个接头暗号</span><br></pre></td></tr></tbody></table></figure>

<p>后面的基本全部设置为默认就行了，除了特殊情况：mux 打开后如果觉得卡顿断流需要关掉；kcp 如果恰逢家中宽带被运营商 qos 的话也建议关掉。</p>
<p>如果设置错误的话，可以使用 <code>frps config</code> 命令修改。</p>
<p>配置好后使用 <code>frps status</code>确认是否正确运行。</p>
<h5 id="客户端（windows）"><a href="#客户端（windows）" class="headerlink" title="客户端（windows）"></a>客户端（windows）</h5><p><a href="https://github.com/fatedier/frp/releases">下载</a> windows 命令行客户端，解压到任意目录，并在解压目录下地址栏输入 cmd 进入命令行界面。</p>
<p>修改 frpc.ini（这里只配置了远程控制）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 167.179.x.x</span><br><span class="line">server_port = 5443        </span><br><span class="line">token=123456</span><br><span class="line">type = kcp</span><br><span class="line">[rdp]</span><br><span class="line">local_ip = 127.0.0.1           </span><br><span class="line">local_port = 3389                 </span><br><span class="line">remote_port = 5200              </span><br></pre></td></tr></tbody></table></figure>

<p>其中，server_addr 是服务器地址，sever_port 是 frp 通信端口，token 则是通信密码；rdp 中前三项不用改，第四项决定着你接下来要用的远程地址后跟端口号是多少。注意 ini 配置文件不能放注释。</p>
<p>然后在 cmd 下面敲入</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">frpc -c frpc.ini</span><br></pre></td></tr></tbody></table></figure>

<p>如果出现下面界面证明启动成功</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/OJzLDBS.png"></p>
<p>此时使用 rdp 客户端访问 <code>ip:5200</code>即可远程访问该电脑。因为我们域名指向了该 ip，也可以用<code>域名:5200</code>访问该电脑。当然也可以通过 nginx/caddy 反向代理，无需域名，这里不再赘述。</p>
<p>此时使用<code>域名:6443</code>（dashboard 默认端口）就应该能够进入到 frp 的管理页面，可以看到 tcp 项里面远程桌面端口在线。</p>
<p>另外，如果发现某些时候重启后 frp.exe 并没有启动，可以到服务界面中将其自启模式改为「自动（延迟）」。</p>
<h5 id="快速运行"><a href="#快速运行" class="headerlink" title="快速运行"></a>快速运行</h5><p>新建一个 bat，假设 frp 文件夹放在 <code>E:\network tools\frp</code> 下</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">@echo off  </span><br><span class="line">start  "C:\Windows\System32\cmd.exe"   </span><br><span class="line">"E:\network tools\frp\frpc" -c "E:\network tools\frp\frpc.ini"</span><br><span class="line">exit</span><br></pre></td></tr></tbody></table></figure>

<p>双击打开，运行正常。</p>
<h5 id="配置自启"><a href="#配置自启" class="headerlink" title="配置自启"></a>配置自启</h5><p>建议配合 <a href="https://github.com/kohsuke/winsw/releases">winsw</a> 实现自启。根据系统环境下载 net2 或 net4 版本的可执行文件，下载后放入 frp 文件夹中，改名为 winsw.exe。并在相同目录创建一个 winsw.xml，输入以下文字</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">&lt;service&gt;</span><br><span class="line"></span><br><span class="line">    &lt;id&gt;frp&lt;/id&gt;</span><br><span class="line"></span><br><span class="line">    &lt;name&gt;frp&lt;/name&gt;</span><br><span class="line"></span><br><span class="line">    &lt;description&gt;用frp发布本地电脑网站到外网&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;executable&gt;frpc&lt;/executable&gt;</span><br><span class="line"></span><br><span class="line">    &lt;arguments&gt;-c frpc.ini&lt;/arguments&gt;</span><br><span class="line"></span><br><span class="line">    &lt;logmode&gt;reset&lt;/logmode&gt;</span><br><span class="line"></span><br><span class="line">&lt;/service&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>然后 frp 文件夹地址栏敲入 cmd，输入<code>winsw install</code>，没有错误的话证明配置成功，输入<code>winsw start</code>立即启动。</p>
<p>另外，有可能还要到 services.msc 处将服务自启类型调为<code>自动(延迟)</code>，避免因为刚开机网络服务没有启动导致连接失败并无法自动重新启动。</p>
<h5 id="stcp-和-xtcp"><a href="#stcp-和-xtcp" class="headerlink" title="stcp 和 xtcp"></a>stcp 和 xtcp</h5><p>参考文章：<a href="https://github.com/fatedier/frp/blob/master/README_zh.md">frp中文文档</a></p>
<p>虽然一个单词只差。。。但这俩区别很大，前者是将 tcp 进行加密，而后者是 nat 打孔，之后流量不经过 vps 而是服务端和客户端直连。</p>
<p>配置方法倒是差不多。</p>
<p>服务端需要加一个 udp 端口</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">bind_udp_port = 7001</span><br></pre></td></tr></tbody></table></figure>

<p>然后客户端，删去 common 内的 <code>protocol = kcp</code></p>
<p>加入一个节点</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[rdp-stcp]</span><br><span class="line">type = stcp</span><br><span class="line"># 只有 sk 一致的用户才能访问到此服务</span><br><span class="line">sk = abcdefg</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 3389</span><br></pre></td></tr></tbody></table></figure>

<p>另外，在另一段，连接过去的机子上也要做一个客户端，因为两边都有客户端了，就不需要 remote_port 了。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"># frpc.ini</span><br><span class="line">[common]</span><br><span class="line">server_addr = x.x.x.x</span><br><span class="line">server_port = 5443</span><br><span class="line"></span><br><span class="line">[rdp-stcp-rdp-stcp]</span><br><span class="line">type = stcp</span><br><span class="line"># xtcp 的访问者</span><br><span class="line">role = visitor</span><br><span class="line"># 要访问的 xtcp 代理的名字</span><br><span class="line">server_name = p2p_ssh</span><br><span class="line">sk = abcdefg</span><br><span class="line"># 绑定本地端口用于访问 ssh 服务</span><br><span class="line">bind_addr = 127.0.0.1</span><br><span class="line">bind_port = 5200</span><br></pre></td></tr></tbody></table></figure>

<p>此时同样通过 ip:5200 连接。</p>
<p>使用 xtcp 的话，只要把上面的 stcp 改成 xtcp 就行。</p>
<p>不过，sftp 经过我实验没问题，xtcp 尽管我家已经调整为 fullcone nat 但还是连不上，挺见鬼。</p>
<h4 id="nps"><a href="#nps" class="headerlink" title="nps"></a>nps</h4><p>参考文章：<a href="https://ehang-io.github.io/nps/#/server_config">nps 配置</a></p>
<p>frp 有个大问题，就是安全性。开了 frp 结果发现电脑日志中一大堆扫描的痕迹，毕竟有了 ip 和端口就可以无限扫描这个开在公网的电脑。。。</p>
<p>虽然有 xftp 这玩意，但 xftp 在手机上其实不太好使用（要用 termux 之类的终端模拟器运行 frpc）。其他的方案，就是使用 nps。</p>
<h5 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h5><p><a href="https://github.com/ehang-io/nps/releases">下载地址</a>，下载后解压修改 <code>conf</code> 文件夹下的 <code>nps.conf</code>。参考配置</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">appname = nps</span><br><span class="line">#Boot mode(dev|pro)</span><br><span class="line">runmode = dev</span><br><span class="line"></span><br><span class="line">#HTTP(S) proxy port, no startup if empty</span><br><span class="line">http_proxy_ip=0.0.0.0</span><br><span class="line">http_proxy_port=10002</span><br><span class="line">https_proxy_port=10003</span><br><span class="line">https_just_proxy=true</span><br><span class="line">#default https certificate setting</span><br><span class="line">https_default_cert_file=conf/server.pem</span><br><span class="line">https_default_key_file=conf/server.key</span><br><span class="line"></span><br><span class="line">##bridge</span><br><span class="line">bridge_type=tcp</span><br><span class="line">bridge_port=8024</span><br><span class="line">bridge_ip=0.0.0.0</span><br><span class="line"></span><br><span class="line"># Public password, which clients can use to connect to the server</span><br><span class="line"># After the connection, the server will be able to open relevant ports and parse related domain names according to its own configuration file.</span><br><span class="line">public_vkey=123</span><br><span class="line"></span><br><span class="line">#Traffic data persistence interval(minute)</span><br><span class="line">#Ignorance means no persistence</span><br><span class="line">#flow_store_interval=1</span><br><span class="line"></span><br><span class="line"># log level LevelEmergency-&gt;0  LevelAlert-&gt;1 LevelCritical-&gt;2 LevelError-&gt;3 LevelWarning-&gt;4 LevelNotice-&gt;5 LevelInformational-&gt;6 LevelDebug-&gt;7</span><br><span class="line">log_level=7</span><br><span class="line">#log_path=nps.log</span><br><span class="line"></span><br><span class="line">#Whether to restrict IP access, true or false or ignore</span><br><span class="line">#ip_limit=true</span><br><span class="line"></span><br><span class="line">#p2p</span><br><span class="line">#p2p_ip=127.0.0.1</span><br><span class="line">#p2p_port=6000</span><br><span class="line"></span><br><span class="line">#web</span><br><span class="line">web_host=a.o.com</span><br><span class="line">web_username=[账号]</span><br><span class="line">web_password=[密码]</span><br><span class="line">web_port = [端口]</span><br><span class="line">web_ip=0.0.0.0</span><br><span class="line">web_base_url=</span><br><span class="line">web_open_ssl=false</span><br><span class="line">web_cert_file=conf/server.pem</span><br><span class="line">web_key_file=conf/server.key</span><br><span class="line"># if web under proxy use sub path. like http://host/nps need this.</span><br><span class="line">#web_base_url=/nps</span><br><span class="line"></span><br><span class="line">#Web API unauthenticated IP address(the len of auth_crypt_key must be 16)</span><br><span class="line">#Remove comments if needed</span><br><span class="line">#auth_key=test</span><br><span class="line">auth_crypt_key =1234567812345678</span><br><span class="line"></span><br><span class="line">#allow_ports=9001-9009,10001,11000-12000</span><br><span class="line"></span><br><span class="line">#Web management multi-user login</span><br><span class="line">allow_user_login=false</span><br><span class="line">allow_user_register=false</span><br><span class="line">allow_user_change_username=false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#extension</span><br><span class="line">allow_flow_limit=false</span><br><span class="line">allow_rate_limit=false</span><br><span class="line">allow_tunnel_num_limit=false</span><br><span class="line">allow_local_proxy=false</span><br><span class="line">allow_connection_num_limit=false</span><br><span class="line">allow_multi_ip=false</span><br><span class="line">system_info_display=false</span><br><span class="line"></span><br><span class="line">#cache</span><br><span class="line">http_cache=false</span><br><span class="line">http_cache_length=100</span><br><span class="line"></span><br><span class="line">#get origin ip</span><br><span class="line">http_add_origin_header=false</span><br><span class="line"></span><br><span class="line">#pprof debug options</span><br><span class="line">#pprof_ip=0.0.0.0</span><br><span class="line">#pprof_port=9999</span><br><span class="line"></span><br><span class="line">#client disconnect timeout</span><br><span class="line">disconnect_timeout=60</span><br></pre></td></tr></tbody></table></figure>

<p>主要修改 <code>web_username</code>、<code>web_password</code> 和 <code>web_port</code>，以及 <code>http_proxy_port</code> 和 <code>https_proxy_port</code> 端口不可以重复。然后直接运行</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">./nps</span><br></pre></td></tr></tbody></table></figure>

<p>或者安装后运行</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">./nps install</span><br><span class="line">nps start</span><br></pre></td></tr></tbody></table></figure>

<p>前者在前台运行，有日志。后者安装时会把刚刚修改好的 <code>nps.conf</code> 考到 <code>/etc/nps.conf</code> 中，到时有要改的修改那个就好。</p>
<p>然后在浏览器中打开 <code>[vps ip]:web_port</code>，输入上面我说要主要修改的账户和密码。</p>
<p>到客户端处点击加号新增配置</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/7l7REb9.png"></p>
<p>basic 那两项可以不填，但为了安全最好填上，这两项是 socks 的账户和密码（一般 socks 代理我们都是用在本地 v2ray/ss 和浏览器之间的链接，一般都不设密码。现在是和远程服务器链接，所以需要密码保护安全）</p>
<p>验证密钥记清楚。待会客户端要用到。</p>
<p>保存后列表中会显示刚刚我们新增配置的 id，也记住。</p>
<p>切换到 socks 代理，新增一个配置，填入上一句我说要记住的的配置 id，端口任填一个，也记住，待会也是客户端用到。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/mYBY1qN.png"></p>
<h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h5><p>在上面的<a href="https://github.com/ehang-io/nps/releases">下载地址</a>中下载客户端。解压后修改 <code>conf/npc.conf</code>，将大部分配置删除（不要注释，注释没用，照样报错），留下下面这些</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr=[vps ip]:8024</span><br><span class="line">conn_type=tcp</span><br><span class="line">vkey=[验证密钥]</span><br><span class="line">auto_reconnection=true</span><br><span class="line">max_conn=1000</span><br><span class="line">flow_limit=1000</span><br><span class="line">rate_limit=1000</span><br><span class="line">basic_username=[也许可以不填，填的话填上面那个basic的账户]</span><br><span class="line">basic_password=[也许可以不填，填的话填上面那个basic的密码]</span><br><span class="line">crypt=true</span><br><span class="line">compress=true</span><br><span class="line">#pprof_addr=0.0.0.0:9999</span><br><span class="line">disconnect_timeout=60</span><br></pre></td></tr></tbody></table></figure>

<p>运行 <code>./npc</code> 启动。如果成功的话会显示如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/WzbpA9R.png"></p>
<p>手机这边，用有 socks 代理的工具，比如 v2ray。ip 填 vps ip，端口填服务端时填的端口。账户和密码是服务端的 <code>basic_username</code> 和 <code>basic_password</code>。连接后，不需要像 frp 一样填 vps 的 ip 和穿透使用的另一个端口，而是用原来在内网连接的 ip 和端口即可。另外，只要在内网任意一台设备中开启一个客户端，内网中的所有设备和服务都可以透穿 —— 比如在虚拟机中开启了客户端，在 rdp 中输入局域网中虚拟机原机子的 ip 照样可以链接（虽然我又感觉有点不太安全了）。</p>
<h3 id="网盘类"><a href="#网盘类" class="headerlink" title="网盘类"></a>网盘类</h3><h4 id="cloudreve（选做）"><a href="#cloudreve（选做）" class="headerlink" title="cloudreve（选做）"></a>cloudreve（选做）</h4><p>参考文章：</p>
<ul>
<li><a href="http://www.senra.me/build-your-own-cloud-storage-series-cloudreve-another-production-of-shudong-share-author/">自建云盘系列——Cloudreve(树洞外链作者的又一力作)</a></li>
<li><a href="https://cvps.top/8189.html">【自建网盘】宝塔面板 安装Cloudreve 网盘系统 与 初缘cvps小站遇到的问题解决方案 （无响应）</a></li>
</ul>
<p>用这玩意的话，aria2 前端面板就不用搭了，另外还附赠一些其他服务器的外挂和中转功能可以用来扩充 vps 本身不大的硬盘（不过我手上的 onedrive 只能拿来中转，其实没什么用，无法下载比 ssd 硬盘最大容量还大的资源），另外其本身也是一个 filemanager，不过嘛。。。只能管理站内内容，站外文件夹摸不到，所以其实没什么用（能管理站外内容的话就可以和上面几个工具联合管理一个文件夹了）。主要是搭建上其实很麻烦。。。</p>
<ol>
<li><p>有两种安装方法，一种是靠 composer 进行快速部署，另一种是直接下载压缩包然后释放到网站文件夹里面，<a href="https://github.com/HFO4/Cloudreve/wiki/%E5%AE%89%E8%A3%85%E8%AF%B4%E6%98%8E">官方github</a>给的安装方法是用前者。但我试过 composer 的方法，有些功能会出错（比如 cron 进程守护，还有图片集功能），所以还是建议直接用下载压缩包的方法进行部署。先进<code>https://cloudreve.org/download.php</code>，下载安装包后传到 vps 的 <code>/root</code>下，然后解压到站点。</p>
<p>先新建一个站点，lnmp 一键包新建的时候注意这个站点的 rewrite 规则需要配置，使用thinkphp，宝塔可以建了再设置。假设我的站点位于<code>/home/cloudreve</code></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">unzip xxxx.zip -d /home/Cloudreve/</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>然后进入站点目录</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cd /home/Cloudreve/</span><br></pre></td></tr></tbody></table></figure>

<p>设置权限（文件夹用户必须是 www 否则打不开，runtime 和 public 不开写入权限就下不了东西），宝塔在站点根目录那里点一下，就可以进到 ui 界面里面调了</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">chown -R www:www *</span><br><span class="line">chmod -R 755 runtime public</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>之后导入目录里面的 mysql.sql 文件，需要先创建一个数据库，建议先新建一个叫 Cloudreve 的用户来创建数据库</p>
<p>然后导入</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">mysql -u zbttl -p Cloudreve &lt; /home/Cloudreve/mysql.sql</span><br></pre></td></tr></tbody></table></figure>

<p>输入密码即可导入成功。如果是宝塔面板，从 ui 界面新建数据库，然后按下管理，将 mysql.php 下到本地再拖到网页中即可自动导入。</p>
</li>
<li><p>编辑 <code>/home/Cloudreve/application/database_sample.php</code> 文件</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">nano /home/Cloudreve/application/database_sample.php</span><br></pre></td></tr></tbody></table></figure>

<p>更改数据名，用户名和密码。然后更改名字为 <code>database.php</code></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">mv ./database_sample.php ./database.php</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>最后访问站点，初始用户名：<code>admin@cloudreve.org</code>，初始密码：<code>admin</code>，后台URl：<code>http://你的域名/Admin</code>，即可使用。输入<code>你的域名/Cron</code>，若是显示几行代码，说明自启可配置</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">nano /etc/crontab</span><br><span class="line">#或者是 nano /var/spool/cron/root</span><br></pre></td></tr></tbody></table></figure>

<p>在最后一行输入</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">* * * * * curl http://你的域名/Cron</span><br></pre></td></tr></tbody></table></figure>

<p>如果是宝塔面板，在计划任务处添加任务即可。</p>
</li>
<li><p>另外注意几个坑：</p>
<ol>
<li>进去记得改帐号和密码</li>
<li>要离线下载需要先装 aria2 后端，前端 AriaNG 可以不装了。而且默认的目录也是错的，需要你自己去改。另外就算是管理员，一开始也只有 1g 空间也不能够离线下载，需要在后端增大空间，开放离线下载权限。</li>
</ol>
</li>
</ol>
<h4 id="rclone"><a href="#rclone" class="headerlink" title="rclone"></a>rclone</h4><p>参考文章：</p>
<ul>
<li><a href="https://p3terx.com/archives/rclone-installation-and-configuration-tutorial.html">Rclone 安装配置教程 - 连接 OneDrive 和 Google Drive</a></li>
<li><a href="https://p3terx.com/archives/linux-vps-uses-rclone-to-mount-network-drives-such-as-onedrive-and-google-drive.html">Rclone 使用教程 - 挂载 OneDrive、Google Drive 等网盘(Linux)</a></li>
<li><a href="https://p3terx.com/archives/rclone-advanced-user-manual-common-command-parameters.html">Rclone 进阶使用教程 - 常用命令参数详解</a></li>
</ul>
<p>详细过程不谈，这三篇文章讲的相对清楚了。</p>
<p>先按第一篇文章的方法在 windows 上获取一长串密钥通过密钥在 linux 上完成链接。</p>
<p>然后第二篇重点讲的是 rclone mount。</p>
<p>第三篇讲的是 rclone 的其他指令，比如 rclone copy，rclone move。</p>
<p>有一些小贴士：</p>
<ol>
<li><p>rclone mount 需要事先安装 fuse，往 mount 网盘的文件夹使用 copy、move 等指令其实和 rclone copy、move 的效果（起码速度是）差不多，不过 rclone 类指令可以在后台运行，后台运行时也可以通过 <code>-v</code> 参数获取当前速度和最后所用时间，比单纯的 copy 好用一些但指令也复杂。</p>
</li>
<li><p>不过使用 rclone move 要注意，文件是搬过去了，但是搬移的文件夹里面的子文件夹并不会自动删除，需要多带一个参数 <code>--delete-empty-src-dirs</code>。-v 是显示进度，嫌显示的不够多可以换成 -vv。默认 4 线程，经常断，可能是内存原因，保险一点，单线程，虽然慢，不会断。最后出来的参数类似：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">rclone copy -v /home/zbttl/aria2 zbttltest:pan --transfers=1 --delete-empty-src-dirs</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>不知道自己网盘里有啥？</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">rclone lsd [网盘名称]:/</span><br></pre></td></tr></tbody></table></figure>

<p>不知道自己网盘设置为啥名字了？</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">rclone config</span><br></pre></td></tr></tbody></table></figure>

<p>久不用了可能还要重新获取 token，用上面这个命令，选择 edit 响应的网盘，先是提示是否更改 client_id 和 client_secret，选择否（自建 api 的话才需要检查和修改），然后会弹出一次提示，选择「That’s OK」；然后就会提示「Already have a token - refresh?」，重新获取粘贴就好。</p>
</li>
<li><p>尽管挂载了，用 filebrowser 开进去看挂载网盘的文件夹还是空的；下载工具下载地址直接指向挂载文件夹会报错，因为缓存没那么大。还是老老实实下到其他地方再用命令转过去，或者用自动调用 rclone 的下载工具吧。</p>
</li>
<li><p>另外，想加速的话，还能通过<a href="https://p3terx.com/archives/rclone-connect-onedrive-with-selfbuilt-api.html">Rclone 使用自建 API 连接 OneDrive（Office 365 E5 自动续订）</a>自建 api 加速（虽然我实验了感觉效果不太好，也有可能是我之前用的是共用接口，后来改用私有接口的时候配置没更新好，总之我不太想再折腾了），以及加缓存（<code>--onedrive-chunk-size</code>，大部分加 100m 也就是 102400，但吃内存太大容易被杀）和加线程（<code>--transfers</code>，建议为 4 不稳定）。</p>
</li>
<li><p>copy 到 onedrive 的中文文件夹，需要给文件夹打单引号，比如 `zbttl:’下载文件集合’。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Network</category>
        <category>Downloadtools</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>rdp</tag>
        <tag>lnmp</tag>
        <tag>nginx</tag>
        <tag>docker</tag>
        <tag>rsshub</tag>
        <tag>filemanger</tag>
        <tag>aria2</tag>
        <tag>transmission</tag>
        <tag>bt</tag>
        <tag>vscoder</tag>
        <tag>emule</tag>
        <tag>vnc</tag>
        <tag>frp</tag>
        <tag>内网穿透</tag>
        <tag>cloudreve</tag>
        <tag>rclone</tag>
      </tags>
  </entry>
  <entry>
    <title>各平台字体美化指南</title>
    <url>/ge-ping-tai-zi-ti-mei-hua-zhi-nan/</url>
    <content><![CDATA[<p>注意：本文成文时间跨度长，错误多，仅供参考。</p>
<p>相关软件可通过<a href="https://1drv.ms/u/s!AoMoC9XTgpEsgpYF5k9TdBYxs1zx1A?e=OL9ZOK">我的网盘</a>下载到。</p>
<h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><h3 id="各平台字体都存在什么问题？"><a href="#各平台字体都存在什么问题？" class="headerlink" title="各平台字体都存在什么问题？"></a>各平台字体都存在什么问题？</h3><p>准确来说，有以下三大类问题：</p>
<ol>
<li>字库不全/字型不够美观</li>
<li>缺字重</li>
<li>渲染失真问题<h3 id="如何检测？"><a href="#如何检测？" class="headerlink" title="如何检测？"></a>如何检测？</h3></li>
<li>美观性肉眼应该就能识别。。。而字库全不全，找点大字库表看一下就知道了，比如安卓可以找酷安的某些帖子，下面这个就是：<a href="https://www.coolapk.com/feed/2276706?shareKey=YmJjYmU0NjBjMDVlNWNiNmI3ODQ~&amp;shareUid=421185&amp;shareFrom=com.coolapk.market_9.0.1">字体测试</a></li>
<li>看是不是缺字重的话，找以下两个网站：<ul>
<li><a href="http://zonovo.sinaapp.com/design/robotosc.html">字体字重测试 · Font Weight Test</a></li>
<li><a href="http://clagnut.com/sandbox/fontweight.html">Font-weight test case</a></li>
</ul>
</li>
<li>渲染问题就是肉眼来看了。。。一般渲染出问题，字体错位，失真，间隙较大，笔画重叠的问题，都是一眼就能看得出来的。<h3 id="具体来说？"><a href="#具体来说？" class="headerlink" title="具体来说？"></a>具体来说？</h3><h4 id="安卓"><a href="#安卓" class="headerlink" title="安卓"></a>安卓</h4>安卓的渲染一般问题不大，但是安卓 7.0 后默认字体思源黑体字库并不算太大（miui 的方正体我感觉更小），而字重上谷歌还偷懒了。。。。</li>
</ol>
<p>字库上：<br>只通过爱字体 + 华为预留接口更换了字体的 p9 在测试中显示如下：<br><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/iP6wfl6.png"><br>明显 nokia 特殊符号显示错误</p>
<p>而通过 substramtum 替换字体，结果又是这样的<br><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/WHjzeiS.png"><br>典型的字库不全</p>
<p>只有通过专用卡刷包（来自专门做字体的宁静之雨），刷出来的字体字库才差不多全了：<br><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Eftns0a.png"></p>
<p>字重上：<br>原版安卓字重：<br><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/sSpv6Cr.jpg"><br>这就是我们说安卓偷懒的地方：数字字重没问题，但是汉字字重却只有两个。</p>
<p>打过补丁的安卓字重：<br><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/FxL69ZL.png"><br>这就很明显，数字和汉字字重一致，起码有五个字重。</p>
<p>字重多和字重少实际浏览上的对比：<br><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Qyxj6Yk.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/xdQJEl1.png"><br>很明显，第一张图的汉字因为缺少粗体字重，直接回退到细一些的字重上了。</p>
<h4 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h4><p>linux 的问题主要出在渲染和字体不匹配上，特别是 centos7 下的默认字体，各种笔画错位间隔问题很严重。实际上，centos 生命周期内一共经历过几种渲染引擎，旧引擎，v38（之前美化界用的很多的 infinility） 和现在默认启用的 v40。v40 和 v38，孰优孰劣暂且不表，但是我感觉换个字体以后都差不多。。。</p>
<p>主要就是需要更换字体，尽管 linux 的渲染引擎也是基于 freetype 的，但是对 cleartype 字体以外的相性不错。</p>
<p>linux 原来的字体，字重和字库也不优秀，看以下两张图：<br><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/GJEgaG0.png"><br><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/XVQ8pEl.png"><br>第一张图明显缺字（左边一列都是框框）</p>
<p>第二张图只有 2 字重。</p>
<h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4><p>号称对 pc 字体优化最多（我看很多 linux 和 mac 信徒都这么说）实际上确实戏最多的平台。。。</p>
<p>本身渲染就分为两种，GDI 和 modern，也就是传统应用和 uwp / 浏览器，分别对应 cleartype 渲染和 directwrite 渲染。其次因为照顾低分屏，所以效果字体本身 hint 过。上面两个因素造成：</p>
<ul>
<li>直接替换没有处理过的其他 freetype 字体，效果其实会变得很难看。关掉 cleartype 的话效果好一点，但是字体间隔就会变得很奇怪</li>
<li>原来字体本身的锯齿和边缘失真很严重</li>
<li>缩放算法问题？最常见的 1080p 下 125% 缩放会引发一系列问题。</li>
</ul>
<p>其实 windows 本身字重和字库也还算凑合，特别是最新更新后又增加了三种字重。</p>
<h4 id="ios"><a href="#ios" class="headerlink" title="ios"></a>ios</h4><p>ios 默认的字库，渲染，字重都相当优秀，唯一不方便的也许就是如果想自己替换自己想要的字体字型会相当麻烦吧。。。（需要越狱什么的）</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/b2b0nuo.png"></p>
<p>五字重，一点不虚。</p>
<h2 id="那么应该怎么改进呢？"><a href="#那么应该怎么改进呢？" class="headerlink" title="那么应该怎么改进呢？"></a>那么应该怎么改进呢？</h2><h3 id="andriod"><a href="#andriod" class="headerlink" title="andriod"></a>andriod</h3><p>单纯想要美化字型可以换字体，但那样字重和字库可能会变差。</p>
<p>其次是通过 substramtum 安装相应的字体更换 apk。但是字重问题仍然没有得到解决。</p>
<p>这时就推荐安装 magisk 上面的 notoCJK 模块，补充相应字重。notoCJK 有两个分支，一个标准一个 lite，有时候其中一个装不上换另一个就好了。不过一个模块大小在 180m（lite）-220m 左右，注意留好空间。</p>
<p>或者可以直接安装宁静之雨做好的 magisk 模块，字重和字型都有保证。而且大小也没有这么大。</p>
<p>（19.8.7 更新）另外关于宁静之雨 magisk 包和 notoCJK，其实还有一些不完美之处。目前查到的某些 bug 或疑似 bug 的地方有这些：</p>
<ol>
<li>notoCJK 刷入后，许多地方字形不正常（比如少数派文章），比如「门」，使用了日系字体。（个人猜测就是 notoCJK 中包含了所有东方语言的字形，但适配不过关，导致某些场合错误使用另一种语言的字形）</li>
<li>思源黑体的英文做了窄化处理，作者本人给的解释是故意的因为桌面图标的便签通常都因为太宽而显示不全，但是，窄体我感觉太丑了。。。</li>
<li>substramtum  中有一个 googlesan 字体，数字效果不错（特别是右上角的时钟），但这是个英文字体包，也就是说，没有中文字体上的修改。</li>
<li>KFhimaji 字形（q 版字体）不错，但没有多字重（或者说字重太少）。</li>
</ol>
<p>上述问题部分是有解决方法的，2 和 3 综合起来，可以先刷入思源黑体的包，再用 substramtum 启用 googlesan 字体，因为是英文字体，所以思源黑体过窄的问题解决了，googlesan 没有中文字形的问题也解决了。之前我使用的方案是 notoCJK + substramtum ，但 notoCJK 的字形问题仍未解决。而相对完美的字体，目前有筑紫系列字体等。</p>
<h3 id="linux-1"><a href="#linux-1" class="headerlink" title="linux"></a>linux</h3><p>换字体。常常会更换为微软雅黑，思源黑体或者文泉逸黑体。 </p>
<h3 id="windows-1"><a href="#windows-1" class="headerlink" title="windows"></a>windows</h3><p>最麻烦的一个。。。在 windows 下，不止要考虑字体的替换问题，还要考虑渲染问题。下面这些乱七八糟的内容，适配于 1080p 125% 缩放 24 寸屏，对于其他情况可能会有一些出入（比如高分屏下里面很多内容就变成了 p 话）。</p>
<h4 id="两种字体替换方法"><a href="#两种字体替换方法" class="headerlink" title="两种字体替换方法"></a>两种字体替换方法</h4><p>热替换：无需覆盖原有字体，只需要安装所需字体然后通过相应工具把原有字体替换显示为所需字体。无需重新启动，安全性高。常用的工具是 noMeiryoUI 和 mactype。</p>
<p>硬替换：将系统原有的字体直接替换掉。需要在系统不运行的情况下进行操作，可以在 pe 、recovery mode 中实施替换，或者使用相应工具：<a href="http://www.fishlee.net/soft/SysFontReplacer/#C-52">系统字体替换工具</a>。</p>
<h4 id="关于-noMeiryoUI-和-mactype-的区别"><a href="#关于-noMeiryoUI-和-mactype-的区别" class="headerlink" title="关于 noMeiryoUI 和 mactype 的区别"></a>关于 noMeiryoUI 和 mactype 的区别</h4><p>mactype 拥有热替换和渲染两个功能。而 noMeiryoUI  只拥有热替换功能，而且只能替换 windows 默认系统字体（即微软雅黑）。</p>
<p>但相对的 noMeiryoUI 不需要编辑复杂的配置文件。</p>
<p>在生效方式上，mactype 支持注册表加载、服务加载和托盘加载，决定了 mactype 能在系统启动前就完成加载，并<strong>有希望</strong>作用于 modern 应用，而 noMeiryoUI 就不行；不仅如此，noMeiryoUI 加载时间在桌面加载之后，所以刚启动以后桌面的字体会呈现为宋体，很难看，点一下或者刷新一下才会还原为 noMeiryoUI  指定的字体，特别是替换的字体并非为 windows 默认 cleartype 优化时（类似于思源黑体等）。</p>
<p>当然 mactype 也可以不使用本身的热替换功能，只使用本身的渲染功能，就可以可以搭配硬替换，甚至搭配 noMeiryoUI 的热替换使用（扭曲警告！）。但 mactype 的配置文件本身就是配套的，和其他软件的适配性当然就没有用自己本身的热替换功能高。but mactype 本身的生效方式决定着容易出 bug（比如 mactype <a href="#%E5%85%B3%E4%BA%8E%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%EF%BC%88bug%EF%BC%89">配置文件</a>一节中的应用就不能使用 mactype 的热替换否则会乱码），所以和 noMeiryoUI 配套使用也不是一点优势都没有。</p>
<h4 id="关于字体与渲染的适配性问题"><a href="#关于字体与渲染的适配性问题" class="headerlink" title="关于字体与渲染的适配性问题"></a>关于字体与渲染的适配性问题</h4><p>windows 下默认渲染方法为 cleartype。在不改变渲染方法的情况下，最好使用为 cleartype 开发与优化过的字体。在下文<a href="#%E9%80%9A%E5%B8%B8%E7%94%A8%E4%BA%8E%E6%9B%BF%E6%8D%A2%E7%9A%84%E5%AD%97%E4%BD%93">非 mactype 方法的通常用于替换的字体一节</a>中，介绍了几个在 cleartype 下表现不错的字体。当然大家也可以自行使用 noMeiryoUI，未优化过的字体在 cleartype 下可能会出现锯齿、错位、笔画粘连等问题。另外，不要盲目使用硬替换去测试这些字体！很可能会出现缺字甚至是卡开机等严重问题。比如宋体，在系统里面是叫做 simsun.ttc，这个字体不能随意替换，如果用思源宋体直接改名替换的话。。。就会开机蓝屏，焊死车门。</p>
<p>通过 mactype 可以使用类 freetype 的渲染方式。mactype 通过合理的配置，既能美化 cleartype 下的字体，也能使苹方、思源黑体等 freetype 字体在 windows 下有较好的显示效果。但 mactype 的渲染也是个双刃剑，尤其是在没有合理的调整配置文件的情况下，容易造成字体排列错误，拥挤的问题。另外和热替换中两个软件在 modern 应用中表现不佳类似，mactype 在 modern 应用下也需要特殊配置才能生效；另外还有浏览器因为 directwrite 问题也没法直接生效（只换了字体，渲染上不去）。</p>
<p>当然还有人会问关闭 cleartype 呢？并不推荐。文字的间距又会变得非常诡异。</p>
<h4 id="mactype"><a href="#mactype" class="headerlink" title="mactype"></a>mactype</h4><p>mactype 的使用方法，我就不详细展开了，关键在于，选哪种版本，要不要打补丁？选那种字体？用哪种配置文件？</p>
<h5 id="mactype-版本选择"><a href="#mactype-版本选择" class="headerlink" title="mactype 版本选择"></a>mactype 版本选择</h5><ol>
<li>最新版 2017 版。无需任何操作使用后即可正常进入 windows 系统，但是 runtime 应用无法正常渲染，无论使用何种加载方式和何种补丁。</li>
<li><strong>（21.1.11 更新）</strong><a href="https://github.com/snowie2000/mactype/releases/tag/2019.1-beta6">2019.1-beta6</a> + 日本补丁。推荐版本。</li>
<li>2016 09月版本，推荐版本。通过某些操作可以正常使用，转下方 <a href="#%E5%85%B3%E4%BA%8E-1803-%E7%89%88%E6%9C%AC%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF">1803 正确操作姿势</a>。</li>
<li>台湾人修改版本「<a href="http://sky.candy.moe/tag/mactype/">糖果の無人小島</a>」，傻瓜版本，按照提示一路做下去就可以，经试验渲染全部成功，但是只能使用其设置的四种字体，并且 bat 文件是 big-5 编码的，需要复制出来用 word 进行繁简转换后复制回去，更改编码才可正常打开。最重要的是，<strong>卸载后字体会变成某个繁体字体，目前不知道恢复方法，所以该版本慎用。</strong></li>
</ol>
<h5 id="是否要用日本的-mactype-补丁？"><a href="#是否要用日本的-mactype-补丁？" class="headerlink" title="是否要用日本的 mactype 补丁？"></a>是否要用日本的 mactype 补丁？</h5><p>使用方法见  <a href="#%E5%85%B3%E4%BA%8E-1803-%E7%89%88%E6%9C%AC%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF">1803 正确操作姿势</a>。</p>
<p><strong>仍推荐使用。</strong>1607 出的时候，不仅 mactype 运行会有几率无法进入系统，而且无法渲染 runtime（例如 modern 类）应用，然后日本的一波开发者就出了相应的<a href="https://silight.hatenablog.jp/entry/MacTypePatch">补丁</a>。<del>但是时过境迁，在目前的 1803 系统上，经过我实验新版的 mactype 已经可以正常渲染 runtime 应用了。但是原来的 mactype 还需要修复才能正常使用，需要把日本补丁里面的两个 easyhook.dll 放到 mactype 根目录内即可。</del></p>
<p><strong>（18.05.24 更新）</strong> 新版 mactype 无法完全渲染 modern 应用，请使用 2016 版。</p>
<p><strong>（20.1.11 更新）</strong> 后续版本，直装已支持渲染 modern 应用，但日本 mactype 补丁扔能有效抑制字体边缘锯齿，所以推荐使用。</p>
<h5 id="关于-runtime-应用（或者称为-modern-应用，类似于开始菜单，设置等）没有正确渲染-替换字体的问题"><a href="#关于-runtime-应用（或者称为-modern-应用，类似于开始菜单，设置等）没有正确渲染-替换字体的问题" class="headerlink" title="关于 runtime 应用（或者称为 modern 应用，类似于开始菜单，设置等）没有正确渲染 / 替换字体的问题"></a>关于 runtime 应用（或者称为 modern 应用，类似于开始菜单，设置等）没有正确渲染 / 替换字体的问题</h5><ol>
<li>上面说的，mactype 的补丁。</li>
<li>使用<a href="http://tieba.baidu.com/p/4040192792?pn=3#95549377760l">脚本</a> hack + 硬替换字体 + mactype <del>（1803 失效）</del>（并不是失效，但是 hack 是解决高分屏下 directwrite 渲染毛刺的问题，而硬替换字体因为某些原因不能直接作用于 directwrite 渲染应用，需要配合 mactype，那还不如直接用 mactype）</li>
<li><del>硬替换字体+</del> 使用注册表加载。</li>
</ol>
<h5 id="关于字体"><a href="#关于字体" class="headerlink" title="关于字体"></a>关于字体</h5><ol>
<li><p>mactype 有其专用的 lof 字体替换集，其中就有安装说明，包括硬替换和热替换，说一下热替换（非使用 install.bat 自动安装）的安装方法：</p>
<ol>
<li>进入字体包，如果是第一次安装 lof 热替换字体，先安装三个 _XXX 开头的字体。</li>
<li>然后安装除了 simsun.ttc 以外的字体</li>
<li>打开 mactype 找到 hotswift 文件夹下相应的配置文件，开启即可</li>
</ol>
</li>
<li><p>其他有配置文件的热替换字体，只找到了思源黑体，确定可用。</p>
</li>
<li><p>苹方，非 hint 版的微软雅黑，18 秋季微软新字体有相应的硬替换包，苹方效果最不错。</p>
</li>
</ol>
<h5 id="关于配置文件（bug）"><a href="#关于配置文件（bug）" class="headerlink" title="关于配置文件（bug）"></a>关于配置文件（bug）</h5><p>如果原来配置文件发现字体渲染过重导致不清楚，可以降低粗细程度和增加对比度。但是！调整配置文件的时候注意调整完以后另存为，然后对比原来调整前的文件，把少了的东西加回进去！因为利用 gui 调整的话会少掉好多行替换字体的设置，会导致某些界面拥挤，以及某些软件字体无法正常替换变成很丑的宋体。</p>
<p>另外，目前有这么几样软件是不能进行替换的，需要排除：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">;拥挤到位置混乱</span><br><span class="line">;EarTrumpet.exe ;2004不再有问题</span><br><span class="line">OTOOLS.exe</span><br><span class="line">;乱码</span><br><span class="line">;fdm.exe ;2004不再有问题</span><br><span class="line">;拥挤，虚化</span><br><span class="line">GameOverlayUI.exe</span><br><span class="line">;无法打开 osd</span><br><span class="line">PotPlayerMini64.exe</span><br><span class="line">;无法进行字体替换</span><br><span class="line">ui32.exe</span><br><span class="line">;各类 java 系应用，比如 ideaitellij 等</span><br><span class="line">;许多游戏，开启 mactype 会导致性能问题，如战地 1</span><br></pre></td></tr></tbody></table></figure>

<p>加在配置文件中的应用，不会执行热替换但仍然会被渲染，所以也没丑到没法看的程度。</p>
<p>另外，慎重更改配置文件里面的优化方案相关项，可能会导致英文字符间隔变得诡异。</p>
<h5 id="白名单模式"><a href="#白名单模式" class="headerlink" title="白名单模式"></a>白名单模式</h5><p>其实 mactype 也可以使用白名单模式，对部分应用进行渲染，对系统的影响应该小很多。在字体配置文件（注意，是单独字体配置文件而不是总配置文件 mactype.ini）相应位置添加：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[General]</span><br><span class="line">UseInclude=1</span><br><span class="line">[IncludeModule]</span><br><span class="line">xxx.exe</span><br></pre></td></tr></tbody></table></figure>

<p>目前能遇到的，明确的用途：文明 5 的字体替换（默认字体瞎眼）。</p>
<h5 id="浏览器配置方案"><a href="#浏览器配置方案" class="headerlink" title="浏览器配置方案"></a>浏览器配置方案</h5><p>浏览器开启 directwrite 的场合，mactype 只会替换字体而不会渲染字体，可读性大幅下降。目前只有 centbrowser 一个浏览器能关 directwrite 了：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">chrome://flags/#disable-direct-write</span><br></pre></td></tr></tbody></table></figure>

<p>但现在关闭后，还需要一些操作：</p>
<ol>
<li><p>修改字体，使用 stylish</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">xxxxxxxxxx&nbsp;*{font-family:"字体名字";}</span><br></pre></td></tr></tbody></table></figure>

<p>注意字体名字不要搞错，必要时候进入 windows/fonts 目录下，选择相应字体，点击路径名栏即可复制。</p>
</li>
<li><p><strong>（18.6.20更新）</strong> 上面这种更换方法遇到繁体会乱码。需要配合插件。根据<a href="https://www.zhihu.com/question/20365811">Chrome 设置什么字体较好？</a>所说，直接安装<a href="https://chrome.google.com/webstore/detail/no-per-script-font/lndmkajeoopejggihiomoaepinlhblmm">该拓展</a>实测有效。另外，chrome 的设置界面字体也会因为没有被正常替换变成宋体，有两种方法，一种是在内置的字体设置里面调整为热替换的字体（只需调整第一项），比如：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210111190225.png"></p>
<p><strong>副作用就是原来那些字体设置是“自定义”的，我也不知道系统默认那些是啥字体，但兼容性不错，调整后就没有办法调回自定义了</strong>；另一种就是使用<a href="https://chrome.google.com/webstore/detail/advanced-font-settings/caclkomlalccbpcdllchkeecicepbmbm">插件</a>，那个插件会自动替代原来的原来的字体设置页面，要是发现不对卸掉那个插件就会还原设置了。</p>
</li>
</ol>
<p>chrome 中，苹方，微软雅黑，lof 热替换系列，思源都可以正常渲染（stylish 插件），但是冬青黑，大日本网屏，方正黑体渲染失败。</p>
<h5 id="其他已知-bug"><a href="#其他已知-bug" class="headerlink" title="其他已知 bug"></a>其他已知 bug</h5><p>贴吧中反应 1803 可能引起卡顿，进配置管理选择你现在所用的配置文件，关闭自动加载到子进程即可。</p>
<p>另外加载方式，如果用托盘加载就能成功生效，就不要使用注册表加载。 1803 使用服务加载会开不了机。理论上使用 mactype 托盘加载最为安全，但是某些时候 directwrite 渲染（modern 应用）会出错。</p>
<p>如果发现使用注册表加载或者服务加载进不了系统，在系统加载界面强制关机三次或者是用 pe bootice输入参数，进入安全模式更改加载方式即可。</p>
<p><strong>（21.1.10 更新）</strong>据 otools 频道的消息：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210110054145.png"></p>
<h5 id="关于-1803-版本推荐使用姿势"><a href="#关于-1803-版本推荐使用姿势" class="headerlink" title="关于 1803 版本推荐使用姿势"></a>关于 1803 版本推荐使用姿势</h5><ol>
<li><p>使用该<a href="http://tieba.baidu.com/p/5454251031">帖子</a>所使用方案</p>
<blockquote>
<p>安装流程：首先默认安装MT20160904，其次把CTP170307里面的文件覆盖到MT目录，最后按照MTP1.26里面的说明安装（不会看MTP里面英文/日文说明的请机翻或是寻求他人帮助，反正你跟帖问这个问题我也不会回复你）。</p>
</blockquote>
<p>安装 2016 版本后，打开 MT 根目录（一般是 <code>C:\Program Files\MacType</code>），**先放入官方补丁（6 个文件）再放入日本补丁（三个文件，<code>EasyHK32.dll</code> 和 <code>EasyHK64.dll</code>，和「win8 or later」这个文件夹中的 UserParams.ini），最后在 <code>C:/windows/system32</code> 放入 <code>EasyHK64.dll</code>，在 <code>C:/windows/syswow64</code> 中放入 <code>EasyHK32.dll</code>**。</p>
</li>
<li><p>安装热替换字体。</p>
</li>
<li><p>如果使用注册表加载，加载完即可使用。如果使用托盘加载，modern 应用可能不正常，需要硬替换微软雅黑字体，这里我选择用苹方字体进行替换。</p>
</li>
<li><p>chorme 禁用 directwrite（chrome://flags），否则只改字体不改渲染。如需要其他字体，可安装 stylish。</p>
</li>
<li><p><strong>（6 月 12 日更新）</strong> 热替换字体可能会导致很多应用字体拥挤，比如 bandzip，实测用硬替换即可解决。另外，尽管使用的是硬替换，但是还是需要使用热替换的配置才能正常显示替换的字体，原因未知。</p>
</li>
<li><p><strong>（19.2.28）</strong> 去年 mactype 飞雪 2000 的 <a href="https://github.com/snowie2000/mactype/releases">github</a> 推送了几个测试版，我试了一下，不用打补丁也能正常渲染 gdi 和 modern 了，但是效果太寒蝉了。。。一大堆锯齿，装回 2016 锯齿明显少了很多。另外 fdm 之类的应用仍然会乱码，应该是 XINTEL 字体的问题，和软件无关。</p>
</li>
</ol>
<h5 id="目前最新版-mactype-直装热替换注册表加载情况（19-9-22）"><a href="#目前最新版-mactype-直装热替换注册表加载情况（19-9-22）" class="headerlink" title="目前最新版 mactype 直装热替换注册表加载情况（19.9.22）"></a>目前最新版 mactype 直装热替换注册表加载情况（19.9.22）</h5><p>系统：win10 1903</p>
<p>生效：应用内，通知菜单</p>
<p>部分生效（字体未替换）：桌面，右键，资源管理器（需要开机后重新加载）</p>
<p>完全不生效：开始菜单，对话框，开机界面，任务管理器</p>
<p>生效异常：设置内（字体锯齿感人），java 系应用（乱码）</p>
<p>总之看起来的情况就是刚开机就开起来的应用新版 mactype 都没有办法替换。后面显示或弹出的就可以。</p>
<p>建议：不要使用全局热替换。可以用冷替换（冷替换只负责渲染） + hack 字体 + 应用内改字体（浏览器），坏处是游戏什么的就没法搞；或者配合 nomeiryo 伪装全局热替换（但没有字重）。真的要使用热替换请换用旧版或者部分应用热替换。另外，不要浏览器又改字体又开 directwrite，会变得很丑。。。</p>
<p><strong>（10.28 更新）</strong> bug 还是不少。。。windows 1903 下如果使用白名单最新版 19.1 会间歇性卡死，使用 18 最后一个版本没事。而全局冷替换或者不替换加渲染，在 chrome 下取消 directwrite 后字体间距会变得非常诡异（比如说<a href="https://www.hostloc.com/thread-450814-2-1.html">这个页面</a>，实际上热替换也会让字体间距变得很诡异，不过对象不同）；而热替换字体间距好不少，但效果其实也不理想，偶尔还会出现乱码（使用状态栏模式）。而且热替换下一定要确定浏览器正在使用的是微软黑体 + 宋体。另外浏览器的字体拓展使用后也对 mactype 没啥加成，总之都要在排版间隔错误 / 字体发虚中选一瓶毒药喝掉，emmm。。。</p>
<p>冷替换：<img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/oUQdOYv.png"></p>
<p>热替换：<img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/NM7g1Ve.png"></p>
<h5 id="21-1-11-2004-使用情况更新"><a href="#21-1-11-2004-使用情况更新" class="headerlink" title="21.1.11 2004 使用情况更新"></a>21.1.11 2004 使用情况更新</h5><ol>
<li><p>使用 1609 mactype + 双补丁，热替换 XINTEL，很神奇的许多应用都不再乱码了，比如 fdm，java 类应用（idea itellij 等）。但 java 类应用字体间隔出问题的故障还在。</p>
</li>
<li><p>19 年我大吐苦水的锯齿问题，打日本补丁可解。</p>
</li>
<li><p>最新版 + 日本补丁效果和 1609 + 双补丁效果差不多。</p>
<p>1609：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/vmware_clemYxzBiN.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/vmware_JrGV3MT10A.png"></p>
<p>2019.1-beta6：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/vmware_saVNp23Rij.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/vmware_irlLMnwdsZ.png"></p>
</li>
</ol>
<h4 id="非-mactype-方法"><a href="#非-mactype-方法" class="headerlink" title="非 mactype 方法"></a>非 mactype 方法</h4><h5 id="几种硬替换方法-（21-1-10-更新）"><a href="#几种硬替换方法-（21-1-10-更新）" class="headerlink" title="几种硬替换方法 （21.1.10 更新）"></a>几种硬替换方法 <strong>（21.1.10 更新）</strong></h5><p>注意：必须使用工具而不能双击打开直接安装。硬替换的字体直接安装的话，会安装到用户的相应目录而不是系统字体目录 <code>C:/windows/fonts</code> 中，导致字体只在 modern 应用中生效，比如：</p>
<p>替换前：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Windows%2010%20x64-2021-01-10-01-50-32.png"></p>
<p>替换后：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Windows%2010%20x64-2021-01-10-01-44-24.png"></p>
<p>当然有人会想到：那右键「为所有用户安装」呢？</p>
<p>那就会被重命名为 [ 字体名称-0.ttf ]，完全不生效。下面这几张图，就是我把新版微软雅黑在旧版雅黑存在的情况下重复安装和「为所有用户安装」后设置字体界面显示的效果：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210110055129.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210110055310.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210110055347.png"></p>
<p>更要命的是，如果把宋体也这么安装，有可能会造成使用宋体 ui 界面的应用卡死打不开。所以别这么干，使用下面的方法。</p>
<p>另外替换前注意字体的名字，需要和 <code>C:/windows/fonts</code> 中需要替换的字体使用同样的文件名。</p>
<ol>
<li><p><a href="https://www.fishlee.net/soft/SysFontReplacer/">系统字体替换工具 - 鱼の后花园</a>。该软件替换前会自动备份相应字体，所以不用额外备份了。打开后将所有字体拖入，如果是未安装的字体会提示，那些字体可以直接安装；其他字体点击「开始执行任务」装入。这个软件替换少量字体时很好用，但如果替换字体数量一多，或者后台运行的程序比较多，就可能有字体替换失败，所以建议重启后再使用。</p>
</li>
<li><p>利用 windows 自带的 recovery 界面。先把字体文件夹起一个方便记忆的名字，放在 c 盘根目录中（方便敲命令）。另外在 <code>C:/windows/fonts</code> 中，找到并备份要替换的字体文件。在设置 -&gt; 更新与安全 -&gt; 恢复 -&gt; 高级启动，点击立即重新启动。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210110072521.png"></p>
<ol start="3">
<li><p>接下来会看到 win10 启动菜单一样的界面，点疑难解答 -&gt; 高级选项 -&gt; 命令提示符。</p>
</li>
<li><p>然后选择账户，输入密码，进入 recovery 界面。其实这本质上也是 pe，所以此时的 c 盘是 pe 的盘符。你需要用 dir 命令找到原本系统 c 盘的盘符。一般来说，假设我的电脑有两个盘，那么进入 recovery mode 后，我原来的 c 盘在此时应该被设置为 e 盘。那么</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">dir e：</span><br></pre></td></tr></tbody></table></figure>

<p>如果输出的文件看上去确实是 c 盘的文件，那么：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">copy e:/[字体文件夹]/* e:/windows/fonts/</span><br></pre></td></tr></tbody></table></figure>

<p>弹出替换提示。</p>
<p>按 A，替换完重启即可。</p>
</li>
</ol>
</li>
<li><p>使用 windows pe。基本步骤和 2 差不多，好处是不用敲命令，坏处是有个 u 盘。</p>
</li>
</ol>
<h5 id="通常用于替换的字体"><a href="#通常用于替换的字体" class="headerlink" title="通常用于替换的字体"></a>通常用于替换的字体</h5><p>目前 windows 1909 的微软雅黑版本为 light 字重 6.23，regular 和 bold 6.25。宋体新宋体版本为 5.16。</p>
<ol>
<li><p>2017 微软雅黑。版本号为 11.0.0。中文字型有点像更纱黑体。效果如图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210110094113.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210110093415.png"></p>
</li>
<li><p>新版微软雅黑 <a href="https://github.com/goldkeyber112/Noble-Scarlet-mod">Noble Scarlet</a> 带宋体。版本号全为 7.01。效果如图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210110064943.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210110065036.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210110065204.png"></p>
</li>
<li><p>GaspHack 处理过的字体，所有字体版本号不变。效果见下文。</p>
</li>
<li><p>mactype  包中的宋体。效果见下文。</p>
</li>
</ol>
<h5 id="关于-GaspHack-补丁使用方法和效果"><a href="#关于-GaspHack-补丁使用方法和效果" class="headerlink" title="关于 GaspHack 补丁使用方法和效果"></a>关于 GaspHack 补丁使用方法和效果</h5><p>解压后，运行 <code>GaspHack_v2_MOD.bat</code>。根据提示按下回车后，待程序运行完，在其运行目录下 <code>workingDir/output</code> 文件夹下放着处理过的字体；<code>workingDir/output</code> 放着处理过的字体处理前的备份。因为 GaspHack 对大部分非系统原生字体无效（<del>非系统原生字体本来就没有针对 windows 系统 hinted，自然不会生效</del>），所以，有三种替换方法：</p>
<ol>
<li>只替换微软雅黑。</li>
<li>替换需要替换的字体。</li>
<li>（推荐）替换所有<strong>原生</strong>字体（但不包括宋体）。</li>
</ol>
<p>如何选择？看测试效果：</p>
<p>测试平台：1903 预览版</p>
<p>使用前，字体毛刺较多：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/xMv3u8t.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/yAfx9w5.png"></p>
<p>使用后，字体边缘的毛刺和失真情况得到大大改善：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/fi5yG27.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/1fusTBl.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/LXWklcA.png"></p>
<p>对大部分应用有效，但是也有副作用：有的旧应用字体会变得扭曲（该文章里面用的字体硬替换软件就是其中一个，是宋体的原因，所以建议不要替换宋体）。</p>
<p>另外，windows 的两种新微软雅黑<strong>（17 版很像更纱黑体，但如果拿更纱黑体直接硬替换会炸，听说网上有成功案例，方法未知）</strong>，未 hack 前字体边缘表现就已经比较好了（不过感觉没有 hack 后好，锯齿比较大），hack 后反而感觉有些奇怪。。。</p>
<p>直接使用 17 新微软雅黑：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/AFy8MdB.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/QvAHerE.png"></p>
<p>hack 后：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/eqPKuTE.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/QE1PK4B.png"></p>
<p>如果只替换原版雅黑，并不替换其他字体：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/7scUUpC.png"></p>
<p>125% 大小下，不忽略 dpi 感觉没问题。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/traWPiH.png"></p>
<p>一忽略 dpi 就炸了，字体锯齿立即浮现出来（注意那个 finalspeed）。</p>
<p>如果是所有字体（除了 simsun.ttc）全部打补丁的话：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Kipnms9.png"></p>
<p>海星。</p>
<p><del>我查了一下，微软的默认英文字体是 segoui。然而我把带这串英文的字体全部打了补丁，发现没有用。估计可能还有另外的字体要打补丁，想想算了，全部打了得了（除了那两个宋体）。</del></p>
<p>如果要选择性替换需要替换的字体：目前已经确定需要 hack 替换的字体，除了微软雅黑，还有以下这些（并不全，仍待实验）：</p>
<ul>
<li><del>times.ttf</del> 和 arial.ttf，作用就是解决上面划掉内容的问题。</li>
<li>segoui.ttf，解决 windows 设置里面英文字体的锯齿问题。</li>
<li>consola.ttf，某些网站和 typora 的编程字体。</li>
</ul>
<p>只替换雅黑：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/JlWQTJ0.png"></p>
<p>替换后：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/rrUpaCN.png"></p>
<p>至于宋体，可以用 mactype 集成包里面热替换字体里面带有的 simsun.ttc 替换，效果看起来可以。（目前看起来效果变差的就只有网易云，用瞎眼宋体混合雅黑，替换了以后字体变得更虚了）。</p>
<p>替换前：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Af3fxGI.png"></p>
<p>替换后：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/dS77IkI.png"></p>
<p>不过看起来问题还是不少。图省事仍然建议对系统默认的所有字体打上补丁并替换。</p>
<p><strong>如果是替换所有字体的，建议在刚刚重装的系统上就运行 GsapHack 给所有字体打好补丁备用，或者用虚拟机在全新安装的系统上打补丁后把打好补丁的字体提取出来。</strong>因为我现在并不知道 GsapHack 如何判断哪些字体需要打补丁，看代码只知道他忽略了那几个表情字体（如 weddings.ttf）。在安装了两款新字体，分别是 opposans 和 Cascadia 的电脑上运行本程序发现 Cascadia 并没有被提取出来，但 opposans 被提取出来并进行了处理（实际上这两个字体都不需要取消 hint）。目前看来只有原生系统中自带的除了宋体以外的字体需要 hack。</p>
<p>不过，有个问题避免不了，修复系统的 <code>sfc /scnanow</code> 命令会将替换的字体识别成系统错误，运行后需要重新替换字体。</p>
<h5 id="（21-2-4-更新）更纱黑体-nohinted-版"><a href="#（21-2-4-更新）更纱黑体-nohinted-版" class="headerlink" title="（21.2.4 更新）更纱黑体 nohinted 版"></a><strong>（21.2.4 更新）</strong>更纱黑体 nohinted 版</h5><p>之前我对更纱黑体用 GaspHack 发现没效果，于是得出了大部分第三方字体都不带 hinted 的推断。</p>
<p>结果这两天更纱更新了 nohinted 版，我试了一下，效果不错，看来只是 GaspHack 原理上的问题？</p>
<p>更纱原版：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E6%9B%B4%E7%BA%B1%E9%BB%91%E4%BD%93%E6%99%AE%E9%80%9A%E7%89%88.png"></p>
<p>更纱 nohinted 版：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E6%9B%B4%E7%BA%B1%E9%BB%91%E4%BD%93nohint.png"></p>
<p>文泉驿微米黑：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E6%96%B9%E6%AD%A3.png"></p>
<h5 id="关于浏览器字体更换"><a href="#关于浏览器字体更换" class="headerlink" title="关于浏览器字体更换"></a>关于浏览器字体更换</h5><p>先说结论：推荐 chrome（设置好字体） + 黑名单大佬方案 + stylebot，对付实在不行的顽固页面上白名单推荐。</p>
<h6 id="默认设置：chrome"><a href="#默认设置：chrome" class="headerlink" title="默认设置：chrome"></a>默认设置：chrome</h6><p><strong>测试正常：168 部分正常：2</strong></p>
<p>chrome 默认一共可以调整 4 个字形，默认 + Serif + Sans-serif + mono，一般我们习惯日用无衬线的黑体，所以默认和 san-serif 一般使用同样的微软雅黑。而 serif 就有很多种选择了，比如 hack 的宋体等等。而 mono 则选择编程字体，比如 consola。虽然本身默认写着自定义无法猜测本身是什么字体，估计默认和 san-serif 原本就是微软雅黑，而 mono 则是宋体，serif 就不知道了，可以考虑用方正的屏显雅宋简体<del>（我都不知道哪些网页会用衬线字体的）</del>（某些新闻网站，比如<a href="cn.reuters.com">路透中文网</a>，需要科学上网）。</p>
<p>同时 chrome 中也有名为 Advanced Font Settings 的拓展，功能便是指定相关语言编码的字体，比如中文，日语等，避免因为没有指定而自行 fallback 导致字体错误（有一种说法，chrome 默认设置中设置的字体实际上是英文字体，并没有对其他文字进行适配，但由于来源比较旧，所以我不做采信）。比如<a href="https://www.jianshu.com/p/10bf0f3ae792">该文章</a>，推荐使用 Verdana 做默认 + 无衬线的字体，Georgia 做衬线字体，前者微软自带，后者需要安装。不过从效果上看，看不出什么来（并且有些网页将字体写死在 css 中的，就没有用，比如百度百科，强制等线，难看的要命），并且如果使用该拓展汉语系的字体默认就会全部设置为宋体，如果没有耐心慢慢调校，不如不用这个拓展。</p>
<p>另外，还有一点比较有意思的：浏览器默认设置的原理，似乎是——在浏览器内有一个名单，定义了哪几种字体属于衬线，哪几种属于无衬线，哪几种属于等宽。然后再去替换相应的字体。为什么这么说呢，因为浏览器设置配合后面的 css 替换，在某些情况先会产生比较微妙的改变——比如下面 css 强制替换中的「全局修改字体」脚本，使用后会把页面中的所有英文字体变为等宽字体（consola），而后又被浏览器替换成设置好的等宽字体（比如等距更纱黑体）。</p>
<h6 id="默认设置：firefox"><a href="#默认设置：firefox" class="headerlink" title="默认设置：firefox"></a>默认设置：firefox</h6><p>**（强制模式）测试正常：134578 部分正常：2 **</p>
<p>firefox 乍一看比 chrome 要灵活多了。可以根据多种语言选择字体（即刚刚上面说的那个 chrome 插件的功能），亦多了一个「允许页面选择自己的字体代替您的上述选择」，其实就是接下来的这个「强制替换」功能的削弱版（上面的强制模式指的就是这个东西）。底下还有个「老式编码回退」的功能，这我就不知道是做什么用的了。很丰富吧！但其实有些问题比 chrome 严重多了。</p>
<p>同样是四种字体，比例字体，衬线字体，无衬线字体，等宽字体。对应 chrome 的默认 + Serif + Sans-serif + mono，而且和 chrome 相比，标出了默认字体是什么，不用我去猜了。不过这里就出现第一个问题了：比例字体里面只能选衬线字体 / 无衬线字体，而不是像 chrome 里面任选。想想也可以理解，一般默认字体和无衬线那个应该是相同的。<del>不过在其后出现的一个问题我怀疑就和这里有关。</del></p>
<p>不过优点也是有。除了 6 没有白名单通不过和 2 没有抗锯齿不好看以外，其他测试都通过了，甚至 5 百度百科里面底部那几个带图片的页面里面的字体都更改成功了（下面其他修改方法中，成功率很低）。</p>
<p>接下来列出问题：</p>
<ol>
<li>锯齿不能忍。 firefox 界面的锯齿肉眼可见的多，特别是测试 2 的页面。甚至连切换标签页都能明显的感到锯齿在变动。firefox 旧版曾经有一个插件叫做  <a href="https://addons.mozilla.org/zh-tw/firefox/addon/anti-aliasing-tuner/">Anti-Aliasing Tuner</a>，然而 57 版本后已不可用。</li>
<li><del>等宽字体的中文回退。出现在知乎的代码块中，虽然 chrome 中代码块的回退也不正常，但 consola 的回退起码到了能看的微软雅黑上，而 firefox 代码块中的中文明显是丑的不行的宋体。</del>（莫名其妙变得非常正常）</li>
<li>「允许页面选择自己的字体代替您的上述选择」功能不允许设置白名单。某些页面的图标和 emoji 就会出现错误显示的问题。</li>
<li><del>metacritic 简介栏原来巨丑无比的字体正常了，可是评论区又不太正常了。</del>（方正屏显雅宋全锅）</li>
</ol>
<h6 id="css-强制替换（白名单）"><a href="#css-强制替换（白名单）" class="headerlink" title="css 强制替换（白名单）"></a>css 强制替换（白名单）</h6><p><strong>（开启了特殊符号白名单并使用了 important 标志）测试成功：4567 部分正常：2</strong></p>
<p>默认设置其实有一个比较严重的问题：适应性较差。很多时候网页通过 css 规定了字体，如果提前规定字体的话 chrome 是不会进行替换的，偏偏有些网站爱用宋体或者其他对较低分辨率不友好的字体，看起来就很丑了。所以通过 css 规则对页面中所有字体进行替换就能达到相应效果。不过！正因为是全局替换，所以要解决两个问题</p>
<ul>
<li>浏览器一共分成三种字体，于是现在对这三种字体分边进行替换？</li>
<li>那些个带有特殊符号的界面，替换后就会变成文字导致乱码布局错误。</li>
</ul>
<p>firefox 倒霉就到在第二点上，导致图标替换错乱又没有白名单去回避这些页面的替换。而使用 chrome 插件的方法可以有效的控制某些网页不使用插件替换，实现白名单功能。</p>
<p>至于为什么叫做白名单法，因为刚开始的替换范围就是 *（整个网页），然后再通过排除或者限制的方法来框定生效范围。</p>
<p><strong>不过也有弊端，css 设置字体的方法是 fallback——即从字体列表的第一个开始，找不到再去找下一个，如果到最后一个字形都找不到对应的编码就会显示方块。但如果第一个字体比较全，就会只显示第一个字体。所以这种方法下等宽字体和衬线字体都无法正确得到匹配，或者只能把英文字体全部识别为等宽字体这种损敌八百自损一千的方法。</strong></p>
<p>具体实现方法有这些：</p>
<ul>
<li><p>chrome / firefox 插件。比较简单，但功能也简陋，不太推荐。我只用过 chrome 相关的，推荐一个，可以配合 <a href="https://chrome.google.com/webstore/detail/nooboss/aajodjghehmlpahhboidcpfjcncmcklf">Nooboss</a> 实现白名单功能。</p>
<ul>
<li><a href="https://chrome.google.com/webstore/detail/force-custom-fonts/hckjchjpkmbihoocajjpjajkggbccgee?utm_source=chrome-ntp-icon">强制网页使用自定义字体</a>。虽然其中带了黑名单里面的字体替换功能，但我实验了一下好像没用。</li>
</ul>
</li>
<li><p>stylus 等 css 网页修改工具。可通过代码对页面进行定制。通过 css 代码，本身就带有排除某一些网站 / 字体的功能。</p>
<ul>
<li><p><a href="https://userstyles.org/styles/169348/change-double-font">全局修改字体(中英文双字体修改)全局修改字體(中英文雙字體修改)Change Double font</a>。这个插件在开头定义了排除的字体，所以并不需要手工排除带有特殊符号图标的网页。</p>
</li>
<li><p><a href="https://userstyles.org/styles/173673/pure">Pure 百度 - 搜索/文库/知道/网盘/百科/经验/翻译/地图/学术/视频/糯米/智能云/安全</a>。定义了范围，只对宋体问题比较大的百度系网页进行替换。</p>
</li>
<li><p><a href="https://userstyles.org/styles/100473/004-forcemyfonts-chinese-firefoxchromeie-catcat520">004.ForceMyFonts.Chinese.FireFoxChromeIE.catcat520</a>。定义范围更大，但问题更多。</p>
</li>
</ul>
</li>
<li><p>手动定制（原理）。<a href="http://www.vixual.net/blog/archives/253">参考文章</a>。定制的原代码类似是这样：</p>
  <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">*{ </span><br><span class="line">    font-family: 'Monaco', "Microsoft Jhenghei" !important;   /*字體設置,可分別設置中英文,前面英文字體,後面中文字體,!important 即强制替换*/</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>直接这么写的话，图标符号就炸掉了。有两种解决方法：最后结尾的 <code>!important</code> 不去写。css 的特性决定了结算不加 <code>!important</code> 能替换的字体也比浏览器要多。但仍然会有很多字体得不到替换，可以说是一种比较保守的方案。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">*{ font-family: Arial, "KaiGen Gothic TW", "Noto Sans CJK TC", "Microsoft YaHei", "Microsoft JhengHei";}</span><br></pre></td></tr></tbody></table></figure>

<p>第二种方案就是指定不渲染的字体（推荐），这就是我现在用的白名单方案了（更纱黑体本身自带的英文已经可以了）。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">*:not([class*="icon"]):not([class*="button"]):not([class*=mjx]):not([class*=fa]):not(i){ </span><br><span class="line">    font-family: "更纱黑体 SC", "Microsoft YaHei", "Microsoft JhengHei"!important;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


</li>
</ul>
<h6 id="css-字体替换（黑名单）"><a href="#css-字体替换（黑名单）" class="headerlink" title="css 字体替换（黑名单）"></a>css 字体替换（黑名单）</h6><p><strong>（大佬方案）正常：1345678 部分正常：2</strong></p>
<p>顾名思义，只对相应的字体 / 网页部分展开替换。问题在于名单里要写哪些字体？范围其实相当大，因为像雅黑一类的字体，就有英文中文两种形式（英文叫 Microsoft Yahei，中文叫微软雅黑），需要同时做替换；而只有中文没有中文形式的（比如等宽更纱黑体），就会擅自回退到无法控制的字体上去（更纱黑体会回退到 Luicida 上），还有些网站经过我的尝试，无效（metacritic）。不过只要名单够大，效果还是可以的。另外，有人会说黑白名单搭配着用可以么？大部分情况下不行，会先经过白名单处理再经过黑名单处理，自己想想看，基本没用。另外，查看当前字体和字体回退列表，推荐使用这个插件：<a href="https://chrome.google.com/webstore/detail/font-finder/bhiichidigehdgphoambhjbekalahgha">font finder</a>。</p>
<ul>
<li><p>chrome 插件</p>
<ul>
<li><p><a href="%5Bhttps://chrome.google.com/webstore/detail/%E6%9B%BF%E6%8D%A2%E5%AD%97%E4%BD%93%E7%9A%84%E4%B8%AD%E6%96%87%E9%83%A8%E5%88%86%E4%B8%BA%E9%9B%85%E9%BB%91/enpkigfhoabjjjonanmddidnnahopmcn?utm_source=chrome-ntp-icon%5D(https://chrome.google.com/webstore/detail/%E6%9B%BF%E6%8D%A2%E5%AD%97%E4%BD%93%E7%9A%84%E4%B8%AD%E6%96%87%E9%83%A8%E5%88%86%E4%B8%BA%E9%9B%85%E9%BB%91/enpkigfhoabjjjonanmddidnnahopmcn?utm_source=chrome-ntp-icon)">替换字体的中文部分为雅黑</a>。但只能换成雅黑，也只能换中文，不能改成其他的。只能说少做少错。</p>
</li>
<li><p>stylebot（<a href="https://chrome.google.com/webstore/detail/lkcdgdbfbbnpnljlalmcjnepgjnmgigh">stylebot lite</a>）。这边是对网页相同段落 / 格式替换的插件。其实它的本职有一部分和 stylus 是相同的，也是 css 脚本替换。不过它本身的脚本商店貌似已经关闭连不上了，而且光说脚本他的编辑器易用性比 stylus 要差一大截，作者貌似也清楚所以就另外上架了一个 stylebot lite，原版已经停更了，剔除了商店的功能。和 stylus 的瞬间起停不一样，安装后需要对已打开的网页重新刷新才能生效，生效时插件图标变蓝，点开菜单后选第一个就会弹出一个侧边栏，通过侧边栏选择相应的网页块就能定制了。</p>
<p>不过本身能更换的字体就那几个默认的英文字体（不过其中的 moonspace 好像就是浏览器自选的等宽字体），不过点选了相应的段落块以后，可以转到 css 界面，会发现其实就是吧白名单里面的 * 换成了段落标签的名字而已，回退什么的完全可以手工配置。不过段落要手工选，回退也要手工粘贴，工作量相当大，不太推荐所有网页都用这种方法。</p>
</li>
</ul>
</li>
<li><p>stylus </p>
<ul>
<li><p>手动修改（原理）。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">@font-face {</span><br><span class="line">    font-family: '微软雅黑';</span><br><span class="line">    src: local('更纱黑体 SC');</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p><a href="https://userstyles.org/styles/115780/consolas-2">全网字体替换 | 微软雅黑、Consolas | 版本2</a>。效果相当好的方案。这是成品，而且中文定死微软雅黑，如果不想用其他字体的话的话用这个就好了。</p>
</li>
<li><p>（推荐）<a href="https://gist.github.com/blackgear/d6981d468d6c3191593b">I hate ugly font</a>。上一个方案的原理。大佬方案！一些使用细节可以看大佬在 v2ex 上的足迹：<a href="https://www.v2ex.com/t/201393">Stylish：写了个全网替换字体为微软雅黑/Consolas 的 CSS，浑身舒畅</a>。使用方法是下载源码，然后修改这三行：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">CJKFONT  = 'PingFang SC'</span><br><span class="line">ENGFONT  = 'Helvetica Neue'</span><br><span class="line">MONOFONT = 'Essential PragmataPro'</span><br></pre></td></tr></tbody></table></figure>

<p>分别对应中文 / 英文 / 等宽字体。上面这个方案适合 mac 使用，因为实测英文字体明显和苹方是统一风格的。我是修改成了更纱黑体 SC / Segeo UI / CascadiaCode Nerd Font。然后编译。需要安装 nodejs 并用 nodejs 安装 stylus 模块，最后使用代码</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">stylus userstyle.styl -c</span><br></pre></td></tr></tbody></table></figure>

<p>就可以得到 css 文件了。说是编译。。。其实我感觉就是复制粘贴，把上面那三行的内容一个个套进去。原理似乎是——通过 utf-8 编码号检测文字究竟是是不是该替换，如果该就看看原字形属于那种，替换成三种字形中的相应字形，不该就维持原字形。至于还有一种衬线字形，并不需要担心，一般衬线都会跟着浏览器走，浏览器设置好了这个 css 脚本并不会把衬线改掉。总体来说和浏览器方案很像但和浏览器的字体修改范围有一定互补。对于仍然搞不定的部分（一般是等宽字体的代码部分），可以配合 stylebot 彻底搞定。当然也有一些可以变通的地方：</p>
<ul>
<li><p>如果按上面设置，想要再次修改其中的普通 / 等宽字体不用再次编译，直接 ctrl+h 替换就好。不过英文字体不同，因为使用了有被替换的英文字体，所以在某些行里面不能被替换。所以如果安装了其他非衬线英文字体（<del>比如 Verdana</del>那个也是系统自带的，观察一下 css 文件会发现系统自带的不做替换），编译的时候就可以用那个字体而不用 segeo ui。或者通过底下最后一个方法做替换。</p>
</li>
<li><p>开头和结尾还多出两个代码块，一个是代表普通文字，一个代表代码块，可以在里面添加阴影和回退参数。有时候设置的中文字体没有带英文的回退，那就需要在第一个代码块里面配置英文字体回退。第二个代码块中中文必须写在等宽字体后面，鉴于更纱黑体在代码块中中文表现力一般，可以换成微软雅黑。另外第二个代码块实际上是利用了样式表里面命名为 code 和 pre 的段落一般为代码块的特点，但实际上 pre 有时也不是代码块（比如少数派的评论区），所以可以把 pre 去掉只留 code。</p>
</li>
<li><p>第一个代码块中的回退的英文字体可以用衬线也可以用非衬线。用非衬线比较美观，但衬线在某些情况下可以防诈骗链接（比如下面的测试页面中 v2ex 那个），或者维持更纱黑体，其本身拥有辨别大写 i 和小写 l 的能力。</p>
</li>
<li><p>英文方案我选择了 Segeo UI，对于已经 hack 过字体的低分辨率屏幕 / 高分辨率屏幕来说效果不错，但没有 hack 过的效果就堪忧，而且上面我曾经说过「观察一下 css 文件会发现系统自带的不做替换」，系统自带的字体都有这个问题，所以可以考虑把这些统统换了，换成自己装的本就无 hint 的字体，我懒得找了于是直接用了带英文字体的更纱黑体 sc 去替换。</p>
<p>需要装一个支持正则表达式的文本编辑器（vscode 除外，这玩意的正则有问题，尽管听说修过，但用在这里仍然有问题）</p>
<p>然后通过以下方法替换</p>
<p>查找：<code>(unicode-range: U\+0000-2E7F;\r\n.*src: local\()((?!'CascadiaCode Nerd Font').)+(\))</code></p>
<p>替换：<code>\1'更纱黑体 SC'\3</code></p>
<p>另外前面说的，如果用了 Segeo UI 等系统自带字体后想要替换，也可以通过修改上面的查找代码，只要在回溯引用的断言部分（上面这部分里面是当前我用的等宽字体），添加现在用的中文字体即可。</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h6 id="css-对字体的其他美化方案"><a href="#css-对字体的其他美化方案" class="headerlink" title="css 对字体的其他美化方案"></a>css 对字体的其他美化方案</h6><p>css 代码还可以对字体阴影进行定制：</p>
  <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">text-shadow: #666666 0.01em 0.01em 0.05em !important;  /*分别是阴影颜色，x 偏移，y 偏移，阴影浓密程度*/</span><br></pre></td></tr></tbody></table></figure>

<p>还有就是颜色和字重：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">/*font-weight: 500!important; /*字體粗細,整百數字*/</span><br><span class="line">/*color: #4d66fdab !important;    /*更改字體顏色及透明度(注意:這是全局修改),如無需要,可直接注釋掉整行代碼.*/</span><br></pre></td></tr></tbody></table></figure>

<p>还有抗锯齿：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">-webkit-font-smoothing: subpixel-antialiased !important;</span><br></pre></td></tr></tbody></table></figure>

<h6 id="测试页面汇总"><a href="#测试页面汇总" class="headerlink" title="测试页面汇总"></a>测试页面汇总</h6><ol>
<li><a href="https://cn.reuters.com/">路透中文网</a>：测试衬线（Serif）字体是否生效</li>
<li><a href="https://www.zhihu.com/question/266846566">知乎带代码块的页面</a>，测试其中的中文是否正确回退</li>
<li><a href="http://www.vixual.net/blog/archives/253">英文强制设置为 consola 字体的页面</a>，主要测试黑名单生效是否正常</li>
<li><a href="https://www.metacritic.com/game/playstation-4/sid-meiers-civilization-vi">metacritic 游戏介绍界面</a>，查看低分辨率下不友好字体是否替换正常</li>
<li><a href="https://baike.baidu.com/item/%E6%A8%AA%E5%BA%97%E5%BD%B1%E8%A7%86%E5%9F%8E/637138?fr=aladdin">百度百科</a>，默认全局宋体。</li>
<li>filebrowser 和 oneindex，带图标的页面。</li>
<li><a href="https://www.v2ex.com/t/623737#reply9">注意其中的 paypal</a>。查看网址中的大写 i 和小写 L 能不能被准确辨认。</li>
<li><a href="https://linux.cn/article-11614-1.html">linux 中国文章</a>。其中的等宽代码。</li>
<li></li>
</ol>
<h6 id="个人字体点评（windows-chrome-下结论）"><a href="#个人字体点评（windows-chrome-下结论）" class="headerlink" title="个人字体点评（windows chrome 下结论）"></a>个人字体点评（windows chrome 下结论）</h6><ul>
<li>更纱黑体：自带英文，大写 i 和小写 l 自带区分，使用范围最广。但是字形一般般，小分辨率下<del>字体锯齿感比较强</del>（请使用 nohinted 版），在 cmd 下使用感觉很扁。</li>
<li>微软雅黑：通用字形，其实效果不错，当然功能没有更纱黑体那么多。</li>
<li>思源柔黑：不错。像圆体和黑体的结合。 </li>
<li>阿里巴巴普惠体：在 windows 上使用有字重问题（粗），有点像正圆体。</li>
<li>方正文泉：directwrite 浏览器下效果不佳</li>
<li>ADAM.CG PRO：英文字体。直 来 直 去 全 部 大 写</li>
<li>Verdana：漂亮的 sans-serif</li>
<li>georgia：漂亮的 serif</li>
</ul>
<h5 id="（21-3-9）一些未解之谜"><a href="#（21-3-9）一些未解之谜" class="headerlink" title="（21.3.9）一些未解之谜"></a><strong>（21.3.9）</strong>一些未解之谜</h5><p>125% 缩放下，让浏览器不跟随系统进行缩放（缩放以后感觉太大了）。大部分网页上面这些方法都能处理得七七八八了，除了<a href="https://mp.weixin.qq.com/s/AP2P1MTGJpvlq8q8SeMT2w">某些微信网页</a>：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210309031345.png"></p>
<p>瞎眼！</p>
<p>如果设置为跟随系统进行缩放 or 增大到 150%，表现趋于正常：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210309031557.png"></p>
<h4 id="目前我的方案"><a href="#目前我的方案" class="headerlink" title="目前我的方案"></a>目前我的方案</h4><h5 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h5><p>硬替换 GaspHack 过的全部系统默认字体 + 浏览器设置好字体 + stylus 黑名单 + stylus 白名单。</p>
<p>因为 mactype 出问题太频繁，渲染出错时字体间隔有问题接受不了。还得频繁更新排除名单。</p>
<p>但仅使用硬替换，上面的浏览器字体修改方案还有很多不成熟的地方，导致不用白名单有些字体替换不来，<del>用白名单好多图标会错位。只能开着白名单的情况下给白名单设置排除网站了。</del></p>
<h5 id="2021"><a href="#2021" class="headerlink" title="2021"></a>2021</h5><p>改为给白名单方案设置生效域。目前有这些：</p>
<ul>
<li>baidu.com</li>
<li>weixin.qq.com</li>
<li>zh.wikipedia.org</li>
</ul>
<h2 id="关于国旗-emoji"><a href="#关于国旗-emoji" class="headerlink" title="关于国旗 emoji"></a>关于国旗 emoji</h2><p>windows 下国旗 emoji 不会被正常显示出来，原因详见：<a href="https://www.zhihu.com/topic/19552612">为何 Windows 10 迟迟不更新国旗绘文字（Emoji）？</a></p>
<p>无法完美解决，通过 <a href="https://github.com/eosrei/emojione-color-font">eosrei/emojione-color-font Archived</a> 或者 <a href="https://github.com/eosrei/twemoji-color-font">eosrei/twemoji-color-font</a> 两个项目（前者已废弃，后者是前者的后继，但下面的第两种方案，在 windows 下只有前者有效），都使用下面两种方案：</p>
<ol>
<li><p>直接安装。下载 release 里面不带 win 的那个压缩文件。里面有个字体，安装即可。安装后，chrome 下 emoji 能够显示国家符号但全部变成黑白。firefox 下一切正常。</p>
</li>
<li><p>下载带 win 的 release。提前安装好 python3，并通过 pip 安装 fonttools</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">pip install fonttools</span><br></pre></td></tr></tbody></table></figure>

<p>安装后确保 <code>ttx</code> 和 <code>pyftmerge</code> 可用（一些情况下 python 模块的目录并没有添加到 path 中，比如通过微软商店安装的 python，可以通过 everything 等搜索手段搜索到 ttx 所在的目录，导航到目录中的 <code>pythonXX</code> 和 <code>pythonXX/Scripts</code> 文件夹「其中 XX 为版本号」）。</p>
<p>然后解压 release 运行其中的 <code>install.bat</code>。如果一切正常会引导你安装两个字体。安装后，chrome 的 emoji 不会变成黑白，而 firefox 会获得国旗 emoji。但 ie 的 emoji 又会变得混乱了。。。（不过 ie 应该没有多少人会用了）</p>
</li>
</ol>
<p>如果要测试安装后是否生效，可以通过以下几个网站：</p>
<ul>
<li><a href="https://pixelambacht.nl/chromacheck/">ChromaCheck</a>（测试浏览器支持的字体标准，一般来说，chrome 会不支持第三个，而 firefox 不支持第一个第四个）</li>
<li><a href="https://eosrei.github.io/emojione-color-font/full-demo.html">Color Unicode emoji supported by the EmojiOne Color SVG-in-OpenType font.</a>（上面两个项目的作者制作的测试 emoji 的网站）</li>
<li><a href="https://www.fuhaozi.com/emoji/guojia.html">旗帜&amp;国家类emoji表情大全</a></li>
</ul>
<p>但不管怎么说，大部分人主用 chrome 和 chromium 类浏览器，所以这个问题基本是无解的（显然微软和 chrome 狼狈为奸）。。。除非你能忍受黑白 emoji 图标。</p>
]]></content>
      <categories>
        <category>Android</category>
        <category>Linux</category>
        <category>Windows</category>
        <category>IOS</category>
      </categories>
      <tags>
        <tag>fonts</tag>
        <tag>chrome</tag>
        <tag>firefox</tag>
        <tag>mactype</tag>
      </tags>
  </entry>
  <entry>
    <title>各类 gapps</title>
    <url>/ge-lei-gapps/</url>
    <content><![CDATA[<p>研究了三种 opengapps：普通的 opengapps，通过 magisk刷入的 magic gapps 和 nanomod</p>
<p><strong>先刷了 magic gapps</strong>，刷入占用了许多 data 空间（但不占用 system 分区空间，system 不够的福音），但是好处是如果想要卸载 gapps 在 magisk 那里取消勾选就可以了，but。。。刷入后谷歌服务就在不停的弹出停止服务，谷歌商店也进不去，也是谷歌服务停止，safetynet 根本通不过，而且连 token 都拿不到，证明根本就没有用吧。。。用一加社区和 appops 设置都没有改善，证明是兼容性问题，看来这个模块还是有待完善。</p>
<p><strong>（18.10.1 更新）</strong> 原来是跟 magisk hide 冲突了，关闭就不会 fc 了。</p>
<p>（<strong>20.8.26 更新</strong>） 本模块停更，没有 magisk v20 以上可用版本了。旧版本 magisk 会闪退+升级新版后回退再次刷入此模块时会像原版 opengapps 一样提示空间不足，即模块挂载功能失效）</p>
<p><strong>然后是普通的 opengapps</strong> ，刷入后占用 data+system 空间，而且比 magic gapps还要大 <del>（我记得 opengapps 好像 systemless 化了，以前放在 system 里面那有那么大占用，不过 system 空间不够确实也不用刷了</del>），而且估计很难卸载掉，but 好处还是很明显的，这是目前实验里面<strong>最正常</strong>的谷歌包，刷入后登陆下载都没问题，装上 magisk  universal-safetynet-fix 后连 safety 都能过了，之后实验了一下，可能是 rom 本身自带了root，所以光是安装 magisk 是过不了的，另外就算是安装了 fix 模块，只要安装了 xposed 也过不了（无论是不是 systemless），当然我只实验了 systemless 模块，装了 xp 要过也很简单，就是去除勾选 magisk 里面 xp 重启就行了（不用删除）</p>
<p><strong>最后是号称黑科技的 nanomod</strong>，然而一开始我用 6.0 的时候根本刷不进去。。。无论是通过 recovery 还是 magisk 内解包（怀疑空间不足），然而都不行，最后刷完 7.1.2 空间够大后才刷入，刷入后发现喵了个咪啊。。。按了一堆无关紧要的软件，不过开源而且占用极小，多半是 full 版的魔改精简。。。商店一开始可以登陆账号但是上不去，后面发现什么权限都没给，给了权限能上了，但是还没试下载，而safetynet显示没联网。。。不过值得一提的是，里面的谷歌框架叫做microG，设置很精简，而且里面有一项提到可以强制通过 safetynet，但是是灰的，看来有潜力但是我不会用&amp;还没开发完全。后面我卸载玩多余应用的时候才发现你妹啊！原来图库和短信都被替换了。。。最后还得上酷安下了两个第三方用。。。下次我试试看找找精简版（只有 microG）和商店的试试看。<del>而且还有一点，里面的 tor 我很感兴趣，据各种野鸡渠道说是上「暗网」的东西（逃</del></p>
<p><strong>(19.8.4 更新）</strong>后面了解了一下，nanomod（现在已经叫 nanodroid 了），实际上是 microG + foss + 签名欺骗这一套东西，有关 gapps 的实际上只有 microG（参考文章：<a href="https://blog.yoitsu.moe/tech_misc/android_without_google_0.html">离开 Google 的 Android 之路</a>），但 microG 要求系统支持签名欺骗，要不就使用支持签名欺骗的 rom 或修改 service.jar，要么就使用 xposed（参考文章：<a href="https://blackyau.cc/4">MicroG安装与配置</a>，已在 u 盘存档），要么就 nanodroid，上次 safetynet 检测不过的原因也许是我少刷一个签名欺骗模块。。。（不过令我感到奇怪的是，目前如日中天的 magisk 居然都没有能够办成签名欺骗的模块）</p>
<p><strong>（19.9.1 更新）</strong>用了安卓 p 专用的 weebgapps。其实体验不算太好，到 20.8.26 为止再看仍仅支持 9.0 以上。</p>
<blockquote>
<p>另外我还试着刷入了 weebgapps（就是 p 专用的那一个 gapps），效果，嗯。。差强人意，备份还原没反应，光是登录的时候就搞了半天，后来我才发现是权限没开。。。cts 一开始过不去，装上 magisk 模块以后过去了。不过后面再试了两次，反正延迟这个事情肯定存在（就算开了权限），登录按钮点下去装死起码半个钟。。。而且很多功能也装死，magisk 版特别严重。</p>
</blockquote>
<p>但是和上面的诸位一比，起码还是谷歌专用商店，能通过方法过 cts，框架也很精简，结论就是，还行吧（唯一一点不方便，权限都要手动开）。。。</p>
<p><strong>（19.9.17）</strong>还有另一种叫 bitgapps 的，7.0-9.0 都能用，使用方法和 weebgapps 一样（不过没有 magisk 版，但 magisk 版那么烂不要也罢） ，暂时没看出有什么区别，唯一的区别就是这个品种更新比较慢。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>google框架</tag>
        <tag>magisk</tag>
      </tags>
  </entry>
</search>
