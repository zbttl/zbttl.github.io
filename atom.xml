<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bao&#39;s 备忘录</title>
  
  
  <link href="https://zbttl-github-io.vercel.app/atom.xml" rel="self"/>
  
  <link href="https://zbttl-github-io.vercel.app/"/>
  <updated>2023-10-29T16:51:44.987Z</updated>
  <id>https://zbttl-github-io.vercel.app/</id>
  
  <author>
    <name>zbttl</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>分辨率变化时重启 explorer</title>
    <link href="https://zbttl-github-io.vercel.app/fen-bian-lu-bian-hua-shi-chong-qi-explorer/"/>
    <id>https://zbttl-github-io.vercel.app/fen-bian-lu-bian-hua-shi-chong-qi-explorer/</id>
    <published>2023-10-05T16:00:00.000Z</published>
    <updated>2023-10-29T16:51:44.987Z</updated>
    
    <content type="html"><![CDATA[<p>提示：因为 windows 的玄学问题，每个人启动的时候 windows 发生的事件可能不同，本文仅供参考和提供思路。</p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>我经常在不同设备远程登录自己家电脑，然后发现：一旦远程设备的分辨率和缩放和自家的不同，就会导致窗口最大化后布局错乱，解决方法就是重启 explorer。另外我还装有一个 desktop ticket，专门拿来看 rss 新闻的，重启 explorer 的时候不重启这个软件的话也会导致最大化的时候窗口被这条东西挡着，所以也一并重启。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20231016201527.png"></p><center>最大化窗口布局错乱</center><h2 id="查看事件"><a href="#查看事件" class="headerlink" title="查看事件"></a>查看事件</h2><p>参考文章：<a href="https://blog.csdn.net/gibbs_/article/details/117843785">通过windows日志查看器查看系统登陆日志_windows查看登录日志_g1bbs_的博客-CSDN博客</a></p><p>参考文章可知，真正的登录事件是 4648。不过认真看进去的话，登录一次会出现两个 4648，因为一个是 scvhost 进程的登录，一个是 lsass 进程的登录，实际上可以看作一个，所以我们监听其中一个事件就可以了。我们这里监听 scvhost。</p><p>先来到事件查看器-&gt;windows 日志-&gt;安全，点右边的筛选试图，切换到 xml 页签，勾选手动编辑查询复选框，在输入框中输入以下内容：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;QueryList&gt;</span><br><span class="line">  &lt;Query Id="0" Path="Security"&gt;</span><br><span class="line">    &lt;Select Path="Security"&gt;*[System[(EventID=4648)]]       and</span><br><span class="line">      *[EventData[Data[@Name='ProcessName']='C:\Windows\System32\svchost.exe']]&lt;/Select&gt;</span><br><span class="line">  &lt;/Query&gt;</span><br><span class="line">&lt;/QueryList&gt;</span><br></pre></td></tr></tbody></table></figure><p>查看结果：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20231016205334.png"></p><p>用一段事件后如果发现该计划任务运行过于频繁，有可能是因为已经有许多计划任务在远程连接时在调用（计划任务运行时也会用到 scvhost 进程），我们可以改成用 lsass.exe 进程的日志进行监听；如果监听 lsass 的日志发现某些时候远程过来任务没有出发，因为 lsass 没有登录，我们可以把 rdp 的 1149 事件也加入脚本中，最后的结果像这样：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;QueryList&gt;</span><br><span class="line">  &lt;Query Id="0" Path="Security"&gt;</span><br><span class="line">    &lt;Select Path="Security"&gt;*[System[(EventID=4648)]]       and</span><br><span class="line">      *[EventData[Data[@Name='ProcessName']='C:\Windows\System32\lsass.exe']]&lt;/Select&gt;</span><br><span class="line">  &lt;/Query&gt;</span><br><span class="line">  &lt;Query Id="1" Path="Microsoft-Windows-TerminalServices-RemoteConnectionManager/Operational"&gt;</span><br><span class="line">    &lt;Select Path="Microsoft-Windows-TerminalServices-RemoteConnectionManager/Operational"&gt;</span><br><span class="line">      *[System[(EventID=1149)]]</span><br><span class="line">    &lt;/Select&gt;</span><br><span class="line">  &lt;/Query&gt;</span><br><span class="line">&lt;/QueryList&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="编写重启程序脚本"><a href="#编写重启程序脚本" class="headerlink" title="编写重启程序脚本"></a>编写重启程序脚本</h2><p>脚本的路径放在 D:\git\login_resolution.ps1 中，可自定义。powershell 可以用 windows 自带的工具调试，bat 不行，但 powershell 重启 explorer 会自动启一个资源管理器窗口，以前用过的 bat 不会，算是一个小缺点。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># 定义存储分辨率信息的文件路径</span><br><span class="line">$filePath = "D:\login_resolution.txt"</span><br><span class="line"></span><br><span class="line"># 如果文件不存在，创建一个空的文件</span><br><span class="line">if (-not (Test-Path -Path $filePath)) {</span><br><span class="line">    $null | Out-File -FilePath $filePath</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"># 从文件中读取以前的分辨率信息</span><br><span class="line">$previousResolution = Get-Content -Path $filePath</span><br><span class="line"></span><br><span class="line"># 默认为System.Object[]类型，需要转换成string类型</span><br><span class="line">$previousResolution2 = $previousResolution | Out-String</span><br><span class="line"></span><br><span class="line"># 获取当前分辨率信息并直接转换为字符串</span><br><span class="line">$currentResolution = Get-WmiObject -Class Win32_VideoController | Select-Object -Property CurrentHorizontalResolution, CurrentVerticalResolution</span><br><span class="line">$currentResolution2 = $currentResolution | Out-String</span><br><span class="line"></span><br><span class="line">$previousResolutionTrim = $previousResolution2.Trim()</span><br><span class="line">$currentResolutionTrim = $currentResolution2.Trim()</span><br><span class="line"></span><br><span class="line">if ($currentResolutionTrim -ne $previousResolutionTrim) {</span><br><span class="line">    # 关闭 explorer.exe 和 DesktopTicker.exe</span><br><span class="line">    Stop-Process -Name "explorer" -Force</span><br><span class="line">    Stop-Process -Name "DesktopTicker" -Force</span><br><span class="line"></span><br><span class="line">    # 启动 explorer.exe 和 DesktopTicker.exe</span><br><span class="line">    Start-Process "explorer.exe"</span><br><span class="line">    Start-Process "C:\Program Files\Desktop Ticker\DesktopTicker.exe"</span><br><span class="line"></span><br><span class="line">    # 等待一段时间</span><br><span class="line">    Start-Sleep -Seconds 4</span><br><span class="line"></span><br><span class="line">    # 更新文件中的分辨率信息，并附加到文件末尾</span><br><span class="line">    $currentResolutionTrim | Out-File -FilePath $filePath -Force</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="编辑计划任务"><a href="#编辑计划任务" class="headerlink" title="编辑计划任务"></a>编辑计划任务</h2><p>进入任务计划程序，创建任务，填入名字。触发器里面，点击新建，开始任务选择发生事件时，设置选择自定义，点击新建事件筛选器后，出现的界面就是上一步的界面，此处略过不谈。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20231016210836.png"></p><p>转到操作处，选择新建，操作选启动程序，程序或脚本输入 powershell，参数输入 ps1 的路径，点确定即可。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20231016220223.png"></p><p>再点确定完成任务生成。如果报错「任务 远程重启 explorer 出错。错误消息: 一个或多个指定的参数无效。」，来到常规-&gt;安全选项-&gt;更改用户或组，输入账号名，点检查名称，会自动补全，点确定，即可解决问题。</p><p>另外如果重启时不想看到弹出的窗口，可以修改启动程序时添加的参数为 <code>-WindowStyle Hidden -File "D:\git\login_resolution.ps1"</code>。</p><p>如果监听的是 scvhost.exe，务必不要把设置里的「如果此任务已运行，以下规则适用」从「请勿启动新实例」改为「停止现有实例」，否则会无限重启 explorer 导致锁死。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;提示：因为 windows 的玄学问题，每个人启动的时候 windows 发生的事件可能不同，本文仅供参考和提供思路。&lt;/p&gt;
&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;</summary>
    
    
    
    <category term="Windows" scheme="https://zbttl-github-io.vercel.app/categories/Windows/"/>
    
    
    <category term="powershell" scheme="https://zbttl-github-io.vercel.app/tags/powershell/"/>
    
  </entry>
  
  <entry>
    <title>headscale 全解析</title>
    <link href="https://zbttl-github-io.vercel.app/headscale-quan-jie-xi/"/>
    <id>https://zbttl-github-io.vercel.app/headscale-quan-jie-xi/</id>
    <published>2022-10-17T16:00:00.000Z</published>
    <updated>2023-10-29T15:44:19.427Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>参考文章：</p><ul><li><a href="https://techoverflow.net/2022/01/16/how-to-setup-headscale-server-in-5-minutes-using-docker-compose/">How to setup headscale server in 5 minutes using docker-compose - TechOverflow</a></li><li><a href="https://lxnchan.cn/headscale.html">【Headscale】自部署 Tailscale 服务端 | 泠泫凝的异次元空间</a></li><li><a href="https://techoverflow.net/2022/02/01/how-to-create-namespace-on-headscale-server/">How to create namespace on headscale server - TechOverflow</a></li><li><a href="https://icloudnative.io/posts/how-to-set-up-or-migrate-headscale/">Tailscale 基础教程：Headscale 的部署方法和使用教程 – 云原生实验室 - Kubernetes|Docker|Istio|Envoy|Hugo|Golang|云原生</a></li></ul><p>前置动作为安装 docker 和 docker-compose，以前的文章写过，就不重复造轮子了。</p><ol><li><p>新建 docker 用 headscale 文件结构，下文以 root 用户默认目录为例</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /root/docker-compose/headscale/config</span><br><span class="line">cd /root/docker-compose/headscale/config</span><br><span class="line">touch ./config/db.sqlite</span><br><span class="line">curl https://raw.githubusercontent.com/juanfont/headscale/main/config-example.yaml -o ./config/config.yaml</span><br></pre></td></tr></tbody></table></figure></li><li><p>修改 <code> /root/docker-compose/headscale/config</code> 下的 <code>config.yaml</code>。</p><ul><li><p>将 <code>server_url</code> 改为公网 IP/域名及对外端口。这关乎到后续打开网页和 pc 修改完注册表后链接到服务器登录时弹出的网页 url，如果不设置成正确的公网 url，后续弹出的地址就不能用。</p></li><li><p><code>listen_addr</code> 不用改，这一步和用非 docker 版不一样，因为这个参数所对应的是 docker 内部端口，后续是通过 docker 的映射映射到真正的对外端口的。</p></li><li><p>将 <code>magic_dns</code> 设为 false，防止连不了网。</p></li><li><p>自定义私有网段（可选），便于记忆：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip_prefixes:</span><br><span class="line">  - 10.1.0.0/16</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>在 <code>/root/docker-compose/headscale/</code> 目录下新建并编辑 <code>docker-compose.yml</code>，只需要修改下面配置文件的对外端口一项，与前面 <code>config.yaml</code> 中 <code>server_url</code> 设置的端口一致即可。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">version: '3.5'</span><br><span class="line">services:</span><br><span class="line">  headscale:</span><br><span class="line">    image: headscale/headscale:latest</span><br><span class="line">    volumes:</span><br><span class="line">      - ./config:/etc/headscale/</span><br><span class="line">      - ./data:/var/lib/headscale</span><br><span class="line">    ports:</span><br><span class="line">      - [server_ports]:8080</span><br><span class="line">    command: headscale serve</span><br><span class="line">    restart: unless-stopped</span><br></pre></td></tr></tbody></table></figure></li><li><p>确保 ssh 当前目录为 headscale 的 docker-compose 文件所在目录</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /root/docker-compose/headscale</span><br></pre></td></tr></tbody></table></figure><p>启动</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>我只有 windows 和 android 端的设备，其实我还有个 ipad，但听说 headscale 暂时不支持 ios，那就算了。</p><h3 id="windows（23-10-23-更新）"><a href="#windows（23-10-23-更新）" class="headerlink" title="windows（23.10.23 更新）"></a>windows<strong>（23.10.23 更新）</strong></h3><ol><li><p>windows 下载 <a href="https://tailscale.com/download/windows">安装包</a></p></li><li><p>打开链接 <code>http://[server_url]:[server_ports]/windows</code>，里面方括号括起来的两个内容自己就是我们上面 <code>config.yaml</code>填的 <code>server_url</code> 配置啦。</p></li><li><p><strong>（23.10.23 更新）</strong> 新版本这里会提示使用命令进行注册，原有的注册表配置方式已经废弃。只需要把页面中的这句命令行</p></li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tailscale login --login-server [server_url]</span><br></pre></td></tr></tbody></table></figure><p>输入到 windows 这边的 cmd 里，就会自动跳到下一步。</p><p><del>3. 接下来弹出的界面就是 windows 端的教程。</del></p><p>   <img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20221019210538.png"></p><p>   <del>这张图片里面其实简述了两种方法：</del></p><p>   <del>1. 下载 reg</del><br>   <del>2. 在 cmd 中输入两行命令</del></p><p>   <del>这两种方法其实都可以。我想说的是，如果之前配置过 headscale，但现在换了节点的话，可以打开 regedit，导航到 <code>HKLM\Software\Tailscale IPN</code>，修改其中 <code>LoginURL</code> 的值即可。</del></p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20221019210905.png"></p><ol start="4"><li><del>此时重新打开 tailscale，右键任务栏的图标后，会</del>弹出注册页面。注册页面会显示让你到 vps 中粘贴命令：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20221019211123.png"></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">headscale -n NAMESPACE nodes register --key xxxxxxx</span><br></pre></td></tr></tbody></table></figure><p>但实际上我们需要改装一下这条命令。</p><p>首先在 vps 中创建一个 node。同样的，确保 ssh 当前目录为 headscale 的 docker-compose 文件所在目录，然后运行命令新建 node。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose exec headscale headscale namespaces create [节点名字]</span><br></pre></td></tr></tbody></table></figure><p>改造上面的命令，将 windows 客户端加到节点中</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-n已过期</span><br><span class="line">docker-compose exec headscale headscale -n [节点名字] nodes register --key xxxxxx</span><br><span class="line">docker-compose exec headscale headscale -u [节点名字] nodes register --key xxxxxx</span><br></pre></td></tr></tbody></table></figure><p>查看效果，如果添加的节点显示 online，则成功</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose exec headscale headscale nodes list</span><br></pre></td></tr></tbody></table></figure><p>另外这个命令也会显示当前链接设备的 headscale 内局域网 ip。</p><h3 id="android"><a href="#android" class="headerlink" title="android"></a>android</h3><p>android 端<del>，需要编译 apk，可以通过 <a href="https://github.com/FZR-forks/tailscale-android/actions">github action</a> 下一个最新的，或者再 fork 一份然后自己跑一遍。安装后右上角三个点打开然后把命令考出来像 windows 一样改造后放入 vps，此处不再赘述。</del>最新版的 apk（1.3 以上），疯狂点击 about 就会出现自定义服务器的选项，填入 <code>http://[server_url]:[server_ports]</code>，重启即可看到命令。</p><h3 id="230514-更新-asus-merlin-（仅管理界面）"><a href="#230514-更新-asus-merlin-（仅管理界面）" class="headerlink" title="(230514 更新) asus merlin （仅管理界面）"></a><strong>(230514 更新)</strong> asus merlin （仅管理界面）</h3><p>慎用。似乎会搞坏路由器的 dns。</p><ol><li><p>安装 entware，然后通过 entware 安装 tailscale（安装 entware 的教程请见往期文章）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opkg install tailscale</span><br></pre></td></tr></tbody></table></figure></li><li><p>启动 tailscaled。要对 tailscale 进行配置需要先启动 tailscaled，另外当 ssh 登出时，tailscaled 就会自动停止，但 tailscale 配置好后会开启自启并持续运行。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/etc/init.d/S06tailscaled start</span><br></pre></td></tr></tbody></table></figure></li><li><p>配置 tailscale。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tailscale up --login-server=http://&lt;HEADSCALE_PUB_IP&gt;:8080 --accept-routes=true --accept-dns=false</span><br></pre></td></tr></tbody></table></figure><p>此时 ssh 中会弹出一个网址，访问后会获得要到 vps 中输入的命令，参考上面 windows 端的操作，不再赘述。</p></li><li><p>配置防火墙。打开/新建 <code>/jffs/scripts/firewall-start</code>，在 <code>#/bin/sh</code> 下面新增两行：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT 1 -s 10.1.0.0/24 -j ACCEPT</span><br><span class="line">iptables -t nat -A PREROUTING -d 10.1.0.3 -j DNAT --to-destination 192.168.123.1</span><br></pre></td></tr></tbody></table></figure><p><code>10.1.0.0/24</code> 放 tailscale 网段地址。<code>192.168.123.1</code> 放内网访问到路由器管理界面的地址。</p></li></ol><p>此时就在外网可以通过路由器的 tailscale 地址访问路由器管理界面的地址了。</p><h2 id="其他延伸配置（23-10-23-更新）"><a href="#其他延伸配置（23-10-23-更新）" class="headerlink" title="其他延伸配置（23.10.23 更新）"></a>其他延伸配置（23.10.23 更新）</h2><h3 id="反代-https"><a href="#反代-https" class="headerlink" title="反代 https"></a>反代 https</h3><p>如果没有装有 web 服务器，可以用 headscale 内置的 https 功能。但我已经装有 caddy 了，直接用 caddy 就好。</p><p>参考文章：<a href="https://github.com/juanfont/headscale/blob/main/docs/reverse-proxy.md">headscale/docs/reverse-proxy.md at main · juanfont/headscale</a></p><ol><li><p>修改 <code> /root/docker-compose/headscale/config</code> 下的 <code>config.yaml</code>，把 <code>server_url</code> 改成 https 地址，端口不留，因为默认 https 就走 443 端口。</p></li><li><p>修改 caddy 配置文件 Caddyfile，一般位于 <code>/etc/caddy/Caddyfile</code>，增加配置（此处我已经申请过泛域名证书，就不使用 caddy 自己的自动申请域名方法了）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">https://xxx.xxx.xyz {</span><br><span class="line">    reverse_proxy localhost:[server_ports]</span><br><span class="line">    tls  /etc/ssl/xxx.crt /etc/ssl/xxx.key</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>然后重启 caddy 和 docker-compose headscale 即可。</p></li></ol><h3 id="更换-headscale-nodes-list-里的节点-id-和-ip"><a href="#更换-headscale-nodes-list-里的节点-id-和-ip" class="headerlink" title="更换 headscale nodes list 里的节点 id 和 ip"></a>更换 headscale nodes list 里的节点 id 和 ip</h3><p>参考文章：<a href="https://github.com/juanfont/headscale/issues/1455">自定义/更改 IP 地址 · 问题 #1455 · juanfont/headscale</a></p><p>安装 sqlite。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install sqlite -y</span><br></pre></td></tr></tbody></table></figure><p>找到 <code>/root/docker-compose/headscale/data/</code> 下的 db.sqlite 文件。使用 sqlite3 打开并编辑。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sqlite3 /var/lib/headscale/db.sqlite</span><br><span class="line"> 查看有几个表</span><br><span class="line"> .table</span><br><span class="line">SELECT id, hostname, ip_addresses FROM machines;</span><br><span class="line">UPDATE machines SET ip_addresses = "10.1.0.2" WHERE hostname = "[主机名]";</span><br><span class="line">UPDATE machines SET id = "1" WHERE hostname = "[主机名]";</span><br></pre></td></tr></tbody></table></figure><p>重启被修改 ip 的客户端即可。</p><h3 id="修改-randomize-client-port"><a href="#修改-randomize-client-port" class="headerlink" title="修改 randomize_client_port"></a>修改 randomize_client_port</h3><p>如果访问不正常，可以尝试修改。参考文章：<a href="https://www.cnblogs.com/Yogile/p/17064031.html">Headscale 端到端直连 - Yogile - 博客园</a></p><p>修改 <code> /root/docker-compose/headscale/config</code> 下的 <code>config.yaml</code>。</p><blockquote><p>randomize_client_port ：原为 false ，须改为 true 。否则客户端端点访问互相干扰，无法访问服务。</p></blockquote><h3 id="使用-preauthkeys-无需服务器同意一键添加设备"><a href="#使用-preauthkeys-无需服务器同意一键添加设备" class="headerlink" title="使用 preauthkeys 无需服务器同意一键添加设备"></a>使用 preauthkeys 无需服务器同意一键添加设备</h3><p> 新建 key</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose exec headscale headscale --user zbttl preauthkeys create --reusable --expiration 24h</span><br></pre></td></tr></tbody></table></figure><p>查看新建的 key，记下 key 的值</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose exec headscale headscale -u [节点名字] preauthkeys list</span><br></pre></td></tr></tbody></table></figure><p>在客户端处输入命令，以 windows 为例：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tailscale up --auth-key=[key_value] --login-server=[server_url] --accept-dns=false --unattended</span><br></pre></td></tr></tbody></table></figure><p>tailscale 会即刻登录，无需进入服务器使用命令二次确认。</p><p>然后让 key 过期</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose exec headscale headscale --user [节点名字] preauthkeys expire [key_value]</span><br></pre></td></tr></tbody></table></figure><h3 id="使用-headscale-ui-并配置-Ephemeral-供临时使用"><a href="#使用-headscale-ui-并配置-Ephemeral-供临时使用" class="headerlink" title="使用 headscale ui 并配置 Ephemeral 供临时使用"></a>使用 headscale ui 并配置 Ephemeral 供临时使用</h3><p>参考文章：</p><ul><li><a href="https://blog.gurucomputing.com.au/Smart%20VPNS%20with%20Headscale/Configuring%20the%20Headscale%20UI/">配置 Headscale UI - Gurucomputing 博客</a></li><li><a href="https://github.com/gurucomputing/headscale-ui">gurucomputing/headscale-ui: A web frontend for the headscale Tailscale-compatible coordination server — gurucomputing/headscale-ui：headscale Tailscale兼容协调服务器的Web前端</a></li></ul><p>啥是 Ephemeral 呢？参考<a href="https://tailscale.com/kb/1111/ephemeral-nodes/">临时节点 · Tailscale 文档</a>，简而言之，上一步我们用 preauthkeys  添加设备时候用的节点，变成了一次性的，使用者登录后只要登出（比如重启 tailscale，重启电脑等），节点信息就会失效，就连不上 headscale 控制器了，适合短期的给临时设备使用。要方便的使用这个功能，甚至方便的进行设备的添加删除，查看在线的设备而无需进入 ssh，都可以搭建这么一个 headscale-ui 在前端。</p><p><strong>（可选，便于验证配置文件是否工作正常）</strong>把 <code>config.yaml</code> 中的  <code>metrics_listen_addr</code> 端口映射出来，默认为 9090。因为用的是 docker，还需要把这里的地址修改为 0.0.0.0 以被访问到</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">metrics_listen_addr: 0.0.0.0:9090</span><br></pre></td></tr></tbody></table></figure><p>然后修改 headscale 映射的端口，还需要添加 headscale-ui 配置到 headscale 的 docker-compose 文件中。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">version: '3.5'</span><br><span class="line">services:</span><br><span class="line">  headscale:</span><br><span class="line">    image: headscale/headscale:latest</span><br><span class="line">    volumes:</span><br><span class="line">      - ./config:/etc/headscale/</span><br><span class="line">      - ./data:/var/lib/headscale</span><br><span class="line">    ports:</span><br><span class="line">      - [server_ports]:8080</span><br><span class="line">      - [metric_ports]:9090</span><br><span class="line">    command: headscale serve</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">  headscale-ui:</span><br><span class="line">    container_name: headscale-ui</span><br><span class="line">    image: ghcr.io/gurucomputing/headscale-ui:latest</span><br><span class="line">    pull_policy: always</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    ports:</span><br><span class="line">      - [headscale_ports]:80  </span><br></pre></td></tr></tbody></table></figure><p>重启 docker-compose 后即可通过 <code>ip:[metric_ports]/metrics</code> 访问到访问到 metrics 页面，然后通过 <code>ip:[metric_ports]/headscale_ports</code> 不出意料也能进入 ui 页面。</p><p>此时我们在 ssh 处申请一个 api：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose exec headscale headscale apikeys create</span><br></pre></td></tr></tbody></table></figure><p>记住这里的 api。因为后面无法再获取这个 api，如果忘记了只能重新获取；我们待会就要用这个 api 登录网页端，更换设备，清除 cookies 都需要重新输入这一串长长的随机 api。所以建议保存起来。</p><p>在网页端的 settings-&gt;headscale api key 中填入刚刚获取的 api。在 user view 中就能看到我们创建的 headscale 节点名字了。device view 处则能管理已授权的设备。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20231029140054.png"></p><p>在 user view 处点开节点，点 preauth keys 前面的加号</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20231029140733.png"></p><p>此时能看到三个选项，分辨是 key 的过期时间、是否可以重复使用、是否为 Ephemeral key（即我上面说的临时 key），选择需要的配置，点击 create preauth key 即可创建成功。将 key 套入命令中在命令行里输入即可成功添加，上一章说过了，不再赘述。</p><h4 id="反代-https-1"><a href="#反代-https-1" class="headerlink" title="反代 https"></a>反代 https</h4><p>当然 headscale-ui 和 metrics 也可以通过 caddy 反代了。另外为了安全我还在 headscale-ui 页面外面套了一层用户和密码。修改 caddyfile：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">https://xxx.xxx.xyz {</span><br><span class="line">    reverse_proxy localhost:[server_ports]</span><br><span class="line">    tls  /etc/ssl/xxx.crt /etc/ssl/xxx.key</span><br><span class="line">    reverse_proxy /metrics* 127.0.0.1:[metric_ports] </span><br><span class="line">    reverse_proxy /web* 127.0.0.1:[headscale_ports] </span><br><span class="line">    basicauth /web* {</span><br><span class="line">      # 加密密码获取方法：caddy hash-password，输入密码</span><br><span class="line">      [username] $2a$14$/rQHsSabPqQ3zpnGtU2ZQeGSBYozSCwA5HLUEwwp78OEhQVwECGyC #123456</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>重启 caddy，即可用 <code>https://xxx.xxx.xyz/metrics</code> 和 <a href="https://xxx.xxx.xyz/web%60">https://xxx.xxx.xyz/web`</a> 访问 metrics 页面和 headscale-ui 页面了。</p><h3 id="自定义-derp"><a href="#自定义-derp" class="headerlink" title="自定义 derp"></a>自定义 derp</h3><p>参考文章：<a href="https://icloudnative.io/posts/custom-derp-servers/">Tailscale 基础教程：部署私有 DERP 中继服务器 – 云原生实验室 - Kubernetes|Docker|Istio|Envoy|Hugo|Golang|云原生</a></p><p>上面说的只是搭建 headscale 控制器，而连接的流量节点是 tailscale 的那些默认服务器。也可以自建流量节点，我们称为 derp，不过一般用不着，如果特别卡的话，再说。</p><p>有两种方法，一种是 derp 和 headscale 控制器节点在同一台机器上，一种是无所谓在不在一台机器上都可以使用。不管那一种，需要开一个和 headscale 控制器不同的三级域名。</p><h4 id="简易版自体-derp"><a href="#简易版自体-derp" class="headerlink" title="简易版自体 derp"></a>简易版自体 derp</h4><p>参考文章：<a href="https://github.com/juanfont/headscale/issues/1326">“嵌入式 DERP（和 STUN）服务器”提供哪些具体服务 · 问题 #1326 · juanfont/headscale</a></p><p> derp 和 tailscale 节点在同一台机器上的情况下，只需要调整 <code>config.yaml</code> 的 derp 相关配置：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">derp:</span><br><span class="line">  server:</span><br><span class="line">    # 把这个改成true</span><br><span class="line">    enabled: true</span><br><span class="line"></span><br><span class="line">    # 改不改无所谓</span><br><span class="line">    region_id: 999</span><br><span class="line"></span><br><span class="line">    # 在 tailscale 命令中看到的自己的 derp 的名字和，以及 derp 的全名</span><br><span class="line">    region_code: "rn_emb"</span><br><span class="line">    region_name: "racknerd DERP"</span><br><span class="line">    </span><br><span class="line">    # 待会在 docker-compose 中需要开放的端口</span><br><span class="line">    stun_listen_addr: "0.0.0.0:3478"</span><br></pre></td></tr></tbody></table></figure><p>然后修改 <code>docker-compose.yml</code>：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">version: '3.5'</span><br><span class="line">services:</span><br><span class="line">  headscale:</span><br><span class="line">    image: headscale/headscale:latest</span><br><span class="line">    volumes:</span><br><span class="line">      - ./config:/etc/headscale/</span><br><span class="line">      - ./data:/var/lib/headscale</span><br><span class="line">    ports:</span><br><span class="line">      - [server_ports]:8080</span><br><span class="line">      - '3478:3478/udp'</span><br><span class="line">    command: headscale serve</span><br><span class="line">    restart: unless-stopped</span><br></pre></td></tr></tbody></table></figure><p>最后重启 docker-compose</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down</span><br><span class="line">dockekr-compose up -d</span><br></pre></td></tr></tbody></table></figure><p>在客户端处使用  <code>tailscale netcheck</code> 检查，出现 derp 节点即为成功。</p><h4 id="通用-derp-配置"><a href="#通用-derp-配置" class="headerlink" title="通用 derp 配置"></a>通用 derp 配置</h4><p>参考文章：<a href="https://github.com/slchris/derp-server">slchris/derp-server：Tailscale/Headscale derp 服务器</a></p><p>需要配置一个 docker 的 derp 容器。网上有挺多教程用的是单独开的 derp 域名然后用这个域名去申请证书，申请到的证书名字前缀命名和域名一致，或者用证书工具来申请。但我还是照例，用我之前申请的泛域 ssl 证书。新建一个 derp 文件夹，里面放上 <code>docker-compose.yml</code> 文件。假设我的 derp 域名为 derp.xxx.xyz：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">version: '3.3'</span><br><span class="line">services:</span><br><span class="line">    derp-server:</span><br><span class="line">        restart: always</span><br><span class="line">        container_name: derper</span><br><span class="line">        ports:</span><br><span class="line">            - 12345:443</span><br><span class="line">            - '3478:3478/udp'</span><br><span class="line">        volumes:</span><br><span class="line">            - '/etc/ssl/xxx.crt:/app/certs/derp.xxx.xyz.crt'</span><br><span class="line">            - '/etc/ssl/xxx.key:/app/certs/derp.xxx.xyz.key'</span><br><span class="line">        environment:</span><br><span class="line">            - DERP_CERT_MODE=manual</span><br><span class="line">            - DERP_DOMAIN=derp.xxx.xyz</span><br><span class="line">        image: 'ghcr.io/slchris/derp-server:v1'</span><br></pre></td></tr></tbody></table></figure><p>启动容器 <code>docker-compose up -d</code>，访问 <a href="https://derp.xxx.xyz:12345/">https://derp.xxx.xyz:12345</a> 查看 12345 端口是否能访问。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20231029134245.png"></p><p>然后修改 <code>config.yaml</code> 文件的 derp 部分，其实只用改那个 paths 就行，另外提一嘴，如果只需要用自建的 derp 而不需要 tailscale 提供的公共 derp，只需要注释掉 urls 里面的那行网址就行：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">derp:</span><br><span class="line">  server:</span><br><span class="line">    enabled: false</span><br><span class="line">    </span><br><span class="line">    region_id: 999</span><br><span class="line"></span><br><span class="line">region_code: "headscale"</span><br><span class="line">    region_name: "Headscale Embedded DERP"</span><br><span class="line"></span><br><span class="line">    stun_listen_addr: "0.0.0.0:3478"</span><br><span class="line"></span><br><span class="line">  urls:</span><br><span class="line">   # 只想用自建 derp 的话，注释掉下面这行</span><br><span class="line">    - https://controlplane.tailscale.com/derpmap/default</span><br><span class="line"></span><br><span class="line">  paths:</span><br><span class="line">   # 只需要加这句</span><br><span class="line">     - /etc/headscale/derp.yaml</span><br></pre></td></tr></tbody></table></figure><p>在 <code>config.yaml</code> 文件夹内新增一个 <code>derp.yaml</code>:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">regions:</span><br><span class="line">    # 改不改无所谓</span><br><span class="line">  900:</span><br><span class="line">    regionid: 900</span><br><span class="line">    # 在 tailscale 命令中看到的自己的 derp 的名字和，以及 derp 的全名</span><br><span class="line">    regioncode: rn</span><br><span class="line">    regionname: racknerd American </span><br><span class="line">    nodes:</span><br><span class="line">      - name: 900a</span><br><span class="line">        regionid: 900</span><br><span class="line">        hostname: derp.baobaobao.xyz</span><br><span class="line">        stunport: 3478</span><br><span class="line">        stunonly: false</span><br><span class="line">        derpport: 12345</span><br></pre></td></tr></tbody></table></figure><p>最后重启 docker-compose</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down</span><br><span class="line">dockekr-compose up -d</span><br></pre></td></tr></tbody></table></figure><p>在客户端处使用  <code>tailscale netcheck</code> 检查，出现 derp 节点即为成功。</p><h4 id="关于两种方法的混用问题"><a href="#关于两种方法的混用问题" class="headerlink" title="关于两种方法的混用问题"></a>关于两种方法的混用问题</h4><p>这是一个小发现：如果使用了第一种方法通过 docker 把 3478 端口透出来了，那么第二部如果是在同一台机子上，derp 容器是无法启动的。但反过来，自体 derp 如果没有映射 3478 端口的话，使用 <code>tailscale netcheck</code> 来看节点是没有启动的（没有 ping 值），但！此时我们启动 derp 容器，不用再做后面修改 <code>config.yaml</code> 和 <code>derp.yaml</code> 的步骤，会发现节点也连上了。利用这种方法部署，也未尝不可。</p><h4 id="防止-DERP-被滥用"><a href="#防止-DERP-被滥用" class="headerlink" title="防止 DERP 被滥用"></a>防止 DERP 被滥用</h4><p>从配置上看，人家只要拿到我们的 derp 网址，探测到端口就可以白嫖了（虽然还是有一定门槛）。有什么办法可以阻拦一下呢？还真有，那就是客户端需要连上和 derp 一样的 headscale 节点才能使用 derp，然后开启一个叫  DERP_VERIFY_CLIENTS 的参数。修改 derp 节点的 docker-compose.yml：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">version: '3.3'</span><br><span class="line">services:</span><br><span class="line">    derp-server:</span><br><span class="line">        restart: always</span><br><span class="line">        container_name: derper</span><br><span class="line">        ports:</span><br><span class="line">            - 12345:443</span><br><span class="line">            - '3478:3478/udp'</span><br><span class="line">        volumes:</span><br><span class="line">            - '/etc/ssl/xxx.crt:/app/certs/derp.xxx.xyz.crt'</span><br><span class="line">            - '/etc/ssl/xxx.key:/app/certs/derp.xxx.xyz.key'</span><br><span class="line">        environment:</span><br><span class="line">            - DERP_CERT_MODE=manual</span><br><span class="line">            - DERP_DOMAIN=derp.xxx.xyz</span><br><span class="line">            # 加这一行就行</span><br><span class="line">            - DERP_VERIFY_CLIENTS=true</span><br><span class="line">        image: 'ghcr.io/slchris/derp-server:v1'</span><br></pre></td></tr></tbody></table></figure><p>如果 derp 和 headscale 控制器不在一起的话，就需要把 derp 所在的这个节点也用 tailscale 客户端连上自己的 headscale 控制器才可以。可以使用 apt 等工具包安装 tailscale，也可以使用 docker 安装 tailscale 客户端，这里我使用后者，新建一个 docker-compose.yml 文件：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">version: '3.1'</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  Headscaled:</span><br><span class="line">    container_name: Headscaled_Client</span><br><span class="line">    image: tailscale/tailscale</span><br><span class="line">    network_mode: host</span><br><span class="line">    privileged: true</span><br><span class="line">    restart: always</span><br><span class="line">    cap_add: </span><br><span class="line">      - net_admin</span><br><span class="line">      - sys_module</span><br><span class="line">    volumes:</span><br><span class="line">      - ./lib:/var/lib</span><br><span class="line">      - /dev/net/tun:/dev/net/tun</span><br><span class="line">    command: sh -c "mkdir -p /var/run/tailscale &amp;&amp; ln -s /tmp/tailscaled.sock /var/run/tailscale/tailscaled.sock &amp;&amp; tailscaled"</span><br></pre></td></tr></tbody></table></figure><p>启动 <code>docker-compose up -d</code></p><p>用 ui 配置一个一次性的 key，然后用 key 连接到 headscale：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose exec Headscaled tailscale up --auth-key=[key_value] --login-server=[server_url] --accept-dns=false</span><br></pre></td></tr></tbody></table></figure><h2 id="最终完全版-headscale-控制器参考配置"><a href="#最终完全版-headscale-控制器参考配置" class="headerlink" title="最终完全版 headscale 控制器参考配置"></a>最终完全版 headscale 控制器参考配置</h2><p>开启 headscale-ui，https 反代，derp。</p><p>docker-compose.yml：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">version: '3.5'</span><br><span class="line">services:</span><br><span class="line">  headscale:</span><br><span class="line">    image: headscale/headscale:latest</span><br><span class="line">    volumes:</span><br><span class="line">      - ./config:/etc/headscale/</span><br><span class="line">      - ./data:/var/lib/headscale</span><br><span class="line">    ports:</span><br><span class="line">      - 10443:8080</span><br><span class="line">      - 9090:9090</span><br><span class="line">      - '3478:3478/udp'</span><br><span class="line">    command: headscale serve</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">  headscale-ui:</span><br><span class="line">    container_name: headscale-ui</span><br><span class="line">    image: ghcr.io/gurucomputing/headscale-ui:latest</span><br><span class="line">    pull_policy: always</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    ports:</span><br><span class="line">      - 10444:80</span><br></pre></td></tr></tbody></table></figure><p>caddyfile:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">https://xxx.xxx.xyz {</span><br><span class="line">    reverse_proxy localhost:10443</span><br><span class="line">    tls  /etc/ssl/xxx.crt /etc/ssl/xxx.key</span><br><span class="line">    reverse_proxy /metrics* 127.0.0.1:9090</span><br><span class="line">    reverse_proxy /web* 127.0.0.1:10444</span><br><span class="line">    basicauth /web* {</span><br><span class="line">      me $2a$14$/rQHsSabPqQ3zpnGtU2ZQeGSBYozSCwA5HLUEwwp78OEhQVwECGyC #123456</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>config.yaml:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">server_url: https://xxx.xxx.xyz</span><br><span class="line">listen_addr: 0.0.0.0:8080</span><br><span class="line">metrics_listen_addr: 0.0.0.0:9090</span><br><span class="line">grpc_listen_addr: 0.0.0.0:50443</span><br><span class="line">grpc_allow_insecure: false</span><br><span class="line">private_key_path: /var/lib/headscale/private.key</span><br><span class="line">noise:</span><br><span class="line">  private_key_path: /var/lib/headscale/noise_private.key</span><br><span class="line">ip_prefixes:</span><br><span class="line">  - 10.1.0.0/16</span><br><span class="line">derp:</span><br><span class="line">  server:</span><br><span class="line">    enabled: true</span><br><span class="line">    region_id: 999</span><br><span class="line">    region_code: "my"</span><br><span class="line">    region_name: "my DERP"</span><br><span class="line">    stun_listen_addr: "0.0.0.0:3478"</span><br><span class="line">  urls:</span><br><span class="line">    - https://controlplane.tailscale.com/derpmap/default</span><br><span class="line">  paths: []</span><br><span class="line">  auto_update_enabled: true</span><br><span class="line">  update_frequency: 24h</span><br><span class="line">disable_check_updates: false</span><br><span class="line">ephemeral_node_inactivity_timeout: 30m</span><br><span class="line">node_update_check_interval: 10s</span><br><span class="line">db_type: sqlite3</span><br><span class="line">db_path: /var/lib/headscale/db.sqlite</span><br><span class="line">acme_url: https://acme-v02.api.letsencrypt.org/directory</span><br><span class="line">acme_email: ""</span><br><span class="line">tls_letsencrypt_hostname: ""</span><br><span class="line">tls_client_auth_mode: relaxed</span><br><span class="line">tls_letsencrypt_cache_dir: /var/lib/headscale/cache</span><br><span class="line">tls_letsencrypt_challenge_type: HTTP-01</span><br><span class="line">tls_letsencrypt_listen: ":http"</span><br><span class="line">tls_cert_path: ""</span><br><span class="line">tls_key_path: ""</span><br><span class="line">log:</span><br><span class="line">  format: text</span><br><span class="line">  level: info</span><br><span class="line">acl_policy_path: ""</span><br><span class="line">dns_config:</span><br><span class="line">  nameservers:</span><br><span class="line">    - 1.1.1.1</span><br><span class="line">  domains: []</span><br><span class="line">  magic_dns: false</span><br><span class="line">  base_domain: example.com</span><br><span class="line">unix_socket: /var/run/headscale.sock</span><br><span class="line">unix_socket_permission: "0770"</span><br><span class="line">logtail:</span><br><span class="line">  enabled: false</span><br><span class="line">randomize_client_port: true</span><br></pre></td></tr></tbody></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><p>不要在国内云上架设 headscale！试过秒封（良心云，直接封机子，申诉还要上传身份证）。</p></li><li><p>windows 端，如果发现使用局域网速度缓慢，或者连接不上，可以通过：</p><ul><li>disconnect 再 connect，重新刷新链接</li><li>使用命令 <code>tailscale netcheck</code> 和  <code>tailscale status</code> 查看连接情况。</li></ul></li><li><p>如果有哪个节点配置错误或需要删除，可以通过下面的命令删除</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#已过期</span><br><span class="line">#docker-compose exec headscale headscale nodes delete yyyy</span><br><span class="line">docker-compose exec headscale headscale nodes delete -i [节点序号]</span><br></pre></td></tr></tbody></table></figure><p>yyy 的内容就是 <code>docker-compose exec headscale headscale nodes list</code> 第三列显示的设备名（即 Name）。</p></li></ol><h2 id="其他参考文章（仅留档）"><a href="#其他参考文章（仅留档）" class="headerlink" title="其他参考文章（仅留档）"></a>其他参考文章（仅留档）</h2><ul><li><a href="https://blog.csdn.net/easylife206/article/details/123861092">Tailscale 开源版中文部署指南（支持无限设备数、自定义多网段 、自建中继等高级特性）…_运维之美的博客-CSDN博客</a></li><li><a href="https://www.hi-linux.com/posts/15561.html">Tailscale 开源版中文部署指南（支持无限设备数、自定义多网段 、自建中继等高级特性） - 奇妙的 Linux 世界</a></li><li><a href="https://blog.csdn.net/alex_yangchuansheng/article/details/122954920">比 Tailscale 更好的内网穿透方案 - Headscale_米开朗基杨的博客-CSDN博客</a></li><li><a href="https://zhuanlan.zhihu.com/p/593342103">headscale常用命令</a></li><li><a href="https://ysicing.me/posts/headscale-intro/">Headscale 的部署方法和使用教程 (20230401 版) :: 缘生笔记</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;参考文章：&lt;/p&gt;</summary>
    
    
    
    <category term="Network" scheme="https://zbttl-github-io.vercel.app/categories/Network/"/>
    
    
    <category term="内网穿透" scheme="https://zbttl-github-io.vercel.app/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
    <category term="docker" scheme="https://zbttl-github-io.vercel.app/tags/docker/"/>
    
    <category term="headscale" scheme="https://zbttl-github-io.vercel.app/tags/headscale/"/>
    
  </entry>
  
  <entry>
    <title>还行吧——战火重燃 b 测体验</title>
    <link href="https://zbttl-github-io.vercel.app/huan-xing-ba-zhan-huo-chong-ran-b-ce-ti-yan/"/>
    <id>https://zbttl-github-io.vercel.app/huan-xing-ba-zhan-huo-chong-ran-b-ce-ti-yan/</id>
    <published>2022-09-26T16:00:00.000Z</published>
    <updated>2022-09-26T19:52:25.084Z</updated>
    
    <content type="html"><![CDATA[<p>没预购，所以中强度爆肝两天。（虽然是 cod 老玩家，但其实从来没在 a 测前预购过，从 cod15 开始都是玩的几天 b 测，属实是假粉了）</p><p>结论：没有类似 cod16 测完以后「劳资一定要买，砸锅卖铁都要买」的冲动，但买肯定还是要买，因为——比先锋强，强很多。而且明年也没有新 cod 了，这还不买？</p><p>一点一点说。</p><h2 id="身法削弱"><a href="#身法削弱" class="headerlink" title="身法削弱"></a>身法削弱</h2><p>没了滑铲取消，没了双切。多了个飞扑。</p><p>实际上，滑铲取消也不算没了，正确说法应该说是削弱或者换了种操作方法，对于手柄切换成双击架枪然后滑铲的时候按两下瞄准就可以了，但身法肯定是没有原来灵活，而且其实还有副作用（转角会莫名其妙架枪），但感觉问题不大，但有种说法是这是 bug，正式版可能删掉，那就很难受了。</p><p>其实滑铲取消这个吧，在我手上最大的用处不是秀身法，而是跑路无聊的时候多按按手柄。。。。以前有种说法，就是 rts 玩家开场的时候虽然没啥要操作的但还是会做很多废操作去刷 apm（每分钟操作数），就为了热热手，防止待会要开始微操的时候手冷。在我这里滑铲取消就差不多起这个作用。</p><p>双切没了很要命。快节奏 fps 都有双切，我都养成了换弹癌 + 换的差不多按下左摇杆跑步取消的习惯了。结果现在一下子取消不了，换弹快的还好说，机枪那种玩意。。。。就硬是换了半天被我切了切去没换完。而且开始换弹了还不能取消，一换弹癌的话就只有手枪可以用了。不过之前有好事者对比 cod 和 bf 的换弹，说 「bf 的换弹细节很好，在某一个细节打断的话重新切回来的时候就会从那个细节那里从新开始，cod 就不行，可能是技术问题」，我当时就觉得扯淡——那双切失败岂不是没有任何惩罚？这下好了，iw 听了那家伙的谗言，也换成 bf 这样的了。</p><p>至于飞扑，我又不是没玩过 cod9，两个字——没用。</p><h2 id="枪匠和枪"><a href="#枪匠和枪" class="headerlink" title="枪匠和枪"></a>枪匠和枪</h2><p>更加复杂了。</p><p>我一直对枪匠这个东西抱有很复杂的情感。因为我对复杂而精密的东西很有好感，所以我一开始觉得枪匠是个好东西。</p><p>但到后来，每次玩一把新枪，都要去翻翻攻略，我就觉得，emmm，好累。。。（其实对于我这种 kd 1 左右的技术，只要不瞎配，效果其实是差不多的，但我连瞎配都懒得配）</p><p>这次 cod19 在原有的基础上借鉴了 cod18 的弹药和弹夹分开的机制，更复杂了。</p><p>枪这个，这次新增了枪族这个属性，因为不知道升级速度和配件数量（这次只有两个枪族公开了，一个是 ar 系列，一个是德械），所以也不知道是变得更简单了还是更肝了，我觉得 cod18 已经是肝的极限了，总不可能比那个玩意还肝吧。。。</p><p>但肯定是更复杂的。另外我一个同学对没有公开 ak 系列枪族感到不满，有 ar 居然没有 ak？他说完我也觉得怪怪的。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E3%80%8A%E4%BD%BF%E5%91%BD%E5%8F%AC%E5%94%A4%C2%AE%EF%BC%9A%E7%8E%B0%E4%BB%A3%E6%88%98%E4%BA%89%C2%AEII%202022%E3%80%8B%E5%85%AC%E5%BC%80%E8%AF%95%E7%8E%A9%2002.png"><br><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E3%80%8A%E4%BD%BF%E5%91%BD%E5%8F%AC%E5%94%A4%C2%AE%EF%BC%9A%E7%8E%B0%E4%BB%A3%E6%88%98%E4%BA%89%C2%AEII%202022%E3%80%8B01.png"></p><h2 id="装备技能和战场升级"><a href="#装备技能和战场升级" class="headerlink" title="装备技能和战场升级"></a>装备技能和战场升级</h2><p>装备上新增了电击陷阱和钻地炸弹。电击陷阱我一开始以为和 cod12 那个一样，用过以后发现是震撼弹的奇妙版~中了以后会移动不了身体，然后还会莫名其妙开枪，还蛮好玩的。我最喜欢的 c4 还是和 cod16 后期一样扔不远，那就很弱了，可惜。望远镜出现在这里，不知道未来是不是可选，还是仍然是战区限定（感觉还是装备没删完，不小心放在这里了），如果大战场能用那挺好的。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E3%80%8A%E4%BD%BF%E5%91%BD%E5%8F%AC%E5%94%A4%C2%AE%EF%BC%9A%E7%8E%B0%E4%BB%A3%E6%88%98%E4%BA%89%C2%AEII%202022%E3%80%8B%E5%85%AC%E5%BC%80%E8%AF%95%E7%8E%A9%20(4).png"></p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E3%80%8A%E4%BD%BF%E5%91%BD%E5%8F%AC%E5%94%A4%C2%AE%EF%BC%9A%E7%8E%B0%E4%BB%A3%E6%88%98%E4%BA%89%C2%AEII%202022%E3%80%8B%E5%85%AC%E5%BC%80%E8%AF%95%E7%8E%A9%20(3).png"></p><p>新的技能系统我还蛮喜欢的，反正又算是新的创新吧，把以前那些比较强的技能和新加的一些强力技能全部归为后期的大招里面，不过新加的那些好像过强了，特别是那个自带 uav 的技能。。。。</p><p>战场升级加了很多东西。比如摄像头，电子干扰器（把 r6 的全部抄过来！）。作战包取消了新增一个配件的功能，变菜了（也可能是为了防止透正式版的一些配件出来），不过那玩意本来实战意义就不大。战场狂怒这个技能可以算是大兴奋剂了，我以为有了这玩意就可以冲起来了，然后发现。。。开完以后视线会变得超级模糊。。。。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E3%80%8A%E4%BD%BF%E5%91%BD%E5%8F%AC%E5%94%A4%C2%AE%EF%BC%9A%E7%8E%B0%E4%BB%A3%E6%88%98%E4%BA%89%C2%AEII%202022%E3%80%8B%E5%85%AC%E5%BC%80%E8%AF%95%E7%8E%A9%20(2).png"><br><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E3%80%8A%E4%BD%BF%E5%91%BD%E5%8F%AC%E5%94%A4%C2%AE%EF%BC%9A%E7%8E%B0%E4%BB%A3%E6%88%98%E4%BA%89%C2%AEII%202022%E3%80%8B%E5%85%AC%E5%BC%80%E8%AF%95%E7%8E%A9.png"></p><h2 id="连杀奖励"><a href="#连杀奖励" class="headerlink" title="连杀奖励"></a>连杀奖励</h2><p>连杀奖励现在不需要装一个技能才能变成按分数计算的了。</p><p>托这个改动的福，我跑去大战场用坦克把炮艇刷出来，加上脸白箱子抽出了无赖战士，因此两天的公测我就把所有连杀奖励都试了一遍。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E3%80%8A%E4%BD%BF%E5%91%BD%E5%8F%AC%E5%94%A4%C2%AE%EF%BC%9A%E7%8E%B0%E4%BB%A3%E6%88%98%E4%BA%89%C2%AEII%202022%E3%80%8B%E5%85%AC%E5%BC%80%E8%AF%95%E7%8E%A9%20(5).png"></p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E3%80%8A%E4%BD%BF%E5%91%BD%E5%8F%AC%E5%94%A4%C2%AE%EF%BC%9A%E7%8E%B0%E4%BB%A3%E6%88%98%E4%BA%89%C2%AEII%202022%E3%80%8B%E5%85%AC%E5%BC%80%E8%AF%95%E7%8E%A9%20(6).png"></p><p>低级连杀方面，小直升机被删掉了，虽然感觉那玩意本身也就是个吉祥物。炸弹无人机比较强，可以当探测机和连杀用。</p><p>中高级连杀方面，白磷弹被改成了隐形轰炸机，相当于被削弱了，不过本身那个烟雾效果就很讨厌。小车车上面的炮变成了机枪，影响不大，只要后面出码头，我还是能用小车车绕圈碾完整个地图。炮艇和攻击直升机削弱！炮艇的武器之间冷却好像变长了，直升机的转场功能没了，加上放出来的几个地图都是建筑物比较多，就。。。炸不到人。</p><p>无赖战士仍然无赖，没的说。</p><h2 id="大战场"><a href="#大战场" class="headerlink" title="大战场"></a>大战场</h2><p>大战场的坦克变强了。二号位获得了 360 度红外机枪，而且头不会冒在外面了。坦克（步兵装甲车）和装甲运输车的火力出现了差异，前者每炮伤害更高，后者射速更快。但前者和后者对枪，后者基本打不过。</p><p>新载具——大型直升飞机。血很厚而且居然可以在上面打狙。</p><p>大战场也有一个新模式，新模式里混有很多 ai。就有一种。。。。tf2+bf2042 的既视感？</p><h2 id="画风和玩法"><a href="#画风和玩法" class="headerlink" title="画风和玩法"></a>画风和玩法</h2><p>很多人吐槽的地方。</p><p>任务不显示红名，又没有小地图红点，还好地图没有那么阴间，但老六和泥头喷仍然是最完美的杀人方法。</p><p>不过我提出一点异议，iw 其实没有用很大力气把游戏做的很阴间，毕竟之前很多作也没有红名和小地图标红的，我觉得是画面进步，特效多了以后游戏自然识别率下降了。这次的火光和烟雾太大影响照门也是一个道理。</p><p>但和隔壁组想办法解决这个问题（比如人上挂灯啊什么的，cod18 甚至有点矫枉过正，红名标的太远导致年初的时候大机枪横飞）相比，iw 真就一点努力都不做。身法这个也是，其实要加强身法很简单：cod17 的 b 测的时候，那个飞天小裤裤光速滑铲很多人应该都有印象（不过后面正式版出的时候削了）。所以，实际上，cod 多人正统在 t 组？</p><h2 id="ui"><a href="#ui" class="headerlink" title="ui"></a>ui</h2><p>这才是最该吐槽的地方。</p><p>混乱的 ui，想进入游戏得翻来翻去。</p><p>以及莫名其妙按一下 b 就会退出到主菜单然后需要重新检测网络再进入游戏。</p><p>击杀提示本来是 cod 优势的地方，结果现在这个廉价的 ui 提醒。。。是和 bf2042 学坏了吗？</p><hr><p>多吐槽一点：</p><p>转眼到了一点，试玩应该结束了，结果和前两年不一样，还可以继续玩，试玩的倒计时变成了负数：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E3%80%8A%E4%BD%BF%E5%91%BD%E5%8F%AC%E5%94%A4%C2%AE%EF%BC%9A%E7%8E%B0%E4%BB%A3%E6%88%98%E4%BA%89%C2%AEII%202022%E3%80%8B00.png"></p><p>回想 16 当年，几乎每个赛季都不是按时结束的，不是黑命贵就是美国国庆节，反正赛季到了季票那里显示个 0s，就不更新，就拖着，最后第七赛季也是这么拖没得。</p><p>有种预感，感觉 iw 又要整活了。。。</p><p>（过一段时间后，iw 宣布测试延长两个小时，两个。。小时，顶啥用呢）</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E3%80%8A%E4%BD%BF%E5%91%BD%E5%8F%AC%E5%94%A4%C2%AE%EF%BC%9A%E7%8E%B0%E4%BB%A3%E6%88%98%E4%BA%89%C2%AEII%202022%E3%80%8B03.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;没预购，所以中强度爆肝两天。（虽然是 cod 老玩家，但其实从来没在 a 测前预购过，从 cod15 开始都是玩的几天 b 测，属实是假粉了）&lt;/p&gt;
&lt;p&gt;结论：没有类似 cod16 测完以后「劳资一定要买，砸锅卖铁都要买」的冲动，但买肯定还是要买，因为——比先锋强，强很多。而且明年也没有新 cod 了，这还不买？&lt;/p&gt;</summary>
    
    
    
    <category term="game" scheme="https://zbttl-github-io.vercel.app/categories/game/"/>
    
    
    <category term="cod" scheme="https://zbttl-github-io.vercel.app/tags/cod/"/>
    
    <category term="流水账" scheme="https://zbttl-github-io.vercel.app/tags/%E6%B5%81%E6%B0%B4%E8%B4%A6/"/>
    
  </entry>
  
  <entry>
    <title>win7 离线安装 pip 包</title>
    <link href="https://zbttl-github-io.vercel.app/win7-chi-xian-an-zhuang-pip-bao/"/>
    <id>https://zbttl-github-io.vercel.app/win7-chi-xian-an-zhuang-pip-bao/</id>
    <published>2022-07-30T16:00:00.000Z</published>
    <updated>2022-09-26T18:38:07.850Z</updated>
    
    <content type="html"><![CDATA[<p>环境：</p><ul><li>win7</li><li>无网络</li></ul><p>适用环境是啥稍微猜一下都能猜到。当然还需要一台有网络的外网机，环境是任意版本 windows，推荐 windows 10/11。</p><h2 id="（可选）安装-conda"><a href="#（可选）安装-conda" class="headerlink" title="（可选）安装 conda"></a>（可选）安装 conda</h2><p>具体来说，是下载 pip 包的外网机安装 miniconda；无网络的内网机安装 anaconda。因为内网机是 windows 7，python 只能支持到 python 3.8.9，外网机装一个 conda 可以方便的新建一个 python 版本为 3.8.9 的虚拟环境；而 anaconda 自带了很多包，装在内网机里面，可能有些包就不用离线安装了。</p><p>另外 anaconda 和 miniconda 若是装在 win7 上，同样需要遵守内置 python 版本不大于 3.8.9 的规定（否则安装时报错），对于 anaconda，可以通过查询其<a href="https://anaconda.org/anaconda/python/files?version=3.8.8">对应版本自带 python 包的发布时间</a>，反推对应版本的 anaconda 安装包的发布时间：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220731141922.png"></p><p>低于 3.8.9 的最高版本是一年三个月前的 python 3.8.8。</p><p>那么下载 <a href="https://repo.anaconda.com/archive/Anaconda3-2021.04-Windows-x86_64.exe">2021.4</a> 的 anaconda 就不会有问题。</p><h2 id="（可选）外网机新建虚拟环境"><a href="#（可选）外网机新建虚拟环境" class="headerlink" title="（可选）外网机新建虚拟环境"></a>（可选）外网机新建虚拟环境</h2><p>安装好 anaconda 后，先初始化，否则后续创建虚拟环境后 pip 仍会下载/安装到全局环境中：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda init</span><br><span class="line">#powershell 下初始化，还需要关闭 powershell 策略限制</span><br><span class="line">#Set-ExecutionPolicy Bypass</span><br><span class="line">#conda init powershell</span><br></pre></td></tr></tbody></table></figure><p>新建虚拟环境（python 版本号是必填项，就算外网机子下的是 python 版本为 3.8.8 的 miniconda，此处不指定 python 版本后续 pip 也会下载/安装到全局环境中。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n pywin7 python=3.8.8</span><br></pre></td></tr></tbody></table></figure><blockquote><p>当然，用 conda 默认环境然后用 cmd 获取 conda pip 全路径然后后续用这个 pip 去下载/安装也能正确安装到 conda 中：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">where pip</span><br><span class="line"></span><br><span class="line">#cmd 中显示</span><br><span class="line">C:\Users\zbttl\miniconda3\Scripts\pip.exe</span><br><span class="line">C:\Python39\Scripts\pip.exe</span><br><span class="line">#后续运行 </span><br><span class="line">C:\Users\zbttl\miniconda3\Scripts\pip.exe download xxx</span><br></pre></td></tr></tbody></table></figure><p>但是吧。。。。这样我为什么不用纯 python 呢？（不过绝对路径的 pip 用 pip list 起来和正正经经激活 conda 环境出来的 pip list 结果上还是有一点不一样，感兴趣的朋友们可以自己试一试。</p></blockquote><p>激活：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip activate pywin7</span><br></pre></td></tr></tbody></table></figure><h2 id="外网机下载-pip-包"><a href="#外网机下载-pip-包" class="headerlink" title="外网机下载 pip 包"></a>外网机下载 pip 包</h2><p>参考文章：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/351494670">如何离线安装python的库及依赖库 - 知乎</a></li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip download xxx  -i https://pypi.mirrors.ustc.edu.cn/simple/</span><br></pre></td></tr></tbody></table></figure><p>下载后打包拷走到内网机。</p><h2 id="内网机安装-pip-包"><a href="#内网机安装-pip-包" class="headerlink" title="内网机安装 pip 包"></a>内网机安装 pip 包</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --no-index  --no-build-isolation --find-links=.\  xxx</span><br></pre></td></tr></tbody></table></figure><p>关于 –no-build-isolation 这个参数，参见<a href="https://github.com/pypa/pip/issues/5696">Install with –no-index no longer works · Issue #5696 · pypa/pip</a>。</p><h3 id="（可选）直接拷贝整个虚拟环境"><a href="#（可选）直接拷贝整个虚拟环境" class="headerlink" title="（可选）直接拷贝整个虚拟环境"></a>（可选）直接拷贝整个虚拟环境</h3><p>参考文章：<a href="https://blog.csdn.net/FY_2018/article/details/108539028">Anaconda离线创建python环境_FY_2018的博客-CSDN博客_anaconda离线创建环境</a></p><p>如果要装的包比较多，建议直接整个虚拟环境拷到内网机器并安装（上面两步就可以不做了）。</p><p>查看当前虚拟环境所在目录：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env list</span><br></pre></td></tr></tbody></table></figure><p>然后将相应目录打包。</p><p>另外还需要拷贝一个 pkgs 目录，在 conda 安装目录下。</p><p>来到内网机器，将 pkgs 覆盖到内网机器的 conda 目录下，而虚拟环境目录解压到任意文件夹下，假设解压到的文件夹名为 <code>pywin7</code>，则</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n py38 --clone ./pywin7 --offline</span><br></pre></td></tr></tbody></table></figure><p>即可。</p><p>不过这种方法会引入很多不必要的包。如果外网机是 miniconda 还好，外网机是 win10 anaconda 的情况下慎用。</p><p>另外「外网机下载 pip 包」参考文章中还写了一种方法，是用 pip freeze，但我觉得和 pip install 离线安装方法相比没什么优势，还要多处理一个安装配置文档，除非 pip install 离线安装时报错就可以试一下那个方法。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;win7&lt;/li&gt;
&lt;li&gt;无网络&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="code" scheme="https://zbttl-github-io.vercel.app/categories/code/"/>
    
    
    <category term="python" scheme="https://zbttl-github-io.vercel.app/tags/python/"/>
    
    <category term="win7" scheme="https://zbttl-github-io.vercel.app/tags/win7/"/>
    
    <category term="conda" scheme="https://zbttl-github-io.vercel.app/tags/conda/"/>
    
  </entry>
  
  <entry>
    <title>excel 和数据库数字格式间的互相转换</title>
    <link href="https://zbttl-github-io.vercel.app/excel-he-shu-ju-ku-shu-zi-ge-shi-jian-de-hu-xiang-zhuan-huan/"/>
    <id>https://zbttl-github-io.vercel.app/excel-he-shu-ju-ku-shu-zi-ge-shi-jian-de-hu-xiang-zhuan-huan/</id>
    <published>2022-07-28T16:00:00.000Z</published>
    <updated>2022-09-26T18:35:56.623Z</updated>
    
    <content type="html"><![CDATA[<p>数据库的数字字段以 oracle 为例。（其他数据库差不多的，自己举一反三啦）</p><h3 id="excel-转数据库"><a href="#excel-转数据库" class="headerlink" title="excel 转数据库"></a>excel 转数据库</h3><p>非常简单，把 excel 单元格格式改为自定义，具体格式为：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d-mm"月"-yy "1.00.00.000000 上午"</span><br></pre></td></tr></tbody></table></figure><p>再把数据贴进来就会自动变成 oracle 的日期格式了。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220731174414.png"></p><h3 id="数据库转-excel"><a href="#数据库转-excel" class="headerlink" title="数据库转 excel"></a>数据库转 excel</h3><p>这个就比较麻烦了。</p><p>首先需要分列，对数据按空格进行分列。找到数据选项卡，点击分列，在弹出得对话框中选择分隔符号，点击下一步，勾上空格，点击确定即可。不过有的时候粘贴进来就是分好列的，那就好办了。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220731174956.png"></p><p>选中 d 列，敲入公式：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=20&amp;RIGHT(A2,2)&amp;"/"&amp;MID(A2,4,1)&amp;"/"&amp;LEFT(A2,2)&amp;" "&amp;LEFT(B2,2)&amp;":"&amp;MID(B2,4,2)</span><br></pre></td></tr></tbody></table></figure><p>当然年份这里也有可能是 19 而不是 20 开头，可以按需求进行更改。如果有多列就双击填充柄或者选中要填充的单元格使用 ctrl+d 进行批量填充。</p><p>但此时合成出来的格式在 excel 中还不能正确的识别为时间格式。复制 d 列到记事本中，再粘贴回 e 列，会看到粘贴成了两列：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220731175653.png"></p><p>最后，在 g 列使用公式</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=E2+F2</span><br></pre></td></tr></tbody></table></figure><p>并双击填充柄或者选中要填充的单元格使用 ctrl+d 进行批量填充即可。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220731175834.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;数据库的数字字段以 oracle 为例。（其他数据库差不多的，自己举一反三啦）&lt;/p&gt;
&lt;h3 id=&quot;excel-转数据库&quot;&gt;&lt;a href=&quot;#excel-转数据库&quot; class=&quot;headerlink&quot; title=&quot;excel 转数据库&quot;&gt;&lt;/a&gt;excel 转数据库&lt;/h3&gt;</summary>
    
    
    
    <category term="office" scheme="https://zbttl-github-io.vercel.app/categories/office/"/>
    
    
    <category term="excel" scheme="https://zbttl-github-io.vercel.app/tags/excel/"/>
    
    <category term="oracel" scheme="https://zbttl-github-io.vercel.app/tags/oracel/"/>
    
    <category term="数据库" scheme="https://zbttl-github-io.vercel.app/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>自定义只粘贴文本快捷键</title>
    <link href="https://zbttl-github-io.vercel.app/zi-ding-yi-zhi-nian-tie-wen-ben-kuai-jie-jian/"/>
    <id>https://zbttl-github-io.vercel.app/zi-ding-yi-zhi-nian-tie-wen-ben-kuai-jie-jian/</id>
    <published>2022-07-28T16:00:00.000Z</published>
    <updated>2022-09-26T18:36:42.398Z</updated>
    
    <content type="html"><![CDATA[<h2 id="office"><a href="#office" class="headerlink" title="office"></a>office</h2><h3 id="excel"><a href="#excel" class="headerlink" title="excel"></a>excel</h3><ol><li><p>在文件-&gt;选项-&gt;自定义功能区中，勾选开发工具。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220801023406.png" alt="img"></p></li><li><p>创建个人宏工作簿。在开发工具中点击录制宏 ，下方的下拉列表选择「个人宏工作簿」。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220801230805.png" alt="img"></p></li><li><p>直接点击结束录制。点击「宏」，找到刚刚新建的宏，点击编辑。</p></li><li><p>贴入以下代码</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Sub 只粘贴文本()</span><br><span class="line">'</span><br><span class="line">' 只粘贴文本 宏</span><br><span class="line">'</span><br><span class="line"></span><br><span class="line">    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _</span><br><span class="line">        :=False, Transpose:=False</span><br><span class="line">End Sub</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220802061147.png" alt="img"></p></li><li><p>创建快捷键。有两种方案</p><ul><li>ctrl 加任意键</li><li>alt 加任意键</li></ul><p>第一种方案，只需要再打开宏，选择刚刚创建的宏，点右边的选项，就可以配置ctrl 加任意键类型的快捷键。但鉴于 ctrl 加任意键类型的快捷键已经被广泛配置于其他功能中，容易和其他快捷键发生冲突，所以建议用第二种方案。</p><p>右键左上角的保存按钮，点击显示快速访问工具栏。快速访问工具栏默认显示在工具栏底下，我觉得不太好看，点击工具栏底下快速访问工具栏的下拉按钮，选择在「功能区上方显示」。然后点击变换到左上角标题栏旁边的下拉按钮，选择其他命令。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220802140601.png" alt="img"></p><p>在下列位置选择命令中，找到宏，将刚刚新加的宏点窗口中间的添加到右侧。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220802140902.png" alt="img"></p><p>回到主界面，按下 alt，就能发现 excel 功能区出现了很多按键提示，其中快捷功能区可以用 alt+数字激活，如图中的界面，我们刚刚添加的宏就可以按 alt+1 激活。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220802141417.png" alt="img"></p></li></ol><h4 id="22-8-2-更新）-更方便且更好的方法"><a href="#22-8-2-更新）-更方便且更好的方法" class="headerlink" title="(22.8.2 更新） 更方便且更好的方法"></a><strong>(22.8.2 更新）</strong> 更方便且更好的方法</h4><p>用宏粘贴的弊端，就是无法撤销。直接用内置功能会比较好。</p><p>在最后一步添加快捷键时，可以选择「”文件”选项卡」-&gt;「选项」-&gt;「快速访问工具栏」-&gt;「不在功能区的命令」-&gt;「只保留文本（粘贴并只保留文本）」-&gt;「添加」。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220802142054.png"></p><h3 id="word"><a href="#word" class="headerlink" title="word"></a>word</h3><p>和 excel 类似，也是两种方法。由于基本相同所以我就少贴点图了~</p><ol><li><p>在文件-&gt;选项-&gt;自定义功能区中，勾选开发工具。</p></li><li><p>点击「宏」。确保下方宏的位置为「normal.dotm（共用模板）」。然后点击创建。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220810031248.png" alt="img"></p></li><li><p>贴入以下代码</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Sub 粘贴到文本()</span><br><span class="line">'</span><br><span class="line">' 粘贴到文本 宏</span><br><span class="line">'</span><br><span class="line">'</span><br><span class="line">Selection.PasteAndFormat (wdFormatPlainText)</span><br><span class="line">End Sub</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>创建快捷键。有两种方案，但第一种和 excel 这边有略微不同，并不限定使用 ctrl。</p><ol><li><p>文件-&gt;选项-&gt;自定义功能区，点击下方的「键盘快捷方式」，在弹出窗口「类别」中找到「宏」，就能看到我们新建的宏了。在「请按新快捷键」中自定义快捷键然后点击底下的指定即可，但有可能会和原有的快捷键冲突，表现为底下的目前指定到显示的是其他快捷键，这时候就要在上面的窗口中找到并重定义被占用的快捷键，或者更换一个不冲突的（不过 word 快捷键本来就很多，如果用 ctrl 系列快捷键，不被其他功能占用是很难的）</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220810032216.png" alt="img"></p></li><li><p>另一种方法和上面 excel 里面的大同小异。右键左上角的保存按钮，点击显示快速访问工具栏。然后找到快速访问工具栏的下拉按钮，选择其他命令；在下列位置选择命令中，找到宏，将刚刚新加的宏点窗口中间的添加到右侧。回到主界面，按下 alt，就能发现 word功能区出现了很多按键提示，其中快捷功能区可以用 alt+数字激活，如图中的界面，我们刚刚添加的宏就可以按 alt+1 激活。</p></li></ol></li></ol><h4 id="22-8-2-更新）-更方便且更好的方法-1"><a href="#22-8-2-更新）-更方便且更好的方法-1" class="headerlink" title="(22.8.2 更新） 更方便且更好的方法"></a><strong>(22.8.2 更新）</strong> 更方便且更好的方法</h4><p>同样的。</p><ol><li><p>「”文件”选项卡」-&gt;「选项」-&gt;「快速访问工具栏」-&gt;「不在功能区的命令」-&gt;「只保留文本（粘贴并只保留文本）」-&gt;「添加」。</p></li><li><p>「”文件”选项卡」-&gt;「选项」-&gt;「自定义功能区」，点击下方的「键盘快捷方式」，在弹出窗口中找到「类别」-&gt;「不在功能区中的命令」，在右侧窗口找到「PasteTextOnly」，确保下面的「将更改保存在」设置到了 Normal.dotm 中。在「请按新快捷键」中自定义快捷键然后点击底下的指定即可。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220810092820.png" alt="img"></p></li></ol><h2 id="wps-2019"><a href="#wps-2019" class="headerlink" title="wps 2019"></a>wps 2019</h2><p>wps 相比 office就简陋多了，快速访问工具栏没有自定义宏和自定义不在功能区命令的功能，只能用快捷键的方法。另外 wps 还没有个人宏工作簿，只能把宏存在某一个空的工作簿内，每次使用的时候手动打开。</p><h3 id="excel-1"><a href="#excel-1" class="headerlink" title="excel"></a>excel</h3><p>前几步参考 office excel 的 1-4 步，然后在宏界面点击选项，进行快捷键的设置（office 也有这个项，但只能设置 ctrl 相关快捷键确实太简陋了，office 没必要用这个功能）</p><h3 id="word-1"><a href="#word-1" class="headerlink" title="word"></a>word</h3><p>方法 1: 参考 office word 1-3、4.2，新建宏并放在自定义功能区中。wps 的选项路径为文件-&gt;工具-&gt;选项。其余步骤基本一致。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220810042043.png"></p><p>方法 2: 参考 office word 1-3，4.1，wps 无法直接新建「PasteTextOnly」快捷键，只能关联新建宏的快捷键。wps 的选项路径为文件-&gt;工具-&gt;选项。其余步骤基本一致。</p><h3 id="（8-10-更新）-wps-企业版"><a href="#（8-10-更新）-wps-企业版" class="headerlink" title="（8.10 更新） wps 企业版"></a><strong>（8.10 更新）</strong> wps 企业版</h3><p>企业版更新了快速访问工具栏支持自定义宏的功能。</p><p>但 excel 这边仍然没有个人宏工作簿，但可以用曲线救国的方法，把带宏的工作簿存为  xlam 文件并放到开发工具-&gt;加载项中。再在自定义快速访问工具栏中开启该宏。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;office&quot;&gt;&lt;a href=&quot;#office&quot; class=&quot;headerlink&quot; title=&quot;office&quot;&gt;&lt;/a&gt;office&lt;/h2&gt;&lt;h3 id=&quot;excel&quot;&gt;&lt;a href=&quot;#excel&quot; class=&quot;headerlink&quot; title=&quot;excel&quot;&gt;&lt;/a&gt;excel&lt;/h3&gt;</summary>
    
    
    
    <category term="office" scheme="https://zbttl-github-io.vercel.app/categories/office/"/>
    
    
    <category term="excel" scheme="https://zbttl-github-io.vercel.app/tags/excel/"/>
    
    <category term="word" scheme="https://zbttl-github-io.vercel.app/tags/word/"/>
    
    <category term="宏" scheme="https://zbttl-github-io.vercel.app/tags/%E5%AE%8F/"/>
    
  </entry>
  
  <entry>
    <title>kylin 填坑+图形化 ssh</title>
    <link href="https://zbttl-github-io.vercel.app/kylin-tian-keng-tu-xing-hua-ssh/"/>
    <id>https://zbttl-github-io.vercel.app/kylin-tian-keng-tu-xing-hua-ssh/</id>
    <published>2022-07-27T16:00:00.000Z</published>
    <updated>2022-10-18T13:34:31.527Z</updated>
    
    <content type="html"><![CDATA[<p><strong>这篇文章是上一篇达梦数据库的补充文章</strong></p><h3 id="kylin-镜像下载"><a href="#kylin-镜像下载" class="headerlink" title="kylin 镜像下载"></a>kylin 镜像下载</h3><p>之前文章提到过 kylin 有两种镜像，一种是服务器的镜像，一种是 desktop 镜像，我这里拿到的两种镜像文件名是：</p><ul><li>Kylin-Server-10-SP2-x86-Release-Build09-20210524（服务器镜像）</li><li>Kylin-Desktop-V10-SP1-Release-hwe-2107-x86_64.iso（桌面端镜像）</li></ul><p>惯例，直接百度搜不到官方镜像地址。google 搜到的第一个地址，来自互联网博物馆 <code>archive.org</code>，虽然也不是官方地址，但其他可信度比其他地址高。kylin 啊，你的官网下载地址就那么难找吗？</p><h3 id="vmware-tools-安装"><a href="#vmware-tools-安装" class="headerlink" title="vmware-tools 安装"></a>vmware-tools 安装</h3><p>桌面版镜像安装完后自动就会装好 vwmare-tools。</p><p>服务器镜像则不会。</p><p>网络上的教程和我平时的习惯是加载 vmware 自带的 vmware-tools 的 iso 镜像安装。但安装完后只有分辨率显示正常（动态分辨率），复制粘贴功能全不可用。</p><p>其实 kylin 自己的源中，就有适用其的 open-vm-tools：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#建议有网络的情况下先行运行</span><br><span class="line">#yum update</span><br><span class="line">yum install open-vm-tools-desktop</span><br></pre></td></tr></tbody></table></figure><p>然后重启即可复制粘贴文字至虚拟机中。但文件仍然不可复制，这一点桌面版镜像也一样。</p><h3 id="kylin-服务器版在-vmware-中无法开启网络"><a href="#kylin-服务器版在-vmware-中无法开启网络" class="headerlink" title="kylin 服务器版在 vmware 中无法开启网络"></a>kylin 服务器版在 vmware 中无法开启网络</h3><p>参考文章：<a href="https://blog.csdn.net/L864873466/article/details/123554151">VMware安装linux无网卡，只有lo网卡_IT门外人儿的博客-CSDN博客_linux lo网卡</a></p><ol><li><p>右键虚拟机名字-&gt;打开虚拟机目录</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220724143443.png" alt="img"></p><p>用记事本打开目录中的 vmx 文件，加入一行：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ethernet0.virtualDev = "e1000"</span><br></pre></td></tr></tbody></table></figure></li><li><p>进入系统中，右键右下角网卡图标-&gt;编辑连接，就能看到 ens33 这张网卡了。点齿轮图标（编辑选中的连接），进入常规选项卡，勾选「根据优先级自动连接」即可。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220724161023.png" alt="img"></p><p>话说回来，只有第一次创建 kylin 虚拟发现无法联网时我才执行了第一步，后续再创建多个虚拟机的时候，vmware 自动帮我在 .vmx 文件里写入了相应的代码，后续我只需要进入虚拟机执行第二部即可。这究竟是不是 vmware 的 bug 呢。。。</p></li></ol><h3 id="ssh-terminal-调用图形窗口"><a href="#ssh-terminal-调用图形窗口" class="headerlink" title="ssh/terminal 调用图形窗口"></a>ssh/terminal 调用图形窗口</h3><p>达梦安装和使用时有很大一部分操作在 gui 中，在有图形界面的虚拟机中似乎不是什么难事，然而在 ssh 就有些操作门槛。不过讲清楚原理的话，和虚拟机 terminal 中也大差不差。</p><ol start="0"><li><p>（对于 ssh）准备好 x11 软件，比如 xmanager，比如 MobaXterm。</p><ul><li><p>实际上经过实验几乎所有 ssh 终端都能和 x11 接上。虽然 xmanager 和 xshell 是一家的，但并没有规定两者一定要一起用。xshell 可以配合 MobaXterm 使用，其他 ssh 终端（MobaXterm、electerm、putty 等）也可以配合 xmanager 使用。</p></li><li><p>xmanager 安装好后运行 Xmanager - Passive 即可。</p></li><li><p>相较于 xmanager，MobaXterm 没有 30 天使用限制，功能也更为强大，但也更为复杂。MobaXterm 打开后点击右上角的 Xserver 标志即可。</p></li><li><p>对于高分辨率并使用了缩放的 windows 设备会有 dpi 缩放问题，具体表现为有些按键被挤压到界面外无法显示。对于 Xmanager - Passive，只能找到其应用本体文件（即 xmanager.exe），右键-&gt;属性-&gt;兼容性-&gt;更改高 dpi 设置，在「高 DPI 缩放替代处」下拉菜单选择「系统」或「系统（增强）」。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220724145919.png" alt="img">但这样也会导致软件本身的界面变得模糊。</p></li><li><p>对于 MobaXterm，除了用上面这个方法，还可以先右键 Xserver 标志，点击配置，在 X11 设置中调整 dpi。dpi 的算法是「根号(横向分辨率的平方+竖向分辨率的平方)/屏幕尺寸/windows缩放比例」，以我的笔记本联想 pro13 为例：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220724150603.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220724150555.png" alt="img"></p><p>那么 dpi 选 100 就差不多合适了。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220724150700.png" alt="img"></p></li></ul></li><li><p>切换到 root 账号下。</p></li><li><p>查看 <code>$DISPLAY</code> 变量，把结果记下来。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $DISPLAY</span><br></pre></td></tr></tbody></table></figure><p>在虚拟机的 terminal 中，这个变量的值是 <code>:0.0</code>。在 vnc 中，这个变量的值大概是 <code>:1.0</code>，实际上取决于你开了多少个 vnc 窗口；而在 ssh 中，大概率是没有值的。如果这里没有值，后面在非 root 用户下 export 什么都可以；但如果有值，export 的必须是这里的这个值。</p></li><li><p>添加当前窗口到到允许连接到 X 服务器的列表中</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhost +</span><br></pre></td></tr></tbody></table></figure></li><li><p>切换用户</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - dmdba</span><br></pre></td></tr></tbody></table></figure></li><li><p>定义该用户的 <code>$DISPLAY</code> 变量。对于 terminal 和 vnc，等号后面写第二步查到的值即可；对于 ssh，需要在值前面加上当前的局域网 ip。一般来说，如果 kylin 在虚拟机中，并且网络适配器设置为 nat，那么 192.168.127.1 这个 ip 是可以从实机连接到虚拟机中的。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo DISPLAY=:0.0</span><br><span class="line">#ssh用，假设当前设备局域网 ip 为 192.168.127.1</span><br><span class="line">#echo DISPLAY=192.168.127.1:0.0</span><br></pre></td></tr></tbody></table></figure></li><li><p>再次输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhost +</span><br></pre></td></tr></tbody></table></figure><p>弹出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">access control disabled, clients can connect from any host</span><br><span class="line">xhost:  must be on local machine to enable or disable access control.</span><br></pre></td></tr></tbody></table></figure><p>即可。</p><ul><li><p>对于 MobaXterm 有可能输入 <code>xhost +</code> 后会卡住然后报错。此时把鼠标悬停到 XServer 图标处，能看到本机的其他几个 ip</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220724154653.png" alt="img"></p><p>选其他可用的 ip 重新 export 一遍，比如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export DISPLAY=127.0.0.1:0.0</span><br></pre></td></tr></tbody></table></figure><p>再次运行 <code>xhost +</code>，如仍失败，重复上述步骤直至成功。</p></li></ul></li></ol><h3 id="kylin-桌面版无法安装"><a href="#kylin-桌面版无法安装" class="headerlink" title="kylin 桌面版无法安装"></a>kylin 桌面版无法安装</h3><p>安装后显示安装失败。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220724142915.png"></p><p>原因是创建账号的时候不能命名为 root。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220724143133.png"></p><p>命名为其他账户名后，如后续需要 root 账号可进入系统后使用</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></tbody></table></figure><p>开启。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;这篇文章是上一篇达梦数据库的补充文章&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;kylin-镜像下载&quot;&gt;&lt;a href=&quot;#kylin-镜像下载&quot; class=&quot;headerlink&quot; title=&quot;kylin 镜像下载&quot;&gt;&lt;/a&gt;kylin 镜像下载&lt;/h3&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://zbttl-github-io.vercel.app/categories/Linux/"/>
    
    
    <category term="ssh" scheme="https://zbttl-github-io.vercel.app/tags/ssh/"/>
    
    <category term="达梦" scheme="https://zbttl-github-io.vercel.app/tags/%E8%BE%BE%E6%A2%A6/"/>
    
    <category term="kylin" scheme="https://zbttl-github-io.vercel.app/tags/kylin/"/>
    
  </entry>
  
  <entry>
    <title>SELECT FEATURE FROM DAMENG_DATABASES</title>
    <link href="https://zbttl-github-io.vercel.app/select-feature-from-dameng-databases/"/>
    <id>https://zbttl-github-io.vercel.app/select-feature-from-dameng-databases/</id>
    <published>2022-07-15T16:00:00.000Z</published>
    <updated>2022-07-17T23:39:47.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>I CAN’T BELIEVE MY EYES!博主居然写国产 developer tools/operation system？</p></blockquote><p>咳咳。。。。</p><p>你没看错，虽然我对国产 ide 系工具根本不 care，总是表现出一种「不屑一顾」的态度，但俗话说的话，没有了解就没有发言权；然后就折腾了一周多，这不写个小作文，心有不甘~</p><p>我也没啥技术和使用需求，所以只能勉强写个使用体验，给各位就权当一乐~</p><p>另外明人不说暗话，我想要那 5 分，咳咳，懂得都懂- -</p><h2 id="初步安装-amp-使用"><a href="#初步安装-amp-使用" class="headerlink" title="初步安装&amp;使用"></a>初步安装&amp;使用</h2><p>培训时和达梦配套的 base system。。。emmm，也是国产的老朋友 kylin。</p><p>我对数据库并不是很熟悉，但 linux 用的不少，所以略微吐槽一下：kylin 并非主流常用的操作系统，所以安装的时候还要踩不少暗坑；和主流的 ubuntu debian rehl 不同，这玩意是分 server editon 和 desktop edition 的，两种系统的桌面环境截然不同，后者显著的比前者简单易用美观，且前者不能自动识别网卡，vmware tools 不能提供粘贴功能，只能通过虚拟机共享文件夹或者 ssh 转 sftp 的方法将文件考入。<del>但培训推荐用的是前者，emmm。。。虽说不是不可以接受吧，因为如果未来公司要用，也是用前这，但培训的时候都是一个人用，用后者体验会更好，操作逻辑应该都是一样的。</del> 但非服务器版的权限限制反而更严格，安装更麻烦。</p><p>安装按步骤来倒是异常简单，安装时界面都一步一步都把命令写出来了，相对于其他几个数据库在 linux 下通过二进制文件安装，完整配置（service 和初始化）都要自己一步步看文档去配，安装和初始化过程中 systemctl 都用窗口弹出的方法告诉用户怎么配置了；另外安装后工具也给的很全，几个 gui 工具都装上了。当然，kylin 是个 rpm 系系统，更傻瓜的方法是，给个 rpm 包~另外环境变量的配置也还没有通过提示给出，我觉得环境变量也可以通过几个固定的命令去配置的，可以顺路一带写出来。</p><h2 id="DESIGN-BY-ORACLE-I-FEEL-IT-LIKE-SSMS"><a href="#DESIGN-BY-ORACLE-I-FEEL-IT-LIKE-SSMS" class="headerlink" title="DESIGN BY ORACLE?I FEEL IT LIKE SSMS"></a>DESIGN BY ORACLE?I FEEL IT LIKE SSMS</h2><p>虽说达梦的框架上和 oracle 大差不差，但进入 manager 后，毫无疑问是和隔壁微软家的 ssms 更像，比如 pl/sql 标志性的竖向窗口列表并不存在，而且类似于 navicat/ssms 的横向标签页；预估作业计划在运行右侧；右键表选择查看数据可以直接进行修改而无需走事务操作流程。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220718064534.png"></p><p>只有当我一本正经的在 select 语句中敲入 rowid，我才意识到这玩意有 oracle 的影子。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220718064823.png"></p><p>不过底下的保存修改/取消修改和顶上的提交回滚居然用一样的图标，这个给差评，容易让人感到迷惑，看看 pl/sql 是怎么做的：</p><p>保存修改：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_7t_y7JnEAtRonV8_fklMKTfsXPk.cnt.jpg"></p><p>回滚：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_2gUER21eyYMi7lEj40w966WeW6Q.cnt.jpg"></p><p>辨识度极高。</p><h2 id="feature-or-bug？"><a href="#feature-or-bug？" class="headerlink" title="feature or bug？"></a>feature or bug？</h2><h3 id="文档很全，但缺乏检索功能"><a href="#文档很全，但缺乏检索功能" class="headerlink" title="文档很全，但缺乏检索功能"></a>文档很全，但缺乏检索功能</h3><p>我确实没见过安装完后会在 doc 目录下放入如此多，如此详细文档的软件：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220718070803.png"></p><p>这点确实该给大大的好评，但是，很快我就发现不对劲的地方：</p><p>对于新手来说，我想改服务器配置，我应该搜哪个文档呢？</p><p>茫茫多的 pdf，虽然有初步的命名，但仍然缺少区分度。</p><p>pdf 相较于普通的 txt，可以带图，且 kylin 默认带上了 pdf 阅读软件，是个好主意，但 txt 可以调用 linux 自带的 find 对内容进行检索，pdf 就不行。</p><p>建议做一个合在一起的，或者，要不要在做一个 markdown 版的文档？</p><h3 id="disql-运行错误？"><a href="#disql-运行错误？" class="headerlink" title="disql 运行错误？"></a>disql 运行错误？</h3><p>刚吐槽过安装时没有设置环境变量——但官方文档里其实有环境变量的配置的：</p><blockquote><p>DM8_HOME=/dm8</p><p>PATH=$PATH:$DM8_HOME/bin;$DM8_HOME/tool</p></blockquote><p>然后直接跑 <code>disql [账号]\[密码]</code>，就会报错：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建SOCKET连接失败</span><br></pre></td></tr></tbody></table></figure><p>原因嘛，也不复杂：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[dmdba@localhost ~]$ whereis disql</span><br><span class="line">disql: /dm8/bin/disql /dm8/tool/disql</span><br><span class="line">[dmdba@localhost ~]$ ls -al /dm8/bin/disql</span><br><span class="line">-rwxr-xr-x 1 dmdba dinstall 6879  7月 13 14:06 /dm8/bin/disql</span><br><span class="line">[dmdba@localhost ~]$ ls -al /dm8/tool/disql</span><br><span class="line">-rwxr-xr-x 1 dmdba dinstall 121  7月 13 14:06 /dm8/tool/disql</span><br></pre></td></tr></tbody></table></figure><p>看到了么？bin 里面也有一份 disql，但我们要开的是 tool 里面的  disql</p><p>所以：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/dm8/bin/disql [账号]\[密码]</span><br></pre></td></tr></tbody></table></figure><p>就不会有问题了。</p><p>bin 这里的 disql 我觉得应该从 tool 里面做链接过去。</p><h3 id="gui-服务起停问题"><a href="#gui-服务起停问题" class="headerlink" title="gui 服务起停问题"></a>gui 服务起停问题</h3><p>服务起停，按理来说，可以用命令行：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DmServiceDMSERVER stop</span><br><span class="line">DmServiceDMSERVER start</span><br></pre></td></tr></tbody></table></figure><p>也可以用 gui 界面：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmservice.sh</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220718070031.png"></p><p>但，一旦用命令起停以后，再用 gui，就会发现 DmServiceDMSERVERD 处于关闭状态，再也无法打开。</p><h3 id="manager-gui-默认不开自动补全和部分功能打开显示系统出错"><a href="#manager-gui-默认不开自动补全和部分功能打开显示系统出错" class="headerlink" title="manager gui 默认不开自动补全和部分功能打开显示系统出错"></a>manager gui 默认不开自动补全和部分功能打开显示系统出错</h3><p>恕我直言。。。我还没见过那个数据库 gui 不开自动补全的，尤其是因为达梦顶部缺少 gui 级别 use 功能的情况下，每次敲 select 都要带上库名，这还不开自动补全？</p><p>窗口-&gt;选项-&gt;查询分析器-&gt;编辑器-&gt;启用 sql 输入助手。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220718072710.png"></p><p>默认情况下，点到某些功能，如索引，约束的时候，会报错：系统错误。解决方法是上面管理工具中的导航树节点分批加载关掉：</p><p><img src="image/7%E6%9C%8816%E6%97%A5/1658100533737.png"></p><h2 id="I-wish-you-for-the-world"><a href="#I-wish-you-for-the-world" class="headerlink" title="I wish you for the world"></a>I wish you for the world</h2><p>试用了一圈回来，在我的预期之内，可用程度不低，但感觉还是差点什么。</p><p>差点什么呢？</p><p>我不 care 国产 developer tools/operation system 的原因，恰恰就在于他们总是强调自己是「国产」，是为了「破除技术封锁」而生的。</p><p>不管是达梦之于 oracle</p><p>kylin 之于 redhat</p><p>还是鸿蒙之于 android</p><p>他们有自己相对于原版独到的东西么？有</p><p>但从技术上还没到能够说服使用者换用他们家东西的水平。</p><p>要想打破封锁，最重要的不是「窝里斗」，而是走出去，做出独到的东西，让别人「不用你不行」</p><p>安装达梦的时候，我特意留意了一下能不能安装成英文版。很遗憾，不知道是安装包的原因，还是根本没有做英文版界面，反正就是没有。</p><p>doc 目录中这么详细的文档，也是国人特供。</p><p>其实现在数据库也有很多新的发展方向，比如 docker 部署，docker 是很方便，但数据库 docker 版本热更新现在还是个比较麻烦的问题。</p><p>希望国产的软件们再努努力吧。</p><p>That’s all。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;I CAN’T BELIEVE MY EYES!博主居然写国产 developer tools/operation system？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;咳咳。。。。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://zbttl-github-io.vercel.app/categories/Linux/"/>
    
    
    <category term="流水账" scheme="https://zbttl-github-io.vercel.app/tags/%E6%B5%81%E6%B0%B4%E8%B4%A6/"/>
    
    <category term="达梦" scheme="https://zbttl-github-io.vercel.app/tags/%E8%BE%BE%E6%A2%A6/"/>
    
    <category term="kylin" scheme="https://zbttl-github-io.vercel.app/tags/kylin/"/>
    
  </entry>
  
  <entry>
    <title>xbox 淘宝老头环 自兑换</title>
    <link href="https://zbttl-github-io.vercel.app/xbox-tao-bao-lao-tou-huan-zi-dui-huan/"/>
    <id>https://zbttl-github-io.vercel.app/xbox-tao-bao-lao-tou-huan-zi-dui-huan/</id>
    <published>2022-03-13T16:00:00.000Z</published>
    <updated>2022-03-19T11:49:42.274Z</updated>
    
    <content type="html"><![CDATA[<p>本来是不太想凑老头环的热度的。</p><p>然而上上周听了最新一期「请上中环」的广播以后。。。忍不住了。</p><p>看了一下 xbox 比价助手，最便宜的不锁区印度版都要 330：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Screenshot_20220319-181255.png"></p><p>买不起。。。我再看了眼淘宝和比价助手，得到两个讯息：</p><ol><li>我愿望单里的 cod9 时隔 n 年打折了，阿根廷服很便宜</li><li>老头环阿根廷服标准版淘宝卖 170</li></ol><p>我也知道阿根廷服是个啥尿性。。。。需要梯子来兑换，要不然就得花自己一晚上来兑换，要不就得让别人登录你的号来兑换，我是很不情愿让别人登录我的号的。但既然两个游戏都能通过在阿根廷买降低成本，那我认了。</p><p>然而。。。还是失算了，我先买了老头环，然后去问客服 cod9 多少钱。打折的 cod9 在印度服本体大概 60 块钱，阿根廷就 20 块钱不到。结果客服报了个 89？？？？</p><p>那我不干了，还不如直接在印度服买。可是那份阿根廷服老头环怎么办？码都发了。。。。那就直接用技术手段换吧，成功浪费一晚上。当年为了领 Columbia 的神界原罪 2 我留了一份<a href="https://zbttl-github-io.vercel.app/xbox-kua-qu-yang-mao-shen-jie-yuan-zui-2-xiao-ji/?highlight=%E7%A5%9E%E7%95%8C%E5%8E%9F%E7%BD%AA">文章</a>，这次就能参考一下。</p><ol><li><p>安装一个 proxifier。其实用其他支持 http/https/socks 代理的工具，甚至不装，用 windows 默认的 https 代理也不是不行，但会麻烦很多。</p></li><li><p>google 搜索「阿根廷 vpn」或者「阿根廷梯子」等类似的词汇。搜出的页面，打开以后应该有许多 http/https/socks 代理。</p></li><li><p>打开 proxifier，在 profile-&gt;proxy Servers中，点击 add，将第二步查到的 server 和 port 填进去，并选择正确的 protocol，https 代理选 http 和勾上底下的 tls 即可。</p></li><li><p>填好后点击下面的 check，看看 test1 是否通过，通过就证明这个代理应该能用。（test2 一般不用管，因为公共梯子延迟比较高，基本都通不过）</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/1647690008340.png"></p></li><li><p>在 proxifier 的 profile-&gt;proxification rules 中，新增一个 rules，application 设置为浏览器的进程名字，我常用的是 cent browser，所以 这里就写 chrome.exe，action 里面切换到刚刚新增的 proxy。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/1647690286604.png"></p></li><li><p>打开百度/谷歌，看看能不能打开；搜 ip，看看出现的 ip 地址是不是刚刚找到的那个阿根廷的。</p></li><li><p>打开微软网页端兑换网址<a href="https://account.microsoft.com/billing/redeem?refd=login.live.com">Microsoft account | Redeem your code or gift card</a>，这里可能显示的地区不是阿根廷，不用管，直接输入店家给的兑换码兑换即可。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/1647690451719.png"></p></li></ol><p>推荐在网络环境良好时兑换，对于电信是。。。凌晨两点~成功率较高：）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本来是不太想凑老头环的热度的。&lt;/p&gt;
&lt;p&gt;然而上上周听了最新一期「请上中环」的广播以后。。。忍不住了。&lt;/p&gt;</summary>
    
    
    
    <category term="Game" scheme="https://zbttl-github-io.vercel.app/categories/Game/"/>
    
    
    <category term="羊毛" scheme="https://zbttl-github-io.vercel.app/tags/%E7%BE%8A%E6%AF%9B/"/>
    
    <category term="xbox" scheme="https://zbttl-github-io.vercel.app/tags/xbox/"/>
    
    <category term="跨区" scheme="https://zbttl-github-io.vercel.app/tags/%E8%B7%A8%E5%8C%BA/"/>
    
    <category term="老头环" scheme="https://zbttl-github-io.vercel.app/tags/%E8%80%81%E5%A4%B4%E7%8E%AF/"/>
    
  </entry>
  
  <entry>
    <title>关于 coc 强行分区一事</title>
    <link href="https://zbttl-github-io.vercel.app/guan-yu-coc-qiang-xing-fen-qu-yi-shi/"/>
    <id>https://zbttl-github-io.vercel.app/guan-yu-coc-qiang-xing-fen-qu-yi-shi/</id>
    <published>2022-02-17T16:00:00.000Z</published>
    <updated>2022-03-19T10:12:00.922Z</updated>
    
    <content type="html"><![CDATA[<p>怎么说呢。。。要是以前的我，可能还会义愤填膺一下</p><p>现在，要不是部落的人来提醒我，我可能还不知道，知道了以后我也就吐槽了两句，笑笑，虽然能想到会出这种恶心的事，但没想到，还能有骗进来再杀的啊。。。。</p><p>先来给不清楚发生了什么的吃瓜群众们科普一下发生了什么吧。</p><h2 id="现在是个啥情况？"><a href="#现在是个啥情况？" class="headerlink" title="现在是个啥情况？"></a>现在是个啥情况？</h2><p>以前的部落冲突，分为中国国内的渠道服和国外的 google / 苹果服 / supercell id 服。</p><p>但国内国外服这个只是约定俗称的说法，严格意义上应该叫「国内登录器」和「国际登录器」，因为国内国外只是登录鉴权方式上有区别，实际上，登录后，国内国外数据是一个整体，进入游戏后无论是从哪个登录器登录进来的，体验都是相同的，可以进外国人的部落，打部落战的时候也可以搜到国外的部落战，部落公告板里也经常收到一堆英文的进部落申请。</p><p>然而从本次更新开始，国内和国外的账号之间的联系被强行一刀两断；从国内登录器中登录的账号打资源时完全搜不到歪果仁，搜索时间也变长许多，打部落战时也同样；聊天栏处一片空白，原来的消息全部消失了；部落中要是从国外登录器登录进来的人，查看他们信息的时候会显示查无此人。从国外登录器登录进来看就更过分了：从聊天版中看，会看到部分人「已退出部落」；查看部落内国内登录器的朋友，同样会显示查无此人。使用 apple 设备的同学，如果需要玩国服就需要用大陆的 app store 账号重新下载一个 coc（而不是升级原来的），如果要玩国际版，则需要在外区账号升级后把系统语言切换成除了简体中文外的语言，区域切换到大陆以外的区域。</p><p>而我呢，我的号比较特殊，既可以通过谷歌登录，也可以通过国内的腾讯渠道登录。<br><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Screenshot_20220217-185313-tuya2.png"></p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Screenshot_20220217-185321-tuya2.png"></p><p>为啥会这样呢？这里先科普一下自 2015 年到至今 coc 登录方式的变迁（之前不知道，因为我没开始玩，而且我感觉大概率也没变过）：</p><h2 id="coc-登录方式变迁时间线"><a href="#coc-登录方式变迁时间线" class="headerlink" title="coc 登录方式变迁时间线"></a>coc 登录方式变迁时间线</h2><h3 id="2015-年左右"><a href="#2015-年左右" class="headerlink" title="2015 年左右"></a>2015 年左右</h3><p>一开始，起码是在 2016 年以前，部落冲突是只允许通过谷歌来「验证账号」的，注意我的措辞，是「验证账号」。具体来说，无需登录即可进入游戏，但如果后续想要做更换设备/切换账号/重装 apk 等等会清除数据的行为，不绑定谷歌账号就找不回数据了。另外，supercell 也提供了一个一次性的转移码，可以把数据从安卓端同步到苹果端。如果玩过日系手游的玩家，对这类操作应该会感到很熟悉，不同的是，日系手游这类手游通常叫做「引继码」，使用引继码后原设备的游戏数据就会被清空，只能在新设备登录账号；而 coc 只能用一次转移码，使用后原设备的数据并不会被清空。正因如此，当时有的人没有渠道去把账号和 google 关联（因为当时 google play 已经是不用特殊手段就不能上的状态了），就会找有 apple 设备的熟人，把 coc 账号转移过去做关联，以防万一（当然这么做的话，未来如果还是没对 android 上的这个账号做关联，那这台 android 机被淘汰后，就只能用苹果手机来玩自己的账号了）。我一开始是在 android 上玩的，但后面有了一台 ipad，就把账号也关联到苹果上了，我也有足够的技术把账号关联上 google，所以我当时并不惧怕设备丢失的状况。</p><p>另外，还有一个歪门邪道：如果是 root 过的手机，可以通过备份 coc 软件数据 + android id 实现游戏数据备份。原来也很简单，无论有没有绑定 google 账号，打开 android 版 coc 时都不会对 google 账号过验证，而是通过本机内 coc 的数据，数据对应的账号 id，和 android id 来实现账号验证，只要后两者一样，打开时就能加载正确的账号信息，如果本机内 coc 数据也正确，那么就游戏的加载速度就很快，否则就会弹出「数据不同步」，然后重新从服务器中把最新的进度取下来覆盖到本地。同时，还可以通过这种手段实现快捷的账号切换：备份后清空应用数据，重新打开 coc，此时就是新号的状态。如果想要切到旧号，把当前的应用数据再做备份，然后恢复旧帐号的应用数据即可。16 年时，最小部落战人数限制还是 10，那时候部落人还比较少，如果凑不够人头，一般就会用这种办法，建几个小号凑数。当然，后来部落人多了，加上部落战开的少了，以及 android 7.0 后 android id 引用了随机化机制，这种方法是否还有效就不知道了。</p><h3 id="2016-年"><a href="#2016-年" class="headerlink" title="2016 年"></a>2016 年</h3><p>事情的转机，在于 2015 年从 sc 另一款作品海岛奇兵开始试水的国内引进。sc 当时是和昆仑一起合作，然后昆仑再去分包给其他的渠道。当然这仅限于安卓端，苹果端没有办法也没有必要这么做。然后到了 2016 年中 sc 和昆仑继续扩大合作，把这个机制带到了 coc 上。</p><p>不过当年 9 月份，腾讯就官宣以 80 多亿刀的价格将 sc 的实际控制权收入囊中。不过好巧不巧的是，当时互联网局面还基本是 BAT 三家鼎立的状态，除了 T 外另外两家当年都跟随昆仑签了二级渠道服的合同（百度是亲自下场，而阿里则是派了旗下的豌豆荚），只有腾讯没有签。当时腾讯的游戏产业已经做到国内最大，对于 sc 游戏引进这种香饽饽居然没有掺一脚，难道是作为国内头牌游戏厂商不甘寄人篱下的高傲？还是因为在 15 年左右就谈好收购事宜了呢？乍一想后者可能性比较大，但如果 15 年基本已经谈好合作了那么为什么还能容许昆仑插一脚进来？</p><p>总而言之，既然已经签好了合同，木已成舟，虽然跟其他的厂商有竞争关系，但腾讯并没有强行终止其他渠道服的合作。除了那些因为近年经营不善倒闭的渠道，剩下的渠道服都好好的活到了现在。后续，腾讯也推出了自己的渠道，阿不，这时候就要叫国内官方服了。</p><h3 id="2017-年"><a href="#2017-年" class="headerlink" title="2017 年"></a>2017 年</h3><p>从 2016 年开始，昆仑获得了 coc 的国内渠道服发行资格后，国内的玩家就可以通过找客服把国外的账号信息迁移过来。但，这种迁移是单向的，迁移到国内启动器后，就无法再迁移到国外启动器上了。另外，在 2015 年，起步稍早的海岛奇兵渠道服时代，虽然玩家玩的是国内渠道服，但仍然可以通过引继码的方式把账号数据引继到 ios 上。但此时 coc 渠道服时代，转移到国内服的账号，设置里的引继码选项都会消失，所以最好在转移前就通过引继码继承到 ios 这边。现在回想起来，这是 sc 对国内账号登录账号灵活度的第一次收紧。</p><p>而另一边，本家腾讯也慢悠悠的推出了自己的启动器，可以通过 qq / 微信两种方式登录游戏。一开始只是在当年新出的手游皇室战争中引入，当时是号称和国际版皇室战争一周年活动同时进行的国服开服，后续在 2017 年年中才在 coc 中也引入了类似的账号登录机制。和几大渠道服不同，腾讯也在 ios 处引入了国服的登录机制，毕竟目的不同，此时腾讯已经完成收购了，自然有理由在 ios 处也搞一个自己的登录渠道。只要设置中部落冲突的地区是大陆，那么启动时就会提示你用 qq / 微信账号登录，但设置为其他地区或者点击游客登录则仍然可以跳过登录界面直接登录游戏。但无论用哪种方式登录游戏，原有的游戏记录都不会丢失，只要你用 tx 的登录渠道登录过一次，你原来 ios 的游戏记录也会绑定到 tx 账号上。同时腾讯的账号也不分 ios 和 android 服，也就是说，如果你要进行账号转移，只需要在 ios 处登录一遍腾讯服，然后在 android 处下载腾讯版的 coc 就可以了，在当时国内手游几乎全为 android/ios 分服的环境下，这种操作简直是一股清流。同时，通过此种操作，之前所有渠道的数据都没和账号解除绑定，也就是此时我可以通过谷歌账号 \ ios apple账号 \ ios tx 账号 \ android tx 账号四种方法来登录同一份数据，可以说是很灵活了。只是万万没想到的是，此处绑定了腾讯的账号后现在居然就会被识别成国内账号，这里伏笔了。</p><p>无论是通过跟客服沟通，还是通过 tx 启动器的骚操作转移到国内的，都要进行实名制认证。不过当时许多客户端都可以通过点击实名认证窗口右上角的叉叉关闭窗口来变相的跳过实名认证。另外设置为繁体中文启动界面就看不到碍眼的安全游戏提醒了。</p><p>当年的迅游手机加速器，能显示处加速游戏的延迟数据，当时我用来同时加速 google 服和 tx 服，发现从谷歌启动器处登录的游戏延迟始终在 200ms 左右，而从国内启动器登录的延迟在 30ms 左右。虽然此时经过几轮网络优化，谷歌服那边掉线的情况已经得到很大的缓解（15 年的时候部落战掉线那可是家常便饭），但不开加速器偶尔还是会掉一下，而国内服则完全不会掉，当时猜测可能是国内有双活或者是 cdn 边缘加速，后者可能性大一点，因为是全球数据同步，后者成本小一些。</p><p>总之，17 年，可能是部落冲突，最好的时代了，无论是从登录人数，游戏质量，还是登录灵活度来说。</p><h3 id="2018-年"><a href="#2018-年" class="headerlink" title="2018 年"></a>2018 年</h3><p>18 年开始，tx 的魔爪开始伸出来了，各种月卡，皮肤开始在 coc 商城中出现。</p><p>回到主题，这一年 sc 推出了 supercell id 这个概念，再也不需要引继码来在 ios/android 中进行同步了。但，如果你之前已经绑定过国内的账号，那你的游戏设置界面中是不会有 supercell id 这类选项的。</p><p>悄悄的，我也发现，客户端内被屏蔽的词多了起来，而且屏蔽的分词功能做的相当烂，没文化也想不到什么比较优雅的例子，类似「大学生活好吗」这种，估计在 coc 聊天版中显示出来就是一大串星号。不过！如果你用<strong>梯子</strong>登录<strong>国际服账号</strong>（这两个条件缺一不可），会发现在国服账号中被屏蔽掉的词语又能正常显示出来了，懂得都懂。</p><p>另外一件事，当时我部落的副首领兼大学同学换手机，然后登录不进自己的 coc 账号了。因为当初是我亲自帮他申请的腾讯账号版本，我也很奇怪，平常大家都开着 qq 怎么你就可能登录不进账号呢？后来发现一个荒诞的事情，因为这位同学平时也玩皇室战争，而且当时他的游戏中心也在皇室战争上，然后他皇室战争的号也绑在 qq 这边，据他回忆绑定的时候居然给他选择说是一个 qq 号只能绑定一个游戏，部落冲突和皇室战争只能二选一！他选择绑了皇室战争，所以部落冲突相当于没有绑定了，换手机的时候账号就掉了。当时对此我还是有点持怀疑态度的，因为如果当时已经换绑了，应该马上就不能登录 coc 了，并不用等到换手机的那一天才发现的，而且我的账号怎么就没问题呢？直到我拿到他的手机用他的 qq 账号登录部落冲突，然后看到了类似的表述：</p><blockquote><p>该账号已绑定皇室冲突…..</p></blockquote><p>原谅我没有留下当时的截图。。。现在想想还觉得啼笑皆非。后来找客服，把账号找回并绑定到了 vivo 服上才作罢。</p><p>腾讯的獠牙，已经开始伸出来了。</p><h3 id="2019-年至今"><a href="#2019-年至今" class="headerlink" title="2019 年至今"></a>2019 年至今</h3><p>sc 目前在运营的最新款游戏荒野乱斗在 19 年底上线了国际服，然后又过了一年多上线了国服。从本作开始，国服和国际服开始正式分区，一开始在国际服进行的游戏存档无论通过何种方法都无法转移到国服，国服和国际服的账号也完全无法互相加好友。</p><p>然后就是这两天，血雨腥风的这件事儿。</p><p>我的号走 tx 登录器登录，就一切正常。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Screenshot_20220217-185223-tuya2.png"></p><p>而走 google 登录器登录，就能看到一堆人退出了部落。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Screenshot_20220217-174519-tuya2.png"></p><p>而且发布捐兵请求、收资源等事情在某一边做了，在另一边是不会同步/有反应的，那就石锤分服了。另外，月初的联赛的锤子我还没发，这几个月比较懒，一般都月末才发（因为也懒得开部落战），但没想到锤子在两服切割的时候没有切干净，国际服还能发锤子，国内服直接就是开战页面了，坐实了之前国内的网络加速方法确实是边缘节点加速，然后为了搞国服就把国际服的数据同步到国内的服务器上然后一刀切割掉，但某些数据没转移过来，遗失的锤子就是其中一个。</p><p>腾讯在国服商店里面，放了钱和水的宝石，以及万能书，作为「补偿」。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/jiangli.jpg">但我懒，而且停留在 12 本很久了，一直在刷墙，书都没有用，所以就没有领，然后才两三天这些东西就没了，不愧是 tx。国内外分服也导致一大堆部落管理工具失效/作者退坑，比如大名鼎鼎的部落管理工具：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/0@O00%28LVSIDW8CUI4Q8CADC.png"></p><p>去年的时候本来想给帮我填部落联赛数据的同学找一个工具，不用每次都手填，结果去年 supercell 论坛关了，今年又一个分服，到了腾讯手上还想开发第三方工具？不存在的，过段时间，国服的数据接口可能都要被封掉。</p><hr><p><strong>（22.3.18 更新）</strong> 果然，当时贴吧说，在国际服查看自己的号，在个人信息中已经显示为「查询不到当前玩家标签」的人，肯定就是国服号，这些号在国际服中虽然有信息，但过一段时间就会被封掉。黑色幽默的是，我们部落的人，包括我，能上国际服的，看自己的信息时也显示这个：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/N%28IU2BEA2JKP$9UL%29R%282%5DPP.jpg"></p><p>然后今天上去一看</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Screenshot_20220316-224708-tuya2.png"></p><p>呵呵。</p><p>麻花疼：想用一份时间肝出两份号？做梦吧！</p><h2 id="亿点吐槽"><a href="#亿点吐槽" class="headerlink" title="亿点吐槽"></a>亿点吐槽</h2><p>部落冲突在我开始玩的前两年确实是投入了大量的精力。那时候高中，又没有电脑，那时候也是刚接触智能机不久，一切都是新鲜的。当然，因为我掌机从小玩到大，所以手机上那些游戏的游戏素质，嘛，也不算有那种「发现了新大陆」，「这玩意毁天灭地」之类的感觉，但网游和单机游戏目的本身就不一样，网游「好玩」「能和朋友一起玩」就足够算是沉迷的理由了。</p><p>上了大学，有了电脑显示器主机以后，我就不再投入时间到新的手游上了，有因为厌倦，有因为忙碌，也有因为厂商态度的变化，要一直给玩家留下好印象很难，但搞坏自己的口碑是很容易的事情，近几年的暴雪、CDRP、索尼，17 年后出了各种季票的皮肤的 supercell 又何尝不是呢？何况是它的背后是腾讯，懂得都懂。</p><p>分服这件事上几乎所有人都在骂腾讯，我只能说「活该」，但又不完全是腾讯的锅。我很早之前就跟我的朋友们说过：别玩国产手游，就算要玩，也去玩国际服。没想到还有像 supercell 一样，把人骗进国内服以后再杀的。一边喊着文化出海，一边却做着恶心玩家的事情，而且这些事情，做出来对规范市场和给家长交代，亿点关系都没有，就是纯纯的恶心玩家罢了。</p><p>coc 我还是可能继续会玩的吧，对我来说，这玩意早就已经是「社交」而不是「游戏」，但我还是怀念，当年他还是「游戏」，我还是「玩家」的那段时光。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;怎么说呢。。。要是以前的我，可能还会义愤填膺一下&lt;/p&gt;
&lt;p&gt;现在，要不是部落的人来提醒我，我可能还不知道，知道了以后我也就吐槽了两句，笑笑，虽然能想到会出这种恶心的事，但没想到，还能有骗进来再杀的啊。。。。&lt;/p&gt;</summary>
    
    
    
    <category term="game" scheme="https://zbttl-github-io.vercel.app/categories/game/"/>
    
    
    <category term="流水账" scheme="https://zbttl-github-io.vercel.app/tags/%E6%B5%81%E6%B0%B4%E8%B4%A6/"/>
    
    <category term="clash of clans(部落冲突)" scheme="https://zbttl-github-io.vercel.app/tags/clash-of-clans-%E9%83%A8%E8%90%BD%E5%86%B2%E7%AA%81/"/>
    
  </entry>
  
  <entry>
    <title>2202 年如何正确的在浏览器内打开 flash 网页？？</title>
    <link href="https://zbttl-github-io.vercel.app/2202-nian-ru-he-zheng-que-de-zai-liu-lan-qi-nei-da-kai-flash-wang-ye/"/>
    <id>https://zbttl-github-io.vercel.app/2202-nian-ru-he-zheng-que-de-zai-liu-lan-qi-nei-da-kai-flash-wang-ye/</id>
    <published>2022-02-10T16:00:00.000Z</published>
    <updated>2022-03-19T10:10:55.090Z</updated>
    
    <content type="html"><![CDATA[<p>flash 垃圾玩意，怎么还没淘汰！就算是打死我我也不会写相关教程~</p><p>（眨眨眼）</p><p>参考文章：<a href="https://sspai.com/post/64500">Flash 时代落幕，偶尔要访问的老网站怎么办？ - 少数派</a></p><p>参考文章其实说的已经很明白了，但我还是忍不住补充点细节：</p><h2 id="Ruffle-目前不堪大用"><a href="#Ruffle-目前不堪大用" class="headerlink" title="Ruffle 目前不堪大用"></a>Ruffle 目前不堪大用</h2><p>试了一下 ruffle 在几个内网生产环境的 flash 应用下都会报错。</p><h2 id="如何验证-chrome-系-flash（ppapi）是否生效-可用？"><a href="#如何验证-chrome-系-flash（ppapi）是否生效-可用？" class="headerlink" title="如何验证 chrome 系 flash（ppapi）是否生效/可用？"></a>如何验证 chrome 系 flash（ppapi）是否生效/可用？</h2><p>网上有许多参考文章建议在地址栏中输入 <code>chrome://flash</code>，但这玩意其实很早之前就被删掉啦。在地址栏中输入 <code>chrome://about</code> 命令，能看到当前浏览器所有有效的地址栏命令（包括某些魔改过的国产浏览器，即使通过其他的 <code>chrome://xxx</code> 地址报错，但 <code>chrome://about</code>这个地址一般都是能用的）。</p><p>之后点击其中的 <code>chrome://version</code>，v87 以前的版本就会有 flash 这一栏，v88 以后就没了。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220220134749.png"></p><p>如果正确的加载了 flash，flash 这里就会显示出加载的 dll 的路径。所以参考文章中的[自行编译、定制 Flash 功能 国内浏览器不太放心](<a href="https://sspai.com/post/64500#:~:text=%E8%87%AA%E8%A1%8C%E7%BC%96%E8%AF%91%E3%80%81%E5%AE%9A%E5%88%B6">https://sspai.com/post/64500#:~:text=自行编译、定制</a> Flash,国内浏览器不太放心)一节原理也就是无需安装过时的 ppapi 版 flash，直接让 chrome 读取相应路径的 dll。</p><ol><li><p>下载最后一个 v87 版本：<a href="https://github.com/Hibbiki/chromium-win32/releases/tag/v87.0.4280.141-r812852">Release v87.0.4280.141-r812852 · Hibbiki/chromium-win32</a></p></li><li><p>按少数派的参考文章来</p><blockquote><p>下载下来的 Archive 包 应该是一个 7z 压缩包，解压缩之后的文件夹应该是内含 <code>Chrome-bin</code> 文件夹，这里我们新建一个 <code>ChromePortable</code> 的文件夹，在这个文件夹中再新建一个名为 <code>App</code> 文件夹，将解压缩后的 <code>Chrome-bin</code> 文件夹全部拷贝到 <code>App</code> 文件夹中。</p><p>之后在 <a href="https://portableapps.com/apps/internet/google_chrome_portable">portableapps</a> 中下载绿色版 Chrome 启动器 <strong>Google Chrome Portable</strong>，将下载下来的安装包使用 7zip 解压缩后，将里面的 <code>GoogleChromePortable.exe</code> 复制出来并拷贝到前面新建的 <code>ChromePortable</code> 文件夹中。</p></blockquote></li><li><p>关于 flash 的修改版，我在 52 上找了一个最新的 ppapi 安装版，会在 <code>C:\Windows\SysWOW64\Macromed\Flash</code> 下放入一个 32 位的 <code>pepflashplayer64_34_x_x_xxx.dll</code>，在 <code>C:\Windows\System32\Macromed\Flash</code> 下放入一个 64 位的 dll。提取出来，由于我们刚刚下载的是 64 位的 chrome，所以用 64 位这个。</p></li><li><p>在 <code>ChromePortable</code> 处新建一个文件夹，名为 <code>plugin</code> 把 dll 放入刚刚新建的文件夹中，重命名为 <code>pepflashplayer64.dll</code>。在 <code>ChromePortable</code> 下新建一个批处理文件，内容为</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">cd /d %~dp0</span><br><span class="line">start GoogleChromePortable.exe --ppapi-flash-path="%~dp0\plugin\pepflashplayer64.dll" --ppapi-flash-version="34.0.0.192" --allow-outdated-plugins</span><br></pre></td></tr></tbody></table></figure><p>可能要修改一下 <code>version</code> 参数，修改为和提取出来的 flash dll 对应。（不过是不是真的影响使用我没有认真测试过，目前感觉这里写的数字只跟后续测试时显示的版本号有关，写什么就显示什么）</p><p>但 <code>pepflashplayer64.dll</code> 别放错，因为如果放成 32 位的后续是什么提示的，只是测试时候会不生效而已。</p></li><li><p>打开批处理，可通过下列两个网址测试：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://www.sioe.cn/xinqing/flash/</span><br><span class="line">http://www.7k8k.com/flash/39919_1.htm</span><br></pre></td></tr></tbody></table></figure><p>第一个网址能显示出版本好</p><p>第二个网址能显示出错误「请到4399小游戏官网开始游戏」就算成功。</p><p>第一次打开有 flash 的页面时，flash 处会显示 flash 已被屏蔽。此时需要点击地址栏右侧如下图的按钮，点管理</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220220152113.png"></p><p>在弹出的页面中打开「禁止网站运行 flash」的开关。这行描述就会变成「先询问」。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220220152246.png"></p><p>之后再刷新页面，已被屏蔽这行字就会变成「点击即可启用 adobe flash player」。</p><p>但对于一些页面（比如上面的测试页面 1），并没有任何提示给我们点，是因为 flash player 生效在了整个网页的子页面中，这时浏览器就不会弹出提示。</p><p>此时我们点击地址栏左侧刷新旁边的按钮，可以看到里面有 flash 相关选项，设为「允许」即可。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220220152708.png"></p></li></ol><h2 id="安装版不生效-为什么大于-v88-的-chrome-也会生效呢？"><a href="#安装版不生效-为什么大于-v88-的-chrome-也会生效呢？" class="headerlink" title="安装版不生效/为什么大于 v88 的 chrome 也会生效呢？"></a>安装版不生效/为什么大于 v88 的 chrome 也会生效呢？</h2><p>一般情况下，不生效的原因，可能是：</p><ol><li>浏览器是绿色版，未能正确识别 flash dll 的路径，一般再装一次浏览器就行了；</li><li>安装了非修改版/非国产特供版 flash。</li></ol><p>有的时候会发现大于 v88 版本的 chrome 也可以正常使用 flash，原因很简单，因为你把支持 flash 的 chrome 设为了默认浏览器。。。。。</p><h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><p>能不能不用快捷方式 / 批处理做出来的浏览器直接打开就能支持 flash？而且手工做出来的浏览器每次打开都提示「自 2020 年 12 月起 flash player 将不再受支持，好烦诶」</p><p>。。。。。。</p><p>一些国产的浏览器（比如搜狗），默认就修改了自己的 flash 路径识别位置，并且安装后就会把已经修改好的 dll 放到指定的位置，此时只要使用他们的极速模式就能正常使用 flash 了。但国产浏览器嘛。。。。</p><p>更正统的方法！编译时加入适当的参数，直接修改 flash 的默认识别路径。另外编译时还可以动点小手脚，让浏览器支持 hevc 视频播放。但这个嘛，挖个坑，以后填。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;flash 垃圾玩意，怎么还没淘汰！就算是打死我我也不会写相关教程~&lt;/p&gt;
&lt;p&gt;（眨眨眼）&lt;/p&gt;</summary>
    
    
    
    <category term="Windows" scheme="https://zbttl-github-io.vercel.app/categories/Windows/"/>
    
    
    <category term="流水账" scheme="https://zbttl-github-io.vercel.app/tags/%E6%B5%81%E6%B0%B4%E8%B4%A6/"/>
    
    <category term="flash" scheme="https://zbttl-github-io.vercel.app/tags/flash/"/>
    
    <category term="chrome" scheme="https://zbttl-github-io.vercel.app/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>一代代的，改过不啦——钝评战地2042</title>
    <link href="https://zbttl-github-io.vercel.app/yi-dai-dai-de-gai-guo-bu-la-dun-ping-zhan-di-2042/"/>
    <id>https://zbttl-github-io.vercel.app/yi-dai-dai-de-gai-guo-bu-la-dun-ping-zhan-di-2042/</id>
    <published>2022-02-04T16:00:00.000Z</published>
    <updated>2022-02-19T13:43:26.285Z</updated>
    
    <content type="html"><![CDATA[<p>想当年出第一个预告片的时候，那真是一片好评，预告片里各种玩梗和标志性的 bgm（不仅是咚咚咚，而是另外一个背景声，类似战地 1 时代，那个经典的<del>李云龙</del>预告片1），相较上一代战地 5 那个被钉在耻辱柱上的播片，真是高下立判。加上和上一代战地 5 相隔 3 年，为史上最长两作间间隔时间（之前最长为 2 年），一想到因年货制而搞得手忙脚乱，近期差评如潮的隔壁，又赢了（</p><p>诸多因素加载一起，很难不得出「我感觉 EA 又行了」的结论~</p><p>唯一的一片乌云，就是预告片 2 公布的时候，感觉 ui 怎么如此战地 4，没有近几年游戏的高级感？</p><p>结果试玩的时候就发现了，这动作流畅度和打击感，好像就是大号战地 4 诶 ~ 枪械数量少得可怜，地图布局也不合理，不过那是试玩，总不可能正式发布的时候，还是那点枪，然后就只有那张图吧？</p><p>结果，现在这个样子，大家也看到了，看来，预告片什么的，都是虚的，你永远可以相信 ea（雾</p><p>好在我没有预购，没钱，上一次预购都是 cod 16 的事情了。不过我想着，就算做成试玩那种样子，玩家也不会怨声载道成这个样子吧？好在我还有 xgpu 附赠的 ea play 带来的 10 小时体验游戏的机会，相较于全价预购玩家的愤怒，我尽量以一个白嫖战地菜鸡玩家的角度（很菜鸡，战地 1 0.6 的 kd 玩了几百个小时），尝尝这坨巧克力味的*究竟是啥味道的（</p><h2 id="我的搜索呢？我那么大一个搜索呢？"><a href="#我的搜索呢？我那么大一个搜索呢？" class="headerlink" title="我的搜索呢？我那么大一个搜索呢？"></a>我的搜索呢？我那么大一个搜索呢？</h2><p>战地老玩家都知道，和近年来的几个友商 fps 只有靠匹配进游戏不同，战地系列主要是通过搜索并筛选房间进入服务器，类似于当年 cs 的「搜房间」方法。虽然这样削弱了厂商通过技术匹配平衡房间内玩家水平的能力（所以捞薯条这个名词才会频频出现在战地圈内），但其一战地模式的精髓是征服，征服需要的玩家数量和前些年游戏多见的 tdm（cod）/ 爆破（r6）要多的多了，匹配有可能很久都搜不到人（当然近年大热的吃鸡类游戏人数也很多，但匹配体验也不错，我的理解是各类吃鸡游戏迭代都比 cod / 战地要慢，而且吃鸡这边也有个例子：black out）；其二，自由进入房间让玩家不需要切换其他加速器就能自由选择进入的地区，同时还催生了私服的玩法，所以这个功能，那是无比的适合战地。</p><p>所以，我翻了一大圈，ea 你就把这功能给砍了？只剩匹配了？只有门户模式才有筛选服务器的选项，主流的征服，只能通过匹配进入，而且筛选里面的选项。。。。和前几作相比，显然也摆了（</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E3%80%8A%E6%88%98%E5%9C%B0%E9%A3%8E%E4%BA%91%E2%84%A2%202042%E3%80%8BXbox%20Series%20XS-tuya2.png"></p><p>而且匹配就算了，突破征服还要分两个匹配池？至于新加的危险区域 hazard zone。。。。反正我已经开了跨平台，但匹配了半天，看起来是又一个火线冲突罢了。。。</p><h2 id="COD：2042-行动？"><a href="#COD：2042-行动？" class="headerlink" title="COD：2042 行动？"></a>COD：2042 行动？</h2><p>2042 职业公布的时候就有人说好像 cod 15 的专家，现在看来，确实很像。。。。</p><p>战地 5 的时候把滑铲加进来了，2042 本作又把战术冲刺再拿过来；主动标记还是没有回归，仍然是只能按区域标点（不过按区域标点这个 cod17 也抄过去了，等于现在两个游戏都是只支持区域标记）。还有一个地方也是被吐槽颇多，那就是地图和复活点设计，虽说吐槽的方向刚好相反：近年 cod 的地图设计被吐槽颇多（阴间），复活点从 cod16 开始就放飞自我；本来战地的地图设计一向是没啥槽点的，这作虽然参战人数增加了，但配上空旷的地图，突然就感觉怪怪的，一半的地方什么人都没有，少数地方又都是人；场景破坏愈发退步，现在怕是连先锋都不如了，话说最近我还玩了会 control，那玩意才叫真正的场景破坏~</p><p>但，为啥 cod 那流畅的动作就没抄过来呢？</p><h2 id="BUG-横飞，内容不足"><a href="#BUG-横飞，内容不足" class="headerlink" title="BUG 横飞，内容不足"></a>BUG 横飞，内容不足</h2><p>这才是去年两只卧龙凤雏被喷的根本原因：bug 多得没法玩，尤其是 2042~</p><p>虽说我也见怪不怪了。。。战地不是年货，似乎从 4 开始，「最好的战地是上一作」，这件事好像就成定势了？</p><p>不过这作偷工减料，也过头了吧~</p><p>满打满算，主武器枪械就 10 来把？</p><p>10 小时的时间开载具就开出两次 bug，不过都感觉是祖传寒霜引擎的锅，见怪不怪：</p><iframe src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/bug-cg.mp4" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" height="600" width="800"> </iframe><p>但其他的 bug，包括游戏卡死，无法持久化，蹲下后不能跑，开车后下车跑步枪械开不了镜子，这些就是 dice 自己优化的问题了。</p><p>另外，手柄改键后显示的还是原来的键位；我熟悉了战术跳跃的手柄键位，也就是跳改成 LB/L1，更换配件改成 A/x，但四个配件分别使 XYAB 来切换，这四个键是不能改的，然后我每次更换镜子/弹夹/消音器配件（XYB）时都会自动切换一下前握把（A)。</p><p>还有满天飞的 VVV，我一开始以为是故意设计的，但越看越不对劲，告诉我，是 BUG 吧？</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E3%80%8A%E6%88%98%E5%9C%B0%E9%A3%8E%E4%BA%91%E2%84%A2%202042%E3%80%8BXbox%20Series%20XS%20(3)-tuya2.png"></p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E3%80%8A%E6%88%98%E5%9C%B0%E9%A3%8E%E4%BA%91%E2%84%A2%202042%E3%80%8BXbox%20Series%20XS%20(2)-tuya2.png"></p><h2 id="骨头里挑鸡蛋"><a href="#骨头里挑鸡蛋" class="headerlink" title="骨头里挑鸡蛋"></a>骨头里挑鸡蛋</h2><p>加入了 ai 和 ai 模式，虽然被吐槽 ai 很傻，但如果实在没有人，还能和 ai 打一打的嘛~而且打 ai 居然还可以顺便刷枪，起码可以挨过枪械没有装备的空窗期。</p><p>门户模式应该说还是做的不错的，以前私服似乎是要钱的吧，现在是不是直接建就行了？（待确认）</p><p>任务少，没有那种逼肝的每日任务，这是优点还是缺点呢？</p><p>不过唯一的每周任务，进了游戏以后都不知道任务进度到那里了，这是毋庸置疑的缺点。</p><hr><p>离 10 小时体验时间结束还剩 20 多分钟，反正我是不打算玩了，感觉还不如玩战地 4，起码战地 4 还有个监狱可以玩。。。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;想当年出第一个预告片的时候，那真是一片好评，预告片里各种玩梗和标志性的 bgm（不仅是咚咚咚，而是另外一个背景声，类似战地 1 时代，那个经典的&lt;del&gt;李云龙&lt;/del&gt;预告片1），相较上一代战地 5 那个被钉在耻辱柱上的播片，真是高下立判。加上和上一代战地 5 相隔 3 年，为史上最长两作间间隔时间（之前最长为 2 年），一想到因年货制而搞得手忙脚乱，近期差评如潮的隔壁，又赢了（&lt;/p&gt;
&lt;p&gt;诸多因素加载一起，很难不得出「我感觉 EA 又行了」的结论~&lt;/p&gt;</summary>
    
    
    
    <category term="game" scheme="https://zbttl-github-io.vercel.app/categories/game/"/>
    
    
    <category term="流水账" scheme="https://zbttl-github-io.vercel.app/tags/%E6%B5%81%E6%B0%B4%E8%B4%A6/"/>
    
    <category term="battlefield" scheme="https://zbttl-github-io.vercel.app/tags/battlefield/"/>
    
  </entry>
  
  <entry>
    <title>telegram 更换字体的正确姿势</title>
    <link href="https://zbttl-github-io.vercel.app/telegram-geng-huan-zi-ti-de-zheng-que-zi-shi/"/>
    <id>https://zbttl-github-io.vercel.app/telegram-geng-huan-zi-ti-de-zheng-que-zi-shi/</id>
    <published>2022-01-19T16:00:00.000Z</published>
    <updated>2023-10-29T16:42:54.847Z</updated>
    
    <content type="html"><![CDATA[<p>telegram 经过数次版本迭代后，从去年开始的版本已经不能注入 dll 了。常用的两个注入 dll 插件，其中一个 Anti Revoke Plugin 已于上月停更，所以现在只有换字体的 <a href="https://github.com/ysc3839/FontMod">FontMod</a> 仍在更新。虽然本身也不是专为 telegram 打造的，所以在现在版本的 tg 上用起来还要费一番功夫。</p><p>参考文章：<a href="https://github.com/ysc3839/FontMod/issues/70#issuecomment-882069692">ysc3839（项目作者）的issue</a></p><ol><li><p>下载 telegram 微软商店版</p></li><li><p>在 <a href="https://github.com/ysc3839/FontMod">FontMod</a> 的 release 页面中下载 FontMod64.dll （无需改名）并放入任意文件夹中。</p></li><li><p>fork <a href="https://github.com/ysc3839/AppXLauncher">ysc3839/AppXLauncher</a>，在其中任意添加一个文件后，actions 就会自动进行构建，等待约半小时，构建好后下载其中的 AppXLauncher64.exe，放入和 FontMod64.dll 同一文件夹中。</p></li><li><p>在同一文件夹中新建 <code>AppXLauncher.json</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">"PackageFamilyName": "TelegramMessengerLLP.TelegramDesktop_t4vj0pshhgkwm",</span><br><span class="line">"AppId": "Telegram.TelegramDesktop.Store",</span><br><span class="line">"InjectDll": "FontMod64.dll",</span><br><span class="line">"Persistent": true,</span><br><span class="line">"KillRunning": false</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>在同一文件夹中新建 <code>FontMod.yaml</code>，里面写上要替换的字体的配置。以下是我的配置，仅供参考：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">style: &amp;style</span><br><span class="line"># Remove '#' to override font style</span><br><span class="line">#  size: 0</span><br><span class="line">#  width: 0</span><br><span class="line">#  weight: 0</span><br><span class="line">#  italic: false</span><br><span class="line">#  underLine: false</span><br><span class="line">#  strikeOut: false</span><br><span class="line">#  charSet: 0</span><br><span class="line">#  outPrecision: 0</span><br><span class="line">#  clipPrecision: 0</span><br><span class="line">#  quality: 0</span><br><span class="line">#  pitchAndFamily: 0</span><br><span class="line"></span><br><span class="line">fonts:</span><br><span class="line">  microsoft yahei: &amp;zh-cn-font # Chinese (Simplified) fallback font</span><br><span class="line">    # replace: 更纱黑体 SC</span><br><span class="line">    # replace: 文泉驿微米黑</span><br><span class="line">    replace: Sarasa UI SC</span><br><span class="line">    &lt;&lt;: *style</span><br><span class="line">  microsoft jhenghei ui: # Chinese (Traditional) fallback font</span><br><span class="line">    replace: Sarasa Gothic TC</span><br><span class="line">    &lt;&lt;: *style</span><br><span class="line">  # PMingLiU: # Chinese (Traditional) fallback font</span><br><span class="line">  #   replace: Microsoft JhengHei UI</span><br><span class="line">  #   &lt;&lt;: *style</span><br><span class="line">  # MS UI Gothic: # Japanese fallback font</span><br><span class="line">  #   replace: Yu Gothic UI</span><br><span class="line">  #   &lt;&lt;: *style</span><br><span class="line">  # Gulim: # Korean fallback font</span><br><span class="line">  #   replace: 맑은 고딕</span><br><span class="line">  #   &lt;&lt;: *style</span><br><span class="line">  # Open Sans: </span><br><span class="line">  #    replace: HelveticaNeue</span><br><span class="line">  Arial: &amp;monospace-font </span><br><span class="line">     replace: CascadiaCode Nerd Font</span><br><span class="line">  &lt;&lt;: *style</span><br><span class="line">  Consolas: *monospace-font # English Monospace default font</span><br><span class="line">  SimSun: *zh-cn-font # Chinese Monospace fallback font</span><br><span class="line">  Segoe UI: *zh-cn-font</span><br><span class="line">  Segoe UI Semibold: &amp;zh-cn-bold</span><br><span class="line">    replace: 更纱黑体 SC Bold</span><br><span class="line">  DAOpenSansRegular: *zh-cn-font</span><br><span class="line">  DAOpenSansRegularItalic: *zh-cn-font</span><br><span class="line">  DAOpenSansSemiboldItalic: *zh-cn-font</span><br><span class="line">  DAOpenSansSemibold: *zh-cn-bold</span><br><span class="line"></span><br><span class="line">fixGSOFont: true # true is to use system UI font</span><br><span class="line">#fixGSOFont: *zh-cn-font # Or replace with user defined font</span><br><span class="line">debug: false</span><br></pre></td></tr></tbody></table></figure></li><li><p>安装配置中的字体。旧版本中可以把字体放到同一文件夹下的 fonts 子文件夹下，但现在不行了，必须要安装。如果少哪个字体没装的话，telegram 的字体就会使用默认的等宽字体（宋体），非常难看。</p></li><li><p>运行 <code>AppXLauncher64.exe</code> 即可。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;telegram 经过数次版本迭代后，从去年开始的版本已经不能注入 dll 了。常用的两个注入 dll 插件，其中一个 Anti Revoke Plugin 已于上月停更，所以现在只有换字体的 &lt;a href=&quot;https://github.com/ysc3839/FontMod&quot;&gt;FontMod&lt;/a&gt; 仍在更新。虽然本身也不是专为 telegram 打造的，所以在现在版本的 tg 上用起来还要费一番功夫。&lt;/p&gt;
&lt;p&gt;参考文章：&lt;a href=&quot;https://github.com/ysc3839/FontMod/issues/70#issuecomment-882069692&quot;&gt;ysc3839（项目作者）的issue&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Windows" scheme="https://zbttl-github-io.vercel.app/categories/Windows/"/>
    
    
    <category term="fonts" scheme="https://zbttl-github-io.vercel.app/tags/fonts/"/>
    
    <category term="telegram" scheme="https://zbttl-github-io.vercel.app/tags/telegram/"/>
    
  </entry>
  
  <entry>
    <title>linux 工作中常用的性能检查 - 结果导出 - 文本处理</title>
    <link href="https://zbttl-github-io.vercel.app/linux-gong-zuo-zhong-chang-yong-de-xing-neng-jian-cha-jie-guo-dao-chu-wen-ben-chu-li/"/>
    <id>https://zbttl-github-io.vercel.app/linux-gong-zuo-zhong-chang-yong-de-xing-neng-jian-cha-jie-guo-dao-chu-wen-ben-chu-li/</id>
    <published>2022-01-02T16:00:00.000Z</published>
    <updated>2022-01-03T18:02:18.635Z</updated>
    
    <content type="html"><![CDATA[<p>emmm。。。我这 18 线城市的运维，经常得对服务器进行性能检查，并把结果进行导出。大多数时候服务器都是没啥问题的，所以时间都费在复制粘贴上了，如果把那些持续运行的命令结果直接导出，然后全部合并在一起以格式化输出不就省事了？</p><h3 id="cpu-性能检查——top-与-ps-之争！"><a href="#cpu-性能检查——top-与-ps-之争！" class="headerlink" title="cpu 性能检查——top 与 ps 之争！"></a>cpu 性能检查——top 与 ps 之争！</h3><p>top 可以看 cpu 占用率这个大家应该都知道。但 ps 其实也可以看。因为当我们运行 <code>ps aux</code> 的时候：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220103215039.png"><br>这一排 cpu 占用率实际上是可以利用起来的：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux|sed 1d|awk '{a+=$3}END{print a"%"}'</span><br></pre></td></tr></tbody></table></figure><p>这一行命令下去，就可以直接得出当时的 cpu 占用率了，相比从茫茫的 top 运行屏幕中把结果摘出来，是不是方便了不少？</p><p>且慢！</p><p>实际上，当你用多了这个命令，不难发现几个奇怪的地方：</p><ol><li>当负载起来以后，如果恰好你的机器是多核心的话。。。就会发现，出来的数字怎么就大于 100% 了呢？</li><li>负载下去以后，发现出来的数字并没有马上降下去，但是多敲几次命令的话，会发现越到后面数字越低，但很长一段时间都不会是低负载时的哪个占用率，奇怪，此时 cpu 占用率应该已经接近 0 了呀？</li><li>发现 root 下运行出来的结果和非 root 下运行的结果居然差了 10 个百分点？</li></ol><p>实际上，这几个问题的答案，就能充分反映出 ps 和 top 两个命令之间的机制差异：</p><ul><li><p>top 的 cpu 最大值是 100，而 ps 统计出来的 cpu 最大值上限是 100xCPU 核心总数的值。假设一台机器有两个 cpu，每个 cpu 有四个核心，那么 <code>ps aux</code> 统计出的 cpu 最大值上限就是 100*2*4=800；</p></li><li><p>参考<a href="https://superuser.com/questions/643331/ps-and-top-give-different-cpu-usage">linux - ps and top give different CPU usage - Super User</a></p><blockquote><p>from man top:</p><blockquote><ol><li>%CPU – CPU Usage The task’s share of the elapsed <strong>CPU time since the last screen update</strong>, expressed as a percentage of total CPU time.</li></ol></blockquote><p>from man ps:</p><blockquote><p>CPU usage is currently expressed as the percentage of <strong>time spent running during the entire lifetime of a process</strong>.</p></blockquote></blockquote><p>翻译成人话就是：top 的结果更即时，严格反映出当前时间点的 cpu 占用；而 ps 中进程的 cpu 占用率是当前进程全生命时间占用率的平均值。</p></li><li><p>在非 root 账户下 ps 输出的结果不包含 root 状态下运行进程的 cpu 占用。</p></li></ul><p>所以嘛，平时对服务器的检查究竟用哪个比较合适呢？</p><p>思来想去，我觉得其实都可以。虽然 ps 不包含 root 下的进程，但企业用的服务器为了安全着想，本就不会在 root 下运行高占用的进程；而平时 cpu 占用率检查的意义，一个是查看当前时间点的 cpu 占用率是否过高（突发负载），更重要的目的，或许还是判断当前 cpu 是否能胜任所负担的工作（平均负载）。这么说，两个命令应该配合着使用才对呀，不过，检查要填的单子里面只用填一个 cpu 占用率数据，所以嘛。。。</p><p>对于 ps，只要把上面的命令处理一下，除一下核心数就好了：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux|sed 1d|awk -v cpu=$(cat /proc/cpuinfo| grep "processor"| wc -l) '{a+=$3/cpu}END{print a"%"}'</span><br></pre></td></tr></tbody></table></figure><p>对于 top，也可以通过 <code>-n1</code> 只运行 1s，然后通过 sed 和 awk 摘出里面的 cpu 占用数据：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -n1|sed -n '3p'|awk '{print $2}'</span><br></pre></td></tr></tbody></table></figure><h3 id="拼接结果：大显神通的-paste-和拦路虎-ansi-字符"><a href="#拼接结果：大显神通的-paste-和拦路虎-ansi-字符" class="headerlink" title="拼接结果：大显神通的 paste 和拦路虎 ansi 字符"></a>拼接结果：大显神通的 paste 和拦路虎 ansi 字符</h3><p>几个命令之间当然也可以通过 <code>&amp;&amp;</code> 来拼接起来，只不过输出不在同一行；而用 paste 的话，不仅输出在同一行，而且命令与命令之间的输出中间会自动插入一个制表符，粘贴到表格里面刚好就会变成两格，简直就是懒人的福音！</p><p>但是嘛。。。我这边还有一个需求，那就是把 top 第一行后面这些带时间的内容输出出来，也就是这串：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220104012407.png"></p><p>按理来说，配合 sed 就可以了，顺便剪掉前面的 top：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -n1|sed -n '1p'|sed 's/top - //g'  </span><br></pre></td></tr></tbody></table></figure><p>然后我发现，运行完以后会莫名其妙的做一次清屏。这样复制粘贴就不方便了。</p><p>原因也挺简单的。里面混有 ansi 字符，输出出来：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -n1|sed -n '1p'|sed 's/top - //g'  &gt; ansi.txt</span><br></pre></td></tr></tbody></table></figure><p>用 vim 看一眼：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220103135642.png"></p><p>拖下来再用 vscode 看一眼：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220103135359.png"></p><p>好家伙显示出来的效果都不同。。。</p><p>不过原理都差不多，vscode 这里的  ESC 就等效于上面 vim 的 <code>^[</code>，同时还等效于<code>\x1B</code>。但使用 sed 命令去处理的话，只有 <code>\x1B</code> 能成功匹配到这些个 ensi 符号。所以我们可以先把这些符号给转成可见性比较好的英文字符，参考：<a href="https://blog.csdn.net/Fu_Tianshu/article/details/80589289">用 sed 去除文件中的 ASCII 控制字符乱码_Fu_Tianshu的博客-CSDN博客</a></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -n1|sed -n '1p'|sed 's/top - //g'|sed -r  -e 's/\x00/[NUL]/g' -e 's/\x01/[SOH]/g' -e 's/\x02/[STX]/g' -e 's/\x03/[ETX]/g' -e 's/\x04/[EOT]/g' -e 's/\x05/[ENQ]/g' -e 's/\x06/[ACK]/g' -e 's/\x07/[BEL]/g' -e 's/\x08/[BS]/g' -e 's/\x0A/[LF]/g' -e 's/\x0B/[VT]/g' -e 's/\x0C/[FF]/g' -e 's/\x0D/[CR]/g' -e 's/\x0E/[SO]/g' -e 's/\x0F/[SI]/g' -e 's/\x10/[DLE]/g' -e 's/\x11/[DC1]/g' -e 's/\x12/[DC2]/g' -e 's/\x13/[DC3]/g' -e 's/\x14/[DC4]/g' -e 's/\x15/[NAK]/g' -e 's/\x16/[SYN]/g' -e 's/\x17/[ETB]/g' -e 's/\x18/[CAN]/g' -e 's/\x19/[EM]/g' -e 's/\x1A/[SUB]/g' -e 's/\x1B/[ESC]/g' -e 's/\x1C/[FS]/g' -e 's/\x1D/[GS]/g' -e 's/\x1E/[RS]/g' -e 's/\x1F/[US]/g' -e 's/\x7F/[DEL]/g'|</span><br></pre></td></tr></tbody></table></figure><p>认真去看的话，要提取的字符串前后都有乱七八糟的 ansi 字符和搭配生效的 ansi 命令：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[[?25l^[[?1c^[[H^[[J^[[m^Otop - 02:37:10 up 132 days, 19:05,  1 user,  load average: 0.00, 0.03, 0.00^[[m^O^[[39;49m^[[m^O^[[39;49m^[[K</span><br></pre></td></tr></tbody></table></figure><p>我稍微了解了一下，上面这些 ansi 命令的意思：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">^[[?25l光标不可见</span><br><span class="line">^[[?1c 在^[[?25l后执行确保在执行序列时不会有光标闪烁Linux 控制台</span><br><span class="line">^[[H回到页首</span><br><span class="line">^[[J从光标擦除到页尾</span><br><span class="line">^[[m^O重置字体颜色</span><br><span class="line">^[[39;49m使用默认颜色  </span><br></pre></td></tr></tbody></table></figure><p>其中其决定作用的自然是那个<code>^[[H</code>和<code>^[[J</code>了，就是这两个联合起来才让 top 命令达成了清屏的效果。现在就把他们都干掉！前面，用长长的那一串语句做转换后，要提取的字符串前后的 ansi 字符组变成了下面这样的两串东西：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ESC][?25l[ESC][?1c[ESC][H[ESC][J[ESC][m[SI]</span><br><span class="line">[ESC][m[SI][ESC][39;49m[ESC][m[SI][ESC][39;49m[ESC][K</span><br></pre></td></tr></tbody></table></figure><p>复制到 vscode 后，按 ctrl+H，vscode 就能自动的把这两串东西转义成正则表达式形式，真方便。整理一下，放到上面用过的表达式中做处理：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -n1|sed -n '1p'|sed 's/top - //g'|sed -r  -e 's/\x00/[NUL]/g' -e 's/\x01/[SOH]/g' -e 's/\x02/[STX]/g' -e 's/\x03/[ETX]/g' -e 's/\x04/[EOT]/g' -e 's/\x05/[ENQ]/g' -e 's/\x06/[ACK]/g' -e 's/\x07/[BEL]/g' -e 's/\x08/[BS]/g' -e 's/\x0A/[LF]/g' -e 's/\x0B/[VT]/g' -e 's/\x0C/[FF]/g' -e 's/\x0D/[CR]/g' -e 's/\x0E/[SO]/g' -e 's/\x0F/[SI]/g' -e 's/\x10/[DLE]/g' -e 's/\x11/[DC1]/g' -e 's/\x12/[DC2]/g' -e 's/\x13/[DC3]/g' -e 's/\x14/[DC4]/g' -e 's/\x15/[NAK]/g' -e 's/\x16/[SYN]/g' -e 's/\x17/[ETB]/g' -e 's/\x18/[CAN]/g' -e 's/\x19/[EM]/g' -e 's/\x1A/[SUB]/g' -e 's/\x1B/[ESC]/g' -e 's/\x1C/[FS]/g' -e 's/\x1D/[GS]/g' -e 's/\x1E/[RS]/g' -e 's/\x1F/[US]/g' -e 's/\x7F/[DEL]/g'|sed -r -e 's/\[ESC\]\[\?25l\[ESC\]\[\?1c\[ESC\]\[H\[ESC\]\[J\[ESC\]\[m\[SI\]//g' -e 's/\[ESC\]\[m\[SI\]\[ESC\]\[39;49m\[ESC\]\[m\[[SI\]\[ESC\]\[39;49m\[ESC\]\[K//g'  </span><br></pre></td></tr></tbody></table></figure><p>这样出来的结果就不会有问题了。。。</p><hr><p>但是，但是！用 paste 去把这个语句和上面测量 cpu 占用率的两个语句组起来，就会莫名其妙的卡住，原因不明。。。</p><p>但解决方法也很简单，这时我才发现 top 里有个参数叫 -b，可以自动把这些 ansi 字符干掉。。。</p><p>所以我绕了一大圈是为了什么呢？？？？？</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paste &lt;(top -b -n1|sed -n '3p'|awk '{print $2}'|sed 's/us//g') &lt;(top -b -n1|sed -n '1p'|sed 's/top - //g') </span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;emmm。。。我这 18 线城市的运维，经常得对服务器进行性能检查，并把结果进行导出。大多数时候服务器都是没啥问题的，所以时间都费在复制粘贴上了，如果把那些持续运行的命令结果直接导出，然后全部合并在一起以格式化输出不就省事了？&lt;/p&gt;
&lt;h3 id=&quot;cpu-性能检查——top-与-ps-之争！&quot;&gt;&lt;a href=&quot;#cpu-性能检查——top-与-ps-之争！&quot; class=&quot;headerlink&quot; title=&quot;cpu 性能检查——top 与 ps 之争！&quot;&gt;&lt;/a&gt;cpu 性能检查——top 与 ps 之争！&lt;/h3&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://zbttl-github-io.vercel.app/categories/Linux/"/>
    
    
    <category term="top" scheme="https://zbttl-github-io.vercel.app/tags/top/"/>
    
    <category term="ps(command)" scheme="https://zbttl-github-io.vercel.app/tags/ps-command/"/>
    
    <category term="paste" scheme="https://zbttl-github-io.vercel.app/tags/paste/"/>
    
  </entry>
  
  <entry>
    <title>换用 zplug</title>
    <link href="https://zbttl-github-io.vercel.app/huan-yong-zplug/"/>
    <id>https://zbttl-github-io.vercel.app/huan-yong-zplug/</id>
    <published>2021-08-17T16:00:00.000Z</published>
    <updated>2023-10-29T16:41:07.610Z</updated>
    
    <content type="html"><![CDATA[<p>最近要搬几个服务器，想把迁移服务器时配置环境的这些步骤搞简单一点。自从用上了 zsh 和各种插件后，不装这玩意就浑身难受，但配置 zsh 的各种插件又相当费事。之前了解过 zplug 这玩意，今天就研究一下怎么切上去。</p><p>参考文章：<a href="https://www.jkg.tw/p2965/">zsh + zplug 快速部屬你的 Shell 工作環境 | jkgtw’s blog </a></p><p>之前配置 zsh，参考 <a href="https://zbttl.github.io/zhuo-mian-ban-ubuntu-debian-cai-keng/">桌面版 ubuntu &amp; debian 踩坑 | Bao’s 备忘录</a>，大概步骤是：</p><ol><li>安装 zsh </li><li>切换默认终端为 zsh </li><li>安装 oh-my-zsh </li><li>安装 p10k </li><li>配置 oh-my-zsh 和安装相应插件（这一步要 git clone 各种插件，挺麻烦的）</li><li>配置 p10k</li><li>一些 bug 的解决（比如字体不能显示，小键盘不能用等等）</li><li>导入历史记录 </li></ol><p>使用 zplug 可以精简掉其中的 3-6 步，之后只要装好 zplug 后，把 <code>.zshrc</code> 和 <code>.p10k.zsh</code> 考过来，用 source 或者重启一下就能自动搞定了。</p><h2 id="具体的说："><a href="#具体的说：" class="headerlink" title="具体的说："></a>具体的说：</h2><ol><li><p>安装 zplug</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh | zsh</span><br></pre></td></tr></tbody></table></figure></li><li><p>修改原有的 <code>.zshrc</code> 文件</p><p> 在 zshrc 最上面加上一行 source 启用 zplug</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zplug/init.zsh</span><br></pre></td></tr></tbody></table></figure><p> 在 zshrc 最下面加上以下代码，作用是每次重载 zsh 检查 <code>.zshrc</code> 相关代码中是否有新的插件需要安装。</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Install plugins if there are plugins that have not been installed</span></span><br><span class="line"><span class="keyword">if</span> ! zplug check --verbose; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">"Install? [y/N]: "</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">read</span> -q; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span>; zplug install</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Then, source plugins and add commands to $PATH</span></span><br><span class="line">zplug load</span><br></pre></td></tr></tbody></table></figure><p> 剩下的这几行代码，写在中间。</p><p> 插件声明语句，就是上面说的相关代码，格式类似这样：</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zplug "romkatv/powerlevel10k", as:theme, depth:1</span><br></pre></td></tr></tbody></table></figure><p> 双引号中的内容就是 <code>git clone</code> 那些插件时的插件的作者和库名，都在 url 的后半段里面。像我之前装的那些插件，大概就需要写这几行：</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#zplug "romkatv/powerlevel10k", as:theme, depth:1</span></span><br><span class="line">zplug romkatv/powerlevel10k, as:theme, depth:1</span><br><span class="line">zplug <span class="string">'zplug/zplug'</span>, hook-build:<span class="string">'zplug --self-manage'</span></span><br><span class="line">zplug <span class="string">"zsh-users/zsh-syntax-highlighting"</span></span><br><span class="line">zplug <span class="string">"zsh-users/zsh-completions"</span></span><br><span class="line">zplug <span class="string">"lib/completion"</span>, from:oh-my-zsh</span><br><span class="line">zplug <span class="string">"zsh-users/zsh-history-substring-search"</span></span><br><span class="line">zplug <span class="string">"zsh-users/zsh-autosuggestions"</span></span><br><span class="line">zplug <span class="string">"wting/autojump"</span></span><br><span class="line">zplug <span class="string">"junegunn/fzf"</span>, from:github, as:<span class="built_in">command</span>, rename-to:fzf, hook-build:<span class="string">"./install --all"</span></span><br></pre></td></tr></tbody></table></figure><p> <strong>（21.8.29 更新）</strong> 原来的 <code>zplug "romkatv/powerlevel10k", as:theme, depth:1</code> 这行容易在 zsh 启动时报警告，大概是：</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Change the way Powerlevel10k is loaded from ~/.zshrc</span><br></pre></td></tr></tbody></table></figure><p> 根据提示查了查<a href="https://github.com/romkatv/powerlevel10k/blob/master/README.md#zplugin">文档</a>，换成了没有双引的这个命令。</p><p> 由于不需要单独安装 oh-my-zsh 了，相关代码注释掉</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#export ZSH="/root/.oh-my-zsh"</span><br><span class="line"></span><br><span class="line">#source $ZSH/oh-my-zsh.sh</span><br></pre></td></tr></tbody></table></figure><p> 同样，因为没有 oh-my-zsh 了，我们得声明一段代码，启用历史记录功能，并且用 <code>his</code> 或 <code>history 1</code> 查询全部历史记录：：</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># History config</span></span><br><span class="line">HISTSIZE=10000</span><br><span class="line">SAVEHIST=10000</span><br><span class="line">HISTFILE=~/.zsh_history</span><br></pre></td></tr></tbody></table></figure><p> 最后重载 zsh 即可。</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></tbody></table></figure><p> <strong>（23.7.22 更新）</strong> fzf 参考 <a href="https://github.com/zplug/zplug/issues/412">Fail install fzf-bin from gh-r with aliased grep · Issue #412 · zplug/zplug</a>。如果已经不慎使用了错误的配置安装，可以通过删除相关文件来卸载（都在 <code>.zplug</code> 文件夹下）：</p><ul><li><p>repos/ 里的 junegunn 文件夹</p></li><li><p>bin/ 里的多余 fzf bin 文件</p></li><li><p>删除 packages.zsh 的依赖（参考 <a href="https://github.com/zplug/zplug/issues/108">如何删除插件？ · 问题 #108 · zplug/zplug</a>）</p><p>安装完毕，运行 <code>fzf</code> 命令，正常运行即安装成功。（安装完毕可能会弹出 <code>__zplug::log::format::with_json:printf:16: % T: invalid directive</code>，无视即可。） </p><p>如果遇到安装报错或者更新报错（<code>zplug update</code>）的问题，可以安装 gawk 试试（参考<a href="https://github.com/zplug/zplug/issues/359">zplug update: Unknown error if the repo is already updated · Issue #359 · zplug/zplug — zplug 更新：如果存储库已更新，则出现未知错误 ·问题 #359 ·zplug/zplug</a>）：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gawk -y</span><br></pre></td></tr></tbody></table></figure><h2 id="注意-acme-sh"><a href="#注意-acme-sh" class="headerlink" title="注意 acme.sh"></a>注意 acme.sh</h2></li></ul></li></ol><p>acme.sh 安装时会写入变量到 .zshrc 中。如果有 zplug，会写下如下两条命令：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zplug load. "/root/.acme.sh/acme.sh.env"</span><br><span class="line">. "/root/.acme.sh/acme.sh.env"</span><br></pre></td></tr></tbody></table></figure><p>但这么写每次打开的时候都会报警。需要手动改成</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zplug load</span><br><span class="line">. "/root/.acme.sh/acme.sh.env"</span><br></pre></td></tr></tbody></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>最后推荐两篇文章，可以参考里面的内容，添加更多有趣的插件（不过加载时间也会因此变慢，自己抉择）</p><ul><li><a href="https://macosdoc.googo.cc/enivironment/zhong-jian-kai-fa-huan-jing">iTerm2 + zsh + oh-my-zsh - macOS Setup</a></li><li><a href="https://guojing.io/posts/zplug/">zplug 武装 zsh · 郭靖 I/O</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近要搬几个服务器，想把迁移服务器时配置环境的这些步骤搞简单一点。自从用上了 zsh 和各种插件后，不装这玩意就浑身难受，但配置 zsh 的各种插件又相当费事。之前了解过 zplug 这玩意，今天就研究一下怎么切上去。&lt;/p&gt;
&lt;p&gt;参考文章：&lt;a href=&quot;https://www.jkg.tw/p2965/&quot;&gt;zsh + zplug 快速部屬你的 Shell 工作環境 | jkgtw’s blog &lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://zbttl-github-io.vercel.app/categories/Linux/"/>
    
    
    <category term="zsh" scheme="https://zbttl-github-io.vercel.app/tags/zsh/"/>
    
  </entry>
  
  <entry>
    <title>萌新的 linux qt 程序编译实战</title>
    <link href="https://zbttl-github-io.vercel.app/meng-xin-de-linux-qt-cheng-xu-bian-yi-shi-zhan/"/>
    <id>https://zbttl-github-io.vercel.app/meng-xin-de-linux-qt-cheng-xu-bian-yi-shi-zhan/</id>
    <published>2021-07-12T16:00:00.000Z</published>
    <updated>2021-08-22T04:07:55.129Z</updated>
    
    <content type="html"><![CDATA[<p>事情的来源，是两个月前和朋友讨论啥软件界面又好看「学术网站」又快界面又漂亮。clash 虽然漂亮，但支持的协议少了点。</p><p>这时候我就提了一嘴「qv2ray 新界面呀，不是挺漂亮的吗，只是要编译，又不麻烦」</p><p>前半句是对的，确实挺漂亮的：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/QQ%E5%9B%BE%E7%89%8720210517003751.jpg"></p><p>但为了圆后半句，我花了两个月时间。。。不要小看编译啊 kora！</p><p>环境：ubuntu 20.04 桌面端，否则没有 opengl 支持，没法试还报错</p><h2 id="标准编译步骤——借助-ubuntu-内置的-apt-安装依赖并直接编译"><a href="#标准编译步骤——借助-ubuntu-内置的-apt-安装依赖并直接编译" class="headerlink" title="标准编译步骤——借助 ubuntu 内置的 apt 安装依赖并直接编译"></a>标准编译步骤——借助 ubuntu 内置的 apt 安装依赖并直接编译</h2><h3 id="初步安装依赖"><a href="#初步安装依赖" class="headerlink" title="初步安装依赖"></a>初步安装依赖</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install git openssl -y</span><br><span class="line">#编译所需工具</span><br><span class="line">sudo apt install autoconf automake libtool build-essential -y</span><br><span class="line"># qv2ray 和 grpc 编译所需的 ssl 库</span><br><span class="line">sudo apt install libssl-dev -y</span><br></pre></td></tr></tbody></table></figure><h3 id="安装-qt5（通过官方在线安装包）"><a href="#安装-qt5（通过官方在线安装包）" class="headerlink" title="安装 qt5（通过官方在线安装包）"></a>安装 qt5（通过官方在线安装包）</h3><p>参考文章：<a href="https://forum.qt.io/topic/72009/how-do-i-move-qt-to-usr-local-share-qt">How do I move ~/Qt to /usr/local/share/Qt? | Qt Forum</a></p><p>需要保持网络通畅！</p><p>下载：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://qt.mirror.constant.com/archive/online_installers/4.1/qt-unified-linux-x86_64-4.1.0-online.run</span><br><span class="line">chmod +x ./qt-unified-linux-x86_64-4.1.0-online.run</span><br><span class="line">./qt-unified-linux-x86_64-4.1.0-online.run</span><br></pre></td></tr></tbody></table></figure><p>根据提示，注册并安装 qt 5.12.5 。我就直接装在默认路径，<code>/home/zbttl/xxx</code> 下了。另外程序默认会安装 Ninja 和 cmake，这两个后面都会用得上。</p><p>将 qt 和 cmake 路径加到 root 和在进行操作的用户的环境变量中（后续如果不装到系统目录中，也可以省去吧路径加到的 root 下的命令，即第一条命令）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo "export PATH=/home/zbttl/Qt/5.15.2/gcc_64/bin:/home/zbttl/Qt/Tools/CMake/bin/:/home/zbttl/Qt/Tools/Ninja/:$PATH"|sudo tee /etc/bash.bashrc</span><br><span class="line"></span><br><span class="line">echo "export PATH=\$HOME/Qt/5.15.2/gcc_64/bin:\$HOME/Qt/Tools/CMake/bin/:\$HOME/Qt/Tools/Ninja/:\$PATH" &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></tbody></table></figure><p>测试：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmake -version</span><br><span class="line">qmake -v</span><br></pre></td></tr></tbody></table></figure><p>都有输出的话则正常。</p><p>还需要添加 qt 的动态链接库：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/ld.so.conf.d</span><br><span class="line">echo -e "/home/zbttl/Qt/5.15.2/gcc_64/lib\n/home/zbttl/Qt/Tools/QtCreator/lib/qtcreator"|sudo tee qt-5.15.2-x86_64.conf</span><br><span class="line">sudo ldconfig</span><br><span class="line">cd</span><br></pre></td></tr></tbody></table></figure><h3 id="安装-grpc、protobuf-、opengl-库"><a href="#安装-grpc、protobuf-、opengl-库" class="headerlink" title="安装  grpc、protobuf 、opengl 库"></a>安装  grpc、protobuf 、opengl 库</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libprotobuf-dev protobuf-compiler libgrpc-dev libgrpc++-dev protobuf-compiler-grpc -y</span><br><span class="line">sudo apt install mesa-common-dev -y</span><br></pre></td></tr></tbody></table></figure><h3 id="编译-qv2ray-发行版"><a href="#编译-qv2ray-发行版" class="headerlink" title="编译 qv2ray 发行版"></a>编译 qv2ray 发行版</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Qv2ray/Qv2ray.git --recursive</span><br><span class="line">cd Qv2ray</span><br><span class="line">mkdir build; cd build;</span><br><span class="line">cmake -DCMAKE_INSTALL_PREFIX=/home/zbttl/q2 -DCMAKE_BUILD_TYPE=Release -GNinja ..</span><br><span class="line">#如果没装Ninja，也可以不用Ninja，Ninja编译时是显示编译到多少个包，普通编译则是显示百分比</span><br><span class="line">#cmake -DCMAKE_INSTALL_PREFIX=/home/zbttl/q2 -DCMAKE_BUILD_TYPE=Release ..</span><br><span class="line">cmake --build . --parallel $(nproc)</span><br><span class="line">#装到系统路径中的话，要配合 sudo</span><br><span class="line">#sudo -s</span><br><span class="line">cmake --install .</span><br></pre></td></tr></tbody></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home/zbttl/q2/bin/</span><br><span class="line">./qv2ray</span><br></pre></td></tr></tbody></table></figure><p>有可能会报错哦。需要安装 xcb 库。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libxcb-xinerama0 -y</span><br></pre></td></tr></tbody></table></figure><h2 id="未曾设想的道路（雾）"><a href="#未曾设想的道路（雾）" class="headerlink" title="未曾设想的道路（雾）"></a>未曾设想的道路（雾）</h2><h3 id="换用-qt6-编译-dev-版"><a href="#换用-qt6-编译-dev-版" class="headerlink" title="换用 qt6 编译 dev 版"></a>换用 qt6 编译 dev 版</h3><p>新界面只有 dev 版支持。编译 dev 版则需要安装 qt6。</p><p>需要多装一个库：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libcurl4-openssl-dev -y</span><br></pre></td></tr></tbody></table></figure><p>和装 qt5 的步骤接近，除了通过安装程序安装时选择 qt 6.1.2 外，还有编译的参数要做出修改：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone -b dev-v3 https://github.com/Qv2ray/Qv2ray.git --recursive</span><br><span class="line">cd Qv2ray</span><br><span class="line">mkdir build; cd build;</span><br><span class="line">#如果是编译dev版可省略-DQV2RAY_QT6=ON参数，编译发行版必须加入（不过也有可能加上都编译不了，所以编译发行版建议用qt5）</span><br><span class="line">cmake -DCMAKE_INSTALL_PREFIX=/home/zbttl/q2 -DCMAKE_BUILD_TYPE=Release -GNinja -DQV2RAY_QT6=ON ..</span><br><span class="line">cmake --build . --parallel $(nproc)</span><br></pre></td></tr></tbody></table></figure><hr><p>但到这里，我还有一个小目标：</p><p>编都编了，干脆能手动编译的都手动编译吧！apt 装的版本虽然能用，但确实有点旧了。</p><p>大概有四样东西可以手动编译，分别是 openssl，grpc+protobuf、cmake 和 qt，这几样东西更新快且编译新软件的时候经常对他们有版本号上的需求。严格意义说，opengl 和 ninja 也是能手工编译的，但这两样东西似乎比较稳定，没啥必要手工编译。</p><h3 id="手工编译-openssl"><a href="#手工编译-openssl" class="headerlink" title="手工编译 openssl"></a>手工编译 openssl</h3><p>可以替换上面用到的 <code>libcurl4-openssl-dev</code>、<code>libssl-dev</code> 两个库。（但不要去卸载 openssl，否则使用 wget 等命令时就会报警证书错误。不敲 <code>sudo rm -r /usr/local/ssl/certs&amp;&amp;sudo ln -s /etc/ssl/certs /usr/local/ssl</code> 这个命令也会造成证书报警，但如果卸了 openssl，敲了这个命令也没用。）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove libcurl4-openssl-dev libssl-dev -y</span><br></pre></td></tr></tbody></table></figure><p>下载的版本是 1.1.1f，现在应该还有更新的版本，但别用 3 开头的 alpha 版。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.openssl.org/source/openssl-1.1.1i.tar.gz --no-check-certificate</span><br><span class="line">tar xzvf openssl-1.1.1i.tar.gz </span><br><span class="line">cd openssl*/</span><br><span class="line">./config</span><br><span class="line">make</span><br><span class="line">make test</span><br><span class="line">sudo make install</span><br><span class="line">sudo ldconfig</span><br><span class="line">sudo rm -r /usr/local/ssl/certs&amp;&amp;sudo ln -s /etc/ssl/certs /usr/local/ssl</span><br><span class="line">cd</span><br></pre></td></tr></tbody></table></figure><p>安装完确认一下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openssl version</span><br><span class="line"></span><br><span class="line">pkg-config --libs openssl</span><br></pre></td></tr></tbody></table></figure><p>应有类似输出：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OpenSSL 1.1.1f  31 Mar 2020</span><br><span class="line"></span><br><span class="line">-L/usr/local/lib -lssl -lcrypto</span><br></pre></td></tr></tbody></table></figure><h3 id="手动安装-cmake"><a href="#手动安装-cmake" class="headerlink" title="手动安装 cmake"></a>手动安装 cmake</h3><p>qt6 必须要 cmake 3.16 以后版本才能编译，好死不死 apt 里带的版本是 3.15。之前用了 qt 官方的在线安装程序，安装的是 3.19，这才勉强能用。新版 grpc 也强制要求使用 cmake 而不是 make 了，本来想和 qt 编译写在一起，现在把这个步骤提前到这里。</p><p>cmake 官方直接给了最新的安装脚本，我们直接用就好了，懒得编译了。</p><p>可以到 <code>https://github.com/Kitware/CMake/releases</code> 获取最新 release 版本号：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#参考https://sobaigu.com/shell-get-lastest-version-from-github.html命令行直接获取版本号</span><br><span class="line">cmake_new_ver=$(wget -qO- -t1 -T2 "https://api.github.com/repos/Kitware/CMake/releases/latest" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g'|sed 's/[a-z]*//g')</span><br><span class="line">#或者是 cmake_new_ver=$(wget -qO- -t1 -T2 "https://api.github.com/repos/Kitware/CMake/releases/latest" | jq -r '.tag_name'|sed 's/[a-z]*//g')</span><br></pre></td></tr></tbody></table></figure><p>下载运行</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove cmake -y</span><br><span class="line">wget https://github.com/Kitware/CMake/releases/download/v${cmake_new_ver}/cmake-${cmake_new_ver}-linux-x86_64.sh</span><br><span class="line">chmod +x cmake-${cmake_new_ver}-linux-x86_64.sh</span><br><span class="line">sudo bash cmake-${cmake_new_ver}-linux-x86_64.sh --prefix=/usr/ --exclude-subdir</span><br></pre></td></tr></tbody></table></figure><p>如果在使用 ubuntu 且不在意空间的话，也可以通过 snap 安装：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo snap install cmake</span><br></pre></td></tr></tbody></table></figure><h3 id="手工编译-grpc-和-protobuf"><a href="#手工编译-grpc-和-protobuf" class="headerlink" title="手工编译 grpc 和 protobuf"></a>手工编译 grpc 和 protobuf</h3><p>参考文章</p><p>官方文档：</p><ul><li><a href="https://github.com/grpc/grpc/blob/master/BUILDING.md">grpc/BUILDING.md at master · grpc/grpc</a></li><li><a href="https://grpc.io/docs/languages/cpp/quickstart/">Quick start | C++ | gRPC</a></li></ul><p>其他使用者的使用心得：</p><ul><li><a href="https://github.com/grpc/grpc/blob/70ce9e21df4f6a18fbcfbb2103d1e89987125f4a/test/distrib/cpp/run_distrib_test_cmake.sh">grpc 正确安装 grpc/run_distrib_test_cmake.sh at 70ce9e21df4f6a18fbcfbb2103d1e89987125f4a · grpc/grpc</a></li><li><a href="https://blog.csdn.net/u012182853/article/details/106243399/">ubuntu16.04 grpc安装_u012182853的博客-CSDN博客_cares安装</a></li><li>多版本 grpc 安装、国内镜像、需要编译出的 c 版本组件列出 ：<a href="https://www.cnblogs.com/52fhy/p/11110704.html">gRPC入坑记 - 飞鸿影 - 博客园</a></li><li><a href="https://www.jianshu.com/p/3479272f90bb">gRPC 和 protobuf 的安装 - 简书</a></li></ul><p>代替了 <code>libprotobuf-dev</code>、<code>protobuf-compiler</code>、<code>libgrpc-dev</code>、<code>libgrpc++-dev</code> 四个包。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove libprotobuf-dev protobuf-compiler libgrpc-dev libgrpc++-dev -y</span><br><span class="line">sudo apt install zlib1g-dev -y</span><br></pre></td></tr></tbody></table></figure><p>protobuf 包含在 grpc 中，所以一起拿下来就好了。cmake 这里，如果全部都手动编译的话，先参考下面手工安装 cmake 章节（因为 grpc 并不要求 cmake 版本，所以用 apt 版本的 cmake 也可以）。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">git clone --recurse-submodules https://github.com/grpc/grpc</span><br><span class="line"></span><br><span class="line">cd grpc/third_party/protobuf/</span><br><span class="line">git submodule update --init --recursive</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure --prefix=/usr</span><br><span class="line">make -j $(nproc)</span><br><span class="line">sudo make install </span><br><span class="line">sudo ldconfig</span><br><span class="line">cd ../..</span><br><span class="line">cd third_party/abseil-cpp</span><br><span class="line">cmake -DCMAKE_INSTALL_PREFIX=/usr \</span><br><span class="line">      -DCMAKE_POSITION_INDEPENDENT_CODE=TRUE</span><br><span class="line">make -j $(nproc)</span><br><span class="line">sudo make install</span><br><span class="line">cd ../..</span><br><span class="line">cmake -DgRPC_INSTALL=ON \</span><br><span class="line">      -DgRPC_BUILD_TESTS=OFF \</span><br><span class="line">      -DCMAKE_INSTALL_PREFIX=/usr \</span><br><span class="line">      -DgRPC_SSL_PROVIDER=package</span><br><span class="line">make -j $(nproc)</span><br><span class="line">sudo make install</span><br><span class="line">cd ..</span><br></pre></td></tr></tbody></table></figure><p>安装完确认一下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc --version</span><br></pre></td></tr></tbody></table></figure><p>应有输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libprotoc 3.15.8</span><br></pre></td></tr></tbody></table></figure><p>另外还可以通过运行 example 测试，可参照参考文章 4。</p><h3 id="编译安装-qt6"><a href="#编译安装-qt6" class="headerlink" title="编译安装 qt6"></a>编译安装 qt6</h3><p>说实话，实操后感觉并不推荐大家去单独编译 qt，坑又多，空间占用又大（大概要 17g 左右），编译时间又久，纯属自己好奇，活该（</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210720004656.png"></p><p>先装依赖。由于没有 <code>cmake clean</code> 这种类似的命令，因为编译时间比较久，万一哪个依赖没装导致编译中出错，就得删掉整个文件夹重新编译，得不偿失，所以依赖尽量装全一点；除了上面文章提到的依赖（openssl、cmake，grpc 和 protobuf 可以不用），还装了以下这些：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install  libgl1-mesa-dev libxcb*-dev libfontconfig1-dev libxkbcommon-x11-dev python libgtk-3-dev mesa-common-dev libglu1-mesa-dev -y</span><br></pre></td></tr></tbody></table></figure><p>到 <a href="download.qt.io/archive/qt/">qt 官网</a>寻找对应版本的源码包，这里我下了 6.1.0 single 目录下的 zip 版本：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210719225612.png"></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.qt.io/archive/qt/6.1/6.1.0/single/qt-everywhere-src-6.1.0.zip</span><br><span class="line">sudo apt install unzip -y</span><br><span class="line">unzip qt-everywhere-src-6.1.0.zip </span><br><span class="line">cd qt-everywhere-src-6.1.0</span><br></pre></td></tr></tbody></table></figure><p>但这时如果直接 configure 会报错，因为下下来的 zip 文件里换行符似乎是 windows 格式的 CFLR。。。</p><p>应该下 tar.xz 包的，算了，下都下了，搞个工具转换一下吧：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install dos2unix -y</span><br><span class="line">find . -type f -print0 | xargs -0 dos2unix</span><br></pre></td></tr></tbody></table></figure><p>编译安装：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">./configure -openssl --prefix=/usr/local/qt6</span><br><span class="line">export PATH=/usr/local/qt6/bin:$PATH</span><br><span class="line">cmake --build . --parallel $(nproc)</span><br><span class="line">sudo cmake --install .</span><br><span class="line"></span><br><span class="line">echo "export PATH=/usr/local/qt6/bin:\$PATH" &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br><span class="line"></span><br><span class="line">cd /etc/ld.so.conf.d</span><br><span class="line">echo -e "/usr/local/qt6/lib"|sudo tee qt-6-x86_64.conf</span><br><span class="line">sudo ldconfig</span><br><span class="line">cd</span><br></pre></td></tr></tbody></table></figure><p>此时输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qmake -v</span><br></pre></td></tr></tbody></table></figure><p>应有输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QMake version 3.1</span><br><span class="line">Using Qt version 6.1.0 in /usr/local/qt6/lib</span><br></pre></td></tr></tbody></table></figure><h2 id="安全绳"><a href="#安全绳" class="headerlink" title="安全绳"></a>安全绳</h2><p>如果你看完了上面的内容才来到这里，有两种可能：</p><ol><li>你很幸运，一次过了；</li><li>你在云，根本没动手！</li></ol><p>保守估计有起码一半的人会在半路跳进坑里，那你就得在这里找绳子啦~</p><h3 id="关于-grpc-和-protobuf-的版本问题"><a href="#关于-grpc-和-protobuf-的版本问题" class="headerlink" title="关于 grpc 和 protobuf 的版本问题"></a>关于 grpc 和 protobuf 的版本问题</h3><p>估计有一部分人（包括我）之前接触过 go 版本的 grpc 和 protobuf，刚开始就会心生疑问：这俩玩意用 go 或者 pip 装不是更快吗？</p><p>很遗憾。。。并不行，必须用 c 版本的，还得编译出 lib 版本的库装到系统中才能正常使用。</p><h3 id="ssl-错误"><a href="#ssl-错误" class="headerlink" title="ssl 错误"></a>ssl 错误</h3><p>常见于 qv2ray 和 qt6 编译中出现。</p><p>qv2ray 编译中出现，一般是因为</p><ol><li>版本不匹配，比如自己编译了 openssl，又安装了 <code>libssl-dev</code></li><li>编译 grpc 的时候没有加参数 <code>-DgRPC_SSL_PROVIDER=package</code>，参见 <a href="https://github.com/Qv2ray/Qv2ray/discussions/1509">编译到最后一步报错 · Discussion #1509 · Qv2ray/Qv2ray</a></li></ol><p>在 qt 编译中出现，大概率是 <code>libssl-dev</code> 没装或者是 configure 后补装的。</p><p>另参考：</p><ul><li><a href="https://github.com/grpc/grpc/issues/15054">static link grpc lib not working · Issue #15054 · grpc/grpc</a></li></ul><h3 id="库错误"><a href="#库错误" class="headerlink" title="库错误"></a>库错误</h3><p>最大的坑。严格意义上上面的 ssl 错误也可以归类为库错误的范畴。</p><p>原因有：</p><ol><li>新编译软件的库没有放到 ldconfig 中；</li><li>没装库</li><li>库装晚了（常见于 qt 编译）</li><li>既用了 apt 装库也编译安装了一份，apt 装的优先被读取但编译其他东西的时候用的是编译安装的库因此运行时报错。 </li></ol><p>有那么几个检查方法：</p><ol><li><p>编译时报错。可用 <code>pkg-config</code> 命令，类似</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pkg-config --libs openssl</span><br><span class="line">pkg-config --libs xcb</span><br></pre></td></tr></tbody></table></figure><p>有输出证明库正常安装，没有就是缺了。</p></li><li><p>运行时报错。比如常见的运行 qv2ray 二进制时报 xcb 相关的错误，可使用 ldd 命令：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldd ./qv2ray</span><br></pre></td></tr></tbody></table></figure><p>如果有库没找到 / 没装，会有提示。 </p></li></ol><p>解决方法就是使用 <code>sudo find / -name </code> 命令搜查相关文件确定原因，然后根据原因对症下药：</p><ol><li>加入相关路径到 ldconfig（可参考上面 qt 安装和编译的文章）</li><li> apt 装库或者编译库</li><li> 装库后删除已编译部分重新编译，或者删除整个项目并重新拉取。</li><li>配置 LD_LIBRARY_PATH 变量。参考 qt 错误第一条。</li></ol><h3 id="多线程编译错误"><a href="#多线程编译错误" class="headerlink" title="多线程编译错误"></a>多线程编译错误</h3><p>在使用类似</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j $(nproc)</span><br></pre></td></tr></tbody></table></figure><p>这类命令时，有可能出现各种编译错误问题，例如这个报错：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lib error: relink 'libprotoc.la' with the above command before installing it</span><br></pre></td></tr></tbody></table></figure><p>解决方法有：</p><ol><li>如果可能，使用 <code>make clean</code> 命令后重新 make；没有 <code>make clean</code> 命令的话就只能重新拉取项目代码；</li><li>使用单线程或手动指定进程数而不是使用 <code>$(nproc)</code> 变量。注意，不要指定过大的线程数或者不指定线程数（比如直接使用 <code>make -j</code> 命令），错误的进程数可能消耗过大的内存导致系统卡死。</li></ol><h3 id="qt-错误"><a href="#qt-错误" class="headerlink" title="qt 错误"></a>qt 错误</h3><p>qt 有可能遭遇编译错误；也有可能编译安装成功后发现 qv2ray 运行不了，因为编译的 qt 组件不全。</p><h4 id="自编译-qt-后不慎在-apt-内安装了对应包导致报错"><a href="#自编译-qt-后不慎在-apt-内安装了对应包导致报错" class="headerlink" title="自编译 qt 后不慎在 apt 内安装了对应包导致报错"></a>自编译 qt 后不慎在 apt 内安装了对应包导致报错</h4><p>报错代码类似于 <code>version 'Qt_5.15' not found (required by xxxx)</code>。</p><p>解决方法是配置 <code>LD_LIBRARY_PATH</code>。让自编译的 qt 库优先被使用。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo "export LD_LIBRARY_PATH=/home/zbttl/Qt/5.15.2/gcc_64/lib"|sudo tee /etc/bash.bashrc</span><br><span class="line"></span><br><span class="line">echo "export LD_LIBRARY_PATH=\$HOME/Qt/5.15.2/gcc_64/lib" &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></tbody></table></figure><h4 id="防止-configure-时库不全"><a href="#防止-configure-时库不全" class="headerlink" title="防止 configure 时库不全"></a>防止 configure 时库不全</h4><p>运行 <code>./configure</code> 命令后，会在 qt 目录下生成一个 <code>CMakeCache.txt</code> 文件，里面就是本次 qt 编译所支持的功能。如果此时环境内依赖不全，就会导致组件缺失。这里放出我自己测试能够成功运行 qv2ray 的 <a href="https://1drv.ms/t/s!AoMoC9XTgpEsmc4Pi5-M08cQCoWicg?e=hpV7d9">qt6 编译组件清单文件</a>，出问题的话可以用 vscode 对一下。</p><p>另外使用 <code>./configure</code> 命令时，可以考虑带上 <code>-openssl</code> 和 <code>-opengl</code> 等参数（上面的教程例子中已经带上了 <code>-openssl</code>），如果找不到相应的库，就会直接报错告诉你差这些而不是各种一闪而过告诉你准备完成。</p><h4 id="已编译安装的-qt6-测试"><a href="#已编译安装的-qt6-测试" class="headerlink" title="已编译安装的 qt6 测试"></a>已编译安装的 qt6 测试</h4><p>可以写一个小测试项目，因为目前我遇到的安装后的 qt 方面的三个问题，分别对应 openssl、opengl、xcb 三个问题，而我编的这个小程序要是能够正常编译运行，就证明不存在那三个问题。</p><ol><li><p>新建一个文件夹，文件夹里面放上名为 <code>test.cpp</code> 的文件，写入以下内容：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;QApplication&gt;</span><br><span class="line">#include &lt;QLabel&gt;</span><br><span class="line">#include &lt;QDebug&gt;</span><br><span class="line">#include &lt;QSslSocket&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc,char *argv[])</span><br><span class="line">{</span><br><span class="line">QApplication app(argc,argv);</span><br><span class="line">//qDebug()&lt;&lt;QSslSocket::sslLibraryBuildVersionString();</span><br><span class="line">QLabel *Label = new QLabel(QSslSocket::sslLibraryBuildVersionString());</span><br><span class="line">Label-&gt;show();</span><br><span class="line">return app.exec();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>生成 pro 文件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qmake -project</span><br></pre></td></tr></tbody></table></figure></li><li><p>生成 stash 文件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qmake</span><br></pre></td></tr></tbody></table></figure></li><li><p>修改 pro 文件，加入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QT       += widgets \</span><br><span class="line">            network</span><br></pre></td></tr></tbody></table></figure></li><li><p>编译</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></tbody></table></figure></li><li><p>运行</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./test</span><br></pre></td></tr></tbody></table></figure><p>如果没问题就会弹出带有当前系统 openssl 版本号的弹窗。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210720010314.png"></p><p>后续如果想要显示其他内容，修改 <code>test.cpp</code> 内容并 <code>make</code> 就可以。不要执行 <code>qmake</code>，否则 pro 文件里这行就要重新写了。</p></li></ol><h4 id="运行后报错，查看具体信息"><a href="#运行后报错，查看具体信息" class="headerlink" title="运行后报错，查看具体信息"></a>运行后报错，查看具体信息</h4><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export QT_DEBUG_PLUGINS=1</span><br></pre></td></tr></tbody></table></figure><p>此时再运行 qt 程序就会弹出更详细的错误信息。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210720010945.png"></p><h3 id="qv2ray-官方部署参考文章和其他参考文章"><a href="#qv2ray-官方部署参考文章和其他参考文章" class="headerlink" title="qv2ray 官方部署参考文章和其他参考文章"></a>qv2ray 官方部署参考文章和其他参考文章</h3><ul><li>qv2ray 的 github actions 配置 <a href="https://github.com/Qv2ray/Qv2ray/blob/master/.github/workflows/build-qv2ray-cmake.yml">Qv2ray/build-qv2ray-cmake.yml at master · Qv2ray/Qv2ray</a></li><li>官方文档 <a href="https://qv2ray.net/lang/zh/hacking/manuallybuild.html">手动构建 Qv2ray 项目 | Qv2ray</a></li><li>超全的 qt 笔记：<a href="https://github.com/wangwenx190/notes/blob/master/qt.zh.cn.md">notes/qt.zh.cn.md at master · wangwenx190/notes</a></li></ul><hr><h2 id="二号坑"><a href="#二号坑" class="headerlink" title="二号坑"></a>二号坑</h2><p>总算是搞定了。。。可是等一下，新界面呢？</p><p>还有怎么没有中文，按下插件按钮时报错？（似乎只有 qt5 编译的发行版没有发生这种错误）</p><p>另外编译出来的东西怎么打包呢。。。</p><p>没有新界面是编译过程有问题吗？但后来我在 tg 群中发现，其实如果只是 ubuntu 下想要装新版本，qv2ray 官方搞了这个东西：<a href="https://qv2ray.net/debian-dev/">Qv2ray Debian Repository (Nightly) | debian-dev</a>，装这个就好了。。。。但这里面的新版本界面我也没调出来。</p><p>嘛，看来，还得折腾。</p><p><strong>（21.8.9 更新）</strong> 在项目的 <a href="https://github.com/Qv2ray/Qv2ray/actions">github action</a> 里面看到了各种不同版本的 qv2ray（所以是实际上，要下载最新版本的 qv2ray，应该去 action 里面找而不是到 release 里面）。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210811231413.png"></p><p>里面这些中，windows 专用的就 <code> Qv2ray Windows Installer</code>、<code>Qv2ray build matrix - cmake</code>、<code> Qv2ray build matrix - cmake</code>，只有最后一个是用 qt6 编译的新版；点开，果然有 qml 和 qwidget 两种，分布对应着新界面和旧界面；版本间还有 <code>RelWithDebInfo</code> 和 <code>release</code> 两种编译模式上的区别，把前者当做性能更好的 debug 版本就行了。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210811232614.png"></p><p>不过嘛。。。。一个是，这几个包解压后，打开里面的 qv2ray 可执行文件会报错 openssl 不存在，需要先用 chocolatey 装一个；其次就是，qml 版本双击后一点反应也没有。最后翻了一下群记录，发现</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@master/img/20210808153749.png"></p><p>意思是。。。白干了？</p><p><strong>（21.8.17 更新）</strong></p><p>业 界 冥 灯</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210817225647.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;事情的来源，是两个月前和朋友讨论啥软件界面又好看「学术网站」又快界面又漂亮。clash 虽然漂亮，但支持的协议少了点。&lt;/p&gt;
&lt;p&gt;这时候我就提了一嘴「qv2ray 新界面呀，不是挺漂亮的吗，只是要编译，又不麻烦」&lt;/p&gt;</summary>
    
    
    
    <category term="Complier" scheme="https://zbttl-github-io.vercel.app/categories/Complier/"/>
    
    
    <category term="Linux" scheme="https://zbttl-github-io.vercel.app/tags/Linux/"/>
    
    <category term="Ubuntu" scheme="https://zbttl-github-io.vercel.app/tags/Ubuntu/"/>
    
    <category term="qt5" scheme="https://zbttl-github-io.vercel.app/tags/qt5/"/>
    
    <category term="qt6" scheme="https://zbttl-github-io.vercel.app/tags/qt6/"/>
    
    <category term="grpc" scheme="https://zbttl-github-io.vercel.app/tags/grpc/"/>
    
    <category term="openssl" scheme="https://zbttl-github-io.vercel.app/tags/openssl/"/>
    
    <category term="cmake" scheme="https://zbttl-github-io.vercel.app/tags/cmake/"/>
    
    <category term="Ninja" scheme="https://zbttl-github-io.vercel.app/tags/Ninja/"/>
    
  </entry>
  
  <entry>
    <title>凑合用呗，还能砸了咋滴？————老旧的 ipad AIR2 搭配键鼠使用体验</title>
    <link href="https://zbttl-github-io.vercel.app/cou-he-yong-bai-huan-neng-za-liao-zha-di-lao-jiu-de-ipad-air2-da-pei-jian-shu-shi-yong-ti-yan/"/>
    <id>https://zbttl-github-io.vercel.app/cou-he-yong-bai-huan-neng-za-liao-zha-di-lao-jiu-de-ipad-air2-da-pei-jian-shu-shi-yong-ti-yan/</id>
    <published>2021-07-04T16:00:00.000Z</published>
    <updated>2021-08-15T01:31:10.811Z</updated>
    
    <content type="html"><![CDATA[<p>之前说过，我的笔记本这周送修了。</p><p>于是我这周就没有外出的笔记本用了。。。难不成我摸鱼的时候就只能呆呆的看几本杂志？我拒绝！</p><p>家里还有一台非常非常旧的酷比魔方 windows 平板（本来想说买了小新以后就刷成 linux 继续用，结果发现这玩意是 64 位的 bios 刷 32 位的系统，而 64 位系统又刷不上去，所以就搁置了），以及一台 ipad air2。我的需求很简单，就是能远程回家操作家里的电脑 + 中午休息的时候看看番。看着 windows 平板那寒酸的 720p 屏幕，以及回想起当年果果吹得天花乱坠的口号「你的下一台电脑，何必是电脑」，决定了，就带 ipad 出门吧！</p><p>虽然说。。。那个口号并不是喊给 AIR2 这种老古董用的。。。而且为了努力达成口号里的目标（作作样子），苹果钦（ying）定（dian）了两个左膀右臂——妙控键盘和 apple pencil。嗯。。。我怎么可能有这俩玩意嘛（贫穷的眼神）</p><p>不过我倒是有个蓝牙键盘（5 年前买的 BOW 经典三折叠款，型号我忘了，就是给 windows 平板配的），和刚买不久的罗技 m336（就是给 ipad 买的，我家无线鼠标挺多但都是 2.4g，ipad 又没有 usb 口，只能买个蓝牙的凑合用），凑个乞丐版体验应该不成问题吧。。。</p><p>于是乎上周日晚我下好了 zerotier 和几个远程软件，用 document 通过 ftp 从家里的电脑拖几部番剧进来，第二天我就这样开开心心的出门了。不得不说，这几样东西加在一起无论从体积上还是重量上确实比小新这种笔记本还要轻的多，但。。。这也是这套组合唯一的优点了。</p><h2 id="键鼠使用体验和设置"><a href="#键鼠使用体验和设置" class="headerlink" title="键鼠使用体验和设置"></a>键鼠使用体验和设置</h2><p>一连上鼠标，我就感觉到了果果满满的恶意——且不说这神秘的吸附感，这鼠标加速也太诡异了，根本没有 windows 上那种指哪打哪的感觉。当然，微软那边也有类似的东西，叫做「提升鼠标准确度」</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210705023746.png"></p><p>打游戏的同学应该对这东西有印象，因为无数游戏操作入门教程都会在比较开头的位置告诉你：</p><p>关！掉！他！</p><p>这是让你肌肉记忆丧失的坏东西！</p><p>然而偏偏果果那边就关不掉。。。。</p><p>另一个坑爹的地方是名为自然滚动的东西，在通用-&gt;触控板与鼠标中，这玩意开启后，向上向下滚轮就完全反过来了。关键问题是，即使关掉它，有好多情景下滚动方向还是反的。。。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_1579.jpg">来到通用-&gt;键盘-&gt;实体键盘里面，关掉讨厌的首字母大写，以及使用大写键切换语言。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_1578.jpg"></p><p>然后来到辅助功能，指针控制这里，关掉自动隐藏指针和指针动画，这俩苹果觉得 cool 的东西，普通键盘和鼠标用起来简直就是灾难。。。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_1580.jpg">最后到辅助功能键盘这个位置，这里有个七伤拳——全键盘控制。开启以后可以用键盘上的组合键开启 dock，回到桌面，开启多任务界面等等。但是！开启以后，shift、tab、caplocks、方向键这些按键原来的功能全部失效，如果不用 rdp，我可能还会选择把这个功能打开，但在 rdp 下这个功能会导致体验极其糟糕。。。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_1581.jpg">关闭后，我的 bow 键盘还能支持通过 fn+ 快捷键完成回到桌面调节音量等功能，仅仅是进入多任务界面要在我屏幕上划一下手指而已。另外还要多记一下的就是 ctrl + 空格切换输入法的快捷键，在远程桌面这几个猪队友的衬托下，这个快捷键变得无比的重要。</p><h2 id="菜鸡互啄——ios-上体验糟糕的远程桌面们"><a href="#菜鸡互啄——ios-上体验糟糕的远程桌面们" class="headerlink" title="菜鸡互啄——ios 上体验糟糕的远程桌面们"></a>菜鸡互啄——ios 上体验糟糕的远程桌面们</h2><p>由于我的主机是 windows，加上我后台也只运行多一个 teamviewer，所以第三方的远程应用我就只多测试一个 teamviewer。</p><h3 id="微软官方-rdp"><a href="#微软官方-rdp" class="headerlink" title="微软官方 rdp"></a>微软官方 rdp</h3><p>首先就得吐槽两个大问题：</p><ol><li><p>没法指定分辨率和主机那边一致，虽然保证了画面的解析度，但无论是连过去还是晚上回到家，第一次点亮屏幕后看见那错乱的桌面布局都会让人血压升高——</p></li><li><p>远程回去然后套娃 vmware Ununtu，ubuntu 里的 terminal 对整个键盘的映射都会出问题，只有少数的几个键按下去会在 terminal 出出反应，而且显示出来的字符和在键盘上敲得还不是同一个。。。只能在 Ubuntu 里面通过复制粘贴输入命令，或者开启 openssh 后用 xshell 之类的连上去。谷歌了一下，居然已经是个陈年老 bug 了。。。现在还没修！</p><p><a href="https://remotedesktop.uservoice.com/forums/265183-remote-desktop-client-for-ios/suggestions/8780344-fix-keyboard-issue-when-using-virtualbox-pidgin">Fix keyboard issue when using VirtualBox, Pidgin, and other VM software – Feedback for Microsoft Remote Desktop Clients</a></p></li></ol><p>其他一些小问题，包括只能用平板自己的输入法，主机自己的输入法不能用。</p><p>官方 rdp，唯一的优点就是快和便于连接，不过这个优点就够了，因为另外两个工具因为这点，根本就没法好好用。。。</p><h3 id="teamviewer"><a href="#teamviewer" class="headerlink" title="teamviewer"></a>teamviewer</h3><p>首先，在 windows 那边就有的问题：如果之前在主机这边锁屏了（自己锁了，或者用过 rdp 连接），那么连接过去后还要用 win+L 快捷键锁一次屏幕输入一次密码才能进去，然而。。。ios 下 win 键是废的，所以，没用。另外，本地的 ip 也没法保存到连接历史里面，每次都要输一遍 ip；掉线重连也基本连不上。远程体验。。。好歹有自定义分辨率，vmware 也正常；和 rdp 相反，用平板自己的输入法时主机自己的输入法也会工作，所以最好的办法是将平板输入法切换到英文。teamviewer 的远程光标很碍事，也要关掉；鼠标滚轮在 teamviewer 中不生效。</p><p>其实能用是能用，但锁屏后连不上这点直接就 pass 了。</p><h3 id="remote-desktop-manager"><a href="#remote-desktop-manager" class="headerlink" title="remote desktop manager"></a>remote desktop manager</h3><p>支持多种协议，包括 ssh，rdp 等等。其实协议清单里面也有 teamviewer，但。。。也就能记个账号密码，没法连接。</p><p>跟官方的 rdp 应用比，这玩意能自定义分辨率；但实际用起来，最主要的问题就是：慢！画面好久才能刷新出来，按一下反应半天。同样是 rdp 协议，怎么你就这么拉跨呢？</p><hr><p>而其他的工具，我能想到的包括 moonlight、steam 等等，但都需要后台另外装/开东西，我就没试，以后有机会再说吧。</p><p>总结两个字：垃圾！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前说过，我的笔记本这周送修了。&lt;/p&gt;
&lt;p&gt;于是我这周就没有外出的笔记本用了。。。难不成我摸鱼的时候就只能呆呆的看几本杂志？我拒绝！&lt;/p&gt;</summary>
    
    
    
    <category term="IOS" scheme="https://zbttl-github-io.vercel.app/categories/IOS/"/>
    
    
    <category term="rdp" scheme="https://zbttl-github-io.vercel.app/tags/rdp/"/>
    
    <category term="teamviewer" scheme="https://zbttl-github-io.vercel.app/tags/teamviewer/"/>
    
    <category term="键鼠" scheme="https://zbttl-github-io.vercel.app/tags/%E9%94%AE%E9%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>笔记本送修记</title>
    <link href="https://zbttl-github-io.vercel.app/bi-ji-ben-song-xiu-ji/"/>
    <id>https://zbttl-github-io.vercel.app/bi-ji-ben-song-xiu-ji/</id>
    <published>2021-07-03T16:00:00.000Z</published>
    <updated>2021-07-05T17:26:50.663Z</updated>
    
    <content type="html"><![CDATA[<p>故事要从四个月前说起。</p><p>睡前惯例玩一下笔记本。二三月份的南宁阴气还很重，所以我蒙着被子趴着敲键盘，然后不知不觉就睡着了。</p><p>睡梦中迷迷糊糊听见「啪」一声，我一下就爬了起来，发现自己压在笔记本上面，这时候笔记本还开着盖，估计是自己翻了个身导致这玩意开合过度发生异响，感觉没啥大问题我就没在意。</p><p>彻底睡醒以后发现笔记本合不稳了，转轴那里缝隙变大了，盲猜可能是转轴裂了。这种人为的事故估计联想不保吧。。。那就先凑合着用。</p><p>结果随着时间推移，转轴的裂缝越来越大，到了上周屏幕右下角因为外壳开裂受到挤压都变黄了一块，再这么下去整块屏幕都要赔进去，没办法，想办法修一下吧。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210625_093019119.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210625_093012086-tuya2.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210625_064558539-tuya2.jpg"></p><p>先确认了一下，小新 pro13 是整机两年保修，不确定的话在联想微信小程序「联想会员中心」里面注册一下机器就能看到了。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Screenshot_20210706-001110.png"></p><p>虽说是半人为的损坏（还是要狡辩一下 2333，小新 pro13 的转轴强度确实不高而且开合角度小，要是换成我同学那个 16 年的联想 air，我在床上这一通操作估计没啥问题，那台开合角度比我这个大多了），我还是祈望在保修期内减免一定的维修费用，如果不是整机保修而是类似我 hp 暗影精灵那种主要部件保修两年，那我不如直接交给电科。虽然那台暗影精灵不是因为外壳而是因为烧了主板和硬盘，离保修期 2 年结束还有两个月享受到了免费售后，我的电子设备们真是命运多舛啊2333</p><p>另外我还搜到了这篇文章：<a href="https://post.smzdm.com/p/754042/">如何修复摔坏的笔记本，换壳、换屏、升内存、加固态——联想小新潮5000_笔记本内存_什么值得买</a></p><blockquote><p>检测完毕后，可以<strong>咨询</strong>下JD的小姐姐，京东买的笔记本有个特点，保修是<strong>按部件</strong>保的，打个比方即使我的屏幕是因为自己摔坏的，<strong>其他部件</strong>日后出现非人为故障，<strong>仍然可以进行保修</strong>。大致了解了一下，屏幕这么明显的人为损坏肯定是保不了，但是外壳的损伤，对方可以为我做个免费更换。某宝查了下价格，同类型的外壳大概<strong>50</strong>一个面，JD自己保修估计成本更低，看来京东方面应该是在计算成本后做了顺水人情，同时争取给客户留个好印象<img src="https://res.smzdm.com/images/emotions/189.gif" alt="如何修复摔坏的笔记本，换壳、换屏、升内存、加固态——联想小新潮5000"> 。</p><p><strong>PS.**外壳保修要注意千万</strong>不能脱落<strong>，只要外壳部分还是</strong>完整<strong>的一个整体，就可以按</strong>变形<strong>走</strong>免费保修<strong>，如果一不小心</strong>分离<strong>了，那么就只能走</strong>付费维修**，一个面大概150，有一定动手能力的建议某宝买自己来换，这个东西没什么技术含量。</p></blockquote><p>我这个从外观看也只是变形的说。</p><p>接着，先在京东 app 上填售后单。2 小时后就收到了东哥的客服电话，比较值得在意的地方就是客服小姐姐让我选是送回京东还是在当地的联想授权维修点维修。上一次 hp 的售后我就直接交给了南湖的 hp 授权维修部，但这次。。。我判断这种半人为的损伤现场送修的话联想可能就直接开价了，如果我拒绝了估计就让我直接扛回家；而走京东的话，毕竟我已经送过去了，来来回回的，可能他就懒得开价或者不会开价那么高？总之是我的臆测，正好第二天我有东哥的快递，客服答应让快递员顺手免费送这一程，等于我去的半程运费也免了，那就这样吧。</p><p>送过去是上周六，虽然只是机子有问题，但客服叫我把电源也送回去，正好我手里箱说全，干脆一起塞进去。送修前先拍张照，录个视频，说明这台电脑屏幕大概是好的，万一送过去屏幕炸了，那可不是我的锅（</p><p>然后开始了漫长的等待，到了前天（周五），终于给我来了电话，开口就说已经修好了，绝口没有提钱的事，nice！然后到了今天，这台电脑就送回来了。</p><p>检查了一下，确实修好了，不过只修了 a 面加转轴，我之前以为 c、d 面也会换的（有点点变形）。转轴那里的胶都没撕，屏幕部分变黄的那一块也恢复了，万幸并没有被压到漏液。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210705_170755605-tuya2.jpg"></p><p>来来回回，送过去 5 天，送回来 2 天，加起来七天。值得一提的是，我爸之前的某米老人机屏幕坏了送回京东修，也是七天送回来。所以，七天这个时间跨度，是不是可以命名为「京东速度」（</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;故事要从四个月前说起。&lt;/p&gt;
&lt;p&gt;睡前惯例玩一下笔记本。二三月份的南宁阴气还很重，所以我蒙着被子趴着敲键盘，然后不知不觉就睡着了。&lt;/p&gt;</summary>
    
    
    
    <category term="流水账" scheme="https://zbttl-github-io.vercel.app/categories/%E6%B5%81%E6%B0%B4%E8%B4%A6/"/>
    
    
    <category term="流水账" scheme="https://zbttl-github-io.vercel.app/tags/%E6%B5%81%E6%B0%B4%E8%B4%A6/"/>
    
    <category term="lenovo" scheme="https://zbttl-github-io.vercel.app/tags/lenovo/"/>
    
  </entry>
  
  <entry>
    <title>xbox series S 使用体验 </title>
    <link href="https://zbttl-github-io.vercel.app/xbox-series-s-shi-yong-ti-yan/"/>
    <id>https://zbttl-github-io.vercel.app/xbox-series-s-shi-yong-ti-yan/</id>
    <published>2021-06-17T16:00:00.000Z</published>
    <updated>2021-07-05T11:28:17.963Z</updated>
    
    <content type="html"><![CDATA[<p>半个月前买的小钢炮，新特性也摸得得差不多了，就写一下使用体验呗。</p><p>在本地的店铺以 2750 入手的，加上花呗的一个点提现费，差不多花了 2777（分期给马老板的钱就不算进去了）。虽然说差不多这个时候买的话国行也应该到手了，2300 还免息便宜不少呢，而且还提前把后门放回来了，但上次 xbox one s 当国行勇士的体验实在是太提心吊胆了，所以这次就算贵一点也认了（总不能还能当外服勇士吧）。</p><h2 id="初体验"><a href="#初体验" class="headerlink" title="初体验"></a>初体验</h2><p>拿到手。。。感觉盒子还是挺大的，比 xbox one S 的盒子小一点点而已。体积是小挺多，但也没有我想象中可以随便带出去这种程度，比我的联想小新 pro13 还略重一点。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210628_144035928-tuya2.jpg"></p><p>刚开机就感觉加载速度起飞，特别是开 apex，那个动画速度，一瞬就过去了。。。。apex 还是装在外置硬盘里的。</p><h2 id="游戏表现"><a href="#游戏表现" class="headerlink" title="游戏表现"></a>游戏表现</h2><p>到目前为止我的游戏体验：</p><ol><li><p>有飞跃性提升的：cod15（xo 版）、<del>cod17（xs 版）</del>极限竞速地平线 4</p><p>cod17 本世代的分屏是个灾难（武器贴图消失，甚至瞄准的时候枪模都没了；画面模糊简直重返上上世代），而购买了次时代版本以后，分屏变为可玩，且有了光追后画面体验感大幅上升；cod15 我曾经吐槽过三人无法分屏，但放到次时代主机上就可以了。但注意，cod17 只有 xs 强化版有这种飞跃，普通版表现和在 xbs 上半斤八两。另外似乎从普通版升级到次时代版要比直接买次时代版便宜（欧元区买升级包只需花费 40 元左右，而 10 美元的差价约合人民币 60 元）。**(7.4 更新）**将 fh4 得分上调！因为 fh4 加载上时间的缩短感知太明显了，xos 上冷加载差不多要五分钟，而 xbs 上差不多一分钟就好了，更别提还有快速恢复功能的加持，fh4 这种开放性赛车游戏我就喜欢趁思考的碎片时间玩一下，这种情况下加载时间缩短给体验上的提升是飞跃性的。</p></li><li><p>大幅提升，但有遗憾：apex（xo 版）、cod17</p><p>apex 到现在都没有出 xs 专版，但可以明显感受到加载速度的提升，贴图质量也有大幅改善，但是。。。apex 第九赛季开始的时候，曾经有帧数和延迟面板显示字体错位的问题，在我 xbox series S 到手之前，本世代那边就已经修复了；但我把硬盘插上次时代主机这边，这个 bug 就又出现了，直到现在都还没修。**(7.4 更新）** 我把 cod17 的 xs 评级下调了，因为分屏下天空闪屏和准心消失的问题还是时长发生，比 xbox one 版好得多，但相比前几个版本的 cod，毋庸置疑的有退步。另外 cod17 也是少见的几个不支持 xbox 快速恢复的游戏。 </p></li><li><p>有 xs 版，但感知没那么强：<del>极限竞速地平线 4、</del>命运 2</p><p>命运 2 我感受不到啥提升（可能帧数有提升，但非竞技类 fps，我感受不到）；地平线 4 的贴图感受其实是有大幅进步的（毕竟 xos 显存很少），但其实草地的模糊感还是可以感受得出来；另一点就是光追，实际上，上一代主机上 fh4 就实现了效果不错的软光追，因此本身感知很强的光追到 fh4 这里感受就没那么强了。</p></li><li><p>没有 xs 版，依靠机能和技术有提升，但感知没那么强：tf2</p><p>tf2 吃到了 fps boost 的红利。但重生对游戏的优化很到位，导致我并不太感受得出差距。</p></li><li><p>完全没有改善：cod16</p><p>现在的 cod16 bug 成堆，大战场要删一堆数据包才能玩；分屏武器枪模消失，换到 xss 上没有任何改观。</p></li></ol><h2 id="外置硬盘、智能分发"><a href="#外置硬盘、智能分发" class="headerlink" title="外置硬盘、智能分发"></a>外置硬盘、智能分发</h2><p>接下来是「一捧一踩」：</p><p>好的是，经过上时代 xbox 分区处理后的固态硬盘，可以直接插到新的次时代主机上使用，兼容性良好，里面原来有的游戏「一些」也可以直接打开玩。fps boost 和自动 hdr 功能也可以照常开启。</p><p>为啥说是「一些」呢？</p><p>这就要大批特批软软的「智能分发」了：</p><p>如果这个游戏你有买 xs 版，或者你是 xgp 会员且这个游戏有次时代版的话，就会提示你更新，不更新就进不去游戏。</p><p>但 xs 版只能在内置空间内装啊！或者买微软的死贵储存卡。300 多 g 的空间，已经很拮据了，就想着把一些 xs 版感知不强的游戏用本世代版替换，放在外接 ssd 里面，还可以 xos 和 xss 一起用，结果这下一搞，没辙了。</p><h2 id="快速恢复"><a href="#快速恢复" class="headerlink" title="快速恢复"></a>快速恢复</h2><p>又是一个值得表扬的功能。</p><p>令人惊叹的并不只是快速恢复带来的加载时间上的缩短，更重要的是快速恢复适用性极广，无论是放在内置硬盘还是外置普通 ssd，是 xo 版游戏还是 xs 版游戏，都可以吃到快速恢复带来的红利；甚至之前预测到「快速恢复可能是利用内存，所以彻底关机后快速恢复功能就会失效」，最后实验出来结果并不是这样，除非是加载出错，否则关不关机都不影响快速恢复功能的启动。</p><p>但，我这个月还是遇到过几次，快速恢复出来的游戏，几个按键失灵（比如快速恢复出来的 fh4，打不开地图）。但出现概率并不高，这得微软还得继续做适配。</p><p>而且在如此广泛的支持下，还是有几个游戏不支持快速恢复，比如说 cod，这就完全是厂商的锅了，动视出来挨打！</p><h2 id="配套设备"><a href="#配套设备" class="headerlink" title="配套设备"></a>配套设备</h2><p>我同学家的 x9100h 就基本能完美支持 xss 120fps、hdr 这些特性了。但要注意几点：</p><ol><li>要插到 hdmi 3 口上才能支持完整特性；</li><li>要开启一些选项才能选到 120fps；</li><li>xss 无法把 120fps 和 4k 选项一起开启，只能二选一；因此，其实一根 hdmi 2.0 线足矣，不需要最新标准 hdmi 2.1 的线。</li></ol><p>具体操作，可以参考<a href="https://www.bilibili.com/video/BV1qV41127QY">索尼X9000H更新HDMI2.1固件，4K120Hz/eARC等功能一览，含X9088H/X9100H_哔哩哔哩_bilibili</a>。</p><h2 id="其他优缺点"><a href="#其他优缺点" class="headerlink" title="其他优缺点"></a>其他优缺点</h2><ol><li>因为内存大了，某些游戏打不动字（打字很卡）的问题也解决了。</li><li>我购买的是日版，听说有手柄信号和 5g wifi 冲突的问题，但我并没有遇到（我家路由器是 ac86u）。不过有一次手柄确实无法响应主机，接着我把旧的 xos 手柄连接新主机，这个旧手柄倒是能正常操作；然后我重启了一下机子，用 type-c 线把新手柄接到 xss 上，过了一会，好了，很玄学。</li><li>但无线网卡相比 xos 那个弱鸡网卡好了不少，起码无线状态下开加速器我打 cod16 战区没遇到其妙的丢包问题了。</li></ol><hr><p>总体来说，大体满意，我的几个需求 xss 大体都能满足，就是体积再小一点就更好了。</p><p>另一个我好奇的地方是，xs 版和 xbox one X 强化是两个不同的概念，之前有几个游戏 bug 在 xss 这边测试出来就应该是 xos 配置不足的锅，换成 xox 应该也能解决，何况 xox 更便宜，自带的硬盘也更大。去掉光追这一点，如果不是追求便携性，以及这两年少的可怜的独占，xox 和 xss 谁会是更好的选择呢？</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;半个月前买的小钢炮，新特性也摸得得差不多了，就写一下使用体验呗。&lt;/p&gt;
&lt;p&gt;在本地的店铺以 2750 入手的，加上花呗的一个点提现费，差不多花了 2777（分期给马老板的钱就不算进去了）。虽然说差不多这个时候买的话国行也应该到手了，2300 还免息便宜不少呢，而且还提前把后门放回来了，但上次 xbox one s 当国行勇士的体验实在是太提心吊胆了，所以这次就算贵一点也认了（总不能还能当外服勇士吧）。&lt;/p&gt;</summary>
    
    
    
    <category term="Game" scheme="https://zbttl-github-io.vercel.app/categories/Game/"/>
    
    
    <category term="xbox" scheme="https://zbttl-github-io.vercel.app/tags/xbox/"/>
    
    <category term="xbox Series S" scheme="https://zbttl-github-io.vercel.app/tags/xbox-Series-S/"/>
    
    <category term="评测" scheme="https://zbttl-github-io.vercel.app/tags/%E8%AF%84%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>斐讯 n1 折腾记录</title>
    <link href="https://zbttl-github-io.vercel.app/fei-xun-n1-zhe-teng-ji-lu/"/>
    <id>https://zbttl-github-io.vercel.app/fei-xun-n1-zhe-teng-ji-lu/</id>
    <published>2021-04-01T16:00:00.000Z</published>
    <updated>2021-04-05T19:51:35.747Z</updated>
    
    <content type="html"><![CDATA[<p>本来想等自己有钱的时候再买一个性能强悍啥都能干的 x86 软路由的。。。</p><p>然而最近折腾加速器，实在受不了这帮硬路由的憨憨性能了：明明 ac86u 性能还凑合但内存只有 512m 结果刷了梅林各种问题各种崩，其他 mt7621 就更不用说了。我也考虑其他设备，比如 r2s，s905x 盒子之类的，但</p><ul><li>r2s 体积小但性能比 n1 还要差；</li><li>s905x 盒子就只能做软路由，做电视盒子差点。</li></ul><p>所以最后决定还是先买个 n1 顶着。以后换成高端一线的虚拟机软路由，再拿来当电视盒子。</p><h2 id="开箱"><a href="#开箱" class="headerlink" title="开箱"></a>开箱</h2><p>购入渠道有两个，拼夕夕和转转（淘宝系禁 fx），我同学 1 月初在转转买了个仅拆箱的 k2p a1 才用了 180 搞得我有点心动（现在这玩意最少要 220 起步，也是个理财产品），但我看了一眼转转的 n1 ，当时没有同城同省，而且成色不知道，带不带码可能也不知道，算了，省省直接拼夕夕了，带盒子不带遥控器准新机 155 到手。</p><p>买到手的时候才二月份，但那时一直没得空研究，所以一直拖到现在。现在到同一家店看，涨到 165 了。。。真-理财产品。</p><p>到手的 n1 成色尚可</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210402_143256218.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210402_143305864.jpg"></p><p>不过还是有两个令人遗憾的地方：</p><ol><li><p>盒子上没有 s/n 码，也就无法验证是否三码合一了：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210402_143321918.jpg"></p></li><li><p>带的电源是 12v 1.5a 的，肯定不是 n1 原装，多半是 k2p a2 原装。</p></li></ol><p>当时这俩不大不小的问题搞得我想退了。。。算了，先试试，跑个分备个份，就算后续要退也有办法还原。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>相比于刷路由器，刷 n1 要准备的东西多多了~</p><ol><li>hdmi 线</li><li>显示器</li><li>笔记本 / 台式机 / 平板</li><li>一个口为 USB-A 的线</li><li>网线一根</li><li>（可选）一个中继路由</li><li> 一到两个 U 盘 / tf + 读卡器，一个容量最好是 8g（可选），另一个要 16g 以上</li><li>（可选，要备份系统的话必选）usb hub</li><li>鼠标和键盘</li></ol><p>「一个口为 USB-A 的线」是因为 n1 上的 usb 接口是两个 USB-A 口。而这根线的另一头是啥就取决于你的笔记本 / 台式机 / 平板有什么口。大多数笔记本 / 台式机都只有 USB-A 口，这就是许多卖家捆绑销售双头 USB-A 的原因；但新一代的笔记本，特别是轻薄本都标配了两个 usb type-c 口；而旧一点的平板用的是 micro-usb 口，这两种线大家手上都不少，这种情况下就不用买卖家的双公口 USB 线了。不过平板有可能遭遇供电不足的情况，不太建议使用；有种说法是最好用 usb 2.0 线刷，但我用 type-c 3.1 口刷也没问题。</p><p>用中继路由的原因是我的笔记本都是靠无线连接路由器的，路由器本身离设备比较远无法通过有线连接；而进入 fastboot 的时候又需要 n1 和笔记本在同一个子网，所以就需要一个中继路由才能实现。</p><p>还有这个 hub，在一种情况下是必选的，待会我会提到。</p><h2 id="刷点啥呢"><a href="#刷点啥呢" class="headerlink" title="刷点啥呢"></a>刷点啥呢</h2><p>n1 可以刷那么几个 rom：</p><ul><li>openwrt</li><li>armbian</li><li>yyf</li><li>等等等</li></ul><p>主要是我只用得着我提到的这三个。</p><p>前两个可以通过 u 盘直接引导。yyf 只能直接刷入。</p><p>yyf 主要用来看电视，openwrt 是做软路由，armbian 则是做纯粹的 linux 开发系统。</p><p>openwrt 能拿来跑个分，armbian 能拿来备份 rom。</p><p>所以我们大致的刷机路线就是先刷 openwrt 做测试，如果盒子发热不严重并且跑分正常，那就暂时不退了，直接用 armbian 做个备份，之后刷入 yyf 玩一会电视功能，最后刷入 openwrt 做软路由。</p><h2 id="测试-备份"><a href="#测试-备份" class="headerlink" title="测试 + 备份"></a>测试 + 备份</h2><h3 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h3><p>要想从 u 盘启动，必须先把机器降级到 2.19 版本。我的 n1 拿到手就是 2.22 版本，铁定得降级。</p><p>推荐使用<a href="https://www.right.com.cn/forum/thread-340279-1-1.html">[2018-9-28]斐讯T1和N1降级恢复线刷功能 , adb脚本工具 - 斐讯无线路由器以及其它斐迅网络设备 - 恩山无线论坛 - Powered by Discuz!</a>，这玩意可以通过网络进行降级，不需要因为驱动问题大费周章。不过得安装 adb，请出老伙计 chocolatey：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install adb -y</span><br></pre></td></tr></tbody></table></figure><p>给 n1 插上鼠标，通过中继路由或者在 n1 界面中登录无线网络，点击四次版本号开启开发者模式，因为此时在官方系统中可以直接通过 wifi 连接自己的路由器，所以还暂时用不到中继路由。</p><p>n1 和电脑同时连上路由后，按提示降级即可。降级完毕后，官方系统中显示的估计版本还是 2.22，但实际上内部固件版本已降级。</p><p>之后，去 <a href="https://t.me/tony_cn">Tony 的交流群</a>中，找一个叫做「N1盒子激活U盘启动」的软件，解压密码就是 Tony。按照提示开启 u 盘启动即可。</p><h3 id="给-u-盘刷入-openwrt"><a href="#给-u-盘刷入-openwrt" class="headerlink" title="给 u 盘刷入 openwrt"></a>给 u 盘刷入 openwrt</h3><p>有三个工具可以用</p><ul><li>etcher</li><li>USB Image Tool（usbit）</li><li>Win32DiskImager</li></ul><p>这几个都能通过 chocolatey 安装。etcher 的界面不错，另外就算 img 打包在压缩文件中，它也能准确识别并刷入。但这玩意有个 bug，挺多时候进度条跑完会报错，但其实已经刷进去了。</p><p>usbit 需要手动用解压 img.xz 压缩包的内容（内容是一个 img 文件），而且需要先 reset 再刷入。但好处是不会报错，而且刷写速度还比 etcher 快。</p><p>Win32DiskImager 有中文。</p><p>自己选择吧。</p><p>openwrt 的镜像可以从这些地方获取：</p><ul><li><a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=981406&amp;extra=page=1&amp;filter=typeid&amp;typeid=21">[2020-10-18]★46+o版， S905x3、N1、贝壳云、我家云等op固件 - 斐讯无线路由器以及其它斐迅网络设备 - 恩山无线论坛 - Powered by Discuz!</a></li><li><a href="https://www.right.com.cn/forum/thread-4055451-1-1.html">[2021-01-31] 52+、52+O S905x3(含x2)、S922x、贝壳云、我家云、微加云等OP固件 - OPENWRT专版 - 恩山无线论坛 - Powered by Discuz!</a></li><li><a href="https://www.right.com.cn/forum/thread-4076037-1-1.html">[2021-03-28] 56+、56+O S905x3、S922x、贝壳云、我家云、微加云等OP固件 - OPENWRT专版 - 恩山无线论坛 - Powered by Discuz!</a></li></ul><p>固件有 +o 和 + 两种版本，不同地方在 +o 用的是旧版本 5.4.93 内核，新版本用的是 5.10 新版本内核（以前还有个区别，那就是 +o 用的 flow offloading 加速而 + 版本用 sfe 加速，但现在统一都用 flow offloading 加速了）。新版本内核有个弊端：</p><blockquote><ol><li>amlogic已支持 5.10内核，但是需要从 u盘或 tf卡启动，可以刷入emmc(仅数据分区），boot分区还是只能在 u盘或tf卡上面。</li><li>  5.10内核的副作用是 905x3、922x等机型 hdmi 绿屏、启动时间较长、mac地址会发生变化等</li></ol></blockquote><p>还有 + 版本似乎界面炫酷一点。。。不在意界面的话用 +o 版本就好了（虽然下面测试的截图我用的是 + 版本）。</p><h3 id="进入-openwrt-web-并跑分"><a href="#进入-openwrt-web-并跑分" class="headerlink" title="进入 openwrt web 并跑分"></a>进入 openwrt web 并跑分</h3><p>刷入后，开 n1 前插入 u 盘启动，顺利的话屏幕显示是这样子的</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210212_203219240.jpg"></p><p>此时敲一下回车就会进入熟悉 linux 命令提示界面。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210403_193142103.jpg"></p><p>同时能看到一个叫 openwrt 的 wifi 信号被发射出来，连接上去，并进入 192.168.1.1，就能看到 openwrt 的 web 界面。</p><p>but。。。这里有一个非常神秘的现象会出现：</p><p><strong>如果你刷入 openwrt 的 u 盘大小不是 8g 的话，就没法正常的启动</strong>，具体表现在：</p><ul><li>不断弹出 <code>reset high-speed xxx</code> 的错误提示；</li><li>linux 命令提示界面的提示符后面带一个 none 的标记</li><li>没有 wifi 信号被发射出来</li></ul><p>具体界面类似于这样：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210213_091609125.jpg"></p><p>我估计是因为 n1 的 rom 是 8g 的所以也要求启动 u 盘的容量也是 8g。。。</p><p>但，其实还有一个解决方案，那就是搭配 usb-hub 使用。hub 接上 n1，u 盘再接上 hub 就能正常识别了。话说回来，我想到 hub 的原因，源自于我一开始以为是供电问题，于是拿了一个带供电口的 hub 接上。果然 16g 和  32g 的 u 盘就都能正常启动 openwrt，后续拔掉供电后反复启动都能够正常工作，拔掉 hub 就立即歇菜。甚至就算是 8g 卡，第一次进入可能也要和 usb-hub 配合连接才能成功进入。具体原因我到现在都还没想清楚。。。</p><p>在 web 来到系统 -&gt; ttyd 终端，或者直接在 n1 的 linux cli 中输入测试指令都可以。</p><p>测试命令参照 <a href="https://www.youtube.com/watch?v=utWlY8_rpLg&amp;t=223s">(50) 2021今年买啥软路由？新年度软路由测试总结与推荐！！！ - YouTube</a>，一共有两个：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">coremark</span><br><span class="line">openssl speed -evp aes-256-gcm</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/chrome_j3W1VqCOim.png"></p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/chrome_QH3Ptg9jk9.png"></p><p>对下效果：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210404021521.png"></p><p>差不多哦。。。</p><p>而且持续运行时机子并没有严重发热。看起来没啥问题。</p><p>最后最好使用 <code>poweroff</code> 命令关机，再进行下一步。</p><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>备份就需要刷 armbian 了，因为 openwrt 里面没带有全盘备份工具。</p><p>因为是做全盘备份，所以 8g 的 u 盘那肯定是木大了，就必须得 16g u 盘 + usb-hub 一起上。</p><p>armbian 参考文章：</p><ul><li><a href="https://yuerblog.cc/2019/10/23/%E6%96%90%E8%AE%AFn1-%E5%AE%8C%E7%BE%8E%E5%88%B7%E6%9C%BAarmbian%E6%95%99%E7%A8%8B/">斐讯 N1 - 完美刷机 Armbian 教程 | 鱼儿的博客</a></li><li><a href="https://www.right.com.cn/forum/thread-510423-1-1.html">Armbian-5.77 on N1 , so far so good - 斐讯无线路由器以及其它斐迅网络设备 - 恩山无线论坛 - Powered by Discuz!</a></li></ul><p>备份 - ddbr 参考文章：</p><ul><li><a href="https://luotianyi.vc/1346.html">斐讯 N1 探索手记 #2 – 使用 ddbr 恢复官改系统 – Luminous’ Home</a></li></ul><p>同样，armbian 有这么几个版本可选：</p><ul><li>参考文章的 5.77 版</li><li>上面提到的 openwrt 网盘中的 5.4 和 5.10 内核两种（两种内核的区别我在 openwrt 那里提过了）</li></ul><p>另外还有 dtb 上的讲究。dtb 可以视为 armbian 驱动一类的东西，使用正确的 dtb 能让 armbian 系统获得更好的性能。不过既然我们只是用来备份系统的，其实没啥讲究，可以略过。dtb 有两种选择：参考文章 2 的 <code>meson-gxl-s905d-phicomm-n1-xiangsm.dtb</code> 和 openwrt 那边的 <code>N1_35+o_dtb_fixspeed</code>。使用方法参见参考文章 2，放入改名指向，一气呵成：</p><blockquote><ol start="4"><li>此时，armbian 用的是 kdahas-vim 开发板的 dtb，所以不完全适配 n1，一些设备不工作，这是正常的，我们只需修改 /boot/uEnv.ini 指向 n1 的 dtb 即可。<pre><code>\- 修改前的 uEnv.ini：    dtb_name=/dtb/meson-gxl-s905x-khadas-vim.dtb\- 修改后的 uEnv.ini：    dtb_name=/dtb/meson-gxl-s905d-phicomm-n1.dtb</code></pre></li></ol></blockquote><p>刷写好接上 hub 和 u 盘开机。如果一切顺利的话，需要先新建一个密码和用户名才能成功进入系统。然后输入 ddbr，按照提示备份：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210404_194952826.jpg"></p><p>备份完输入 <code>poweroff</code> 关机。把 u 盘插回电脑，下载并打开 diskgenius，在 rootfs 分区的 ddbr 文件夹里找到备份拖出，保存即可。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210405020131.png"></p><p>话说回来，如果第一次进入系统因为各种原因报错，可能需要重新制作 armbian u 盘，因为刚开始制作完后 rootfs 其实只分到 1g 多一点大小，只有成功第一次启动成功才会把分区扩大到整个 u 盘，没有成功执行这一步的话，后面再怎么启动可能都无法成功执行了（</p><h2 id="刷入-yyf-系统"><a href="#刷入-yyf-系统" class="headerlink" title="刷入 yyf 系统"></a>刷入 yyf 系统</h2><p>用 win7 成功几率会高的多，而且 vmware 可以指定使用 usb2.0 的驱动，usb2.0 口刷机成功概率更高。不过我最后还是在 win10 实机下用 usb3.0 的线刷成功了（</p><p>参考文章：</p><ul><li><a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=318044&amp;extra=page=1&amp;filter=typeid&amp;typeid=21">斐讯天天链 N1 刷机小白教程，大神请无视….. - 斐讯无线路由器以及其它斐迅网络设备 - 恩山无线论坛 - Powered by Discuz!</a></li><li><a href="https://www.jianshu.com/p/105f12a6cecb">斐讯N1盒子开箱、降级、刷YYF固件全记录 - 简书</a></li><li><a href="https://www.jianshu.com/p/87e9813f923f">N1盒子无法进入刷机模式解决办法 - 简书</a></li></ul><ol><li><p>下载 YYFROM-N1-无语音实用版 190420 刷机包。这东西在官网网盘已经失效了，所以我备份了一份到网盘，放到文末；</p></li><li><p>安装 Amlogic_USB_Burning_Tool，建议不要装太新的版本，装 2.16 就好了：<a href="https://androiddatahost.com/mte3d">Amlogic_USB_Burning_Tool_v2.1.6.zip - Android Data Host</a>。2.16 中的一个  libsub-win32 在安装时会附带安装，但需要手动添加到设备管理器：</p><blockquote><p>打开设备管理器，随便选择一个设备。</p><p>操作 - 添加过时硬件</p><p>安装我手动从列表选择的硬件</p><p>选择 libsub-win32 Usb Devices，一路下一步即可</p></blockquote></li><li><p>通过前面提到的降级软件，按照提示进入 bootloader （线刷）模式。在进入 fastboot 前如果接上屏幕的话，会看到画面定格在 n1 的开始画面中。将 usb 线接入靠近 hdmi 一端的 usb 口，连接电脑会发现一个新硬件名为 usb download gadget，但这东西驱动没法自己安装。下一个驱动精灵之类的软件，检查后根据提示安装相应的 Android adb Interface，安装完再接上 n1 的话，会发现在设备管理器中 n1 被命名为 Lemobile Android Device。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-04-06%20032913.png"></p></li><li><p>接下来严格按照步骤走！</p><ol><li>打开 Amlogic_USB_Burning_Tool，加载刷机包，擦除 FLASH 和擦除 Bootloader 前面的 √ 去掉，加载完成点击开始；</li><li>确保 n1 和电脑已通过 usb 线连接</li><li>通过降级软件，进入线刷模式。如果顺利的话，设备已经开始刷写了。稍微晚一点，或者线没接好，Amlogic_USB_Burning_Tool 都可能识别不到设备。</li></ol></li><li><p>刷写成功就可以直接关闭关键拔线重启了。后续可以通过鼠标跳过初始流程，登录家中 wifi 后用刷机包里带的斐讯 app 控制盒子。</p></li></ol><h2 id="盒子资源体验"><a href="#盒子资源体验" class="headerlink" title="盒子资源体验"></a>盒子资源体验</h2><p>再说</p><h2 id="openwrt-刷入-emmc-和体验"><a href="#openwrt-刷入-emmc-和体验" class="headerlink" title="openwrt  刷入 emmc 和体验"></a>openwrt  刷入 emmc 和体验</h2><p>再说</p><h2 id="其他参考文章"><a href="#其他参考文章" class="headerlink" title="其他参考文章"></a>其他参考文章</h2><ul><li><a href="https://pockies.github.io/2019/03/07/phicomm-n1/">我购买了斐讯 N1 做电视盒子，发现它远比想象的… - Pockies | 博客</a></li><li><a href="https://github.com/zisen123/N1-box-bypass-router-tutorial/blob/master/N1-box-bypass-router-tutorial.md">N1-box-bypass-router-tutorial/N1-box-bypass-router-tutorial.md at master · zisen123/N1-box-bypass-router-tutorial</a></li><li><a href="https://post.smzdm.com/p/akm7vk38/">贫民种草指北 篇二：N1 盒子：不谈刷机，只谈使用！_电视盒子_什么值得买</a></li><li><a href="https://www.leeyiding.com/archives/48/">斐讯 N1 烧录 yyf 和 OpenWrt 固件 - LeeYD・Blog</a></li><li><a href="https://ethanblog.com/tips/tv-box-firmware-for-n1.html">N1 刷电视盒子的固件选择 | Ethan’s Blog - 记录和思考</a></li><li><a href="https://www.321002.com/117.html">斐讯 N1 折腾记：降级及刷入官改</a></li><li><a href="https://www.kuqutan.com/1132.html">斐讯 N1 折腾记：运行 Linux 及优化 - 酷趣谈</a></li><li><a href="https://1drv.ms/u/s!AoMoC9XTgpEslq9HsaFw8qlnT0QQ9Q?e=Kg3a9Z">本文资源</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;本来想等自己有钱的时候再买一个性能强悍啥都能干的 x86 软路由的。。。&lt;/p&gt;
&lt;p&gt;然而最近折腾加速器，实在受不了这帮硬路由的憨憨性能了：明明 ac86u 性能还凑合但内存只有 512m 结果刷了梅林各种问题各种崩，其他 mt7621 就更不用说了。我也考虑其他设备，比如 r2s，s905x 盒子之类的，但&lt;/p&gt;</summary>
    
    
    
    <category term="路由器" scheme="https://zbttl-github-io.vercel.app/categories/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
    
    <category term="羊毛" scheme="https://zbttl-github-io.vercel.app/tags/%E7%BE%8A%E6%AF%9B/"/>
    
    <category term="openwrt" scheme="https://zbttl-github-io.vercel.app/tags/openwrt/"/>
    
    <category term="yyf" scheme="https://zbttl-github-io.vercel.app/tags/yyf/"/>
    
    <category term="n1" scheme="https://zbttl-github-io.vercel.app/tags/n1/"/>
    
  </entry>
  
</feed>
