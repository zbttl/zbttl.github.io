<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bao&#39;s 备忘录</title>
  
  
  <link href="https://zbttl-github-io.vercel.app/atom.xml" rel="self"/>
  
  <link href="https://zbttl-github-io.vercel.app/"/>
  <updated>2022-03-19T11:49:42.274Z</updated>
  <id>https://zbttl-github-io.vercel.app/</id>
  
  <author>
    <name>zbttl</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>xbox 淘宝老头环 自兑换</title>
    <link href="https://zbttl-github-io.vercel.app/xbox-tao-bao-lao-tou-huan-zi-dui-huan/"/>
    <id>https://zbttl-github-io.vercel.app/xbox-tao-bao-lao-tou-huan-zi-dui-huan/</id>
    <published>2022-03-13T16:00:00.000Z</published>
    <updated>2022-03-19T11:49:42.274Z</updated>
    
    <content type="html"><![CDATA[<p>本来是不太想凑老头环的热度的。</p><p>然而上上周听了最新一期「请上中环」的广播以后。。。忍不住了。</p><p>看了一下 xbox 比价助手，最便宜的不锁区印度版都要 330：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Screenshot_20220319-181255.png"></p><p>买不起。。。我再看了眼淘宝和比价助手，得到两个讯息：</p><ol><li>我愿望单里的 cod9 时隔 n 年打折了，阿根廷服很便宜</li><li>老头环阿根廷服标准版淘宝卖 170</li></ol><p>我也知道阿根廷服是个啥尿性。。。。需要梯子来兑换，要不然就得花自己一晚上来兑换，要不就得让别人登录你的号来兑换，我是很不情愿让别人登录我的号的。但既然两个游戏都能通过在阿根廷买降低成本，那我认了。</p><p>然而。。。还是失算了，我先买了老头环，然后去问客服 cod9 多少钱。打折的 cod9 在印度服本体大概 60 块钱，阿根廷就 20 块钱不到。结果客服报了个 89？？？？</p><p>那我不干了，还不如直接在印度服买。可是那份阿根廷服老头环怎么办？码都发了。。。。那就直接用技术手段换吧，成功浪费一晚上。当年为了领 Columbia 的神界原罪 2 我留了一份<a href="https://zbttl-github-io.vercel.app/xbox-kua-qu-yang-mao-shen-jie-yuan-zui-2-xiao-ji/?highlight=%E7%A5%9E%E7%95%8C%E5%8E%9F%E7%BD%AA">文章</a>，这次就能参考一下。</p><ol><li><p>安装一个 proxifier。其实用其他支持 http/https/socks 代理的工具，甚至不装，用 windows 默认的 https 代理也不是不行，但会麻烦很多。</p></li><li><p>google 搜索「阿根廷 vpn」或者「阿根廷梯子」等类似的词汇。搜出的页面，打开以后应该有许多 http/https/socks 代理。</p></li><li><p>打开 proxifier，在 profile-&gt;proxy Servers中，点击 add，将第二步查到的 server 和 port 填进去，并选择正确的 protocol，https 代理选 http 和勾上底下的 tls 即可。</p></li><li><p>填好后点击下面的 check，看看 test1 是否通过，通过就证明这个代理应该能用。（test2 一般不用管，因为公共梯子延迟比较高，基本都通不过）</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/1647690008340.png"></p></li><li><p>在 proxifier 的 profile-&gt;proxification rules 中，新增一个 rules，application 设置为浏览器的进程名字，我常用的是 cent browser，所以 这里就写 chrome.exe，action 里面切换到刚刚新增的 proxy。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/1647690286604.png"></p></li><li><p>打开百度/谷歌，看看能不能打开；搜 ip，看看出现的 ip 地址是不是刚刚找到的那个阿根廷的。</p></li><li><p>打开微软网页端兑换网址<a href="https://account.microsoft.com/billing/redeem?refd=login.live.com">Microsoft account | Redeem your code or gift card</a>，这里可能显示的地区不是阿根廷，不用管，直接输入店家给的兑换码兑换即可。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/1647690451719.png"></p></li></ol><p>推荐在网络环境良好时兑换，对于电信是。。。凌晨两点~成功率较高：）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本来是不太想凑老头环的热度的。&lt;/p&gt;
&lt;p&gt;然而上上周听了最新一期「请上中环」的广播以后。。。忍不住了。&lt;/p&gt;</summary>
    
    
    
    <category term="Game" scheme="https://zbttl-github-io.vercel.app/categories/Game/"/>
    
    
    <category term="跨区" scheme="https://zbttl-github-io.vercel.app/tags/%E8%B7%A8%E5%8C%BA/"/>
    
    <category term="羊毛" scheme="https://zbttl-github-io.vercel.app/tags/%E7%BE%8A%E6%AF%9B/"/>
    
    <category term="xbox" scheme="https://zbttl-github-io.vercel.app/tags/xbox/"/>
    
    <category term="老头环" scheme="https://zbttl-github-io.vercel.app/tags/%E8%80%81%E5%A4%B4%E7%8E%AF/"/>
    
  </entry>
  
  <entry>
    <title>关于 coc 强行分区一事</title>
    <link href="https://zbttl-github-io.vercel.app/guan-yu-coc-qiang-xing-fen-qu-yi-shi/"/>
    <id>https://zbttl-github-io.vercel.app/guan-yu-coc-qiang-xing-fen-qu-yi-shi/</id>
    <published>2022-02-17T16:00:00.000Z</published>
    <updated>2022-03-19T10:12:00.922Z</updated>
    
    <content type="html"><![CDATA[<p>怎么说呢。。。要是以前的我，可能还会义愤填膺一下</p><p>现在，要不是部落的人来提醒我，我可能还不知道，知道了以后我也就吐槽了两句，笑笑，虽然能想到会出这种恶心的事，但没想到，还能有骗进来再杀的啊。。。。</p><p>先来给不清楚发生了什么的吃瓜群众们科普一下发生了什么吧。</p><h2 id="现在是个啥情况？"><a href="#现在是个啥情况？" class="headerlink" title="现在是个啥情况？"></a>现在是个啥情况？</h2><p>以前的部落冲突，分为中国国内的渠道服和国外的 google / 苹果服 / supercell id 服。</p><p>但国内国外服这个只是约定俗称的说法，严格意义上应该叫「国内登录器」和「国际登录器」，因为国内国外只是登录鉴权方式上有区别，实际上，登录后，国内国外数据是一个整体，进入游戏后无论是从哪个登录器登录进来的，体验都是相同的，可以进外国人的部落，打部落战的时候也可以搜到国外的部落战，部落公告板里也经常收到一堆英文的进部落申请。</p><p>然而从本次更新开始，国内和国外的账号之间的联系被强行一刀两断；从国内登录器中登录的账号打资源时完全搜不到歪果仁，搜索时间也变长许多，打部落战时也同样；聊天栏处一片空白，原来的消息全部消失了；部落中要是从国外登录器登录进来的人，查看他们信息的时候会显示查无此人。从国外登录器登录进来看就更过分了：从聊天版中看，会看到部分人「已退出部落」；查看部落内国内登录器的朋友，同样会显示查无此人。使用 apple 设备的同学，如果需要玩国服就需要用大陆的 app store 账号重新下载一个 coc（而不是升级原来的），如果要玩国际版，则需要在外区账号升级后把系统语言切换成除了简体中文外的语言，区域切换到大陆以外的区域。</p><p>而我呢，我的号比较特殊，既可以通过谷歌登录，也可以通过国内的腾讯渠道登录。<br><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Screenshot_20220217-185313-tuya2.png"></p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Screenshot_20220217-185321-tuya2.png"></p><p>为啥会这样呢？这里先科普一下自 2015 年到至今 coc 登录方式的变迁（之前不知道，因为我没开始玩，而且我感觉大概率也没变过）：</p><h2 id="coc-登录方式变迁时间线"><a href="#coc-登录方式变迁时间线" class="headerlink" title="coc 登录方式变迁时间线"></a>coc 登录方式变迁时间线</h2><h3 id="2015-年左右"><a href="#2015-年左右" class="headerlink" title="2015 年左右"></a>2015 年左右</h3><p>一开始，起码是在 2016 年以前，部落冲突是只允许通过谷歌来「验证账号」的，注意我的措辞，是「验证账号」。具体来说，无需登录即可进入游戏，但如果后续想要做更换设备/切换账号/重装 apk 等等会清除数据的行为，不绑定谷歌账号就找不回数据了。另外，supercell 也提供了一个一次性的转移码，可以把数据从安卓端同步到苹果端。如果玩过日系手游的玩家，对这类操作应该会感到很熟悉，不同的是，日系手游这类手游通常叫做「引继码」，使用引继码后原设备的游戏数据就会被清空，只能在新设备登录账号；而 coc 只能用一次转移码，使用后原设备的数据并不会被清空。正因如此，当时有的人没有渠道去把账号和 google 关联（因为当时 google play 已经是不用特殊手段就不能上的状态了），就会找有 apple 设备的熟人，把 coc 账号转移过去做关联，以防万一（当然这么做的话，未来如果还是没对 android 上的这个账号做关联，那这台 android 机被淘汰后，就只能用苹果手机来玩自己的账号了）。我一开始是在 android 上玩的，但后面有了一台 ipad，就把账号也关联到苹果上了，我也有足够的技术把账号关联上 google，所以我当时并不惧怕设备丢失的状况。</p><p>另外，还有一个歪门邪道：如果是 root 过的手机，可以通过备份 coc 软件数据 + android id 实现游戏数据备份。原来也很简单，无论有没有绑定 google 账号，打开 android 版 coc 时都不会对 google 账号过验证，而是通过本机内 coc 的数据，数据对应的账号 id，和 android id 来实现账号验证，只要后两者一样，打开时就能加载正确的账号信息，如果本机内 coc 数据也正确，那么就游戏的加载速度就很快，否则就会弹出「数据不同步」，然后重新从服务器中把最新的进度取下来覆盖到本地。同时，还可以通过这种手段实现快捷的账号切换：备份后清空应用数据，重新打开 coc，此时就是新号的状态。如果想要切到旧号，把当前的应用数据再做备份，然后恢复旧帐号的应用数据即可。16 年时，最小部落战人数限制还是 10，那时候部落人还比较少，如果凑不够人头，一般就会用这种办法，建几个小号凑数。当然，后来部落人多了，加上部落战开的少了，以及 android 7.0 后 android id 引用了随机化机制，这种方法是否还有效就不知道了。</p><h3 id="2016-年"><a href="#2016-年" class="headerlink" title="2016 年"></a>2016 年</h3><p>事情的转机，在于 2015 年从 sc 另一款作品海岛奇兵开始试水的国内引进。sc 当时是和昆仑一起合作，然后昆仑再去分包给其他的渠道。当然这仅限于安卓端，苹果端没有办法也没有必要这么做。然后到了 2016 年中 sc 和昆仑继续扩大合作，把这个机制带到了 coc 上。</p><p>不过当年 9 月份，腾讯就官宣以 80 多亿刀的价格将 sc 的实际控制权收入囊中。不过好巧不巧的是，当时互联网局面还基本是 BAT 三家鼎立的状态，除了 T 外另外两家当年都跟随昆仑签了二级渠道服的合同（百度是亲自下场，而阿里则是派了旗下的豌豆荚），只有腾讯没有签。当时腾讯的游戏产业已经做到国内最大，对于 sc 游戏引进这种香饽饽居然没有掺一脚，难道是作为国内头牌游戏厂商不甘寄人篱下的高傲？还是因为在 15 年左右就谈好收购事宜了呢？乍一想后者可能性比较大，但如果 15 年基本已经谈好合作了那么为什么还能容许昆仑插一脚进来？</p><p>总而言之，既然已经签好了合同，木已成舟，虽然跟其他的厂商有竞争关系，但腾讯并没有强行终止其他渠道服的合作。除了那些因为近年经营不善倒闭的渠道，剩下的渠道服都好好的活到了现在。后续，腾讯也推出了自己的渠道，阿不，这时候就要叫国内官方服了。</p><h3 id="2017-年"><a href="#2017-年" class="headerlink" title="2017 年"></a>2017 年</h3><p>从 2016 年开始，昆仑获得了 coc 的国内渠道服发行资格后，国内的玩家就可以通过找客服把国外的账号信息迁移过来。但，这种迁移是单向的，迁移到国内启动器后，就无法再迁移到国外启动器上了。另外，在 2015 年，起步稍早的海岛奇兵渠道服时代，虽然玩家玩的是国内渠道服，但仍然可以通过引继码的方式把账号数据引继到 ios 上。但此时 coc 渠道服时代，转移到国内服的账号，设置里的引继码选项都会消失，所以最好在转移前就通过引继码继承到 ios 这边。现在回想起来，这是 sc 对国内账号登录账号灵活度的第一次收紧。</p><p>而另一边，本家腾讯也慢悠悠的推出了自己的启动器，可以通过 qq / 微信两种方式登录游戏。一开始只是在当年新出的手游皇室战争中引入，当时是号称和国际版皇室战争一周年活动同时进行的国服开服，后续在 2017 年年中才在 coc 中也引入了类似的账号登录机制。和几大渠道服不同，腾讯也在 ios 处引入了国服的登录机制，毕竟目的不同，此时腾讯已经完成收购了，自然有理由在 ios 处也搞一个自己的登录渠道。只要设置中部落冲突的地区是大陆，那么启动时就会提示你用 qq / 微信账号登录，但设置为其他地区或者点击游客登录则仍然可以跳过登录界面直接登录游戏。但无论用哪种方式登录游戏，原有的游戏记录都不会丢失，只要你用 tx 的登录渠道登录过一次，你原来 ios 的游戏记录也会绑定到 tx 账号上。同时腾讯的账号也不分 ios 和 android 服，也就是说，如果你要进行账号转移，只需要在 ios 处登录一遍腾讯服，然后在 android 处下载腾讯版的 coc 就可以了，在当时国内手游几乎全为 android/ios 分服的环境下，这种操作简直是一股清流。同时，通过此种操作，之前所有渠道的数据都没和账号解除绑定，也就是此时我可以通过谷歌账号 \ ios apple账号 \ ios tx 账号 \ android tx 账号四种方法来登录同一份数据，可以说是很灵活了。只是万万没想到的是，此处绑定了腾讯的账号后现在居然就会被识别成国内账号，这里伏笔了。</p><p>无论是通过跟客服沟通，还是通过 tx 启动器的骚操作转移到国内的，都要进行实名制认证。不过当时许多客户端都可以通过点击实名认证窗口右上角的叉叉关闭窗口来变相的跳过实名认证。另外设置为繁体中文启动界面就看不到碍眼的安全游戏提醒了。</p><p>当年的迅游手机加速器，能显示处加速游戏的延迟数据，当时我用来同时加速 google 服和 tx 服，发现从谷歌启动器处登录的游戏延迟始终在 200ms 左右，而从国内启动器登录的延迟在 30ms 左右。虽然此时经过几轮网络优化，谷歌服那边掉线的情况已经得到很大的缓解（15 年的时候部落战掉线那可是家常便饭），但不开加速器偶尔还是会掉一下，而国内服则完全不会掉，当时猜测可能是国内有双活或者是 cdn 边缘加速，后者可能性大一点，因为是全球数据同步，后者成本小一些。</p><p>总之，17 年，可能是部落冲突，最好的时代了，无论是从登录人数，游戏质量，还是登录灵活度来说。</p><h3 id="2018-年"><a href="#2018-年" class="headerlink" title="2018 年"></a>2018 年</h3><p>18 年开始，tx 的魔爪开始伸出来了，各种月卡，皮肤开始在 coc 商城中出现。</p><p>回到主题，这一年 sc 推出了 supercell id 这个概念，再也不需要引继码来在 ios/android 中进行同步了。但，如果你之前已经绑定过国内的账号，那你的游戏设置界面中是不会有 supercell id 这类选项的。</p><p>悄悄的，我也发现，客户端内被屏蔽的词多了起来，而且屏蔽的分词功能做的相当烂，没文化也想不到什么比较优雅的例子，类似「大学生活好吗」这种，估计在 coc 聊天版中显示出来就是一大串星号。不过！如果你用<strong>梯子</strong>登录<strong>国际服账号</strong>（这两个条件缺一不可），会发现在国服账号中被屏蔽掉的词语又能正常显示出来了，懂得都懂。</p><p>另外一件事，当时我部落的副首领兼大学同学换手机，然后登录不进自己的 coc 账号了。因为当初是我亲自帮他申请的腾讯账号版本，我也很奇怪，平常大家都开着 qq 怎么你就可能登录不进账号呢？后来发现一个荒诞的事情，因为这位同学平时也玩皇室战争，而且当时他的游戏中心也在皇室战争上，然后他皇室战争的号也绑在 qq 这边，据他回忆绑定的时候居然给他选择说是一个 qq 号只能绑定一个游戏，部落冲突和皇室战争只能二选一！他选择绑了皇室战争，所以部落冲突相当于没有绑定了，换手机的时候账号就掉了。当时对此我还是有点持怀疑态度的，因为如果当时已经换绑了，应该马上就不能登录 coc 了，并不用等到换手机的那一天才发现的，而且我的账号怎么就没问题呢？直到我拿到他的手机用他的 qq 账号登录部落冲突，然后看到了类似的表述：</p><blockquote><p>该账号已绑定皇室冲突…..</p></blockquote><p>原谅我没有留下当时的截图。。。现在想想还觉得啼笑皆非。后来找客服，把账号找回并绑定到了 vivo 服上才作罢。</p><p>腾讯的獠牙，已经开始伸出来了。</p><h3 id="2019-年至今"><a href="#2019-年至今" class="headerlink" title="2019 年至今"></a>2019 年至今</h3><p>sc 目前在运营的最新款游戏荒野乱斗在 19 年底上线了国际服，然后又过了一年多上线了国服。从本作开始，国服和国际服开始正式分区，一开始在国际服进行的游戏存档无论通过何种方法都无法转移到国服，国服和国际服的账号也完全无法互相加好友。</p><p>然后就是这两天，血雨腥风的这件事儿。</p><p>我的号走 tx 登录器登录，就一切正常。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Screenshot_20220217-185223-tuya2.png"></p><p>而走 google 登录器登录，就能看到一堆人退出了部落。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Screenshot_20220217-174519-tuya2.png"></p><p>而且发布捐兵请求、收资源等事情在某一边做了，在另一边是不会同步/有反应的，那就石锤分服了。另外，月初的联赛的锤子我还没发，这几个月比较懒，一般都月末才发（因为也懒得开部落战），但没想到锤子在两服切割的时候没有切干净，国际服还能发锤子，国内服直接就是开战页面了，坐实了之前国内的网络加速方法确实是边缘节点加速，然后为了搞国服就把国际服的数据同步到国内的服务器上然后一刀切割掉，但某些数据没转移过来，遗失的锤子就是其中一个。</p><p>腾讯在国服商店里面，放了钱和水的宝石，以及万能书，作为「补偿」。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/jiangli.jpg">但我懒，而且停留在 12 本很久了，一直在刷墙，书都没有用，所以就没有领，然后才两三天这些东西就没了，不愧是 tx。国内外分服也导致一大堆部落管理工具失效/作者退坑，比如大名鼎鼎的部落管理工具：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/0@O00%28LVSIDW8CUI4Q8CADC.png"></p><p>去年的时候本来想给帮我填部落联赛数据的同学找一个工具，不用每次都手填，结果去年 supercell 论坛关了，今年又一个分服，到了腾讯手上还想开发第三方工具？不存在的，过段时间，国服的数据接口可能都要被封掉。</p><hr><p><strong>（22.3.18 更新）</strong> 果然，当时贴吧说，在国际服查看自己的号，在个人信息中已经显示为「查询不到当前玩家标签」的人，肯定就是国服号，这些号在国际服中虽然有信息，但过一段时间就会被封掉。黑色幽默的是，我们部落的人，包括我，能上国际服的，看自己的信息时也显示这个：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/N%28IU2BEA2JKP$9UL%29R%282%5DPP.jpg"></p><p>然后今天上去一看</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Screenshot_20220316-224708-tuya2.png"></p><p>呵呵。</p><p>麻花疼：想用一份时间肝出两份号？做梦吧！</p><h2 id="亿点吐槽"><a href="#亿点吐槽" class="headerlink" title="亿点吐槽"></a>亿点吐槽</h2><p>部落冲突在我开始玩的前两年确实是投入了大量的精力。那时候高中，又没有电脑，那时候也是刚接触智能机不久，一切都是新鲜的。当然，因为我掌机从小玩到大，所以手机上那些游戏的游戏素质，嘛，也不算有那种「发现了新大陆」，「这玩意毁天灭地」之类的感觉，但网游和单机游戏目的本身就不一样，网游「好玩」「能和朋友一起玩」就足够算是沉迷的理由了。</p><p>上了大学，有了电脑显示器主机以后，我就不再投入时间到新的手游上了，有因为厌倦，有因为忙碌，也有因为厂商态度的变化，要一直给玩家留下好印象很难，但搞坏自己的口碑是很容易的事情，近几年的暴雪、CDRP、索尼，17 年后出了各种季票的皮肤的 supercell 又何尝不是呢？何况是它的背后是腾讯，懂得都懂。</p><p>分服这件事上几乎所有人都在骂腾讯，我只能说「活该」，但又不完全是腾讯的锅。我很早之前就跟我的朋友们说过：别玩国产手游，就算要玩，也去玩国际服。没想到还有像 supercell 一样，把人骗进国内服以后再杀的。一边喊着文化出海，一边却做着恶心玩家的事情，而且这些事情，做出来对规范市场和给家长交代，亿点关系都没有，就是纯纯的恶心玩家罢了。</p><p>coc 我还是可能继续会玩的吧，对我来说，这玩意早就已经是「社交」而不是「游戏」，但我还是怀念，当年他还是「游戏」，我还是「玩家」的那段时光。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;怎么说呢。。。要是以前的我，可能还会义愤填膺一下&lt;/p&gt;
&lt;p&gt;现在，要不是部落的人来提醒我，我可能还不知道，知道了以后我也就吐槽了两句，笑笑，虽然能想到会出这种恶心的事，但没想到，还能有骗进来再杀的啊。。。。&lt;/p&gt;</summary>
    
    
    
    <category term="game" scheme="https://zbttl-github-io.vercel.app/categories/game/"/>
    
    
    <category term="流水账" scheme="https://zbttl-github-io.vercel.app/tags/%E6%B5%81%E6%B0%B4%E8%B4%A6/"/>
    
    <category term="clash of clans(部落冲突)" scheme="https://zbttl-github-io.vercel.app/tags/clash-of-clans-%E9%83%A8%E8%90%BD%E5%86%B2%E7%AA%81/"/>
    
  </entry>
  
  <entry>
    <title>2202 年如何正确的在浏览器内打开 flash 网页？？</title>
    <link href="https://zbttl-github-io.vercel.app/2202-nian-ru-he-zheng-que-de-zai-liu-lan-qi-nei-da-kai-flash-wang-ye/"/>
    <id>https://zbttl-github-io.vercel.app/2202-nian-ru-he-zheng-que-de-zai-liu-lan-qi-nei-da-kai-flash-wang-ye/</id>
    <published>2022-02-10T16:00:00.000Z</published>
    <updated>2022-03-19T10:10:55.090Z</updated>
    
    <content type="html"><![CDATA[<p>flash 垃圾玩意，怎么还没淘汰！就算是打死我我也不会写相关教程~</p><p>（眨眨眼）</p><p>参考文章：<a href="https://sspai.com/post/64500">Flash 时代落幕，偶尔要访问的老网站怎么办？ - 少数派</a></p><p>参考文章其实说的已经很明白了，但我还是忍不住补充点细节：</p><h2 id="Ruffle-目前不堪大用"><a href="#Ruffle-目前不堪大用" class="headerlink" title="Ruffle 目前不堪大用"></a>Ruffle 目前不堪大用</h2><p>试了一下 ruffle 在几个内网生产环境的 flash 应用下都会报错。</p><h2 id="如何验证-chrome-系-flash（ppapi）是否生效-可用？"><a href="#如何验证-chrome-系-flash（ppapi）是否生效-可用？" class="headerlink" title="如何验证 chrome 系 flash（ppapi）是否生效/可用？"></a>如何验证 chrome 系 flash（ppapi）是否生效/可用？</h2><p>网上有许多参考文章建议在地址栏中输入 <code>chrome://flash</code>，但这玩意其实很早之前就被删掉啦。在地址栏中输入 <code>chrome://about</code> 命令，能看到当前浏览器所有有效的地址栏命令（包括某些魔改过的国产浏览器，即使通过其他的 <code>chrome://xxx</code> 地址报错，但 <code>chrome://about</code>这个地址一般都是能用的）。</p><p>之后点击其中的 <code>chrome://version</code>，v87 以前的版本就会有 flash 这一栏，v88 以后就没了。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220220134749.png"></p><p>如果正确的加载了 flash，flash 这里就会显示出加载的 dll 的路径。所以参考文章中的[自行编译、定制 Flash 功能 国内浏览器不太放心](<a href="https://sspai.com/post/64500#:~:text=%E8%87%AA%E8%A1%8C%E7%BC%96%E8%AF%91%E3%80%81%E5%AE%9A%E5%88%B6">https://sspai.com/post/64500#:~:text=自行编译、定制</a> Flash,国内浏览器不太放心)一节原理也就是无需安装过时的 ppapi 版 flash，直接让 chrome 读取相应路径的 dll。</p><ol><li><p>下载最后一个 v87 版本：<a href="https://github.com/Hibbiki/chromium-win32/releases/tag/v87.0.4280.141-r812852">Release v87.0.4280.141-r812852 · Hibbiki/chromium-win32</a></p></li><li><p>按少数派的参考文章来</p><blockquote><p>下载下来的 Archive 包 应该是一个 7z 压缩包，解压缩之后的文件夹应该是内含 <code>Chrome-bin</code> 文件夹，这里我们新建一个 <code>ChromePortable</code> 的文件夹，在这个文件夹中再新建一个名为 <code>App</code> 文件夹，将解压缩后的 <code>Chrome-bin</code> 文件夹全部拷贝到 <code>App</code> 文件夹中。</p><p>之后在 <a href="https://portableapps.com/apps/internet/google_chrome_portable">portableapps</a> 中下载绿色版 Chrome 启动器 <strong>Google Chrome Portable</strong>，将下载下来的安装包使用 7zip 解压缩后，将里面的 <code>GoogleChromePortable.exe</code> 复制出来并拷贝到前面新建的 <code>ChromePortable</code> 文件夹中。</p></blockquote></li><li><p>关于 flash 的修改版，我在 52 上找了一个最新的 ppapi 安装版，会在 <code>C:\Windows\SysWOW64\Macromed\Flash</code> 下放入一个 32 位的 <code>pepflashplayer64_34_x_x_xxx.dll</code>，在 <code>C:\Windows\System32\Macromed\Flash</code> 下放入一个 64 位的 dll。提取出来，由于我们刚刚下载的是 64 位的 chrome，所以用 64 位这个。</p></li><li><p>在 <code>ChromePortable</code> 处新建一个文件夹，名为 <code>plugin</code> 把 dll 放入刚刚新建的文件夹中，重命名为 <code>pepflashplayer64.dll</code>。在 <code>ChromePortable</code> 下新建一个批处理文件，内容为</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">cd /d %~dp0</span><br><span class="line">start GoogleChromePortable.exe --ppapi-flash-path="%~dp0\plugin\pepflashplayer64.dll" --ppapi-flash-version="34.0.0.192" --allow-outdated-plugins</span><br></pre></td></tr></tbody></table></figure><p>可能要修改一下 <code>version</code> 参数，修改为和提取出来的 flash dll 对应。（不过是不是真的影响使用我没有认真测试过，目前感觉这里写的数字只跟后续测试时显示的版本号有关，写什么就显示什么）</p><p>但 <code>pepflashplayer64.dll</code> 别放错，因为如果放成 32 位的后续是什么提示的，只是测试时候会不生效而已。</p></li><li><p>打开批处理，可通过下列两个网址测试：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://www.sioe.cn/xinqing/flash/</span><br><span class="line">http://www.7k8k.com/flash/39919_1.htm</span><br></pre></td></tr></tbody></table></figure><p>第一个网址能显示出版本好</p><p>第二个网址能显示出错误「请到4399小游戏官网开始游戏」就算成功。</p><p>第一次打开有 flash 的页面时，flash 处会显示 flash 已被屏蔽。此时需要点击地址栏右侧如下图的按钮，点管理</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220220152113.png"></p><p>在弹出的页面中打开「禁止网站运行 flash」的开关。这行描述就会变成「先询问」。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220220152246.png"></p><p>之后再刷新页面，已被屏蔽这行字就会变成「点击即可启用 adobe flash player」。</p><p>但对于一些页面（比如上面的测试页面 1），并没有任何提示给我们点，是因为 flash player 生效在了整个网页的子页面中，这时浏览器就不会弹出提示。</p><p>此时我们点击地址栏左侧刷新旁边的按钮，可以看到里面有 flash 相关选项，设为「允许」即可。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220220152708.png"></p></li></ol><h2 id="安装版不生效-为什么大于-v88-的-chrome-也会生效呢？"><a href="#安装版不生效-为什么大于-v88-的-chrome-也会生效呢？" class="headerlink" title="安装版不生效/为什么大于 v88 的 chrome 也会生效呢？"></a>安装版不生效/为什么大于 v88 的 chrome 也会生效呢？</h2><p>一般情况下，不生效的原因，可能是：</p><ol><li>浏览器是绿色版，未能正确识别 flash dll 的路径，一般再装一次浏览器就行了；</li><li>安装了非修改版/非国产特供版 flash。</li></ol><p>有的时候会发现大于 v88 版本的 chrome 也可以正常使用 flash，原因很简单，因为你把支持 flash 的 chrome 设为了默认浏览器。。。。。</p><h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><p>能不能不用快捷方式 / 批处理做出来的浏览器直接打开就能支持 flash？而且手工做出来的浏览器每次打开都提示「自 2020 年 12 月起 flash player 将不再受支持，好烦诶」</p><p>。。。。。。</p><p>一些国产的浏览器（比如搜狗），默认就修改了自己的 flash 路径识别位置，并且安装后就会把已经修改好的 dll 放到指定的位置，此时只要使用他们的极速模式就能正常使用 flash 了。但国产浏览器嘛。。。。</p><p>更正统的方法！编译时加入适当的参数，直接修改 flash 的默认识别路径。另外编译时还可以动点小手脚，让浏览器支持 hevc 视频播放。但这个嘛，挖个坑，以后填。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;flash 垃圾玩意，怎么还没淘汰！就算是打死我我也不会写相关教程~&lt;/p&gt;
&lt;p&gt;（眨眨眼）&lt;/p&gt;</summary>
    
    
    
    <category term="Windows" scheme="https://zbttl-github-io.vercel.app/categories/Windows/"/>
    
    
    <category term="流水账" scheme="https://zbttl-github-io.vercel.app/tags/%E6%B5%81%E6%B0%B4%E8%B4%A6/"/>
    
    <category term="flash" scheme="https://zbttl-github-io.vercel.app/tags/flash/"/>
    
    <category term="chrome" scheme="https://zbttl-github-io.vercel.app/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>一代代的，改过不啦——钝评战地2042</title>
    <link href="https://zbttl-github-io.vercel.app/yi-dai-dai-de-gai-guo-bu-la-dun-ping-zhan-di-2042/"/>
    <id>https://zbttl-github-io.vercel.app/yi-dai-dai-de-gai-guo-bu-la-dun-ping-zhan-di-2042/</id>
    <published>2022-02-04T16:00:00.000Z</published>
    <updated>2022-02-19T13:43:26.285Z</updated>
    
    <content type="html"><![CDATA[<p>想当年出第一个预告片的时候，那真是一片好评，预告片里各种玩梗和标志性的 bgm（不仅是咚咚咚，而是另外一个背景声，类似战地 1 时代，那个经典的<del>李云龙</del>预告片1），相较上一代战地 5 那个被钉在耻辱柱上的播片，真是高下立判。加上和上一代战地 5 相隔 3 年，为史上最长两作间间隔时间（之前最长为 2 年），一想到因年货制而搞得手忙脚乱，近期差评如潮的隔壁，又赢了（</p><p>诸多因素加载一起，很难不得出「我感觉 EA 又行了」的结论~</p><p>唯一的一片乌云，就是预告片 2 公布的时候，感觉 ui 怎么如此战地 4，没有近几年游戏的高级感？</p><p>结果试玩的时候就发现了，这动作流畅度和打击感，好像就是大号战地 4 诶 ~ 枪械数量少得可怜，地图布局也不合理，不过那是试玩，总不可能正式发布的时候，还是那点枪，然后就只有那张图吧？</p><p>结果，现在这个样子，大家也看到了，看来，预告片什么的，都是虚的，你永远可以相信 ea（雾</p><p>好在我没有预购，没钱，上一次预购都是 cod 16 的事情了。不过我想着，就算做成试玩那种样子，玩家也不会怨声载道成这个样子吧？好在我还有 xgpu 附赠的 ea play 带来的 10 小时体验游戏的机会，相较于全价预购玩家的愤怒，我尽量以一个白嫖战地菜鸡玩家的角度（很菜鸡，战地 1 0.6 的 kd 玩了几百个小时），尝尝这坨巧克力味的*究竟是啥味道的（</p><h2 id="我的搜索呢？我那么大一个搜索呢？"><a href="#我的搜索呢？我那么大一个搜索呢？" class="headerlink" title="我的搜索呢？我那么大一个搜索呢？"></a>我的搜索呢？我那么大一个搜索呢？</h2><p>战地老玩家都知道，和近年来的几个友商 fps 只有靠匹配进游戏不同，战地系列主要是通过搜索并筛选房间进入服务器，类似于当年 cs 的「搜房间」方法。虽然这样削弱了厂商通过技术匹配平衡房间内玩家水平的能力（所以捞薯条这个名词才会频频出现在战地圈内），但其一战地模式的精髓是征服，征服需要的玩家数量和前些年游戏多见的 tdm（cod）/ 爆破（r6）要多的多了，匹配有可能很久都搜不到人（当然近年大热的吃鸡类游戏人数也很多，但匹配体验也不错，我的理解是各类吃鸡游戏迭代都比 cod / 战地要慢，而且吃鸡这边也有个例子：black out）；其二，自由进入房间让玩家不需要切换其他加速器就能自由选择进入的地区，同时还催生了私服的玩法，所以这个功能，那是无比的适合战地。</p><p>所以，我翻了一大圈，ea 你就把这功能给砍了？只剩匹配了？只有门户模式才有筛选服务器的选项，主流的征服，只能通过匹配进入，而且筛选里面的选项。。。。和前几作相比，显然也摆了（</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E3%80%8A%E6%88%98%E5%9C%B0%E9%A3%8E%E4%BA%91%E2%84%A2%202042%E3%80%8BXbox%20Series%20XS-tuya2.png"></p><p>而且匹配就算了，突破征服还要分两个匹配池？至于新加的危险区域 hazard zone。。。。反正我已经开了跨平台，但匹配了半天，看起来是又一个火线冲突罢了。。。</p><h2 id="COD：2042-行动？"><a href="#COD：2042-行动？" class="headerlink" title="COD：2042 行动？"></a>COD：2042 行动？</h2><p>2042 职业公布的时候就有人说好像 cod 15 的专家，现在看来，确实很像。。。。</p><p>战地 5 的时候把滑铲加进来了，2042 本作又把战术冲刺再拿过来；主动标记还是没有回归，仍然是只能按区域标点（不过按区域标点这个 cod17 也抄过去了，等于现在两个游戏都是只支持区域标记）。还有一个地方也是被吐槽颇多，那就是地图和复活点设计，虽说吐槽的方向刚好相反：近年 cod 的地图设计被吐槽颇多（阴间），复活点从 cod16 开始就放飞自我；本来战地的地图设计一向是没啥槽点的，这作虽然参战人数增加了，但配上空旷的地图，突然就感觉怪怪的，一半的地方什么人都没有，少数地方又都是人；场景破坏愈发退步，现在怕是连先锋都不如了，话说最近我还玩了会 control，那玩意才叫真正的场景破坏~</p><p>但，为啥 cod 那流畅的动作就没抄过来呢？</p><h2 id="BUG-横飞，内容不足"><a href="#BUG-横飞，内容不足" class="headerlink" title="BUG 横飞，内容不足"></a>BUG 横飞，内容不足</h2><p>这才是去年两只卧龙凤雏被喷的根本原因：bug 多得没法玩，尤其是 2042~</p><p>虽说我也见怪不怪了。。。战地不是年货，似乎从 4 开始，「最好的战地是上一作」，这件事好像就成定势了？</p><p>不过这作偷工减料，也过头了吧~</p><p>满打满算，主武器枪械就 10 来把？</p><p>10 小时的时间开载具就开出两次 bug，不过都感觉是祖传寒霜引擎的锅，见怪不怪：</p><iframe src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/bug-cg.mp4" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" height="600" width="800"> </iframe><p>但其他的 bug，包括游戏卡死，无法持久化，蹲下后不能跑，开车后下车跑步枪械开不了镜子，这些就是 dice 自己优化的问题了。</p><p>另外，手柄改键后显示的还是原来的键位；我熟悉了战术跳跃的手柄键位，也就是跳改成 LB/L1，更换配件改成 A/x，但四个配件分别使 XYAB 来切换，这四个键是不能改的，然后我每次更换镜子/弹夹/消音器配件（XYB）时都会自动切换一下前握把（A)。</p><p>还有满天飞的 VVV，我一开始以为是故意设计的，但越看越不对劲，告诉我，是 BUG 吧？</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E3%80%8A%E6%88%98%E5%9C%B0%E9%A3%8E%E4%BA%91%E2%84%A2%202042%E3%80%8BXbox%20Series%20XS%20(3)-tuya2.png"></p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E3%80%8A%E6%88%98%E5%9C%B0%E9%A3%8E%E4%BA%91%E2%84%A2%202042%E3%80%8BXbox%20Series%20XS%20(2)-tuya2.png"></p><h2 id="骨头里挑鸡蛋"><a href="#骨头里挑鸡蛋" class="headerlink" title="骨头里挑鸡蛋"></a>骨头里挑鸡蛋</h2><p>加入了 ai 和 ai 模式，虽然被吐槽 ai 很傻，但如果实在没有人，还能和 ai 打一打的嘛~而且打 ai 居然还可以顺便刷枪，起码可以挨过枪械没有装备的空窗期。</p><p>门户模式应该说还是做的不错的，以前私服似乎是要钱的吧，现在是不是直接建就行了？（待确认）</p><p>任务少，没有那种逼肝的每日任务，这是优点还是缺点呢？</p><p>不过唯一的每周任务，进了游戏以后都不知道任务进度到那里了，这是毋庸置疑的缺点。</p><hr><p>离 10 小时体验时间结束还剩 20 多分钟，反正我是不打算玩了，感觉还不如玩战地 4，起码战地 4 还有个监狱可以玩。。。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;想当年出第一个预告片的时候，那真是一片好评，预告片里各种玩梗和标志性的 bgm（不仅是咚咚咚，而是另外一个背景声，类似战地 1 时代，那个经典的&lt;del&gt;李云龙&lt;/del&gt;预告片1），相较上一代战地 5 那个被钉在耻辱柱上的播片，真是高下立判。加上和上一代战地 5 相隔 3 年，为史上最长两作间间隔时间（之前最长为 2 年），一想到因年货制而搞得手忙脚乱，近期差评如潮的隔壁，又赢了（&lt;/p&gt;
&lt;p&gt;诸多因素加载一起，很难不得出「我感觉 EA 又行了」的结论~&lt;/p&gt;</summary>
    
    
    
    <category term="game" scheme="https://zbttl-github-io.vercel.app/categories/game/"/>
    
    
    <category term="流水账" scheme="https://zbttl-github-io.vercel.app/tags/%E6%B5%81%E6%B0%B4%E8%B4%A6/"/>
    
    <category term="battlefield" scheme="https://zbttl-github-io.vercel.app/tags/battlefield/"/>
    
  </entry>
  
  <entry>
    <title>telegram 更换字体的正确姿势</title>
    <link href="https://zbttl-github-io.vercel.app/telegram-geng-huan-zi-ti-de-zheng-que-zi-shi/"/>
    <id>https://zbttl-github-io.vercel.app/telegram-geng-huan-zi-ti-de-zheng-que-zi-shi/</id>
    <published>2022-01-19T16:00:00.000Z</published>
    <updated>2022-01-19T22:34:55.844Z</updated>
    
    <content type="html"><![CDATA[<p>telegram 经过数次版本迭代后，从去年开始的版本已经不能注入 dll 了。常用的两个注入 dll 插件，其中一个 Anti Revoke Plugin 已于上月停更，所以现在只有换字体的 <a href="https://github.com/ysc3839/FontMod">FontMod</a> 仍在更新。虽然本身也不是专为 telegram 打造的，所以在现在版本的 tg 上用起来还要费一番功夫。</p><p>参考文章：<a href="https://github.com/ysc3839/FontMod/issues/70#issuecomment-882069692">ysc3839（项目作者）的issue</a></p><ol><li><p>下载 telegram 微软商店版</p></li><li><p>在 <a href="https://github.com/ysc3839/FontMod">FontMod</a> 的 release 页面中下载 FontMod64.dll （无需改名）并放入任意文件夹中。</p></li><li><p>fork <a href="https://github.com/ysc3839/AppXLauncher">ysc3839/AppXLauncher</a>，在其中任意添加一个文件后，actions 就会自动进行构建，等待约半小时，构建好后下载其中的 AppXLauncher64.exe，放入和 FontMod64.dll 同一文件夹中。</p></li><li><p>在同一文件夹中新建 <code>AppXLauncher.json</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">"PackageFamilyName": "TelegramMessengerLLP.TelegramDesktop_t4vj0pshhgkwm",</span><br><span class="line">"AppId": "Telegram.TelegramDesktop.Store",</span><br><span class="line">"InjectDll": "FontMod64.dll",</span><br><span class="line">"Persistent": true,</span><br><span class="line">"KillRunning": false</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>在同一文件夹中新建 <code>FontMod.yaml</code>，里面写上要替换的字体的配置。以下是我的配置，仅供参考：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">style: &amp;style</span><br><span class="line"># Remove '#' to override font style</span><br><span class="line">#  size: 0</span><br><span class="line">#  width: 0</span><br><span class="line">#  weight: 0</span><br><span class="line">#  italic: false</span><br><span class="line">#  underLine: false</span><br><span class="line">#  strikeOut: false</span><br><span class="line">#  charSet: 0</span><br><span class="line">#  outPrecision: 0</span><br><span class="line">#  clipPrecision: 0</span><br><span class="line">#  quality: 0</span><br><span class="line">#  pitchAndFamily: 0</span><br><span class="line"></span><br><span class="line">fonts:</span><br><span class="line">  microsoft yahei: &amp;zh-cn-font # Chinese (Simplified) fallback font</span><br><span class="line">    # replace: 更纱黑体 SC</span><br><span class="line">    # replace: 文泉驿微米黑</span><br><span class="line">    replace: Sarasa UI SC</span><br><span class="line">    &lt;&lt;: *style</span><br><span class="line">  microsoft jhenghei ui: # Chinese (Traditional) fallback font</span><br><span class="line">    replace: Sarasa Gothic TC</span><br><span class="line">    &lt;&lt;: *style</span><br><span class="line">  # PMingLiU: # Chinese (Traditional) fallback font</span><br><span class="line">  #   replace: Microsoft JhengHei UI</span><br><span class="line">  #   &lt;&lt;: *style</span><br><span class="line">  # MS UI Gothic: # Japanese fallback font</span><br><span class="line">  #   replace: Yu Gothic UI</span><br><span class="line">  #   &lt;&lt;: *style</span><br><span class="line">  # Gulim: # Korean fallback font</span><br><span class="line">  #   replace: 맑은 고딕</span><br><span class="line">  #   &lt;&lt;: *style</span><br><span class="line">  # Open Sans: </span><br><span class="line">  #    replace: HelveticaNeue</span><br><span class="line">  Arial: &amp;monospace-font </span><br><span class="line">     replace: CascadiaCode Nerd Font</span><br><span class="line">  &lt;&lt;: *style</span><br><span class="line">  Consolas: *monospace-font # English Monospace default font</span><br><span class="line">  SimSun: *zh-cn-font # Chinese Monospace fallback font</span><br><span class="line">  Segoe UI: *zh-cn-font</span><br><span class="line">  Segoe UI Semibold: &amp;zh-cn-bold</span><br><span class="line">    replace: 更纱黑体 SC Bold</span><br><span class="line">  DAOpenSansRegular: *zh-cn-font</span><br><span class="line">  DAOpenSansRegularItalic: *zh-cn-font</span><br><span class="line">  DAOpenSansSemiboldItalic: *zh-cn-font</span><br><span class="line">  DAOpenSansSemibold: *zh-cn-bold</span><br><span class="line"></span><br><span class="line">fixGSOFont: true # true is to use system UI font</span><br><span class="line">#fixGSOFont: *zh-cn-font # Or replace with user defined font</span><br><span class="line">debug: false</span><br></pre></td></tr></tbody></table></figure></li><li><p>安装配置中的字体。旧版本中可以把字体放到同一文件夹下的 fonts 子文件夹下，但现在不行了，必须要安装。如果少哪个字体没装的话，telegram 的字体就会使用默认的等宽字体（宋体），非常难看。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;telegram 经过数次版本迭代后，从去年开始的版本已经不能注入 dll 了。常用的两个注入 dll 插件，其中一个 Anti Revoke Plugin 已于上月停更，所以现在只有换字体的 &lt;a href=&quot;https://github.com/ysc3839/FontMod&quot;&gt;FontMod&lt;/a&gt; 仍在更新。虽然本身也不是专为 telegram 打造的，所以在现在版本的 tg 上用起来还要费一番功夫。&lt;/p&gt;
&lt;p&gt;参考文章：&lt;a href=&quot;https://github.com/ysc3839/FontMod/issues/70#issuecomment-882069692&quot;&gt;ysc3839（项目作者）的issue&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Windows" scheme="https://zbttl-github-io.vercel.app/categories/Windows/"/>
    
    
    <category term="fonts" scheme="https://zbttl-github-io.vercel.app/tags/fonts/"/>
    
    <category term="telegram" scheme="https://zbttl-github-io.vercel.app/tags/telegram/"/>
    
  </entry>
  
  <entry>
    <title>linux 工作中常用的性能检查 - 结果导出 - 文本处理</title>
    <link href="https://zbttl-github-io.vercel.app/linux-gong-zuo-zhong-chang-yong-de-xing-neng-jian-cha-jie-guo-dao-chu-wen-ben-chu-li/"/>
    <id>https://zbttl-github-io.vercel.app/linux-gong-zuo-zhong-chang-yong-de-xing-neng-jian-cha-jie-guo-dao-chu-wen-ben-chu-li/</id>
    <published>2022-01-02T16:00:00.000Z</published>
    <updated>2022-01-03T18:02:18.635Z</updated>
    
    <content type="html"><![CDATA[<p>emmm。。。我这 18 线城市的运维，经常得对服务器进行性能检查，并把结果进行导出。大多数时候服务器都是没啥问题的，所以时间都费在复制粘贴上了，如果把那些持续运行的命令结果直接导出，然后全部合并在一起以格式化输出不就省事了？</p><h3 id="cpu-性能检查——top-与-ps-之争！"><a href="#cpu-性能检查——top-与-ps-之争！" class="headerlink" title="cpu 性能检查——top 与 ps 之争！"></a>cpu 性能检查——top 与 ps 之争！</h3><p>top 可以看 cpu 占用率这个大家应该都知道。但 ps 其实也可以看。因为当我们运行 <code>ps aux</code> 的时候：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220103215039.png"><br>这一排 cpu 占用率实际上是可以利用起来的：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux|sed 1d|awk '{a+=$3}END{print a"%"}'</span><br></pre></td></tr></tbody></table></figure><p>这一行命令下去，就可以直接得出当时的 cpu 占用率了，相比从茫茫的 top 运行屏幕中把结果摘出来，是不是方便了不少？</p><p>且慢！</p><p>实际上，当你用多了这个命令，不难发现几个奇怪的地方：</p><ol><li>当负载起来以后，如果恰好你的机器是多核心的话。。。就会发现，出来的数字怎么就大于 100% 了呢？</li><li>负载下去以后，发现出来的数字并没有马上降下去，但是多敲几次命令的话，会发现越到后面数字越低，但很长一段时间都不会是低负载时的哪个占用率，奇怪，此时 cpu 占用率应该已经接近 0 了呀？</li><li>发现 root 下运行出来的结果和非 root 下运行的结果居然差了 10 个百分点？</li></ol><p>实际上，这几个问题的答案，就能充分反映出 ps 和 top 两个命令之间的机制差异：</p><ul><li><p>top 的 cpu 最大值是 100，而 ps 统计出来的 cpu 最大值上限是 100xCPU 核心总数的值。假设一台机器有两个 cpu，每个 cpu 有四个核心，那么 <code>ps aux</code> 统计出的 cpu 最大值上限就是 100*2*4=800；</p></li><li><p>参考<a href="https://superuser.com/questions/643331/ps-and-top-give-different-cpu-usage">linux - ps and top give different CPU usage - Super User</a></p><blockquote><p>from man top:</p><blockquote><ol><li>%CPU – CPU Usage The task’s share of the elapsed <strong>CPU time since the last screen update</strong>, expressed as a percentage of total CPU time.</li></ol></blockquote><p>from man ps:</p><blockquote><p>CPU usage is currently expressed as the percentage of <strong>time spent running during the entire lifetime of a process</strong>.</p></blockquote></blockquote><p>翻译成人话就是：top 的结果更即时，严格反映出当前时间点的 cpu 占用；而 ps 中进程的 cpu 占用率是当前进程全生命时间占用率的平均值。</p></li><li><p>在非 root 账户下 ps 输出的结果不包含 root 状态下运行进程的 cpu 占用。</p></li></ul><p>所以嘛，平时对服务器的检查究竟用哪个比较合适呢？</p><p>思来想去，我觉得其实都可以。虽然 ps 不包含 root 下的进程，但企业用的服务器为了安全着想，本就不会在 root 下运行高占用的进程；而平时 cpu 占用率检查的意义，一个是查看当前时间点的 cpu 占用率是否过高（突发负载），更重要的目的，或许还是判断当前 cpu 是否能胜任所负担的工作（平均负载）。这么说，两个命令应该配合着使用才对呀，不过，检查要填的单子里面只用填一个 cpu 占用率数据，所以嘛。。。</p><p>对于 ps，只要把上面的命令处理一下，除一下核心数就好了：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux|sed 1d|awk -v cpu=$(cat /proc/cpuinfo| grep "processor"| wc -l) '{a+=$3/cpu}END{print a"%"}'</span><br></pre></td></tr></tbody></table></figure><p>对于 top，也可以通过 <code>-n1</code> 只运行 1s，然后通过 sed 和 awk 摘出里面的 cpu 占用数据：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -n1|sed -n '3p'|awk '{print $2}'</span><br></pre></td></tr></tbody></table></figure><h3 id="拼接结果：大显神通的-paste-和拦路虎-ansi-字符"><a href="#拼接结果：大显神通的-paste-和拦路虎-ansi-字符" class="headerlink" title="拼接结果：大显神通的 paste 和拦路虎 ansi 字符"></a>拼接结果：大显神通的 paste 和拦路虎 ansi 字符</h3><p>几个命令之间当然也可以通过 <code>&amp;&amp;</code> 来拼接起来，只不过输出不在同一行；而用 paste 的话，不仅输出在同一行，而且命令与命令之间的输出中间会自动插入一个制表符，粘贴到表格里面刚好就会变成两格，简直就是懒人的福音！</p><p>但是嘛。。。我这边还有一个需求，那就是把 top 第一行后面这些带时间的内容输出出来，也就是这串：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220104012407.png"></p><p>按理来说，配合 sed 就可以了，顺便剪掉前面的 top：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -n1|sed -n '1p'|sed 's/top - //g'  </span><br></pre></td></tr></tbody></table></figure><p>然后我发现，运行完以后会莫名其妙的做一次清屏。这样复制粘贴就不方便了。</p><p>原因也挺简单的。里面混有 ansi 字符，输出出来：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -n1|sed -n '1p'|sed 's/top - //g'  &gt; ansi.txt</span><br></pre></td></tr></tbody></table></figure><p>用 vim 看一眼：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220103135642.png"></p><p>拖下来再用 vscode 看一眼：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20220103135359.png"></p><p>好家伙显示出来的效果都不同。。。</p><p>不过原理都差不多，vscode 这里的  ESC 就等效于上面 vim 的 <code>^[</code>，同时还等效于<code>\x1B</code>。但使用 sed 命令去处理的话，只有 <code>\x1B</code> 能成功匹配到这些个 ensi 符号。所以我们可以先把这些符号给转成可见性比较好的英文字符，参考：<a href="https://blog.csdn.net/Fu_Tianshu/article/details/80589289">用 sed 去除文件中的 ASCII 控制字符乱码_Fu_Tianshu的博客-CSDN博客</a></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -n1|sed -n '1p'|sed 's/top - //g'|sed -r  -e 's/\x00/[NUL]/g' -e 's/\x01/[SOH]/g' -e 's/\x02/[STX]/g' -e 's/\x03/[ETX]/g' -e 's/\x04/[EOT]/g' -e 's/\x05/[ENQ]/g' -e 's/\x06/[ACK]/g' -e 's/\x07/[BEL]/g' -e 's/\x08/[BS]/g' -e 's/\x0A/[LF]/g' -e 's/\x0B/[VT]/g' -e 's/\x0C/[FF]/g' -e 's/\x0D/[CR]/g' -e 's/\x0E/[SO]/g' -e 's/\x0F/[SI]/g' -e 's/\x10/[DLE]/g' -e 's/\x11/[DC1]/g' -e 's/\x12/[DC2]/g' -e 's/\x13/[DC3]/g' -e 's/\x14/[DC4]/g' -e 's/\x15/[NAK]/g' -e 's/\x16/[SYN]/g' -e 's/\x17/[ETB]/g' -e 's/\x18/[CAN]/g' -e 's/\x19/[EM]/g' -e 's/\x1A/[SUB]/g' -e 's/\x1B/[ESC]/g' -e 's/\x1C/[FS]/g' -e 's/\x1D/[GS]/g' -e 's/\x1E/[RS]/g' -e 's/\x1F/[US]/g' -e 's/\x7F/[DEL]/g'|</span><br></pre></td></tr></tbody></table></figure><p>认真去看的话，要提取的字符串前后都有乱七八糟的 ansi 字符和搭配生效的 ansi 命令：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[[?25l^[[?1c^[[H^[[J^[[m^Otop - 02:37:10 up 132 days, 19:05,  1 user,  load average: 0.00, 0.03, 0.00^[[m^O^[[39;49m^[[m^O^[[39;49m^[[K</span><br></pre></td></tr></tbody></table></figure><p>我稍微了解了一下，上面这些 ansi 命令的意思：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">^[[?25l光标不可见</span><br><span class="line">^[[?1c 在^[[?25l后执行确保在执行序列时不会有光标闪烁Linux 控制台</span><br><span class="line">^[[H回到页首</span><br><span class="line">^[[J从光标擦除到页尾</span><br><span class="line">^[[m^O重置字体颜色</span><br><span class="line">^[[39;49m使用默认颜色  </span><br></pre></td></tr></tbody></table></figure><p>其中其决定作用的自然是那个<code>^[[H</code>和<code>^[[J</code>了，就是这两个联合起来才让 top 命令达成了清屏的效果。现在就把他们都干掉！前面，用长长的那一串语句做转换后，要提取的字符串前后的 ansi 字符组变成了下面这样的两串东西：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ESC][?25l[ESC][?1c[ESC][H[ESC][J[ESC][m[SI]</span><br><span class="line">[ESC][m[SI][ESC][39;49m[ESC][m[SI][ESC][39;49m[ESC][K</span><br></pre></td></tr></tbody></table></figure><p>复制到 vscode 后，按 ctrl+H，vscode 就能自动的把这两串东西转义成正则表达式形式，真方便。整理一下，放到上面用过的表达式中做处理：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -n1|sed -n '1p'|sed 's/top - //g'|sed -r  -e 's/\x00/[NUL]/g' -e 's/\x01/[SOH]/g' -e 's/\x02/[STX]/g' -e 's/\x03/[ETX]/g' -e 's/\x04/[EOT]/g' -e 's/\x05/[ENQ]/g' -e 's/\x06/[ACK]/g' -e 's/\x07/[BEL]/g' -e 's/\x08/[BS]/g' -e 's/\x0A/[LF]/g' -e 's/\x0B/[VT]/g' -e 's/\x0C/[FF]/g' -e 's/\x0D/[CR]/g' -e 's/\x0E/[SO]/g' -e 's/\x0F/[SI]/g' -e 's/\x10/[DLE]/g' -e 's/\x11/[DC1]/g' -e 's/\x12/[DC2]/g' -e 's/\x13/[DC3]/g' -e 's/\x14/[DC4]/g' -e 's/\x15/[NAK]/g' -e 's/\x16/[SYN]/g' -e 's/\x17/[ETB]/g' -e 's/\x18/[CAN]/g' -e 's/\x19/[EM]/g' -e 's/\x1A/[SUB]/g' -e 's/\x1B/[ESC]/g' -e 's/\x1C/[FS]/g' -e 's/\x1D/[GS]/g' -e 's/\x1E/[RS]/g' -e 's/\x1F/[US]/g' -e 's/\x7F/[DEL]/g'|sed -r -e 's/\[ESC\]\[\?25l\[ESC\]\[\?1c\[ESC\]\[H\[ESC\]\[J\[ESC\]\[m\[SI\]//g' -e 's/\[ESC\]\[m\[SI\]\[ESC\]\[39;49m\[ESC\]\[m\[[SI\]\[ESC\]\[39;49m\[ESC\]\[K//g'  </span><br></pre></td></tr></tbody></table></figure><p>这样出来的结果就不会有问题了。。。</p><hr><p>但是，但是！用 paste 去把这个语句和上面测量 cpu 占用率的两个语句组起来，就会莫名其妙的卡住，原因不明。。。</p><p>但解决方法也很简单，这时我才发现 top 里有个参数叫 -b，可以自动把这些 ansi 字符干掉。。。</p><p>所以我绕了一大圈是为了什么呢？？？？？</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paste &lt;(top -b -n1|sed -n '3p'|awk '{print $2}'|sed 's/us//g') &lt;(top -b -n1|sed -n '1p'|sed 's/top - //g') </span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;emmm。。。我这 18 线城市的运维，经常得对服务器进行性能检查，并把结果进行导出。大多数时候服务器都是没啥问题的，所以时间都费在复制粘贴上了，如果把那些持续运行的命令结果直接导出，然后全部合并在一起以格式化输出不就省事了？&lt;/p&gt;
&lt;h3 id=&quot;cpu-性能检查——top-与-ps-之争！&quot;&gt;&lt;a href=&quot;#cpu-性能检查——top-与-ps-之争！&quot; class=&quot;headerlink&quot; title=&quot;cpu 性能检查——top 与 ps 之争！&quot;&gt;&lt;/a&gt;cpu 性能检查——top 与 ps 之争！&lt;/h3&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://zbttl-github-io.vercel.app/categories/Linux/"/>
    
    
    <category term="top" scheme="https://zbttl-github-io.vercel.app/tags/top/"/>
    
    <category term="ps(command)" scheme="https://zbttl-github-io.vercel.app/tags/ps-command/"/>
    
    <category term="paste" scheme="https://zbttl-github-io.vercel.app/tags/paste/"/>
    
  </entry>
  
  <entry>
    <title>换用 zplug</title>
    <link href="https://zbttl-github-io.vercel.app/huan-yong-zplug/"/>
    <id>https://zbttl-github-io.vercel.app/huan-yong-zplug/</id>
    <published>2021-08-17T16:00:00.000Z</published>
    <updated>2021-08-28T19:06:20.134Z</updated>
    
    <content type="html"><![CDATA[<p>最近要搬几个服务器，想把迁移服务器时配置环境的这些步骤搞简单一点。自从用上了 zsh 和各种插件后，不装这玩意就浑身难受，但配置 zsh 的各种插件又相当费事。之前了解过 zplug 这玩意，今天就研究一下怎么切上去。</p><p>参考文章：<a href="https://www.jkg.tw/p2965/">zsh + zplug 快速部屬你的 Shell 工作環境 | jkgtw’s blog </a></p><p>之前配置 zsh，参考 <a href="https://zbttl.github.io/zhuo-mian-ban-ubuntu-debian-cai-keng/">桌面版 ubuntu &amp; debian 踩坑 | Bao’s 备忘录</a>，大概步骤是：</p><ol><li>安装 zsh </li><li>切换默认终端为 zsh </li><li>安装 oh-my-zsh </li><li>安装 p10k </li><li>配置 oh-my-zsh 和安装相应插件（这一步要 git clone 各种插件，挺麻烦的）</li><li>配置 p10k</li><li>一些 bug 的解决（比如字体不能显示，小键盘不能用等等）</li><li>导入历史记录 </li></ol><p>使用 zplug 可以精简掉其中的 3-6 步，之后只要装好 zplug 后，把 <code>.zshrc</code> 和 <code>.p10k.zsh</code> 考过来，用 source 或者重启一下就能自动搞定了。</p><h2 id="具体的说："><a href="#具体的说：" class="headerlink" title="具体的说："></a>具体的说：</h2><ol><li><p>安装 zplug</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh | zsh</span><br></pre></td></tr></tbody></table></figure></li><li><p>修改原有的 <code>.zshrc</code> 文件</p><p>在 zshrc 最上面加上一行 source 启用 zplug</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zplug/init.zsh</span><br></pre></td></tr></tbody></table></figure><p>在 zshrc 最下面加上以下代码，作用是每次重载 zsh 检查 <code>.zshrc</code> 相关代码中是否有新的插件需要安装。</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Install plugins if there are plugins that have not been installed</span></span><br><span class="line"><span class="keyword">if</span> ! zplug check --verbose; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"Install? [y/N]: "</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">read</span> -q; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span>; zplug install</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Then, source plugins and add commands to $PATH</span></span><br><span class="line">zplug load</span><br></pre></td></tr></tbody></table></figure><p> 剩下的这几行代码，写在中间。</p><p> 插件声明语句，就是上面说的相关代码，格式类似这样：</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zplug "romkatv/powerlevel10k", as:theme, depth:1</span><br></pre></td></tr></tbody></table></figure><p> 双引号中的内容就是 <code>git clone</code> 那些插件时的插件的作者和库名，都在 url 的后半段里面。像我之前装的那些插件，大概就需要写这几行：</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#zplug "romkatv/powerlevel10k", as:theme, depth:1</span></span><br><span class="line">zplug romkatv/powerlevel10k, as:theme, depth:1</span><br><span class="line">zplug <span class="string">'zplug/zplug'</span>, hook-build:<span class="string">'zplug --self-manage'</span></span><br><span class="line">zplug <span class="string">"zsh-users/zsh-completions"</span></span><br><span class="line">zplug <span class="string">"zsh-users/zsh-history-substring-search"</span></span><br><span class="line">zplug <span class="string">"zsh-users/zsh-autosuggestions"</span></span><br><span class="line">zplug <span class="string">"wting/autojump"</span></span><br></pre></td></tr></tbody></table></figure><p> <strong>（21.8.29 更新）</strong> 原来的 <code>zplug "romkatv/powerlevel10k", as:theme, depth:1</code> 这行容易在 zsh 启动时报警告，大概是：</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Change the way Powerlevel10k is loaded from ~/.zshrc</span><br></pre></td></tr></tbody></table></figure><p> 根据提示查了查<a href="https://github.com/romkatv/powerlevel10k/blob/master/README.md#zplugin">文档</a>，换成了没有冒号的这个命令。</p><p> 由于不需要单独安装 oh-my-zsh 了，相关代码注释掉</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#export ZSH="/root/.oh-my-zsh"</span><br><span class="line"></span><br><span class="line">#source $ZSH/oh-my-zsh.sh</span><br></pre></td></tr></tbody></table></figure><p> 同样，因为没有 oh-my-zsh 了，我们得声明一段代码，启用历史记录功能：</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># History config</span></span><br><span class="line">HISTSIZE=10000</span><br><span class="line">SAVEHIST=10000</span><br><span class="line">HISTFILE=~/.zsh_history</span><br></pre></td></tr></tbody></table></figure><p> 最后重载 zsh 即可。</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="注意-acme-sh"><a href="#注意-acme-sh" class="headerlink" title="注意 acme.sh"></a>注意 acme.sh</h2><p>acme.sh 安装时会写入变量到 .zshrc 中。如果有 zplug，会写下如下两条命令：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zplug load. "/root/.acme.sh/acme.sh.env"</span><br><span class="line">. "/root/.acme.sh/acme.sh.env"</span><br></pre></td></tr></tbody></table></figure><p>但这么写每次打开的时候都会报警。需要手动改成</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zplug load</span><br><span class="line">. "/root/.acme.sh/acme.sh.env"</span><br></pre></td></tr></tbody></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>最后推荐两篇文章，可以参考里面的内容，添加更多有趣的插件（不过加载时间也会因此变慢，自己抉择）</p><ul><li><a href="https://macosdoc.googo.cc/enivironment/zhong-jian-kai-fa-huan-jing">iTerm2 + zsh + oh-my-zsh - macOS Setup</a></li><li><a href="https://guojing.io/posts/zplug/">zplug 武装 zsh · 郭靖 I/O</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近要搬几个服务器，想把迁移服务器时配置环境的这些步骤搞简单一点。自从用上了 zsh 和各种插件后，不装这玩意就浑身难受，但配置 zsh 的各种插件又相当费事。之前了解过 zplug 这玩意，今天就研究一下怎么切上去。&lt;/p&gt;
&lt;p&gt;参考文章：&lt;a href=&quot;https://www.jkg.tw/p2965/&quot;&gt;zsh + zplug 快速部屬你的 Shell 工作環境 | jkgtw’s blog &lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://zbttl-github-io.vercel.app/categories/Linux/"/>
    
    
    <category term="zsh" scheme="https://zbttl-github-io.vercel.app/tags/zsh/"/>
    
  </entry>
  
  <entry>
    <title>萌新的 linux qt 程序编译实战</title>
    <link href="https://zbttl-github-io.vercel.app/meng-xin-de-linux-qt-cheng-xu-bian-yi-shi-zhan/"/>
    <id>https://zbttl-github-io.vercel.app/meng-xin-de-linux-qt-cheng-xu-bian-yi-shi-zhan/</id>
    <published>2021-07-12T16:00:00.000Z</published>
    <updated>2021-08-22T04:07:55.129Z</updated>
    
    <content type="html"><![CDATA[<p>事情的来源，是两个月前和朋友讨论啥软件界面又好看「学术网站」又快界面又漂亮。clash 虽然漂亮，但支持的协议少了点。</p><p>这时候我就提了一嘴「qv2ray 新界面呀，不是挺漂亮的吗，只是要编译，又不麻烦」</p><p>前半句是对的，确实挺漂亮的：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/QQ%E5%9B%BE%E7%89%8720210517003751.jpg"></p><p>但为了圆后半句，我花了两个月时间。。。不要小看编译啊 kora！</p><p>环境：ubuntu 20.04 桌面端，否则没有 opengl 支持，没法试还报错</p><h2 id="标准编译步骤——借助-ubuntu-内置的-apt-安装依赖并直接编译"><a href="#标准编译步骤——借助-ubuntu-内置的-apt-安装依赖并直接编译" class="headerlink" title="标准编译步骤——借助 ubuntu 内置的 apt 安装依赖并直接编译"></a>标准编译步骤——借助 ubuntu 内置的 apt 安装依赖并直接编译</h2><h3 id="初步安装依赖"><a href="#初步安装依赖" class="headerlink" title="初步安装依赖"></a>初步安装依赖</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install git openssl -y</span><br><span class="line">#编译所需工具</span><br><span class="line">sudo apt install autoconf automake libtool build-essential -y</span><br><span class="line"># qv2ray 和 grpc 编译所需的 ssl 库</span><br><span class="line">sudo apt install libssl-dev -y</span><br></pre></td></tr></tbody></table></figure><h3 id="安装-qt5（通过官方在线安装包）"><a href="#安装-qt5（通过官方在线安装包）" class="headerlink" title="安装 qt5（通过官方在线安装包）"></a>安装 qt5（通过官方在线安装包）</h3><p>参考文章：<a href="https://forum.qt.io/topic/72009/how-do-i-move-qt-to-usr-local-share-qt">How do I move ~/Qt to /usr/local/share/Qt? | Qt Forum</a></p><p>需要保持网络通畅！</p><p>下载：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://qt.mirror.constant.com/archive/online_installers/4.1/qt-unified-linux-x86_64-4.1.0-online.run</span><br><span class="line">chmod +x ./qt-unified-linux-x86_64-4.1.0-online.run</span><br><span class="line">./qt-unified-linux-x86_64-4.1.0-online.run</span><br></pre></td></tr></tbody></table></figure><p>根据提示，注册并安装 qt 5.12.5 。我就直接装在默认路径，<code>/home/zbttl/xxx</code> 下了。另外程序默认会安装 Ninja 和 cmake，这两个后面都会用得上。</p><p>将 qt 和 cmake 路径加到 root 和在进行操作的用户的环境变量中（后续如果不装到系统目录中，也可以省去吧路径加到的 root 下的命令，即第一条命令）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo "export PATH=/home/zbttl/Qt/5.15.2/gcc_64/bin:/home/zbttl/Qt/Tools/CMake/bin/:/home/zbttl/Qt/Tools/Ninja/:$PATH"|sudo tee /etc/bash.bashrc</span><br><span class="line"></span><br><span class="line">echo "export PATH=\$HOME/Qt/5.15.2/gcc_64/bin:\$HOME/Qt/Tools/CMake/bin/:\$HOME/Qt/Tools/Ninja/:\$PATH" &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></tbody></table></figure><p>测试：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmake -version</span><br><span class="line">qmake -v</span><br></pre></td></tr></tbody></table></figure><p>都有输出的话则正常。</p><p>还需要添加 qt 的动态链接库：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/ld.so.conf.d</span><br><span class="line">echo -e "/home/zbttl/Qt/5.15.2/gcc_64/lib\n/home/zbttl/Qt/Tools/QtCreator/lib/qtcreator"|sudo tee qt-5.15.2-x86_64.conf</span><br><span class="line">sudo ldconfig</span><br><span class="line">cd</span><br></pre></td></tr></tbody></table></figure><h3 id="安装-grpc、protobuf-、opengl-库"><a href="#安装-grpc、protobuf-、opengl-库" class="headerlink" title="安装  grpc、protobuf 、opengl 库"></a>安装  grpc、protobuf 、opengl 库</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libprotobuf-dev protobuf-compiler libgrpc-dev libgrpc++-dev protobuf-compiler-grpc -y</span><br><span class="line">sudo apt install mesa-common-dev -y</span><br></pre></td></tr></tbody></table></figure><h3 id="编译-qv2ray-发行版"><a href="#编译-qv2ray-发行版" class="headerlink" title="编译 qv2ray 发行版"></a>编译 qv2ray 发行版</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Qv2ray/Qv2ray.git --recursive</span><br><span class="line">cd Qv2ray</span><br><span class="line">mkdir build; cd build;</span><br><span class="line">cmake -DCMAKE_INSTALL_PREFIX=/home/zbttl/q2 -DCMAKE_BUILD_TYPE=Release -GNinja ..</span><br><span class="line">#如果没装Ninja，也可以不用Ninja，Ninja编译时是显示编译到多少个包，普通编译则是显示百分比</span><br><span class="line">#cmake -DCMAKE_INSTALL_PREFIX=/home/zbttl/q2 -DCMAKE_BUILD_TYPE=Release ..</span><br><span class="line">cmake --build . --parallel $(nproc)</span><br><span class="line">#装到系统路径中的话，要配合 sudo</span><br><span class="line">#sudo -s</span><br><span class="line">cmake --install .</span><br></pre></td></tr></tbody></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home/zbttl/q2/bin/</span><br><span class="line">./qv2ray</span><br></pre></td></tr></tbody></table></figure><p>有可能会报错哦。需要安装 xcb 库。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libxcb-xinerama0 -y</span><br></pre></td></tr></tbody></table></figure><h2 id="未曾设想的道路（雾）"><a href="#未曾设想的道路（雾）" class="headerlink" title="未曾设想的道路（雾）"></a>未曾设想的道路（雾）</h2><h3 id="换用-qt6-编译-dev-版"><a href="#换用-qt6-编译-dev-版" class="headerlink" title="换用 qt6 编译 dev 版"></a>换用 qt6 编译 dev 版</h3><p>新界面只有 dev 版支持。编译 dev 版则需要安装 qt6。</p><p>需要多装一个库：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libcurl4-openssl-dev -y</span><br></pre></td></tr></tbody></table></figure><p>和装 qt5 的步骤接近，除了通过安装程序安装时选择 qt 6.1.2 外，还有编译的参数要做出修改：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone -b dev-v3 https://github.com/Qv2ray/Qv2ray.git --recursive</span><br><span class="line">cd Qv2ray</span><br><span class="line">mkdir build; cd build;</span><br><span class="line">#如果是编译dev版可省略-DQV2RAY_QT6=ON参数，编译发行版必须加入（不过也有可能加上都编译不了，所以编译发行版建议用qt5）</span><br><span class="line">cmake -DCMAKE_INSTALL_PREFIX=/home/zbttl/q2 -DCMAKE_BUILD_TYPE=Release -GNinja -DQV2RAY_QT6=ON ..</span><br><span class="line">cmake --build . --parallel $(nproc)</span><br></pre></td></tr></tbody></table></figure><hr><p>但到这里，我还有一个小目标：</p><p>编都编了，干脆能手动编译的都手动编译吧！apt 装的版本虽然能用，但确实有点旧了。</p><p>大概有四样东西可以手动编译，分别是 openssl，grpc+protobuf、cmake 和 qt，这几样东西更新快且编译新软件的时候经常对他们有版本号上的需求。严格意义说，opengl 和 ninja 也是能手工编译的，但这两样东西似乎比较稳定，没啥必要手工编译。</p><h3 id="手工编译-openssl"><a href="#手工编译-openssl" class="headerlink" title="手工编译 openssl"></a>手工编译 openssl</h3><p>可以替换上面用到的 <code>libcurl4-openssl-dev</code>、<code>libssl-dev</code> 两个库。（但不要去卸载 openssl，否则使用 wget 等命令时就会报警证书错误。不敲 <code>sudo rm -r /usr/local/ssl/certs&amp;&amp;sudo ln -s /etc/ssl/certs /usr/local/ssl</code> 这个命令也会造成证书报警，但如果卸了 openssl，敲了这个命令也没用。）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove libcurl4-openssl-dev libssl-dev -y</span><br></pre></td></tr></tbody></table></figure><p>下载的版本是 1.1.1f，现在应该还有更新的版本，但别用 3 开头的 alpha 版。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.openssl.org/source/openssl-1.1.1i.tar.gz --no-check-certificate</span><br><span class="line">tar xzvf openssl-1.1.1i.tar.gz </span><br><span class="line">cd openssl*/</span><br><span class="line">./config</span><br><span class="line">make</span><br><span class="line">make test</span><br><span class="line">sudo make install</span><br><span class="line">sudo ldconfig</span><br><span class="line">sudo rm -r /usr/local/ssl/certs&amp;&amp;sudo ln -s /etc/ssl/certs /usr/local/ssl</span><br><span class="line">cd</span><br></pre></td></tr></tbody></table></figure><p>安装完确认一下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openssl version</span><br><span class="line"></span><br><span class="line">pkg-config --libs openssl</span><br></pre></td></tr></tbody></table></figure><p>应有类似输出：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OpenSSL 1.1.1f  31 Mar 2020</span><br><span class="line"></span><br><span class="line">-L/usr/local/lib -lssl -lcrypto</span><br></pre></td></tr></tbody></table></figure><h3 id="手动安装-cmake"><a href="#手动安装-cmake" class="headerlink" title="手动安装 cmake"></a>手动安装 cmake</h3><p>qt6 必须要 cmake 3.16 以后版本才能编译，好死不死 apt 里带的版本是 3.15。之前用了 qt 官方的在线安装程序，安装的是 3.19，这才勉强能用。新版 grpc 也强制要求使用 cmake 而不是 make 了，本来想和 qt 编译写在一起，现在把这个步骤提前到这里。</p><p>cmake 官方直接给了最新的安装脚本，我们直接用就好了，懒得编译了。</p><p>可以到 <code>https://github.com/Kitware/CMake/releases</code> 获取最新 release 版本号：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#参考https://sobaigu.com/shell-get-lastest-version-from-github.html命令行直接获取版本号</span><br><span class="line">cmake_new_ver=$(wget -qO- -t1 -T2 "https://api.github.com/repos/Kitware/CMake/releases/latest" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g'|sed 's/[a-z]*//g')</span><br><span class="line">#或者是 cmake_new_ver=$(wget -qO- -t1 -T2 "https://api.github.com/repos/Kitware/CMake/releases/latest" | jq -r '.tag_name'|sed 's/[a-z]*//g')</span><br></pre></td></tr></tbody></table></figure><p>下载运行</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove cmake -y</span><br><span class="line">wget https://github.com/Kitware/CMake/releases/download/v${cmake_new_ver}/cmake-${cmake_new_ver}-linux-x86_64.sh</span><br><span class="line">chmod +x cmake-${cmake_new_ver}-linux-x86_64.sh</span><br><span class="line">sudo bash cmake-${cmake_new_ver}-linux-x86_64.sh --prefix=/usr/ --exclude-subdir</span><br></pre></td></tr></tbody></table></figure><p>如果在使用 ubuntu 且不在意空间的话，也可以通过 snap 安装：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo snap install cmake</span><br></pre></td></tr></tbody></table></figure><h3 id="手工编译-grpc-和-protobuf"><a href="#手工编译-grpc-和-protobuf" class="headerlink" title="手工编译 grpc 和 protobuf"></a>手工编译 grpc 和 protobuf</h3><p>参考文章</p><p>官方文档：</p><ul><li><a href="https://github.com/grpc/grpc/blob/master/BUILDING.md">grpc/BUILDING.md at master · grpc/grpc</a></li><li><a href="https://grpc.io/docs/languages/cpp/quickstart/">Quick start | C++ | gRPC</a></li></ul><p>其他使用者的使用心得：</p><ul><li><a href="https://github.com/grpc/grpc/blob/70ce9e21df4f6a18fbcfbb2103d1e89987125f4a/test/distrib/cpp/run_distrib_test_cmake.sh">grpc 正确安装 grpc/run_distrib_test_cmake.sh at 70ce9e21df4f6a18fbcfbb2103d1e89987125f4a · grpc/grpc</a></li><li><a href="https://blog.csdn.net/u012182853/article/details/106243399/">ubuntu16.04 grpc安装_u012182853的博客-CSDN博客_cares安装</a></li><li>多版本 grpc 安装、国内镜像、需要编译出的 c 版本组件列出 ：<a href="https://www.cnblogs.com/52fhy/p/11110704.html">gRPC入坑记 - 飞鸿影 - 博客园</a></li><li><a href="https://www.jianshu.com/p/3479272f90bb">gRPC 和 protobuf 的安装 - 简书</a></li></ul><p>代替了 <code>libprotobuf-dev</code>、<code>protobuf-compiler</code>、<code>libgrpc-dev</code>、<code>libgrpc++-dev</code> 四个包。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove libprotobuf-dev protobuf-compiler libgrpc-dev libgrpc++-dev -y</span><br><span class="line">sudo apt install zlib1g-dev -y</span><br></pre></td></tr></tbody></table></figure><p>protobuf 包含在 grpc 中，所以一起拿下来就好了。cmake 这里，如果全部都手动编译的话，先参考下面手工安装 cmake 章节（因为 grpc 并不要求 cmake 版本，所以用 apt 版本的 cmake 也可以）。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">git clone --recurse-submodules https://github.com/grpc/grpc</span><br><span class="line"></span><br><span class="line">cd grpc/third_party/protobuf/</span><br><span class="line">git submodule update --init --recursive</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure --prefix=/usr</span><br><span class="line">make -j $(nproc)</span><br><span class="line">sudo make install </span><br><span class="line">sudo ldconfig</span><br><span class="line">cd ../..</span><br><span class="line">cd third_party/abseil-cpp</span><br><span class="line">cmake -DCMAKE_INSTALL_PREFIX=/usr \</span><br><span class="line">      -DCMAKE_POSITION_INDEPENDENT_CODE=TRUE</span><br><span class="line">make -j $(nproc)</span><br><span class="line">sudo make install</span><br><span class="line">cd ../..</span><br><span class="line">cmake -DgRPC_INSTALL=ON \</span><br><span class="line">      -DgRPC_BUILD_TESTS=OFF \</span><br><span class="line">      -DCMAKE_INSTALL_PREFIX=/usr \</span><br><span class="line">      -DgRPC_SSL_PROVIDER=package</span><br><span class="line">make -j $(nproc)</span><br><span class="line">sudo make install</span><br><span class="line">cd ..</span><br></pre></td></tr></tbody></table></figure><p>安装完确认一下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc --version</span><br></pre></td></tr></tbody></table></figure><p>应有输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libprotoc 3.15.8</span><br></pre></td></tr></tbody></table></figure><p>另外还可以通过运行 example 测试，可参照参考文章 4。</p><h3 id="编译安装-qt6"><a href="#编译安装-qt6" class="headerlink" title="编译安装 qt6"></a>编译安装 qt6</h3><p>说实话，实操后感觉并不推荐大家去单独编译 qt，坑又多，空间占用又大（大概要 17g 左右），编译时间又久，纯属自己好奇，活该（</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210720004656.png"></p><p>先装依赖。由于没有 <code>cmake clean</code> 这种类似的命令，因为编译时间比较久，万一哪个依赖没装导致编译中出错，就得删掉整个文件夹重新编译，得不偿失，所以依赖尽量装全一点；除了上面文章提到的依赖（openssl、cmake，grpc 和 protobuf 可以不用），还装了以下这些：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install  libgl1-mesa-dev libxcb*-dev libfontconfig1-dev libxkbcommon-x11-dev python libgtk-3-dev mesa-common-dev libglu1-mesa-dev -y</span><br></pre></td></tr></tbody></table></figure><p>到 <a href="download.qt.io/archive/qt/">qt 官网</a>寻找对应版本的源码包，这里我下了 6.1.0 single 目录下的 zip 版本：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210719225612.png"></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.qt.io/archive/qt/6.1/6.1.0/single/qt-everywhere-src-6.1.0.zip</span><br><span class="line">sudo apt install unzip -y</span><br><span class="line">unzip qt-everywhere-src-6.1.0.zip </span><br><span class="line">cd qt-everywhere-src-6.1.0</span><br></pre></td></tr></tbody></table></figure><p>但这时如果直接 configure 会报错，因为下下来的 zip 文件里换行符似乎是 windows 格式的 CFLR。。。</p><p>应该下 tar.xz 包的，算了，下都下了，搞个工具转换一下吧：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install dos2unix -y</span><br><span class="line">find . -type f -print0 | xargs -0 dos2unix</span><br></pre></td></tr></tbody></table></figure><p>编译安装：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">./configure -openssl --prefix=/usr/local/qt6</span><br><span class="line">export PATH=/usr/local/qt6/bin:$PATH</span><br><span class="line">cmake --build . --parallel $(nproc)</span><br><span class="line">sudo cmake --install .</span><br><span class="line"></span><br><span class="line">echo "export PATH=/usr/local/qt6/bin:\$PATH" &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br><span class="line"></span><br><span class="line">cd /etc/ld.so.conf.d</span><br><span class="line">echo -e "/usr/local/qt6/lib"|sudo tee qt-6-x86_64.conf</span><br><span class="line">sudo ldconfig</span><br><span class="line">cd</span><br></pre></td></tr></tbody></table></figure><p>此时输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qmake -v</span><br></pre></td></tr></tbody></table></figure><p>应有输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QMake version 3.1</span><br><span class="line">Using Qt version 6.1.0 in /usr/local/qt6/lib</span><br></pre></td></tr></tbody></table></figure><h2 id="安全绳"><a href="#安全绳" class="headerlink" title="安全绳"></a>安全绳</h2><p>如果你看完了上面的内容才来到这里，有两种可能：</p><ol><li>你很幸运，一次过了；</li><li>你在云，根本没动手！</li></ol><p>保守估计有起码一半的人会在半路跳进坑里，那你就得在这里找绳子啦~</p><h3 id="关于-grpc-和-protobuf-的版本问题"><a href="#关于-grpc-和-protobuf-的版本问题" class="headerlink" title="关于 grpc 和 protobuf 的版本问题"></a>关于 grpc 和 protobuf 的版本问题</h3><p>估计有一部分人（包括我）之前接触过 go 版本的 grpc 和 protobuf，刚开始就会心生疑问：这俩玩意用 go 或者 pip 装不是更快吗？</p><p>很遗憾。。。并不行，必须用 c 版本的，还得编译出 lib 版本的库装到系统中才能正常使用。</p><h3 id="ssl-错误"><a href="#ssl-错误" class="headerlink" title="ssl 错误"></a>ssl 错误</h3><p>常见于 qv2ray 和 qt6 编译中出现。</p><p>qv2ray 编译中出现，一般是因为</p><ol><li>版本不匹配，比如自己编译了 openssl，又安装了 <code>libssl-dev</code></li><li>编译 grpc 的时候没有加参数 <code>-DgRPC_SSL_PROVIDER=package</code>，参见 <a href="https://github.com/Qv2ray/Qv2ray/discussions/1509">编译到最后一步报错 · Discussion #1509 · Qv2ray/Qv2ray</a></li></ol><p>在 qt 编译中出现，大概率是 <code>libssl-dev</code> 没装或者是 configure 后补装的。</p><p>另参考：</p><ul><li><a href="https://github.com/grpc/grpc/issues/15054">static link grpc lib not working · Issue #15054 · grpc/grpc</a></li></ul><h3 id="库错误"><a href="#库错误" class="headerlink" title="库错误"></a>库错误</h3><p>最大的坑。严格意义上上面的 ssl 错误也可以归类为库错误的范畴。</p><p>原因有：</p><ol><li>新编译软件的库没有放到 ldconfig 中；</li><li>没装库</li><li>库装晚了（常见于 qt 编译）</li><li>既用了 apt 装库也编译安装了一份，apt 装的优先被读取但编译其他东西的时候用的是编译安装的库因此运行时报错。 </li></ol><p>有那么几个检查方法：</p><ol><li><p>编译时报错。可用 <code>pkg-config</code> 命令，类似</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pkg-config --libs openssl</span><br><span class="line">pkg-config --libs xcb</span><br></pre></td></tr></tbody></table></figure><p>有输出证明库正常安装，没有就是缺了。</p></li><li><p>运行时报错。比如常见的运行 qv2ray 二进制时报 xcb 相关的错误，可使用 ldd 命令：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldd ./qv2ray</span><br></pre></td></tr></tbody></table></figure><p>如果有库没找到 / 没装，会有提示。 </p></li></ol><p>解决方法就是使用 <code>sudo find / -name </code> 命令搜查相关文件确定原因，然后根据原因对症下药：</p><ol><li>加入相关路径到 ldconfig（可参考上面 qt 安装和编译的文章）</li><li> apt 装库或者编译库</li><li> 装库后删除已编译部分重新编译，或者删除整个项目并重新拉取。</li><li>配置 LD_LIBRARY_PATH 变量。参考 qt 错误第一条。</li></ol><h3 id="多线程编译错误"><a href="#多线程编译错误" class="headerlink" title="多线程编译错误"></a>多线程编译错误</h3><p>在使用类似</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j $(nproc)</span><br></pre></td></tr></tbody></table></figure><p>这类命令时，有可能出现各种编译错误问题，例如这个报错：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lib error: relink 'libprotoc.la' with the above command before installing it</span><br></pre></td></tr></tbody></table></figure><p>解决方法有：</p><ol><li>如果可能，使用 <code>make clean</code> 命令后重新 make；没有 <code>make clean</code> 命令的话就只能重新拉取项目代码；</li><li>使用单线程或手动指定进程数而不是使用 <code>$(nproc)</code> 变量。注意，不要指定过大的线程数或者不指定线程数（比如直接使用 <code>make -j</code> 命令），错误的进程数可能消耗过大的内存导致系统卡死。</li></ol><h3 id="qt-错误"><a href="#qt-错误" class="headerlink" title="qt 错误"></a>qt 错误</h3><p>qt 有可能遭遇编译错误；也有可能编译安装成功后发现 qv2ray 运行不了，因为编译的 qt 组件不全。</p><h4 id="自编译-qt-后不慎在-apt-内安装了对应包导致报错"><a href="#自编译-qt-后不慎在-apt-内安装了对应包导致报错" class="headerlink" title="自编译 qt 后不慎在 apt 内安装了对应包导致报错"></a>自编译 qt 后不慎在 apt 内安装了对应包导致报错</h4><p>报错代码类似于 <code>version 'Qt_5.15' not found (required by xxxx)</code>。</p><p>解决方法是配置 <code>LD_LIBRARY_PATH</code>。让自编译的 qt 库优先被使用。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo "export LD_LIBRARY_PATH=/home/zbttl/Qt/5.15.2/gcc_64/lib"|sudo tee /etc/bash.bashrc</span><br><span class="line"></span><br><span class="line">echo "export LD_LIBRARY_PATH=\$HOME/Qt/5.15.2/gcc_64/lib" &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></tbody></table></figure><h4 id="防止-configure-时库不全"><a href="#防止-configure-时库不全" class="headerlink" title="防止 configure 时库不全"></a>防止 configure 时库不全</h4><p>运行 <code>./configure</code> 命令后，会在 qt 目录下生成一个 <code>CMakeCache.txt</code> 文件，里面就是本次 qt 编译所支持的功能。如果此时环境内依赖不全，就会导致组件缺失。这里放出我自己测试能够成功运行 qv2ray 的 <a href="https://1drv.ms/t/s!AoMoC9XTgpEsmc4Pi5-M08cQCoWicg?e=hpV7d9">qt6 编译组件清单文件</a>，出问题的话可以用 vscode 对一下。</p><p>另外使用 <code>./configure</code> 命令时，可以考虑带上 <code>-openssl</code> 和 <code>-opengl</code> 等参数（上面的教程例子中已经带上了 <code>-openssl</code>），如果找不到相应的库，就会直接报错告诉你差这些而不是各种一闪而过告诉你准备完成。</p><h4 id="已编译安装的-qt6-测试"><a href="#已编译安装的-qt6-测试" class="headerlink" title="已编译安装的 qt6 测试"></a>已编译安装的 qt6 测试</h4><p>可以写一个小测试项目，因为目前我遇到的安装后的 qt 方面的三个问题，分别对应 openssl、opengl、xcb 三个问题，而我编的这个小程序要是能够正常编译运行，就证明不存在那三个问题。</p><ol><li><p>新建一个文件夹，文件夹里面放上名为 <code>test.cpp</code> 的文件，写入以下内容：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;QApplication&gt;</span><br><span class="line">#include &lt;QLabel&gt;</span><br><span class="line">#include &lt;QDebug&gt;</span><br><span class="line">#include &lt;QSslSocket&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc,char *argv[])</span><br><span class="line">{</span><br><span class="line">QApplication app(argc,argv);</span><br><span class="line">//qDebug()&lt;&lt;QSslSocket::sslLibraryBuildVersionString();</span><br><span class="line">QLabel *Label = new QLabel(QSslSocket::sslLibraryBuildVersionString());</span><br><span class="line">Label-&gt;show();</span><br><span class="line">return app.exec();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>生成 pro 文件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qmake -project</span><br></pre></td></tr></tbody></table></figure></li><li><p>生成 stash 文件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qmake</span><br></pre></td></tr></tbody></table></figure></li><li><p>修改 pro 文件，加入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QT       += widgets \</span><br><span class="line">            network</span><br></pre></td></tr></tbody></table></figure></li><li><p>编译</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></tbody></table></figure></li><li><p>运行</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./test</span><br></pre></td></tr></tbody></table></figure><p>如果没问题就会弹出带有当前系统 openssl 版本号的弹窗。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210720010314.png"></p><p>后续如果想要显示其他内容，修改 <code>test.cpp</code> 内容并 <code>make</code> 就可以。不要执行 <code>qmake</code>，否则 pro 文件里这行就要重新写了。</p></li></ol><h4 id="运行后报错，查看具体信息"><a href="#运行后报错，查看具体信息" class="headerlink" title="运行后报错，查看具体信息"></a>运行后报错，查看具体信息</h4><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export QT_DEBUG_PLUGINS=1</span><br></pre></td></tr></tbody></table></figure><p>此时再运行 qt 程序就会弹出更详细的错误信息。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210720010945.png"></p><h3 id="qv2ray-官方部署参考文章和其他参考文章"><a href="#qv2ray-官方部署参考文章和其他参考文章" class="headerlink" title="qv2ray 官方部署参考文章和其他参考文章"></a>qv2ray 官方部署参考文章和其他参考文章</h3><ul><li>qv2ray 的 github actions 配置 <a href="https://github.com/Qv2ray/Qv2ray/blob/master/.github/workflows/build-qv2ray-cmake.yml">Qv2ray/build-qv2ray-cmake.yml at master · Qv2ray/Qv2ray</a></li><li>官方文档 <a href="https://qv2ray.net/lang/zh/hacking/manuallybuild.html">手动构建 Qv2ray 项目 | Qv2ray</a></li><li>超全的 qt 笔记：<a href="https://github.com/wangwenx190/notes/blob/master/qt.zh.cn.md">notes/qt.zh.cn.md at master · wangwenx190/notes</a></li></ul><hr><h2 id="二号坑"><a href="#二号坑" class="headerlink" title="二号坑"></a>二号坑</h2><p>总算是搞定了。。。可是等一下，新界面呢？</p><p>还有怎么没有中文，按下插件按钮时报错？（似乎只有 qt5 编译的发行版没有发生这种错误）</p><p>另外编译出来的东西怎么打包呢。。。</p><p>没有新界面是编译过程有问题吗？但后来我在 tg 群中发现，其实如果只是 ubuntu 下想要装新版本，qv2ray 官方搞了这个东西：<a href="https://qv2ray.net/debian-dev/">Qv2ray Debian Repository (Nightly) | debian-dev</a>，装这个就好了。。。。但这里面的新版本界面我也没调出来。</p><p>嘛，看来，还得折腾。</p><p><strong>（21.8.9 更新）</strong> 在项目的 <a href="https://github.com/Qv2ray/Qv2ray/actions">github action</a> 里面看到了各种不同版本的 qv2ray（所以是实际上，要下载最新版本的 qv2ray，应该去 action 里面找而不是到 release 里面）。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210811231413.png"></p><p>里面这些中，windows 专用的就 <code> Qv2ray Windows Installer</code>、<code>Qv2ray build matrix - cmake</code>、<code> Qv2ray build matrix - cmake</code>，只有最后一个是用 qt6 编译的新版；点开，果然有 qml 和 qwidget 两种，分布对应着新界面和旧界面；版本间还有 <code>RelWithDebInfo</code> 和 <code>release</code> 两种编译模式上的区别，把前者当做性能更好的 debug 版本就行了。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210811232614.png"></p><p>不过嘛。。。。一个是，这几个包解压后，打开里面的 qv2ray 可执行文件会报错 openssl 不存在，需要先用 chocolatey 装一个；其次就是，qml 版本双击后一点反应也没有。最后翻了一下群记录，发现</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@master/img/20210808153749.png"></p><p>意思是。。。白干了？</p><p><strong>（21.8.17 更新）</strong></p><p>业 界 冥 灯</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210817225647.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;事情的来源，是两个月前和朋友讨论啥软件界面又好看「学术网站」又快界面又漂亮。clash 虽然漂亮，但支持的协议少了点。&lt;/p&gt;
&lt;p&gt;这时候我就提了一嘴「qv2ray 新界面呀，不是挺漂亮的吗，只是要编译，又不麻烦」&lt;/p&gt;</summary>
    
    
    
    <category term="Complier" scheme="https://zbttl-github-io.vercel.app/categories/Complier/"/>
    
    
    <category term="Linux" scheme="https://zbttl-github-io.vercel.app/tags/Linux/"/>
    
    <category term="Ubuntu" scheme="https://zbttl-github-io.vercel.app/tags/Ubuntu/"/>
    
    <category term="qt5" scheme="https://zbttl-github-io.vercel.app/tags/qt5/"/>
    
    <category term="qt6" scheme="https://zbttl-github-io.vercel.app/tags/qt6/"/>
    
    <category term="grpc" scheme="https://zbttl-github-io.vercel.app/tags/grpc/"/>
    
    <category term="openssl" scheme="https://zbttl-github-io.vercel.app/tags/openssl/"/>
    
    <category term="cmake" scheme="https://zbttl-github-io.vercel.app/tags/cmake/"/>
    
    <category term="Ninja" scheme="https://zbttl-github-io.vercel.app/tags/Ninja/"/>
    
  </entry>
  
  <entry>
    <title>凑合用呗，还能砸了咋滴？————老旧的 ipad AIR2 搭配键鼠使用体验</title>
    <link href="https://zbttl-github-io.vercel.app/cou-he-yong-bai-huan-neng-za-liao-zha-di-lao-jiu-de-ipad-air2-da-pei-jian-shu-shi-yong-ti-yan/"/>
    <id>https://zbttl-github-io.vercel.app/cou-he-yong-bai-huan-neng-za-liao-zha-di-lao-jiu-de-ipad-air2-da-pei-jian-shu-shi-yong-ti-yan/</id>
    <published>2021-07-04T16:00:00.000Z</published>
    <updated>2021-08-15T01:31:10.811Z</updated>
    
    <content type="html"><![CDATA[<p>之前说过，我的笔记本这周送修了。</p><p>于是我这周就没有外出的笔记本用了。。。难不成我摸鱼的时候就只能呆呆的看几本杂志？我拒绝！</p><p>家里还有一台非常非常旧的酷比魔方 windows 平板（本来想说买了小新以后就刷成 linux 继续用，结果发现这玩意是 64 位的 bios 刷 32 位的系统，而 64 位系统又刷不上去，所以就搁置了），以及一台 ipad air2。我的需求很简单，就是能远程回家操作家里的电脑 + 中午休息的时候看看番。看着 windows 平板那寒酸的 720p 屏幕，以及回想起当年果果吹得天花乱坠的口号「你的下一台电脑，何必是电脑」，决定了，就带 ipad 出门吧！</p><p>虽然说。。。那个口号并不是喊给 AIR2 这种老古董用的。。。而且为了努力达成口号里的目标（作作样子），苹果钦（ying）定（dian）了两个左膀右臂——妙控键盘和 apple pencil。嗯。。。我怎么可能有这俩玩意嘛（贫穷的眼神）</p><p>不过我倒是有个蓝牙键盘（5 年前买的 BOW 经典三折叠款，型号我忘了，就是给 windows 平板配的），和刚买不久的罗技 m336（就是给 ipad 买的，我家无线鼠标挺多但都是 2.4g，ipad 又没有 usb 口，只能买个蓝牙的凑合用），凑个乞丐版体验应该不成问题吧。。。</p><p>于是乎上周日晚我下好了 zerotier 和几个远程软件，用 document 通过 ftp 从家里的电脑拖几部番剧进来，第二天我就这样开开心心的出门了。不得不说，这几样东西加在一起无论从体积上还是重量上确实比小新这种笔记本还要轻的多，但。。。这也是这套组合唯一的优点了。</p><h2 id="键鼠使用体验和设置"><a href="#键鼠使用体验和设置" class="headerlink" title="键鼠使用体验和设置"></a>键鼠使用体验和设置</h2><p>一连上鼠标，我就感觉到了果果满满的恶意——且不说这神秘的吸附感，这鼠标加速也太诡异了，根本没有 windows 上那种指哪打哪的感觉。当然，微软那边也有类似的东西，叫做「提升鼠标准确度」</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210705023746.png"></p><p>打游戏的同学应该对这东西有印象，因为无数游戏操作入门教程都会在比较开头的位置告诉你：</p><p>关！掉！他！</p><p>这是让你肌肉记忆丧失的坏东西！</p><p>然而偏偏果果那边就关不掉。。。。</p><p>另一个坑爹的地方是名为自然滚动的东西，在通用-&gt;触控板与鼠标中，这玩意开启后，向上向下滚轮就完全反过来了。关键问题是，即使关掉它，有好多情景下滚动方向还是反的。。。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_1579.jpg">来到通用-&gt;键盘-&gt;实体键盘里面，关掉讨厌的首字母大写，以及使用大写键切换语言。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_1578.jpg"></p><p>然后来到辅助功能，指针控制这里，关掉自动隐藏指针和指针动画，这俩苹果觉得 cool 的东西，普通键盘和鼠标用起来简直就是灾难。。。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_1580.jpg">最后到辅助功能键盘这个位置，这里有个七伤拳——全键盘控制。开启以后可以用键盘上的组合键开启 dock，回到桌面，开启多任务界面等等。但是！开启以后，shift、tab、caplocks、方向键这些按键原来的功能全部失效，如果不用 rdp，我可能还会选择把这个功能打开，但在 rdp 下这个功能会导致体验极其糟糕。。。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_1581.jpg">关闭后，我的 bow 键盘还能支持通过 fn+ 快捷键完成回到桌面调节音量等功能，仅仅是进入多任务界面要在我屏幕上划一下手指而已。另外还要多记一下的就是 ctrl + 空格切换输入法的快捷键，在远程桌面这几个猪队友的衬托下，这个快捷键变得无比的重要。</p><h2 id="菜鸡互啄——ios-上体验糟糕的远程桌面们"><a href="#菜鸡互啄——ios-上体验糟糕的远程桌面们" class="headerlink" title="菜鸡互啄——ios 上体验糟糕的远程桌面们"></a>菜鸡互啄——ios 上体验糟糕的远程桌面们</h2><p>由于我的主机是 windows，加上我后台也只运行多一个 teamviewer，所以第三方的远程应用我就只多测试一个 teamviewer。</p><h3 id="微软官方-rdp"><a href="#微软官方-rdp" class="headerlink" title="微软官方 rdp"></a>微软官方 rdp</h3><p>首先就得吐槽两个大问题：</p><ol><li><p>没法指定分辨率和主机那边一致，虽然保证了画面的解析度，但无论是连过去还是晚上回到家，第一次点亮屏幕后看见那错乱的桌面布局都会让人血压升高——</p></li><li><p>远程回去然后套娃 vmware Ununtu，ubuntu 里的 terminal 对整个键盘的映射都会出问题，只有少数的几个键按下去会在 terminal 出出反应，而且显示出来的字符和在键盘上敲得还不是同一个。。。只能在 Ubuntu 里面通过复制粘贴输入命令，或者开启 openssh 后用 xshell 之类的连上去。谷歌了一下，居然已经是个陈年老 bug 了。。。现在还没修！</p><p><a href="https://remotedesktop.uservoice.com/forums/265183-remote-desktop-client-for-ios/suggestions/8780344-fix-keyboard-issue-when-using-virtualbox-pidgin">Fix keyboard issue when using VirtualBox, Pidgin, and other VM software – Feedback for Microsoft Remote Desktop Clients</a></p></li></ol><p>其他一些小问题，包括只能用平板自己的输入法，主机自己的输入法不能用。</p><p>官方 rdp，唯一的优点就是快和便于连接，不过这个优点就够了，因为另外两个工具因为这点，根本就没法好好用。。。</p><h3 id="teamviewer"><a href="#teamviewer" class="headerlink" title="teamviewer"></a>teamviewer</h3><p>首先，在 windows 那边就有的问题：如果之前在主机这边锁屏了（自己锁了，或者用过 rdp 连接），那么连接过去后还要用 win+L 快捷键锁一次屏幕输入一次密码才能进去，然而。。。ios 下 win 键是废的，所以，没用。另外，本地的 ip 也没法保存到连接历史里面，每次都要输一遍 ip；掉线重连也基本连不上。远程体验。。。好歹有自定义分辨率，vmware 也正常；和 rdp 相反，用平板自己的输入法时主机自己的输入法也会工作，所以最好的办法是将平板输入法切换到英文。teamviewer 的远程光标很碍事，也要关掉；鼠标滚轮在 teamviewer 中不生效。</p><p>其实能用是能用，但锁屏后连不上这点直接就 pass 了。</p><h3 id="remote-desktop-manager"><a href="#remote-desktop-manager" class="headerlink" title="remote desktop manager"></a>remote desktop manager</h3><p>支持多种协议，包括 ssh，rdp 等等。其实协议清单里面也有 teamviewer，但。。。也就能记个账号密码，没法连接。</p><p>跟官方的 rdp 应用比，这玩意能自定义分辨率；但实际用起来，最主要的问题就是：慢！画面好久才能刷新出来，按一下反应半天。同样是 rdp 协议，怎么你就这么拉跨呢？</p><hr><p>而其他的工具，我能想到的包括 moonlight、steam 等等，但都需要后台另外装/开东西，我就没试，以后有机会再说吧。</p><p>总结两个字：垃圾！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前说过，我的笔记本这周送修了。&lt;/p&gt;
&lt;p&gt;于是我这周就没有外出的笔记本用了。。。难不成我摸鱼的时候就只能呆呆的看几本杂志？我拒绝！&lt;/p&gt;</summary>
    
    
    
    <category term="IOS" scheme="https://zbttl-github-io.vercel.app/categories/IOS/"/>
    
    
    <category term="rdp" scheme="https://zbttl-github-io.vercel.app/tags/rdp/"/>
    
    <category term="teamviewer" scheme="https://zbttl-github-io.vercel.app/tags/teamviewer/"/>
    
    <category term="键鼠" scheme="https://zbttl-github-io.vercel.app/tags/%E9%94%AE%E9%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>笔记本送修记</title>
    <link href="https://zbttl-github-io.vercel.app/bi-ji-ben-song-xiu-ji/"/>
    <id>https://zbttl-github-io.vercel.app/bi-ji-ben-song-xiu-ji/</id>
    <published>2021-07-03T16:00:00.000Z</published>
    <updated>2021-07-05T17:26:50.663Z</updated>
    
    <content type="html"><![CDATA[<p>故事要从四个月前说起。</p><p>睡前惯例玩一下笔记本。二三月份的南宁阴气还很重，所以我蒙着被子趴着敲键盘，然后不知不觉就睡着了。</p><p>睡梦中迷迷糊糊听见「啪」一声，我一下就爬了起来，发现自己压在笔记本上面，这时候笔记本还开着盖，估计是自己翻了个身导致这玩意开合过度发生异响，感觉没啥大问题我就没在意。</p><p>彻底睡醒以后发现笔记本合不稳了，转轴那里缝隙变大了，盲猜可能是转轴裂了。这种人为的事故估计联想不保吧。。。那就先凑合着用。</p><p>结果随着时间推移，转轴的裂缝越来越大，到了上周屏幕右下角因为外壳开裂受到挤压都变黄了一块，再这么下去整块屏幕都要赔进去，没办法，想办法修一下吧。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210625_093019119.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210625_093012086-tuya2.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210625_064558539-tuya2.jpg"></p><p>先确认了一下，小新 pro13 是整机两年保修，不确定的话在联想微信小程序「联想会员中心」里面注册一下机器就能看到了。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Screenshot_20210706-001110.png"></p><p>虽说是半人为的损坏（还是要狡辩一下 2333，小新 pro13 的转轴强度确实不高而且开合角度小，要是换成我同学那个 16 年的联想 air，我在床上这一通操作估计没啥问题，那台开合角度比我这个大多了），我还是祈望在保修期内减免一定的维修费用，如果不是整机保修而是类似我 hp 暗影精灵那种主要部件保修两年，那我不如直接交给电科。虽然那台暗影精灵不是因为外壳而是因为烧了主板和硬盘，离保修期 2 年结束还有两个月享受到了免费售后，我的电子设备们真是命运多舛啊2333</p><p>另外我还搜到了这篇文章：<a href="https://post.smzdm.com/p/754042/">如何修复摔坏的笔记本，换壳、换屏、升内存、加固态——联想小新潮5000_笔记本内存_什么值得买</a></p><blockquote><p>检测完毕后，可以<strong>咨询</strong>下JD的小姐姐，京东买的笔记本有个特点，保修是<strong>按部件</strong>保的，打个比方即使我的屏幕是因为自己摔坏的，<strong>其他部件</strong>日后出现非人为故障，<strong>仍然可以进行保修</strong>。大致了解了一下，屏幕这么明显的人为损坏肯定是保不了，但是外壳的损伤，对方可以为我做个免费更换。某宝查了下价格，同类型的外壳大概<strong>50</strong>一个面，JD自己保修估计成本更低，看来京东方面应该是在计算成本后做了顺水人情，同时争取给客户留个好印象<img src="https://res.smzdm.com/images/emotions/189.gif" alt="如何修复摔坏的笔记本，换壳、换屏、升内存、加固态——联想小新潮5000"> 。</p><p><strong>PS.**外壳保修要注意千万</strong>不能脱落<strong>，只要外壳部分还是</strong>完整<strong>的一个整体，就可以按</strong>变形<strong>走</strong>免费保修<strong>，如果一不小心</strong>分离<strong>了，那么就只能走</strong>付费维修**，一个面大概150，有一定动手能力的建议某宝买自己来换，这个东西没什么技术含量。</p></blockquote><p>我这个从外观看也只是变形的说。</p><p>接着，先在京东 app 上填售后单。2 小时后就收到了东哥的客服电话，比较值得在意的地方就是客服小姐姐让我选是送回京东还是在当地的联想授权维修点维修。上一次 hp 的售后我就直接交给了南湖的 hp 授权维修部，但这次。。。我判断这种半人为的损伤现场送修的话联想可能就直接开价了，如果我拒绝了估计就让我直接扛回家；而走京东的话，毕竟我已经送过去了，来来回回的，可能他就懒得开价或者不会开价那么高？总之是我的臆测，正好第二天我有东哥的快递，客服答应让快递员顺手免费送这一程，等于我去的半程运费也免了，那就这样吧。</p><p>送过去是上周六，虽然只是机子有问题，但客服叫我把电源也送回去，正好我手里箱说全，干脆一起塞进去。送修前先拍张照，录个视频，说明这台电脑屏幕大概是好的，万一送过去屏幕炸了，那可不是我的锅（</p><p>然后开始了漫长的等待，到了前天（周五），终于给我来了电话，开口就说已经修好了，绝口没有提钱的事，nice！然后到了今天，这台电脑就送回来了。</p><p>检查了一下，确实修好了，不过只修了 a 面加转轴，我之前以为 c、d 面也会换的（有点点变形）。转轴那里的胶都没撕，屏幕部分变黄的那一块也恢复了，万幸并没有被压到漏液。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210705_170755605-tuya2.jpg"></p><p>来来回回，送过去 5 天，送回来 2 天，加起来七天。值得一提的是，我爸之前的某米老人机屏幕坏了送回京东修，也是七天送回来。所以，七天这个时间跨度，是不是可以命名为「京东速度」（</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;故事要从四个月前说起。&lt;/p&gt;
&lt;p&gt;睡前惯例玩一下笔记本。二三月份的南宁阴气还很重，所以我蒙着被子趴着敲键盘，然后不知不觉就睡着了。&lt;/p&gt;</summary>
    
    
    
    <category term="流水账" scheme="https://zbttl-github-io.vercel.app/categories/%E6%B5%81%E6%B0%B4%E8%B4%A6/"/>
    
    
    <category term="流水账" scheme="https://zbttl-github-io.vercel.app/tags/%E6%B5%81%E6%B0%B4%E8%B4%A6/"/>
    
    <category term="lenovo" scheme="https://zbttl-github-io.vercel.app/tags/lenovo/"/>
    
  </entry>
  
  <entry>
    <title>xbox series S 使用体验 </title>
    <link href="https://zbttl-github-io.vercel.app/xbox-series-s-shi-yong-ti-yan/"/>
    <id>https://zbttl-github-io.vercel.app/xbox-series-s-shi-yong-ti-yan/</id>
    <published>2021-06-17T16:00:00.000Z</published>
    <updated>2021-07-05T11:28:17.963Z</updated>
    
    <content type="html"><![CDATA[<p>半个月前买的小钢炮，新特性也摸得得差不多了，就写一下使用体验呗。</p><p>在本地的店铺以 2750 入手的，加上花呗的一个点提现费，差不多花了 2777（分期给马老板的钱就不算进去了）。虽然说差不多这个时候买的话国行也应该到手了，2300 还免息便宜不少呢，而且还提前把后门放回来了，但上次 xbox one s 当国行勇士的体验实在是太提心吊胆了，所以这次就算贵一点也认了（总不能还能当外服勇士吧）。</p><h2 id="初体验"><a href="#初体验" class="headerlink" title="初体验"></a>初体验</h2><p>拿到手。。。感觉盒子还是挺大的，比 xbox one S 的盒子小一点点而已。体积是小挺多，但也没有我想象中可以随便带出去这种程度，比我的联想小新 pro13 还略重一点。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210628_144035928-tuya2.jpg"></p><p>刚开机就感觉加载速度起飞，特别是开 apex，那个动画速度，一瞬就过去了。。。。apex 还是装在外置硬盘里的。</p><h2 id="游戏表现"><a href="#游戏表现" class="headerlink" title="游戏表现"></a>游戏表现</h2><p>到目前为止我的游戏体验：</p><ol><li><p>有飞跃性提升的：cod15（xo 版）、<del>cod17（xs 版）</del>极限竞速地平线 4</p><p>cod17 本世代的分屏是个灾难（武器贴图消失，甚至瞄准的时候枪模都没了；画面模糊简直重返上上世代），而购买了次时代版本以后，分屏变为可玩，且有了光追后画面体验感大幅上升；cod15 我曾经吐槽过三人无法分屏，但放到次时代主机上就可以了。但注意，cod17 只有 xs 强化版有这种飞跃，普通版表现和在 xbs 上半斤八两。另外似乎从普通版升级到次时代版要比直接买次时代版便宜（欧元区买升级包只需花费 40 元左右，而 10 美元的差价约合人民币 60 元）。**(7.4 更新）**将 fh4 得分上调！因为 fh4 加载上时间的缩短感知太明显了，xos 上冷加载差不多要五分钟，而 xbs 上差不多一分钟就好了，更别提还有快速恢复功能的加持，fh4 这种开放性赛车游戏我就喜欢趁思考的碎片时间玩一下，这种情况下加载时间缩短给体验上的提升是飞跃性的。</p></li><li><p>大幅提升，但有遗憾：apex（xo 版）、cod17</p><p>apex 到现在都没有出 xs 专版，但可以明显感受到加载速度的提升，贴图质量也有大幅改善，但是。。。apex 第九赛季开始的时候，曾经有帧数和延迟面板显示字体错位的问题，在我 xbox series S 到手之前，本世代那边就已经修复了；但我把硬盘插上次时代主机这边，这个 bug 就又出现了，直到现在都还没修。**(7.4 更新）** 我把 cod17 的 xs 评级下调了，因为分屏下天空闪屏和准心消失的问题还是时长发生，比 xbox one 版好得多，但相比前几个版本的 cod，毋庸置疑的有退步。另外 cod17 也是少见的几个不支持 xbox 快速恢复的游戏。 </p></li><li><p>有 xs 版，但感知没那么强：<del>极限竞速地平线 4、</del>命运 2</p><p>命运 2 我感受不到啥提升（可能帧数有提升，但非竞技类 fps，我感受不到）；地平线 4 的贴图感受其实是有大幅进步的（毕竟 xos 显存很少），但其实草地的模糊感还是可以感受得出来；另一点就是光追，实际上，上一代主机上 fh4 就实现了效果不错的软光追，因此本身感知很强的光追到 fh4 这里感受就没那么强了。</p></li><li><p>没有 xs 版，依靠机能和技术有提升，但感知没那么强：tf2</p><p>tf2 吃到了 fps boost 的红利。但重生对游戏的优化很到位，导致我并不太感受得出差距。</p></li><li><p>完全没有改善：cod16</p><p>现在的 cod16 bug 成堆，大战场要删一堆数据包才能玩；分屏武器枪模消失，换到 xss 上没有任何改观。</p></li></ol><h2 id="外置硬盘、智能分发"><a href="#外置硬盘、智能分发" class="headerlink" title="外置硬盘、智能分发"></a>外置硬盘、智能分发</h2><p>接下来是「一捧一踩」：</p><p>好的是，经过上时代 xbox 分区处理后的固态硬盘，可以直接插到新的次时代主机上使用，兼容性良好，里面原来有的游戏「一些」也可以直接打开玩。fps boost 和自动 hdr 功能也可以照常开启。</p><p>为啥说是「一些」呢？</p><p>这就要大批特批软软的「智能分发」了：</p><p>如果这个游戏你有买 xs 版，或者你是 xgp 会员且这个游戏有次时代版的话，就会提示你更新，不更新就进不去游戏。</p><p>但 xs 版只能在内置空间内装啊！或者买微软的死贵储存卡。300 多 g 的空间，已经很拮据了，就想着把一些 xs 版感知不强的游戏用本世代版替换，放在外接 ssd 里面，还可以 xos 和 xss 一起用，结果这下一搞，没辙了。</p><h2 id="快速恢复"><a href="#快速恢复" class="headerlink" title="快速恢复"></a>快速恢复</h2><p>又是一个值得表扬的功能。</p><p>令人惊叹的并不只是快速恢复带来的加载时间上的缩短，更重要的是快速恢复适用性极广，无论是放在内置硬盘还是外置普通 ssd，是 xo 版游戏还是 xs 版游戏，都可以吃到快速恢复带来的红利；甚至之前预测到「快速恢复可能是利用内存，所以彻底关机后快速恢复功能就会失效」，最后实验出来结果并不是这样，除非是加载出错，否则关不关机都不影响快速恢复功能的启动。</p><p>但，我这个月还是遇到过几次，快速恢复出来的游戏，几个按键失灵（比如快速恢复出来的 fh4，打不开地图）。但出现概率并不高，这得微软还得继续做适配。</p><p>而且在如此广泛的支持下，还是有几个游戏不支持快速恢复，比如说 cod，这就完全是厂商的锅了，动视出来挨打！</p><h2 id="配套设备"><a href="#配套设备" class="headerlink" title="配套设备"></a>配套设备</h2><p>我同学家的 x9100h 就基本能完美支持 xss 120fps、hdr 这些特性了。但要注意几点：</p><ol><li>要插到 hdmi 3 口上才能支持完整特性；</li><li>要开启一些选项才能选到 120fps；</li><li>xss 无法把 120fps 和 4k 选项一起开启，只能二选一；因此，其实一根 hdmi 2.0 线足矣，不需要最新标准 hdmi 2.1 的线。</li></ol><p>具体操作，可以参考<a href="https://www.bilibili.com/video/BV1qV41127QY">索尼X9000H更新HDMI2.1固件，4K120Hz/eARC等功能一览，含X9088H/X9100H_哔哩哔哩_bilibili</a>。</p><h2 id="其他优缺点"><a href="#其他优缺点" class="headerlink" title="其他优缺点"></a>其他优缺点</h2><ol><li>因为内存大了，某些游戏打不动字（打字很卡）的问题也解决了。</li><li>我购买的是日版，听说有手柄信号和 5g wifi 冲突的问题，但我并没有遇到（我家路由器是 ac86u）。不过有一次手柄确实无法响应主机，接着我把旧的 xos 手柄连接新主机，这个旧手柄倒是能正常操作；然后我重启了一下机子，用 type-c 线把新手柄接到 xss 上，过了一会，好了，很玄学。</li><li>但无线网卡相比 xos 那个弱鸡网卡好了不少，起码无线状态下开加速器我打 cod16 战区没遇到其妙的丢包问题了。</li></ol><hr><p>总体来说，大体满意，我的几个需求 xss 大体都能满足，就是体积再小一点就更好了。</p><p>另一个我好奇的地方是，xs 版和 xbox one X 强化是两个不同的概念，之前有几个游戏 bug 在 xss 这边测试出来就应该是 xos 配置不足的锅，换成 xox 应该也能解决，何况 xox 更便宜，自带的硬盘也更大。去掉光追这一点，如果不是追求便携性，以及这两年少的可怜的独占，xox 和 xss 谁会是更好的选择呢？</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;半个月前买的小钢炮，新特性也摸得得差不多了，就写一下使用体验呗。&lt;/p&gt;
&lt;p&gt;在本地的店铺以 2750 入手的，加上花呗的一个点提现费，差不多花了 2777（分期给马老板的钱就不算进去了）。虽然说差不多这个时候买的话国行也应该到手了，2300 还免息便宜不少呢，而且还提前把后门放回来了，但上次 xbox one s 当国行勇士的体验实在是太提心吊胆了，所以这次就算贵一点也认了（总不能还能当外服勇士吧）。&lt;/p&gt;</summary>
    
    
    
    <category term="Game" scheme="https://zbttl-github-io.vercel.app/categories/Game/"/>
    
    
    <category term="xbox" scheme="https://zbttl-github-io.vercel.app/tags/xbox/"/>
    
    <category term="xbox Series S" scheme="https://zbttl-github-io.vercel.app/tags/xbox-Series-S/"/>
    
    <category term="评测" scheme="https://zbttl-github-io.vercel.app/tags/%E8%AF%84%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>斐讯 n1 折腾记录</title>
    <link href="https://zbttl-github-io.vercel.app/fei-xun-n1-zhe-teng-ji-lu/"/>
    <id>https://zbttl-github-io.vercel.app/fei-xun-n1-zhe-teng-ji-lu/</id>
    <published>2021-04-01T16:00:00.000Z</published>
    <updated>2021-04-05T19:51:35.747Z</updated>
    
    <content type="html"><![CDATA[<p>本来想等自己有钱的时候再买一个性能强悍啥都能干的 x86 软路由的。。。</p><p>然而最近折腾加速器，实在受不了这帮硬路由的憨憨性能了：明明 ac86u 性能还凑合但内存只有 512m 结果刷了梅林各种问题各种崩，其他 mt7621 就更不用说了。我也考虑其他设备，比如 r2s，s905x 盒子之类的，但</p><ul><li>r2s 体积小但性能比 n1 还要差；</li><li>s905x 盒子就只能做软路由，做电视盒子差点。</li></ul><p>所以最后决定还是先买个 n1 顶着。以后换成高端一线的虚拟机软路由，再拿来当电视盒子。</p><h2 id="开箱"><a href="#开箱" class="headerlink" title="开箱"></a>开箱</h2><p>购入渠道有两个，拼夕夕和转转（淘宝系禁 fx），我同学 1 月初在转转买了个仅拆箱的 k2p a1 才用了 180 搞得我有点心动（现在这玩意最少要 220 起步，也是个理财产品），但我看了一眼转转的 n1 ，当时没有同城同省，而且成色不知道，带不带码可能也不知道，算了，省省直接拼夕夕了，带盒子不带遥控器准新机 155 到手。</p><p>买到手的时候才二月份，但那时一直没得空研究，所以一直拖到现在。现在到同一家店看，涨到 165 了。。。真-理财产品。</p><p>到手的 n1 成色尚可</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210402_143256218.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210402_143305864.jpg"></p><p>不过还是有两个令人遗憾的地方：</p><ol><li><p>盒子上没有 s/n 码，也就无法验证是否三码合一了：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210402_143321918.jpg"></p></li><li><p>带的电源是 12v 1.5a 的，肯定不是 n1 原装，多半是 k2p a2 原装。</p></li></ol><p>当时这俩不大不小的问题搞得我想退了。。。算了，先试试，跑个分备个份，就算后续要退也有办法还原。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>相比于刷路由器，刷 n1 要准备的东西多多了~</p><ol><li>hdmi 线</li><li>显示器</li><li>笔记本 / 台式机 / 平板</li><li>一个口为 USB-A 的线</li><li>网线一根</li><li>（可选）一个中继路由</li><li> 一到两个 U 盘 / tf + 读卡器，一个容量最好是 8g（可选），另一个要 16g 以上</li><li>（可选，要备份系统的话必选）usb hub</li><li>鼠标和键盘</li></ol><p>「一个口为 USB-A 的线」是因为 n1 上的 usb 接口是两个 USB-A 口。而这根线的另一头是啥就取决于你的笔记本 / 台式机 / 平板有什么口。大多数笔记本 / 台式机都只有 USB-A 口，这就是许多卖家捆绑销售双头 USB-A 的原因；但新一代的笔记本，特别是轻薄本都标配了两个 usb type-c 口；而旧一点的平板用的是 micro-usb 口，这两种线大家手上都不少，这种情况下就不用买卖家的双公口 USB 线了。不过平板有可能遭遇供电不足的情况，不太建议使用；有种说法是最好用 usb 2.0 线刷，但我用 type-c 3.1 口刷也没问题。</p><p>用中继路由的原因是我的笔记本都是靠无线连接路由器的，路由器本身离设备比较远无法通过有线连接；而进入 fastboot 的时候又需要 n1 和笔记本在同一个子网，所以就需要一个中继路由才能实现。</p><p>还有这个 hub，在一种情况下是必选的，待会我会提到。</p><h2 id="刷点啥呢"><a href="#刷点啥呢" class="headerlink" title="刷点啥呢"></a>刷点啥呢</h2><p>n1 可以刷那么几个 rom：</p><ul><li>openwrt</li><li>armbian</li><li>yyf</li><li>等等等</li></ul><p>主要是我只用得着我提到的这三个。</p><p>前两个可以通过 u 盘直接引导。yyf 只能直接刷入。</p><p>yyf 主要用来看电视，openwrt 是做软路由，armbian 则是做纯粹的 linux 开发系统。</p><p>openwrt 能拿来跑个分，armbian 能拿来备份 rom。</p><p>所以我们大致的刷机路线就是先刷 openwrt 做测试，如果盒子发热不严重并且跑分正常，那就暂时不退了，直接用 armbian 做个备份，之后刷入 yyf 玩一会电视功能，最后刷入 openwrt 做软路由。</p><h2 id="测试-备份"><a href="#测试-备份" class="headerlink" title="测试 + 备份"></a>测试 + 备份</h2><h3 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h3><p>要想从 u 盘启动，必须先把机器降级到 2.19 版本。我的 n1 拿到手就是 2.22 版本，铁定得降级。</p><p>推荐使用<a href="https://www.right.com.cn/forum/thread-340279-1-1.html">[2018-9-28]斐讯T1和N1降级恢复线刷功能 , adb脚本工具 - 斐讯无线路由器以及其它斐迅网络设备 - 恩山无线论坛 - Powered by Discuz!</a>，这玩意可以通过网络进行降级，不需要因为驱动问题大费周章。不过得安装 adb，请出老伙计 chocolatey：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install adb -y</span><br></pre></td></tr></tbody></table></figure><p>给 n1 插上鼠标，通过中继路由或者在 n1 界面中登录无线网络，点击四次版本号开启开发者模式，因为此时在官方系统中可以直接通过 wifi 连接自己的路由器，所以还暂时用不到中继路由。</p><p>n1 和电脑同时连上路由后，按提示降级即可。降级完毕后，官方系统中显示的估计版本还是 2.22，但实际上内部固件版本已降级。</p><p>之后，去 <a href="https://t.me/tony_cn">Tony 的交流群</a>中，找一个叫做「N1盒子激活U盘启动」的软件，解压密码就是 Tony。按照提示开启 u 盘启动即可。</p><h3 id="给-u-盘刷入-openwrt"><a href="#给-u-盘刷入-openwrt" class="headerlink" title="给 u 盘刷入 openwrt"></a>给 u 盘刷入 openwrt</h3><p>有三个工具可以用</p><ul><li>etcher</li><li>USB Image Tool（usbit）</li><li>Win32DiskImager</li></ul><p>这几个都能通过 chocolatey 安装。etcher 的界面不错，另外就算 img 打包在压缩文件中，它也能准确识别并刷入。但这玩意有个 bug，挺多时候进度条跑完会报错，但其实已经刷进去了。</p><p>usbit 需要手动用解压 img.xz 压缩包的内容（内容是一个 img 文件），而且需要先 reset 再刷入。但好处是不会报错，而且刷写速度还比 etcher 快。</p><p>Win32DiskImager 有中文。</p><p>自己选择吧。</p><p>openwrt 的镜像可以从这些地方获取：</p><ul><li><a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=981406&amp;extra=page=1&amp;filter=typeid&amp;typeid=21">[2020-10-18]★46+o版， S905x3、N1、贝壳云、我家云等op固件 - 斐讯无线路由器以及其它斐迅网络设备 - 恩山无线论坛 - Powered by Discuz!</a></li><li><a href="https://www.right.com.cn/forum/thread-4055451-1-1.html">[2021-01-31] 52+、52+O S905x3(含x2)、S922x、贝壳云、我家云、微加云等OP固件 - OPENWRT专版 - 恩山无线论坛 - Powered by Discuz!</a></li><li><a href="https://www.right.com.cn/forum/thread-4076037-1-1.html">[2021-03-28] 56+、56+O S905x3、S922x、贝壳云、我家云、微加云等OP固件 - OPENWRT专版 - 恩山无线论坛 - Powered by Discuz!</a></li></ul><p>固件有 +o 和 + 两种版本，不同地方在 +o 用的是旧版本 5.4.93 内核，新版本用的是 5.10 新版本内核（以前还有个区别，那就是 +o 用的 flow offloading 加速而 + 版本用 sfe 加速，但现在统一都用 flow offloading 加速了）。新版本内核有个弊端：</p><blockquote><ol><li>amlogic已支持 5.10内核，但是需要从 u盘或 tf卡启动，可以刷入emmc(仅数据分区），boot分区还是只能在 u盘或tf卡上面。</li><li>  5.10内核的副作用是 905x3、922x等机型 hdmi 绿屏、启动时间较长、mac地址会发生变化等</li></ol></blockquote><p>还有 + 版本似乎界面炫酷一点。。。不在意界面的话用 +o 版本就好了（虽然下面测试的截图我用的是 + 版本）。</p><h3 id="进入-openwrt-web-并跑分"><a href="#进入-openwrt-web-并跑分" class="headerlink" title="进入 openwrt web 并跑分"></a>进入 openwrt web 并跑分</h3><p>刷入后，开 n1 前插入 u 盘启动，顺利的话屏幕显示是这样子的</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210212_203219240.jpg"></p><p>此时敲一下回车就会进入熟悉 linux 命令提示界面。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210403_193142103.jpg"></p><p>同时能看到一个叫 openwrt 的 wifi 信号被发射出来，连接上去，并进入 192.168.1.1，就能看到 openwrt 的 web 界面。</p><p>but。。。这里有一个非常神秘的现象会出现：</p><p><strong>如果你刷入 openwrt 的 u 盘大小不是 8g 的话，就没法正常的启动</strong>，具体表现在：</p><ul><li>不断弹出 <code>reset high-speed xxx</code> 的错误提示；</li><li>linux 命令提示界面的提示符后面带一个 none 的标记</li><li>没有 wifi 信号被发射出来</li></ul><p>具体界面类似于这样：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210213_091609125.jpg"></p><p>我估计是因为 n1 的 rom 是 8g 的所以也要求启动 u 盘的容量也是 8g。。。</p><p>但，其实还有一个解决方案，那就是搭配 usb-hub 使用。hub 接上 n1，u 盘再接上 hub 就能正常识别了。话说回来，我想到 hub 的原因，源自于我一开始以为是供电问题，于是拿了一个带供电口的 hub 接上。果然 16g 和  32g 的 u 盘就都能正常启动 openwrt，后续拔掉供电后反复启动都能够正常工作，拔掉 hub 就立即歇菜。甚至就算是 8g 卡，第一次进入可能也要和 usb-hub 配合连接才能成功进入。具体原因我到现在都还没想清楚。。。</p><p>在 web 来到系统 -&gt; ttyd 终端，或者直接在 n1 的 linux cli 中输入测试指令都可以。</p><p>测试命令参照 <a href="https://www.youtube.com/watch?v=utWlY8_rpLg&amp;t=223s">(50) 2021今年买啥软路由？新年度软路由测试总结与推荐！！！ - YouTube</a>，一共有两个：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">coremark</span><br><span class="line">openssl speed -evp aes-256-gcm</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/chrome_j3W1VqCOim.png"></p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/chrome_QH3Ptg9jk9.png"></p><p>对下效果：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210404021521.png"></p><p>差不多哦。。。</p><p>而且持续运行时机子并没有严重发热。看起来没啥问题。</p><p>最后最好使用 <code>poweroff</code> 命令关机，再进行下一步。</p><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>备份就需要刷 armbian 了，因为 openwrt 里面没带有全盘备份工具。</p><p>因为是做全盘备份，所以 8g 的 u 盘那肯定是木大了，就必须得 16g u 盘 + usb-hub 一起上。</p><p>armbian 参考文章：</p><ul><li><a href="https://yuerblog.cc/2019/10/23/%E6%96%90%E8%AE%AFn1-%E5%AE%8C%E7%BE%8E%E5%88%B7%E6%9C%BAarmbian%E6%95%99%E7%A8%8B/">斐讯 N1 - 完美刷机 Armbian 教程 | 鱼儿的博客</a></li><li><a href="https://www.right.com.cn/forum/thread-510423-1-1.html">Armbian-5.77 on N1 , so far so good - 斐讯无线路由器以及其它斐迅网络设备 - 恩山无线论坛 - Powered by Discuz!</a></li></ul><p>备份 - ddbr 参考文章：</p><ul><li><a href="https://luotianyi.vc/1346.html">斐讯 N1 探索手记 #2 – 使用 ddbr 恢复官改系统 – Luminous’ Home</a></li></ul><p>同样，armbian 有这么几个版本可选：</p><ul><li>参考文章的 5.77 版</li><li>上面提到的 openwrt 网盘中的 5.4 和 5.10 内核两种（两种内核的区别我在 openwrt 那里提过了）</li></ul><p>另外还有 dtb 上的讲究。dtb 可以视为 armbian 驱动一类的东西，使用正确的 dtb 能让 armbian 系统获得更好的性能。不过既然我们只是用来备份系统的，其实没啥讲究，可以略过。dtb 有两种选择：参考文章 2 的 <code>meson-gxl-s905d-phicomm-n1-xiangsm.dtb</code> 和 openwrt 那边的 <code>N1_35+o_dtb_fixspeed</code>。使用方法参见参考文章 2，放入改名指向，一气呵成：</p><blockquote><ol start="4"><li>此时，armbian 用的是 kdahas-vim 开发板的 dtb，所以不完全适配 n1，一些设备不工作，这是正常的，我们只需修改 /boot/uEnv.ini 指向 n1 的 dtb 即可。<pre><code>\- 修改前的 uEnv.ini：    dtb_name=/dtb/meson-gxl-s905x-khadas-vim.dtb\- 修改后的 uEnv.ini：    dtb_name=/dtb/meson-gxl-s905d-phicomm-n1.dtb</code></pre></li></ol></blockquote><p>刷写好接上 hub 和 u 盘开机。如果一切顺利的话，需要先新建一个密码和用户名才能成功进入系统。然后输入 ddbr，按照提示备份：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210404_194952826.jpg"></p><p>备份完输入 <code>poweroff</code> 关机。把 u 盘插回电脑，下载并打开 diskgenius，在 rootfs 分区的 ddbr 文件夹里找到备份拖出，保存即可。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210405020131.png"></p><p>话说回来，如果第一次进入系统因为各种原因报错，可能需要重新制作 armbian u 盘，因为刚开始制作完后 rootfs 其实只分到 1g 多一点大小，只有成功第一次启动成功才会把分区扩大到整个 u 盘，没有成功执行这一步的话，后面再怎么启动可能都无法成功执行了（</p><h2 id="刷入-yyf-系统"><a href="#刷入-yyf-系统" class="headerlink" title="刷入 yyf 系统"></a>刷入 yyf 系统</h2><p>用 win7 成功几率会高的多，而且 vmware 可以指定使用 usb2.0 的驱动，usb2.0 口刷机成功概率更高。不过我最后还是在 win10 实机下用 usb3.0 的线刷成功了（</p><p>参考文章：</p><ul><li><a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=318044&amp;extra=page=1&amp;filter=typeid&amp;typeid=21">斐讯天天链 N1 刷机小白教程，大神请无视….. - 斐讯无线路由器以及其它斐迅网络设备 - 恩山无线论坛 - Powered by Discuz!</a></li><li><a href="https://www.jianshu.com/p/105f12a6cecb">斐讯N1盒子开箱、降级、刷YYF固件全记录 - 简书</a></li><li><a href="https://www.jianshu.com/p/87e9813f923f">N1盒子无法进入刷机模式解决办法 - 简书</a></li></ul><ol><li><p>下载 YYFROM-N1-无语音实用版 190420 刷机包。这东西在官网网盘已经失效了，所以我备份了一份到网盘，放到文末；</p></li><li><p>安装 Amlogic_USB_Burning_Tool，建议不要装太新的版本，装 2.16 就好了：<a href="https://androiddatahost.com/mte3d">Amlogic_USB_Burning_Tool_v2.1.6.zip - Android Data Host</a>。2.16 中的一个  libsub-win32 在安装时会附带安装，但需要手动添加到设备管理器：</p><blockquote><p>打开设备管理器，随便选择一个设备。</p><p>操作 - 添加过时硬件</p><p>安装我手动从列表选择的硬件</p><p>选择 libsub-win32 Usb Devices，一路下一步即可</p></blockquote></li><li><p>通过前面提到的降级软件，按照提示进入 bootloader （线刷）模式。在进入 fastboot 前如果接上屏幕的话，会看到画面定格在 n1 的开始画面中。将 usb 线接入靠近 hdmi 一端的 usb 口，连接电脑会发现一个新硬件名为 usb download gadget，但这东西驱动没法自己安装。下一个驱动精灵之类的软件，检查后根据提示安装相应的 Android adb Interface，安装完再接上 n1 的话，会发现在设备管理器中 n1 被命名为 Lemobile Android Device。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-04-06%20032913.png"></p></li><li><p>接下来严格按照步骤走！</p><ol><li>打开 Amlogic_USB_Burning_Tool，加载刷机包，擦除 FLASH 和擦除 Bootloader 前面的 √ 去掉，加载完成点击开始；</li><li>确保 n1 和电脑已通过 usb 线连接</li><li>通过降级软件，进入线刷模式。如果顺利的话，设备已经开始刷写了。稍微晚一点，或者线没接好，Amlogic_USB_Burning_Tool 都可能识别不到设备。</li></ol></li><li><p>刷写成功就可以直接关闭关键拔线重启了。后续可以通过鼠标跳过初始流程，登录家中 wifi 后用刷机包里带的斐讯 app 控制盒子。</p></li></ol><h2 id="盒子资源体验"><a href="#盒子资源体验" class="headerlink" title="盒子资源体验"></a>盒子资源体验</h2><p>再说</p><h2 id="openwrt-刷入-emmc-和体验"><a href="#openwrt-刷入-emmc-和体验" class="headerlink" title="openwrt  刷入 emmc 和体验"></a>openwrt  刷入 emmc 和体验</h2><p>再说</p><h2 id="其他参考文章"><a href="#其他参考文章" class="headerlink" title="其他参考文章"></a>其他参考文章</h2><ul><li><a href="https://pockies.github.io/2019/03/07/phicomm-n1/">我购买了斐讯 N1 做电视盒子，发现它远比想象的… - Pockies | 博客</a></li><li><a href="https://github.com/zisen123/N1-box-bypass-router-tutorial/blob/master/N1-box-bypass-router-tutorial.md">N1-box-bypass-router-tutorial/N1-box-bypass-router-tutorial.md at master · zisen123/N1-box-bypass-router-tutorial</a></li><li><a href="https://post.smzdm.com/p/akm7vk38/">贫民种草指北 篇二：N1 盒子：不谈刷机，只谈使用！_电视盒子_什么值得买</a></li><li><a href="https://www.leeyiding.com/archives/48/">斐讯 N1 烧录 yyf 和 OpenWrt 固件 - LeeYD・Blog</a></li><li><a href="https://ethanblog.com/tips/tv-box-firmware-for-n1.html">N1 刷电视盒子的固件选择 | Ethan’s Blog - 记录和思考</a></li><li><a href="https://www.321002.com/117.html">斐讯 N1 折腾记：降级及刷入官改</a></li><li><a href="https://www.kuqutan.com/1132.html">斐讯 N1 折腾记：运行 Linux 及优化 - 酷趣谈</a></li><li><a href="https://1drv.ms/u/s!AoMoC9XTgpEslq9HsaFw8qlnT0QQ9Q?e=Kg3a9Z">本文资源</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;本来想等自己有钱的时候再买一个性能强悍啥都能干的 x86 软路由的。。。&lt;/p&gt;
&lt;p&gt;然而最近折腾加速器，实在受不了这帮硬路由的憨憨性能了：明明 ac86u 性能还凑合但内存只有 512m 结果刷了梅林各种问题各种崩，其他 mt7621 就更不用说了。我也考虑其他设备，比如 r2s，s905x 盒子之类的，但&lt;/p&gt;</summary>
    
    
    
    <category term="路由器" scheme="https://zbttl-github-io.vercel.app/categories/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
    
    <category term="羊毛" scheme="https://zbttl-github-io.vercel.app/tags/%E7%BE%8A%E6%AF%9B/"/>
    
    <category term="openwrt" scheme="https://zbttl-github-io.vercel.app/tags/openwrt/"/>
    
    <category term="yyf" scheme="https://zbttl-github-io.vercel.app/tags/yyf/"/>
    
    <category term="n1" scheme="https://zbttl-github-io.vercel.app/tags/n1/"/>
    
  </entry>
  
  <entry>
    <title>windows 开启 openssh-server</title>
    <link href="https://zbttl-github-io.vercel.app/windows-kai-qi-openssh-server/"/>
    <id>https://zbttl-github-io.vercel.app/windows-kai-qi-openssh-server/</id>
    <published>2021-03-16T16:00:00.000Z</published>
    <updated>2021-04-01T14:17:25.840Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章是从<a href="https://zbttl.github.io/azure-yang-mao-er/">azure 羊毛（二） | Bao’s 备忘录</a>这里分离出来的。因为我发现给 windows server 2012 开 openssh 的坑远不及于此，这篇按官方教程来的小实践只能算个引子，于是干脆独立出来。</p><p>在 windows 10 专业版上部署通过。</p><p>参考文章：</p><ul><li><a href="https://docs.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse">Installation of OpenSSH For Windows Server | Microsoft Docs</a></li><li><a href="https://stackoverflow.com/questions/16212816/setting-up-openssh-for-windows-using-public-key-authentication/50502015#50502015">ssh - Setting up OpenSSH for Windows using public key authentication - Stack Overflow</a></li></ul><h2 id="安装，配置服务"><a href="#安装，配置服务" class="headerlink" title="安装，配置服务"></a>安装，配置服务</h2><p>安装</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Add-WindowsCapability -Online -Name OpenSSH.Server</span><br></pre></td></tr></tbody></table></figure><p>配置自启</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Service -Name sshd -StartupType 'Automatic'</span><br></pre></td></tr></tbody></table></figure><p>配置防火墙（其实我一开始是像 rdp 这边用图形界面配置的，结果软软的教程居然给了命令，学到了，主要是写教程方便不用截图 - -）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">New-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 999</span><br></pre></td></tr></tbody></table></figure><p>如果用的是默认 22 端口不改其实可以略过这步。咱不习惯用默认端口就是。</p><p>更改默认命令行程序为 powershell</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">New-ItemProperty -Path "HKLM:\SOFTWARE\OpenSSH" -Name DefaultShell -Value "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe" -PropertyType String -Force</span><br></pre></td></tr></tbody></table></figure><h2 id="修改-sshd-config"><a href="#修改-sshd-config" class="headerlink" title="修改 sshd_config"></a>修改 sshd_config</h2><p>sshd_config 位于 <code>C:\ProgramData\ssh\sshd_config</code></p><p>修改端口</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#Port 22</span><br><span class="line">Port 999</span><br></pre></td></tr></tbody></table></figure><p>注释掉旧版密钥路径</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#Match Group administrators</span><br><span class="line">#       AuthorizedKeysFile __PROGRAMDATA__/ssh/administrators_authorized_keys</span><br></pre></td></tr></tbody></table></figure><p>关闭密码登录</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PasswordAuthentication no</span><br></pre></td></tr></tbody></table></figure><h2 id="放入密钥"><a href="#放入密钥" class="headerlink" title="放入密钥"></a>放入密钥</h2><p>将公钥放到 <code>C:\Users\zbttl\.ssh</code>里面，改名为<code>authorized_keys</code>。别说你看到这里都还没公钥。。。</p><p>可能还要修复公钥的权限。微软官方文章使用的是 opensshutils 这个软件，但这个软件去年就被标记为 deprecated，实在要装只能手动安装，可以参考<a href="https://stackoverflow.com/questions/62873521/powershell-opensshutils">openssh - PowerShell OpenSSHUtils - Stack Overflow</a>，而且参考文章 2 中写明不建议装。</p><p>另外两种方法：</p><ol><li><p>直接用 gui 修改权限。右键<code>authorized_keys</code> -&gt; 属性 -&gt; 安全 -&gt; 高级 -&gt; 禁用继承，在弹出的对话框选择「将已继承权限转换」。然后删掉多余权限，留下 system 和自己目前所用账号的权限就行。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210318041441.png"></p></li><li><p>使用命令</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get-acl C:\Users\zbttl\.ssh\authorized_keys | fl</span><br></pre></td></tr></tbody></table></figure></li></ol><p>我也不知道哪个好用，因为我几年前从 linux 那边生成的公钥文件貌似没有权限问题。。。</p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>启动服务</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Start-Service sshd</span><br></pre></td></tr></tbody></table></figure><p>记得登录的是用户名不是 root 而是当前微软账号或者微软本地用户名。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这篇文章是从&lt;a href=&quot;https://zbttl.github.io/azure-yang-mao-er/&quot;&gt;azure 羊毛（二） | Bao’s 备忘录&lt;/a&gt;这里分离出来的。因为我发现给 windows server 2012 开 openssh 的坑远不及于此，这篇按官方教程来的小实践只能算个引子，于是干脆独立出来。&lt;/p&gt;
&lt;p&gt;在 windows 10 专业版上部署通过。&lt;/p&gt;</summary>
    
    
    
    <category term="Network" scheme="https://zbttl-github-io.vercel.app/categories/Network/"/>
    
    
    <category term="windows" scheme="https://zbttl-github-io.vercel.app/tags/windows/"/>
    
    <category term="openssh" scheme="https://zbttl-github-io.vercel.app/tags/openssh/"/>
    
  </entry>
  
  <entry>
    <title>通过 telegram bot 监控设备的远程登录情况</title>
    <link href="https://zbttl-github-io.vercel.app/tong-guo-telegram-bot-jian-kong-she-bei-de-yuan-cheng-deng-lu-qing-kuang/"/>
    <id>https://zbttl-github-io.vercel.app/tong-guo-telegram-bot-jian-kong-she-bei-de-yuan-cheng-deng-lu-qing-kuang/</id>
    <published>2021-03-16T16:00:00.000Z</published>
    <updated>2021-04-05T19:47:59.078Z</updated>
    
    <content type="html"><![CDATA[<p>之前我先后白嫖了 azure 的 windows server，以及做了 zerotier 用于远控，但前者我提过 3389 端口老是被撞，后者要通过密码和 zerotier 网域两重保险，应该够安全了，但毕竟是把我的主用设备暴露出去，还得更安全一点才行。<br>我听说有些脚本可以登录时从 telegram bot 通知所有者，找了一下，ssh 的和 rdp 的都有，那就一起上了。</p><p>工具：</p><ul><li><a href="https://gist.github.com/LM1LC3N7/b6f98611a1cd425cd5e328f90ed697f6">SSH PAM module - Telegram Alert on connect and disconnect, with IP exceptions.</a></li><li><a href="https://github.com/ihatemodels/rdp-telegram-messenger">ihatemodels/rdp-telegram-messenger: Get instant telegram message when a new rdp connection is established</a></li></ul><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>参考：<a href="https://p3terx.com/archives/aria2-telegram-bot-automatically-uploads-to-google-drive-onedrive.html">Telegram Bot 控制 Aria2 下载并自动上传到 Google Drive、OneDrive - P3TERX ZONE</a></p><h3 id="创建-bot，获取-bot-token"><a href="#创建-bot，获取-bot-token" class="headerlink" title="创建 bot，获取 bot token"></a>创建 bot，获取 bot token</h3><p>访问 telegram bot 管理 bot <a href="https://telegram.me/botfather">@botfather</a>，通过三个步骤就能获得一个 bot：</p><ol><li>输入 <code>/newbot</code>，会询问你 bot 起什么昵称（即 tg 窗口左上角的名字），按自己喜好起就行。</li><li>回车后，会询问你 bot 想起一个什么用户名。以后可以通过用户名来直接找到这个 bot。需要以 Bot 或者 _bot 结尾，同时不可以和已有的 bot 名字冲突，所以这里要起复杂一点。</li><li>然后就能从机器人的回答中获得一串字体颜色为黄色的长长一串 token 了。 顺便回答里面 <code>You will find it at</code> 后面的蓝色链接可以直接通向创建的机器人，先过去 <code>/start</code> 一下，以免待会还要回来找。监测几个 ssh/rdp 就要建立几个 bot，可以建一个，做完建立提醒步骤后再建，也可以先一次建一堆（因为我看 botfather 这边有批量建立的功能，不过我没用过）。</li></ol><h3 id="获取-userid"><a href="#获取-userid" class="headerlink" title="获取 userid"></a>获取 userid</h3><p>进入刚刚获取的其中一个 bot，随便输点东西。</p><p>然后在浏览器中访问 <code>https://api.telegram.org/bot&lt;bot_token&gt;/getUpdates</code>，不同的 bot，bot token 不一样，别填错了。</p><p>不出意料的话，result 中 id 后面跟的数字就是账号的 userid。userid 每个 telegram 账号唯一，获取过一次就不用再获取了。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210317195053.png"></p><p>如果 result 为空，证明离上次和 bot 互动时间相隔太久，重新去 bot 里再输点东西就好。</p><h3 id="获取-chatid"><a href="#获取-chatid" class="headerlink" title="获取 chatid"></a>获取 chatid</h3><p>参考：<a href="https://stackoverflow.com/questions/32423837/telegram-bot-how-to-get-a-group-chat-id">Telegram Bot - how to get a group chat id? - Stack Overflow</a></p><p>仅 rdp 登录提醒需要（因为我找到的 rdp 提醒脚本只能在群内提醒，没法在 bot 里面直接提醒）。</p><ol><li><p>把相应 bot 拉入群中。</p></li><li><p>在群中发一句</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/my_id @my_bot</span><br></pre></td></tr></tbody></table></figure></li><li><p>访问 <code>https://api.telegram.org/bot&lt;bot_token&gt;/getUpdates</code>，在 chat 这个代码块的 id，就是 chatid（带个负号的很显眼）</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210317214415.png"></p></li></ol><p>chatid 每个群唯一，所以也获取一次，然后把所有 rdp 监测 bot 拉到同一个群中就好了。就是建群还需要好友配合这点比较烦（实在不行办个小号呗）。</p><h2 id="linux-ssh-登录提醒"><a href="#linux-ssh-登录提醒" class="headerlink" title="linux ssh 登录提醒"></a>linux ssh 登录提醒</h2><ol><li><p>从参考文章 1 中下载或者复制粘贴源码得到 <a href="https://gist.githubusercontent.com/LM1LC3N7/b6f98611a1cd425cd5e328f90ed697f6/raw/d8149521d0287dd854c9917458899229284e567c/telegram-alert.sh"><code>telegram-alert.sh</code></a></p></li><li><p>修改其中的</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Your USERID or Channel ID to display alert and key, create a new bot with @BotFather on Telegram</span><br><span class="line"># Ask to @IDBot for your id (/getid)</span><br><span class="line">USERID="********"</span><br><span class="line"># Create a new bot with @BotFather and start a new discussion with it</span><br><span class="line">KEY="*********:***********************************"</span><br><span class="line">URL="https://api.telegram.org/bot${KEY}/sendMessage"</span><br></pre></td></tr></tbody></table></figure><p>key 就是 bot token，把我们前期准备获取的两个值填进去。</p></li><li><p>把 <code>telegram-alert.sh</code> 放到被检测机 <code>usr/local/bin</code> 里，加权限</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /usr/local/bin/telegram-alert.sh</span><br></pre></td></tr></tbody></table></figure></li><li><p>在 <code>/etc/pam.d/sshd</code> 新增 <code>session optional pam_exec.so type=open_session seteuid /usr/local/bin/telegram-alert.sh</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "session optional pam_exec.so type=open_session seteuid /usr/local/bin/telegram-alert.sh" &gt;&gt; /etc/pam.d/sshd</span><br></pre></td></tr></tbody></table></figure></li><li><p>（可选）重启 sshd</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></tbody></table></figure></li></ol><p>如果是开启 SELinux 的系统（如 centos），参考文章后面还有两部，我用的是 debian 就不写上来了。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210318004255.png"></p><h2 id="rdp-登录提醒"><a href="#rdp-登录提醒" class="headerlink" title="rdp 登录提醒"></a>rdp 登录提醒</h2><ol><li><p>从参考文章 1 中下载或者复制粘贴源码得到 <a href="https://raw.githubusercontent.com/ihatemodels/rdp-telegram-messenger/master/rdp-telegram.ps1"><code>rdp-telegram.ps1</code></a></p></li><li><p>修改其中的</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$botToken = 'ADD UR TOKEN HERE'</span><br><span class="line">$chatID = 'ADD UR CHAT ID HERE'</span><br></pre></td></tr></tbody></table></figure><p>把我们前期准备获取的两个值填进去。</p></li><li><p>把 <code>rdp-telegram.ps1</code> 放到被检测机里一个好找的地方，我就直接放到我的 user 目录下了 <code>C:\Users\zbttl</code>。</p></li><li><p>按下 win 键，敲入「事件查看器」并打开</p></li><li><p>找到应用程序和服务日志 -&gt; Microsoft -&gt; Windows -&gt; TerminalServices-RemoteConnectionManager。</p></li><li><p>新一点的系统，比如 win10，登录过 rdp 的话在 Admin 这项里面会有 20521 这项代表已登录成功的日志</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210318002631.png"></p><p>旧一些的，比如 windows server 2012 可能就没有。不过旧系统在 operational 这里会有类似 1149 的记录，同样是代表登录成功。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210318002752.png"></p><p>哪个都可以，参考文章中提到的是前一个，然后我发现前一个如果用微软商店的第三方 rdp（名字就叫远程桌面，系统自带的远程桌面遇到屏幕分辨率不一样的情况会拉跨），日志中没提示，所以自行选择。</p><p>右键其中一个包含上面提到的这两种其中一种的记录选择「将任务附加到此事件」。在打开的窗口中，创建基本任务的名字随便取，然后一路下一步来到「启动程序」这一项。程序或脚本，填入 POWERSHELL；添加参数（可选）填入 <code>rdp-telegram.ps1</code> 所在路径（记得打引号），对我来说那就是 <code>"C:\Users\zbttl\rdp-telegram.ps1"</code></p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210318003547.png"></p></li><li><p>完成后，再次按下 win 键，搜索任务计划程序，打开，在任务计划程序库 -&gt; 事件查看器任务处，就能看到我们刚刚创建的任务。选择那个任务，点右侧的属性，在弹出的窗口中看到常规 -&gt; 安全选项，勾选「使用最高权限运行」。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210318004126.png"></p><p>不进行这一步的话，待会在 telegram 群虽然会弹通知，但通知中各项属性的值都是空：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210318004423.png"></p><p>如果显示操作参数错误的话，把上面「只在用户登录时运行」改为「不管用户是否登录都要运行」，然后输入本机账号密码即可。</p><p>另外还建议在设置 -&gt; 如果此任务已运行，改为「停止现有实例」或者「并行运行新实例」，以免网络原因导致前面的任务运行不成功一直卡着。</p></li><li><p>因为被监控机在国内，要给 telegram 发东西的话，你懂得，记得还得是全局代理才行。</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210318011921.png"></p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>两个问题：</p><ol><li>开 rdp 的时候能看见一个 cmd 框框弹出。万一攻击者看到这个框框眼疾手快关掉了，程序没跑完那通知不就过不来了。</li><li>我不赞成时时刻刻开着全局代理。</li></ol><p>解决方法：</p><p>参考</p><ul><li><a href="http://cn.voidcc.com/question/p-vhmweifz-ve.html">如何在静默/隐藏模式下使用任务计划程序运行powershell脚本？ - VoidCC</a></li><li><a href="https://bohemiangrove.co.uk/run-powershell-through-a-proxy/">Run PowerShell through a Proxy | Tech Blog</a></li></ul><p>在 <code>rdp-telegram.ps1</code> 同目录下新建一个 <code>rdp.js</code> 文件。文件内容类似于：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var wshShell = new ActiveXObject("WScript.Shell"); </span><br><span class="line">wshShell.Run('%SystemRoot%\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -ExecutionPolicy Bypass -File "C:\\\Users\\zbttl\\rdp-telegram.ps1"', 0, false); </span><br></pre></td></tr></tbody></table></figure><p>用火绒的，把这个文件加到火绒的信任区里（这都能被当成病毒文件可还行）。</p><p>修改计划任务。回到上面第七步，找到操作，双击启动程序项，程序与脚本修改为 <code>wscript</code>，添加参数修改为 <code>rdp.js</code> 地址，如 <code>"C:\Users\zbttl\rdp.js"</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210318012544.png"></p><p>修改 <code>rdp-telegram.ps1</code>，加入两行</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[system.net.webrequest]::defaultwebproxy = new-object system.net.webproxy('[代理地址]')</span><br><span class="line">[system.net.webrequest]::defaultwebproxy.BypassProxyOnLocal = $true</span><br></pre></td></tr></tbody></table></figure><p>代理地址这里，格式为 <code>http://127.0.0.1:7890</code> 这样。</p><p>即可。</p><p>（这样设置和全局代理也不冲突，不用担心 loopback）</p><p><strong>（21.4.2 更新）</strong> vps 上的 windows server 中无需关心代理问题，也不需要进计划任务中开启管理员模式运行。不过又出现了限制网址访问的问题。具体来说是这样，开 ie 浏览网页的时候经常就会弹这个网页不在信任列表中，是否加入信任列表并访问。对于我们的 ps1 脚本来说，就需要把其中的 <code>*.telegram.org</code> 加入信任列表中，否则就连不上 api 发不出讯息。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前我先后白嫖了 azure 的 windows server，以及做了 zerotier 用于远控，但前者我提过 3389 端口老是被撞，后者要通过密码和 zerotier 网域两重保险，应该够安全了，但毕竟是把我的主用设备暴露出去，还得更安全一点才行。&lt;br&gt;我听说有些脚本可以登录时从 telegram bot 通知所有者，找了一下，ssh 的和 rdp 的都有，那就一起上了。&lt;/p&gt;
&lt;p&gt;工具：&lt;/p&gt;</summary>
    
    
    
    <category term="Network" scheme="https://zbttl-github-io.vercel.app/categories/Network/"/>
    
    
    <category term="telegram bot" scheme="https://zbttl-github-io.vercel.app/tags/telegram-bot/"/>
    
    <category term="windows server" scheme="https://zbttl-github-io.vercel.app/tags/windows-server/"/>
    
    <category term="计划任务" scheme="https://zbttl-github-io.vercel.app/tags/%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/"/>
    
    <category term="ssh" scheme="https://zbttl-github-io.vercel.app/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>玩一下 zerotier</title>
    <link href="https://zbttl-github-io.vercel.app/wan-yi-xia-zerotier/"/>
    <id>https://zbttl-github-io.vercel.app/wan-yi-xia-zerotier/</id>
    <published>2021-03-14T16:00:00.000Z</published>
    <updated>2021-05-22T06:58:29.501Z</updated>
    
    <content type="html"><![CDATA[<p>之前咱玩过 frp，主要用于远程操作家里的电脑。这东西方便是方便，但用了一段时间看了看日志，好家伙被扫了几百遍。。。。毕竟对外就一个端口一个密码，实话说，不太安全（前几个月还看见 v2ex 因为 frp 导致公司电脑被勒索，后面不知道咋样了）。</p><p>类似的工具，纯粹的 ddns 类工具效果和 frp 一样；wireguard 之类的工具，倒是需要先通过工具连进对等网络才能去链接 rdp 等服务，安全了不少，但缺点是要配置分流；最后我看中了 zerotier，也是需要先通过工具连进对等网络，不过不用配置分流，也有网页端 ui 方便配置，还可以软件本身提供的中心节点，速度慢可以靠自建的 moon 中继节点加速，不太好的地方就是开源不完全，以及另外俩待会我会提到的缺点。都还可以接受，暂时用着呗。</p><p>步骤就偷懒记简略点。</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>参考文章：<a href="https://www.cnblogs.com/Yogile/p/12502311.html">ZeroTier 内网穿透 - Yogile - 博客园</a></p><p>大部分应用场景都是我用手机（安卓）/ 轻薄本连回家中的游戏本，所以先尝试把他们连起来。</p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>安卓端直接通过 <a href="https://play.google.com/store/apps/details?id=com.zerotier.one">google play</a> 下载同名应用。</p><p>windows 可以通过<a href="https://www.zerotier.com/download/">官网下载</a>安装，不过这玩意 chocolatey 里面也有，直接省事一个命令下去：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install zerotier-one -y</span><br></pre></td></tr></tbody></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在 <a href="https://my.zerotier.com/">zerotier 首页</a>注册登录，创建网络（Create a Network）。</p><p>在 Managed Routes 中，按自己的喜好设置一个网段（CIDR 格式，也就是 x.x.x.x/24 这样），待会自己设备可以分配到位于这个网段内的地址。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210315233647.png"></p><p>剩下的就可以不管了，好奇的话可以看参考文章。</p><h3 id="加入"><a href="#加入" class="headerlink" title="加入"></a>加入</h3><p>有两种方法。</p><ol><li>将客户端中的 nodeid 填入 web 端的 Manually Add Member 中；</li><li>使用客户端的 Join Network 功能，将 web 端的 Network ID 填入。</li></ol><p>把手机和游戏本都 join 进来以后，在 web 端里面就能看到它们了。把最左边的勾打上，修改一下 ip 方便记忆。</p><p><strong>（21.5.22 更新）</strong> 把 ipad 也加进来了，但和 android/pc 秒开秒认证不同，ios 我足足开着十来分钟下面的 web 才有认证设备出现（此时屏幕右上角 vpn 图标不出现），认证完再开等了半分钟 vpn 图标才出来，emmm。。。看商店里面，自 4 月份开始的四五条评论都给了 ios 版一星，原因都是获取不到 ip，这应该是个 bug。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210316011848.png"></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>此时 pc 和安卓同时启用客户端，web 这边的 last seen 就会显示 online（像上图一样）。打开安卓的 rdp 客户端，通过刚刚我们修改的 pc 端的 ip（以上图为例，假设下面那一个是 pc 的客户端，没修改 ip 的话，pc 在 zerotier 内网中 ip 就为 <code>10.10.10.181</code>，把这个 ip 输入到 rdp 的地址栏中）。</p><p>如果我没猜错的话。。。应该连不上~</p><p>这就是 zerotier 的<strong>缺点</strong>之一，连上 vpn 后，要过一会才能成功建立链接，这个时间或长或短，应该得要几分钟。几分钟后，再次链接，应该就能上了。如果还不能上，关闭 windows 的防火墙，尝试用 termux ping 一下 <code>10.10.10.181</code>，排查一下是 zerotier 的问题还是自己配置的问题。</p><h2 id="通过路由（ac86u）转发"><a href="#通过路由（ac86u）转发" class="headerlink" title="通过路由（ac86u）转发"></a>通过路由（ac86u）转发</h2><p>相比于让 pc 把所有端口全都交出去，我更希望通过路由器只把我想要放到外网的端口透出去。本节只适用于 merlin 和 merlin 改，官改未知，原厂肯定 8 行。</p><p>参考文章：</p><ul><li><a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=310110">梅林安装zerotier实现内网穿透 - 梅林固件 - 恩山无线论坛 - Powered by Discuz!</a></li><li><a href="https://www.snbforums.com/threads/a-guide-about-installing-zerotier-on-asus-ac68u-router.42648/">A Guide About Installing ZeroTier on ASUS AC68U Router | SmallNetBuilder Forums</a></li></ul><h3 id="安装-zerotier"><a href="#安装-zerotier" class="headerlink" title="安装 zerotier"></a>安装 zerotier</h3><h4 id="安装-opkg"><a href="#安装-opkg" class="headerlink" title="安装 opkg"></a>安装 opkg</h4><p>拿个 u 盘 / tf 卡插路由器上，进入 ssh，输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">entware-setup.sh</span><br></pre></td></tr></tbody></table></figure><p>根据提示，安装  opkg。</p><p>然后安装 zerotier</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install zerotier</span><br></pre></td></tr></tbody></table></figure><h3 id="加入-1"><a href="#加入-1" class="headerlink" title="加入"></a>加入</h3><p>启用 tun</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modprobe tun</span><br></pre></td></tr></tbody></table></figure><p>启动 zerotier</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zerotier-one -d</span><br></pre></td></tr></tbody></table></figure><p>仍旧是两种加入方法，一种是获取 nodeid，填到 web 中</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zerotier-cli info</span><br></pre></td></tr></tbody></table></figure><p>另一种是直接在客户端通过 Network ID 加入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zerotier-cli join &lt;your network id&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h3><p>看一眼自己路由器 INPUT 里有几条规则</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -v -L INPUT -n --line-numbers</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210316023446.png"></p><p>16 条，很好。于是我们下面命令 INPUT 后面这个数字就设为 17。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT 17 -i zt+ -j ACCEPT</span><br></pre></td></tr></tbody></table></figure><p>配置完记得用前一条命令确认一下。</p><p>新建 <code>S90zerotier-one.sh</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /opt/etc/init.d/S90zerotier-one.sh</span><br></pre></td></tr></tbody></table></figure><p>内容为</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#! /bin/sh</span><br><span class="line"></span><br><span class="line">case "$1" in</span><br><span class="line">start)</span><br><span class="line">if lsmod | grep -q tun ;</span><br><span class="line">then echo "mod tun ready" ;</span><br><span class="line">else</span><br><span class="line">modprobe tun;</span><br><span class="line">logger -t "zerotier" -c "modprobe tun started, zerotier-one should start in one minute" -p user.notice ;</span><br><span class="line">exit 0;</span><br><span class="line">fi</span><br><span class="line">if ( pidof zerotier-one )</span><br><span class="line">then echo "ZeroTier-One is already running."</span><br><span class="line">else</span><br><span class="line">echo "Starting ZeroTier-One" ;</span><br><span class="line">/opt/bin/zerotier-one -d ;</span><br><span class="line">echo "$(date) ZeroTier-One Started" | logger -t "zerotier" -c "Started" -p user.notice ; #&gt;&gt; /opt/var/log/zerotier-one.log ;</span><br><span class="line">fi</span><br><span class="line">;;</span><br><span class="line">stop)</span><br><span class="line">if ( pidof zerotier-one )</span><br><span class="line">then</span><br><span class="line">echo "Stopping ZeroTier-One";</span><br><span class="line">killall zerotier-one</span><br><span class="line">echo "$(date) ZeroTier-One Stopped" | logger -t "zerotier" -c "Stopped" -p user.notice ; #&gt;&gt; /opt/var/log/zerotier-one.log</span><br><span class="line">else</span><br><span class="line">echo "ZeroTier-One was not running" ;</span><br><span class="line">fi</span><br><span class="line">;;</span><br><span class="line">status)</span><br><span class="line">if ( pidof zerotier-one )</span><br><span class="line">then echo "ZeroTier-One is running."</span><br><span class="line">else echo "ZeroTier-One is NOT running"</span><br><span class="line">fi</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo "Usage: /etc/init.d/zerotier-one {start|stop|status}"</span><br><span class="line">exit 1</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">exit 0</span><br></pre></td></tr></tbody></table></figure><p>给上权限</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /opt/etc/init.d/S90zerotier-one.sh</span><br></pre></td></tr></tbody></table></figure><p>然后用这个刚写的脚本重启 zerotier</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/opt/etc/init.d/S90zerotier-one.sh stop</span><br><span class="line">zerotier-one -d</span><br></pre></td></tr></tbody></table></figure><p>配置端口透穿</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -d [路由器在zerotierweb中的ip] -p tcp --dport [透穿的端口] -j DNAT --to-destination [透穿服务所在设备的内网ip]:[透穿的服务的内网端口]</span><br></pre></td></tr></tbody></table></figure><p>打个比方：在 web 端中我们设置路由的 zerotier 局域网 ip 为 <code>10.10.10.150</code>；pc 通过 <code>ipconfig</code> 命令获取到自己的内网 ip 为 <code>192.168.1.2</code>，要透穿出去的服务是 rdp，所以内网端口为 3389；为了安全，透到外网的端口不用 3389 而是 4389，则：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -d 10.10.10.150 -p tcp --dport 4389 -j DNAT --to-destination 192.168.1.2:3389</span><br></pre></td></tr></tbody></table></figure><p>如果要透穿出去的内网端口无需和外网端口不一致，那么可以同时透穿多个端口。举个例子，如果你用 teamviewer 提供的默认隧道来远程操纵，这玩意平日里就会整天弹仅用于非商业用途的提示，有时候还会提醒你只能用 x 分钟就强制下线。改为仅在内网提供远程服务器的 lan 模式，隧道通过 zerotier 进行转发连接，就一切正常。teamviewer 只支持使用 5938 端口，不像 rdp 地址栏里面跟个新端口号就算改端口了；同时 teamviewer 在某些情况下还会走 443 和 80 端口，所以这两个端口最好也开放出来。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -d 10.10.10.150 -p tcp --m multiport --dport 5938,443,80 -j DNAT --to-destination 192.168.1.2</span><br></pre></td></tr></tbody></table></figure><hr><p>什么你说有了 rdp 为什么还要用 teamviewer？那我就偏个题：</p><ul><li>teamviewer 除非安装它提供的驱动或者你关闭物理显示器，否则远控的时候屏幕是亮着的；rdp 需要通过微软账户访问，除非你电脑里还有其他账号（而且你远控过来多半还是要操作你原来账号的内容），否则电脑屏幕是黑着的。</li><li>因此，远控的时候如果放个视频什么的，被远控的 teamviewer 设备也会发出声音，rdp 设备就不会。</li><li>rdp 远控不支持使用独显，teamviewer 支持。</li></ul><p>另外，如果先使用 rdp 远控，后续没有回到实机解锁就用 teamviewer 远控，那么 teamviewer 远控时会看到密码输入界面，输入密码后会黑屏。此时按一下 WIN+L 就会恢复正常，不想单独开篇文章记了，就放在这里吧。</p><hr><p>配置完确认一下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -n -t nat -L PREROUTING --line-numbers</span><br></pre></td></tr></tbody></table></figure><p>此时用手机 rdp 通过 <code>10.10.10.150:4389</code> 应该就能访问过来了。（同样开开 zerotier 后要等几分钟）</p><h3 id="配置自启"><a href="#配置自启" class="headerlink" title="配置自启"></a>配置自启</h3><p>编辑文件 <code>/jffs/scripts/nat-start</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /jffs/scripts/nat-start</span><br></pre></td></tr></tbody></table></figure><p>加入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modprobe tun</span><br></pre></td></tr></tbody></table></figure><p>编辑文件 <code>/jffs/scripts/wan-start</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /jffs/scripts/wan-start</span><br></pre></td></tr></tbody></table></figure><p>加入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cru a ZeroTierDaemon "* * * * * /opt/etc/init.d/S90zerotier-one.sh start"</span><br></pre></td></tr></tbody></table></figure><p>新建文件 <code>/jffs/scripts/firewall-start</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /jffs/scripts/firewall-start</span><br></pre></td></tr></tbody></table></figure><p>内容为：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">logger -t "custom iptables" "Enter" -p user.notice</span><br><span class="line">iptables -C INPUT -i zt+ -j ACCEPT</span><br><span class="line">if [ $? != 0 ]; then</span><br><span class="line">iptables -I INPUT -i zt+ -j ACCEPT</span><br><span class="line">#需修改</span><br><span class="line">iptables -t nat -A PREROUTING -d 10.10.10.150 -p tcp --dport 4389 -j DNAT --to-destination 192.168.1.2:3389</span><br><span class="line">iptables -t nat -A PREROUTING -d 10.10.10.150 -p tcp --m multiport --dport 5938,443,80 -j DNAT --to-destination 192.168.1.2</span><br><span class="line">#修改到此</span><br><span class="line">logger -t "custom iptables" "rules added" -p user.notice</span><br><span class="line">else</span><br><span class="line">logger -t "custom iptables" "rules existed skip" -p user.notice</span><br><span class="line">fi</span><br></pre></td></tr></tbody></table></figure><p>标注为需修改到修改到此的中间两句，按使用者个人需求进行替换，在上面配置防火墙 -&gt; 配置端口透穿中，写了多少句，就加多少句进来。</p><h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><p>配置完直接重启检查。通过</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -v -L INPUT -n --line-numbers</span><br><span class="line">iptables -n -t nat -L PREROUTING --line-numbers</span><br></pre></td></tr></tbody></table></figure><p>若是出现了 zt+ 接口和端口透穿相关语句，且</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zerotier-cli info</span><br></pre></td></tr></tbody></table></figure><p>显示正常启用，则配置成功。</p><h2 id="配置-moon-节点"><a href="#配置-moon-节点" class="headerlink" title="配置 moon 节点"></a>配置 moon 节点</h2><p>参考文章：</p><ul><li><a href="https://www.cnblogs.com/Yogile/p/12642423.html">ZeroTier 搭建 moon 服务器 - Yogile - 博客园</a></li><li><a href="https://blog.csdn.net/coldboy258/article/details/93133860">ZeroTier-One配置moon心得_coldboy258的专栏-CSDN博客</a></li></ul><h3 id="安装-zerotier-并加入节点"><a href="#安装-zerotier-并加入节点" class="headerlink" title="安装 zerotier 并加入节点"></a>安装 zerotier 并加入节点</h3><p>我这边装 moon 节点的 vps 系统是 debian，apt 仓库里没有 zerotier。得用 zerotier 官网的官方脚本：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s https://install.zerotier.com | sudo bash</span><br></pre></td></tr></tbody></table></figure><p>默认安装后即启动 zerotier，下面这句命令会报错。不过为了防止万一 zerotier 没启动，还是运行一遍为好</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zerotier-one -d</span><br></pre></td></tr></tbody></table></figure><p>加入方法不再赘述。</p><h3 id="配置-moon-节点-1"><a href="#配置-moon-节点-1" class="headerlink" title="配置 moon 节点"></a>配置 moon 节点</h3><p>进入 zerotier 配置文件目录。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /var/lib/zerotier-one</span><br></pre></td></tr></tbody></table></figure><p>生成 moon.json 签名文件。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zerotier-idtool initmoon identity.public &gt;&gt;moon.json</span><br></pre></td></tr></tbody></table></figure><p>编辑</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano moon.json</span><br></pre></td></tr></tbody></table></figure><p> 修改 <code>stableEndpoints</code>，在里面填上一个 CIDR 地址，比如（如果有 ipv6 需求可看参考文章进行修改）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"stableEndpoints": ["1.2.3.4/9993"]</span><br></pre></td></tr></tbody></table></figure><p>另外，记下此处 id 的值。</p><p>生成 moon 签名文件</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zerotier-idtool genmoon moon.json</span><br></pre></td></tr></tbody></table></figure><p>如无意外会显示：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wrote xxx.moon (signed world with timestamp xxx)</span><br></pre></td></tr></tbody></table></figure><p>将文件考入 moon 节点文件夹中</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/lib/zerotier-one/moons.d</span><br><span class="line">cp *.moon moons.d/</span><br><span class="line">rm *.moon</span><br></pre></td></tr></tbody></table></figure><p>重启服务</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service zerotier-one restart </span><br></pre></td></tr></tbody></table></figure><p>即可。</p><h3 id="连结-moon-节点"><a href="#连结-moon-节点" class="headerlink" title="连结 moon 节点"></a>连结 moon 节点</h3><p>在其他节点（非 moon 节点）使用命令</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zerotier-cli orbit [moonID] [moonID]</span><br></pre></td></tr></tbody></table></figure><p>moonID 是上面让记过的那个。另外，这里的确是输入两遍 moonID，你没有看错。。。</p><p>再输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zerotier-cli listpeers</span><br></pre></td></tr></tbody></table></figure><p>发现多了一个行末为 moon 结尾的行即成功。</p><p>另一个方法是把刚刚获得的 moon 文件考下来放入指定目录，且据说这个方法相对输入命令的方法有一个好处，若是 planet 节点崩掉（虽然可能性很小），通过 moon 节点仍能维持正常工作，输入命令那个方法就不行。但 ac86u 里没有放这个文件的地方，所以我没做尝试。</p><h3 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h3><ol><li><p>如果 moon 节点更换了 zerotier ip，在通过 <code>zerotier-cli listpeers</code> 会发现 moon 节点 ip 缺失。有可能要重新生成 moon 文件，或者停止 zerotier 服务后过若干分钟再启动即可解决。</p></li><li><p>另一个，也是 zerotier 目前<strong>最大的缺点</strong>：安卓不支持使用 moon 节点。apk 没有这个功能，也没有目录放置 moon 节点文件的地方。改用二进制文件呢？发现 termux 没有渠道来安装 zerotier（各个库中没有，官网的安装脚本不支持），手工编译报错：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Screenshot_20210315-194925.png"></p><p>且 issue 中有同样的问题：<a href="https://github.com/zerotier/ZeroTierOne/issues/1218">ZeroTierOne/node at master · zerotier/ZeroTierOne</a></p><p>维护者表示我们不支持除了 apk 以外的安卓使用方法。</p><p>没辙，差评.jpg</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前咱玩过 frp，主要用于远程操作家里的电脑。这东西方便是方便，但用了一段时间看了看日志，好家伙被扫了几百遍。。。。毕竟对外就一个端口一个密码，实话说，不太安全（前几个月还看见 v2ex 因为 frp 导致公司电脑被勒索，后面不知道咋样了）。&lt;/p&gt;
&lt;p&gt;类似的工具，纯粹的 ddns 类工具效果和 frp 一样；wireguard 之类的工具，倒是需要先通过工具连进对等网络才能去链接 rdp 等服务，安全了不少，但缺点是要配置分流；最后我看中了 zerotier，也是需要先通过工具连进对等网络，不过不用配置分流，也有网页端 ui 方便配置，还可以软件本身提供的中心节点，速度慢可以靠自建的 moon 中继节点加速，不太好的地方就是开源不完全，以及另外俩待会我会提到的缺点。都还可以接受，暂时用着呗。&lt;/p&gt;</summary>
    
    
    
    <category term="Network" scheme="https://zbttl-github-io.vercel.app/categories/Network/"/>
    
    
    <category term="zerotier" scheme="https://zbttl-github-io.vercel.app/tags/zerotier/"/>
    
    <category term="rdp" scheme="https://zbttl-github-io.vercel.app/tags/rdp/"/>
    
    <category term="teamviewer" scheme="https://zbttl-github-io.vercel.app/tags/teamviewer/"/>
    
    <category term="端口透穿" scheme="https://zbttl-github-io.vercel.app/tags/%E7%AB%AF%E5%8F%A3%E9%80%8F%E7%A9%BF/"/>
    
  </entry>
  
  <entry>
    <title>服务器探针与流量重置</title>
    <link href="https://zbttl-github-io.vercel.app/fu-wu-qi-tan-zhen-yu-liu-liang-chong-zhi/"/>
    <id>https://zbttl-github-io.vercel.app/fu-wu-qi-tan-zhen-yu-liu-liang-chong-zhi/</id>
    <published>2021-03-10T16:00:00.000Z</published>
    <updated>2021-06-06T10:05:02.543Z</updated>
    
    <content type="html"><![CDATA[<p>之前薅了 azure 的羊毛，想想每个月 15g 流量，还是挂个探针吧。我之前一直在用 <a href="https://github.com/cppla/ServerStatus">cppla/ServerStatus: 云探针、多服务器探针、云监控、多服务器云监控，演示： https://tz.cloudcpp.com/</a>，因为它可以通过定时连接三网官网去探测服务器的延迟，好多画风更棒的探针都没这个功能（但准不准就不知道了，起码每天测出来的数据都是电信爆炸，这个我觉得是准的）。</p><h2 id="ServerStatus-安装"><a href="#ServerStatus-安装" class="headerlink" title="ServerStatus 安装"></a>ServerStatus 安装</h2><p>需要一台安装了 docker ，拥有公网 ip 的探针面板机，我选择装在境内的 tx 云学生机上，等过期了可能就装到家里的 n1 上然后靠 frp 端口透穿（</p><h3 id="面板机配置"><a href="#面板机配置" class="headerlink" title="面板机配置"></a>面板机配置</h3><p>下载配置文件，我习惯在 root 下单开文件夹：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /root/docker-compose/serverstatus</span><br><span class="line">cd /root/docker-compose/serverstatus</span><br><span class="line">wget https://raw.githubusercontent.com/cppla/ServerStatus/master/autodeploy/config.json</span><br></pre></td></tr></tbody></table></figure><p>并修改。默认配置文件中有四个文件块，对应着四个服务器，如果你手上没那么多 vps，可以酌情增减。抽出其中一个文件块来看。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">"username": "s01", #待会在客户端服务器中设置的用户名</span><br><span class="line">"name": "node1", #在 web 面板中显示的节点名</span><br><span class="line">"type": "xen", #在 web 面板中显示的服务器系统类型</span><br><span class="line">"host": "host1", #没啥用，作者在issue中说单纯为了区分用</span><br><span class="line">"location": "cn", #在 web 面板中显示的服务器地区</span><br><span class="line">"password": "USER_DEFAULT_PASSWORD" #待会在客户端服务器中设置的密码</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>设置好后，运行（80 port 太多东西占了，先调到 100 去）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always --name=serverstatus -v /root/docker-compose/serverstatus/config.json:/ServerStatus/server/config.json -p 100:80 -p 35601:35601 cppla/serverstatus</span><br></pre></td></tr></tbody></table></figure><h3 id="客户机配置"><a href="#客户机配置" class="headerlink" title="客户机配置"></a>客户机配置</h3><p>debian 默认带 python2，不用装了。直接下载（假设直接下到 <code>/root </code> 下）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -qO client-linux.py 'https://raw.githubusercontent.com/cppla/ServerStatus/master/clients/client-linux.py'</span><br></pre></td></tr></tbody></table></figure><p>运行：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python client-linux.py SERVER=[宿主服务器ip] USER=[宿主机配置中对应代码块的用户名] PASSWORD=[宿主机配置中对应代码块的密码]</span><br></pre></td></tr></tbody></table></figure><p>如果显示 <code>ipv4 granted</code> 之类的消息，那就证明连接正常。然后做后台运行和自启，请出老朋友 supervisor。</p><p>安装</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install supervisor -y</span><br></pre></td></tr></tbody></table></figure><p>新建文件 <code>tanzhen.conf</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[program:tanzhen]</span><br><span class="line">user=root</span><br><span class="line">command=python client-linux.py SERVER=[宿主服务器ip] USER=[宿主机配置中对应代码块的用户名] PASSWORD=[宿主机配置中对应代码块的密码]</span><br><span class="line">autostart=true</span><br><span class="line">redirect_stderr = true</span><br><span class="line">stdout_logfile_maxbytes = 1MB </span><br><span class="line">stdout_logfile = /tmp/tanzhen.log</span><br></pre></td></tr></tbody></table></figure><p>放入 <code>/etc/supervisor/conf.d</code> 中。重载配置：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl reload</span><br></pre></td></tr></tbody></table></figure><p>访问 <code>[面板机ip]:100</code>，正常的话就能看到客户端已连接。</p><hr><p>这么配置，总流量是找 <code>/proc/net/dev</code> 要的，于是出现两个问题：</p><ol><li>重启后流量显示重置</li><li>每月重置流量没法实现</li></ol><p>项目 issue <a href="https://github.com/cppla/ServerStatus/issues/54">服务器流量统计怎么清零 · Issue #54 · cppla/ServerStatus</a> 里面，作者建议用 vnstat 来探测流量。</p><h2 id="vnstat-探测流量与流量重置"><a href="#vnstat-探测流量与流量重置" class="headerlink" title="vnstat 探测流量与流量重置"></a>vnstat 探测流量与流量重置</h2><h3 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h3><p>安装 vnstat</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install vnstat</span><br></pre></td></tr></tbody></table></figure><p>安装后重启一遍服务，以网络获取接口情况；或者直接新建接口。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service vnstat restart</span><br><span class="line">#上面这个命令或者下面这个命令，二选一，假设网卡名为 eth0</span><br><span class="line">#vnstat --create -i eth0</span><br></pre></td></tr></tbody></table></figure><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vnstat -q</span><br></pre></td></tr></tbody></table></figure><p>出现类似</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210311143837.png"></p><p>就算成功。因为 5 分钟才刷新一次流量显示，所以 5 分钟后再次输入 <code>vnstat -q</code> 才会有正确的流量数据出现。类似于：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210311144006.png"></p><p>当然，如果等的不耐烦，也可以直接输入 <code>vnstat -u</code> 手动刷新流量显示值，然后输入 <code>vnstat -q</code> 查看。</p><h3 id="整合进探针中"><a href="#整合进探针中" class="headerlink" title="整合进探针中"></a>整合进探针中</h3><p>编辑探针客户端的 <code>client.py</code> 文件。</p><p>将</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">def liuliang():</span><br><span class="line">    NET_IN = 0</span><br><span class="line">    NET_OUT = 0</span><br><span class="line">    with open('/proc/net/dev') as f:</span><br><span class="line">        for line in f.readlines():</span><br><span class="line">            netinfo = re.findall('([^\s]+):[\s]{0,}(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)', line)</span><br><span class="line">            if netinfo:</span><br><span class="line">                if netinfo[0][0] == 'lo' or 'tun' in netinfo[0][0] \</span><br><span class="line">                        or 'docker' in netinfo[0][0] or 'veth' in netinfo[0][0] \</span><br><span class="line">                        or 'br-' in netinfo[0][0] or 'vmbr' in netinfo[0][0] \</span><br><span class="line">                        or 'vnet' in netinfo[0][0] or 'kube' in netinfo[0][0] \</span><br><span class="line">                        or netinfo[0][1]=='0' or netinfo[0][9]=='0':</span><br><span class="line">                    continue</span><br><span class="line">                else:</span><br><span class="line">                    NET_IN += int(netinfo[0][1])</span><br><span class="line">                    NET_OUT += int(netinfo[0][9])</span><br><span class="line">    return NET_IN, NET_OUT</span><br></pre></td></tr></tbody></table></figure><p>替换为</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def liuliang():</span><br><span class="line">NET_IN = 0</span><br><span class="line">NET_OUT = 0</span><br><span class="line">vnstat=os.popen('vnstat --dumpdb').readlines()</span><br><span class="line">for line in vnstat:</span><br><span class="line">if line[0:4] == "m;0;":</span><br><span class="line">mdata=line.split(";")</span><br><span class="line">NET_IN=int(mdata[3])*1024*1024</span><br><span class="line">NET_OUT=int(mdata[4])*1024*1024</span><br><span class="line">break</span><br><span class="line">return NET_IN, NET_OUT</span><br></pre></td></tr></tbody></table></figure><p>重载 supervisor 即可生效。</p><p><strong>（21.3.31 更新）</strong> 在某些系统（比如 ubuntu 中），安装的 vnstat 版本不是 v1.x 而是新的 v2.x，剔除了 <code>vnstat --dumpdb</code> 这个命令导致上面这行代码无法工作。需要更换为：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def liuliang():</span><br><span class="line">    NET_IN = 0</span><br><span class="line">    NET_OUT = 0</span><br><span class="line">    vnstat=os.popen('vnstat --oneline').readlines()</span><br><span class="line">    for line in vnstat:</span><br><span class="line">        mdata=line.split(";")</span><br><span class="line">        NET_IN=str(mdata[8])</span><br><span class="line">        NET_IN=re.findall('\d+\.\d*', NET_IN)</span><br><span class="line">        NET_IN=int(float(NET_IN[0])*1024*1024*1024)</span><br><span class="line">        NET_OUT=str(mdata[9])</span><br><span class="line">        NET_OUT=re.findall('\d+\.\d*', NET_OUT)</span><br><span class="line">        NET_OUT=int(float(NET_OUT[0])*1024*1024*1024)</span><br><span class="line">    return NET_IN, NET_OUT</span><br></pre></td></tr></tbody></table></figure><h3 id="配置定时重置和刷新时间"><a href="#配置定时重置和刷新时间" class="headerlink" title="配置定时重置和刷新时间"></a>配置定时重置和刷新时间</h3><p>vnstat 的配置放在 <code>/etc/vnstat.conf</code> 中。默认情况下每月流量重置时间为 1 号。如果需要修改，可以修改 MonthRotate 参数。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># on which day should months change</span><br><span class="line">MonthRotate 1</span><br></pre></td></tr></tbody></table></figure><p>流量总量显示 5 分钟刷新一次，有点久。可以修改</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># how often (in minutes) bandwidth detection is redone when</span><br><span class="line"># BandwidthDetection is enabled (0 = disabled)</span><br><span class="line">BandwidthDetectionInterval 5</span><br></pre></td></tr></tbody></table></figure><p>不过再怎么修改也没有默认的实时更新快。。。这也是使用 vnstat 代替默认方法的缺点之一。</p><p>还有，每月重置时间这个，如果你手动修改后再修改时区到最近的 0 点想看看能不能生效，多半是看不到的。根据：<a href="https://ubuntuforums.org/showthread.php?t=2324673">[SOLVED] vnstat not changing the start of the month [day]</a></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Having been in contact by e-mail with vnstat's author, Teemu Toivola, it was revealed that [as I suspected/hoped for] the new setting to MonthRotate will not take effect on the same month that it was done; so I will definitely have to wait until June 10th to confirm this feature of vnstat. Until then, I will keep this thread open.</span><br><span class="line">Oddly enough, despite my intense searching for an answer to this fact, I never read any explanation for it anywhere else; well, there is one now, right here!</span><br><span class="line">Thank you, Habitual, for the assistance.</span><br></pre></td></tr></tbody></table></figure><p>也就是说一定要等到真实时间的下个月才会重置流量。（当然把时间调到下个月能不能成功我就不知道了，懒得试）</p><h3 id="手动重置流量信息"><a href="#手动重置流量信息" class="headerlink" title="手动重置流量信息"></a>手动重置流量信息</h3><p>我还不知道上面这个方法能不能生效。。。如果不行的话，那就只能手动重置流量。</p><p>删除流量数据</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -r /var/lib/vnstat/.* </span><br><span class="line">rm -r /var/lib/vnstat/* </span><br></pre></td></tr></tbody></table></figure><p>重启 vnstat</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service vnstat restart</span><br></pre></td></tr></tbody></table></figure><p>改一改写进 crontab 也能达成自动重置流量的目的。</p><hr><p>如果删除后重启，查看 <code>service vnstat status</code> 发现遭遇文件权限问题：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R vnstat:vnstat /var/lib/vnstat</span><br></pre></td></tr></tbody></table></figure><p>另外，vnstat 的日志中还发现有一个叫 vnstat daemon，也就是叫 vnstatd 的东西。其实 vnstat 和 vnstatd 是同一个服务。操作（start/stop/restart/status）的时候只用操作其中一个就好。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前薅了 azure 的羊毛，想想每个月 15g 流量，还是挂个探针吧。我之前一直在用 &lt;a href=&quot;https://github.com/cppla/ServerStatus&quot;&gt;cppla/ServerStatus: 云探针、多服务器探针、云监控、多服务器云监控，演示： https://tz.cloudcpp.com/&lt;/a&gt;，因为它可以通过定时连接三网官网去探测服务器的延迟，好多画风更棒的探针都没这个功能（但准不准就不知道了，起码每天测出来的数据都是电信爆炸，这个我觉得是准的）。&lt;/p&gt;
&lt;h2 id=&quot;ServerStatus-安装&quot;&gt;&lt;a href=&quot;#ServerStatus-安装&quot; class=&quot;headerlink&quot; title=&quot;ServerStatus 安装&quot;&gt;&lt;/a&gt;ServerStatus 安装&lt;/h2&gt;</summary>
    
    
    
    <category term="Network" scheme="https://zbttl-github-io.vercel.app/categories/Network/"/>
    
    
    <category term="探针" scheme="https://zbttl-github-io.vercel.app/tags/%E6%8E%A2%E9%92%88/"/>
    
    <category term="ServerStatus" scheme="https://zbttl-github-io.vercel.app/tags/ServerStatus/"/>
    
    <category term="vnstat" scheme="https://zbttl-github-io.vercel.app/tags/vnstat/"/>
    
  </entry>
  
  <entry>
    <title>debian 10 单独安装 mysql</title>
    <link href="https://zbttl-github-io.vercel.app/debian-10-dan-du-an-zhuang-mysql/"/>
    <id>https://zbttl-github-io.vercel.app/debian-10-dan-du-an-zhuang-mysql/</id>
    <published>2021-03-09T16:00:00.000Z</published>
    <updated>2021-03-11T03:19:25.788Z</updated>
    
    <content type="html"><![CDATA[<p>之前在<a href="https://zbttl.github.io/yi-bu-dao-wei-de-vps-cong-ru-men-dao-fang-qi/?highlight=mysql">一步到位的 vps 从入门到放弃 | Bao’s 备忘录</a>谈过可以用 lnmp / 宝塔去装 mysql。 不过很多时候我并不需要 php，我自己的 vps 主用 caddy 而不是 nginx，只有 mysql 是刚需，加上我个人秉承着 「apt + dpkg 走天下」的暴论，就想着有没有官方的使用 apt 的单独安装 mysql 的方法（</p><p>只谈安装，剩下的配置流程，以前谈过了，参考本文开头那篇文章。</p><h2 id="使用-mysql-apt-config-安装"><a href="#使用-mysql-apt-config-安装" class="headerlink" title="使用 mysql-apt-config 安装"></a>使用 mysql-apt-config 安装</h2><p>和 ubuntu 那边的 ppa 是类似的东西（</p><p>参考文章：<a href="https://www.digitalocean.com/community/tutorials/how-to-install-the-latest-mysql-on-debian-10">How To Install the Latest MySQL on Debian 10 | DigitalOcean</a></p><ol><li><p>到 <a href="https://dev.mysql.com/downloads/repo/apt/">MySQL :: Download MySQL APT Repository</a> 获取最新的 mysql-apt-config 安装包。拿到地址后直接到系统里面 wget，现在的版本是 0.8.16-1，so：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://repo.mysql.com//mysql-apt-config_0.8.16-1_all.deb </span><br></pre></td></tr></tbody></table></figure></li><li><p>安装</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i mysql-apt-config*</span><br></pre></td></tr></tbody></table></figure><p>更新一下 apt 库</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></tbody></table></figure><p>安装</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install mysql-server</span><br></pre></td></tr></tbody></table></figure><p>安装过程中，会弹出两个窗口，一个是选择 mysql 需要安装的组件，一个是选择 mysql 的版本，目前可选 5.7 和 8.0；一个是输入 root 密码提权。</p></li></ol><h2 id="使用官网离线安装包"><a href="#使用官网离线安装包" class="headerlink" title="使用官网离线安装包"></a>使用官网离线安装包</h2><p>用上面的方法只能装两个版本，还要装更旧的就得去官网找包了。</p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>到<a href="https://downloads.mysql.com/archives/community/">MySQL :: Download MySQL Community Server (Archived Versions)</a>页面，选择相应版本和平台。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210310205740.png"></p><p>可以下载第一个 deb bundle，用于完全离线安装；也可以下载 mysql-community-server（上图第二个包）</p><h3 id="下载-mysql-community-server-并修复安装（二选一）"><a href="#下载-mysql-community-server-并修复安装（二选一）" class="headerlink" title="下载 mysql-community-server 并修复安装（二选一）"></a>下载 mysql-community-server 并修复安装（二选一）</h3><p>若是下载 mysql-community-server 的话，同样是获取到下载连接然后用 wget 下载再用 dpkg 安装，不在赘述；安装中一定会报错：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210310210236.png"></p><p>不过可以用命令来修复：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt --fix-broken install</span><br></pre></td></tr></tbody></table></figure><p>不报错，并提示输入 root 密码的话，基本就安装成功了。</p><h3 id="下载-deb-bundle-，完全离线安装（二选一）"><a href="#下载-deb-bundle-，完全离线安装（二选一）" class="headerlink" title="下载 deb bundle ，完全离线安装（二选一）"></a>下载 deb bundle ，完全离线安装（二选一）</h3><p>参考：<a href="https://dev.mysql.com/doc/mysql-installation-excerpt/5.7/en/linux-installation-debian.html">MySQL :: MySQL Installation Guide :: 7.6 Installing MySQL on Linux Using Debian Packages from Oracle</a></p><p>下载 deb bundle 包后解压</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir mysql</span><br><span class="line">tar -xvf mysql-server_*.tar -C ./mysql</span><br><span class="line">cd mysql</span><br></pre></td></tr></tbody></table></figure><p>安装 libaio</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install libaio1 -y</span><br></pre></td></tr></tbody></table></figure><p>配置，提权</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg-preconfigure mysql-community-server_*.deb</span><br></pre></td></tr></tbody></table></figure><p>安装</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -i mysql-{common,community-client,client,community-server,server}_*.deb</span><br></pre></td></tr></tbody></table></figure><p>不过说是完全离线，大概率还是要修复依赖。。。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt -f install -y</span><br></pre></td></tr></tbody></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>没法用 <code>apt remove</code> 命令直接下载，错误的卸载方法还可能导致未来无法正常安装。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-get remove --purge mysql-server mysql-client mysql-common -y</span><br><span class="line">apt-get autoremove -y</span><br><span class="line">apt-get autoclean</span><br><span class="line">rm -rf /etc/mysql</span><br></pre></td></tr></tbody></table></figure><p>中间弹出 <code>Remove data directories ?</code>，选 yes。</p><h3 id="提示-install-invalid-user-‘mysql’"><a href="#提示-install-invalid-user-‘mysql’" class="headerlink" title="提示 install: invalid user ‘mysql’"></a>提示 <code>install: invalid user ‘mysql’</code></h3><p>多半就是错误的卸载导致的。</p><p>运行</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adduser mysql</span><br></pre></td></tr></tbody></table></figure><p>设置一个密码即可。</p><h3 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h3><p>我闲的无聊折腾 mysql 安装就是因为我先装了 8.0 版本在 1g 的 azure 机子上，发现一重启探针就报警吃了 88% 内存，一排查发现是 mysql 的问题。</p><p>实测 8.0 版本吃的内存比 5.7 多一倍。。。换为 5.7，内存占用降为 63%。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前在&lt;a href=&quot;https://zbttl.github.io/yi-bu-dao-wei-de-vps-cong-ru-men-dao-fang-qi/?highlight=mysql&quot;&gt;一步到位的 vps 从入门到放弃 | Bao’s 备忘录&lt;/a&gt;谈过可以用 lnmp / 宝塔去装 mysql。 不过很多时候我并不需要 php，我自己的 vps 主用 caddy 而不是 nginx，只有 mysql 是刚需，加上我个人秉承着 「apt + dpkg 走天下」的暴论，就想着有没有官方的使用 apt 的单独安装 mysql 的方法（&lt;/p&gt;
&lt;p&gt;只谈安装，剩下的配置流程，以前谈过了，参考本文开头那篇文章。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://zbttl-github-io.vercel.app/categories/Linux/"/>
    
    
    <category term="mysql" scheme="https://zbttl-github-io.vercel.app/tags/mysql/"/>
    
    <category term="debian" scheme="https://zbttl-github-io.vercel.app/tags/debian/"/>
    
  </entry>
  
  <entry>
    <title>netch 使用体验（代理规则获取）</title>
    <link href="https://zbttl-github-io.vercel.app/netch-shi-yong-ti-yan-dai-li-gui-ze-huo-qu/"/>
    <id>https://zbttl-github-io.vercel.app/netch-shi-yong-ti-yan-dai-li-gui-ze-huo-qu/</id>
    <published>2021-02-26T16:00:00.000Z</published>
    <updated>2021-03-09T18:03:17.593Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/NetchX/Netch">Netch</a> 这么一个功能强大且逻辑合理的 gui，才出不久但各种文档已经足够详细，还要详细谈谈的必要嘛。。。</p><p>还真有（</p><p>netch 本身自带的规则并不丰富，进程全局模式可用度不高，因此需要手动提取规则。</p><p>官方引用了 SSTAP-rule 处的文档<a href="https://github.com/FQrabbit/SSTap-Rule/wiki">Home · FQrabbit/SSTap-Rule Wiki</a>，给出了几种提取规则的方法：</p><blockquote><p><a href="https://github.com/oooldtoy/SSTAP_ip_crawl_tool#sstap_ip_crawl_tool">一个自动获取游戏远程ip，并自动写成SSTAP规则文件的脚本。 </a>(建议优先考虑此工具)</p><p><a href="https://github.com/NormanBB/N/blob/master/intro.md">使用 openQPA 进行基于游戏进程的ip地址获取</a></p><p><a href="https://github.com/FQrabbit/SSTap-Rule/blob/master/doc/UU-extract.md">提取加速器规则（超详细）</a></p></blockquote><p>经过实验，方法三加速效果最好也最简单。但也有两个问题：</p><ol><li>你得有 uu 加速器（tx 不行）会员，或者你有认识的人帮你提取（有会员为啥还要自建？）。</li><li>tun/tap 没有程序代理模式用起来那么稳定，特别是如果 netch 是二级代理模式那就更容易出问题了（有几率导致 loopback）。</li></ol><p>方法一，是提取游戏进程的路由。但问题的关键似乎并不是「该提取哪些路由规则」而是「哪些程序需要代理」。譬如 cod16 在仅代理本体 <code>ModernWarfare.exe</code> 的情况下游戏能够顺利进入，但丢包显示错误，且游戏下载并未加速。</p><p>方法二能找到游戏需要代理的进程（其本身也能找到需要加速进程的路由），需要将后台尽量清空，测试时流量跑的多的未知进程基本上就是需要代理的进程了。当然也不一定用方法 2 这个工具，许多工具都能达成目的，不过方法 2 这个程序，足够直观。缺点是，安装有点繁琐：</p><ol><li><p>安装 python2，如果之前安装有并主用 python3 的，不需要把 python2 加入 path 中。</p></li><li><p>安装 PyQt4。可以从<a href="https://sourceforge.net/projects/pyqt/files/PyQt4/PyQt-4.11.4/PyQt4-4.11.4-gpl-Py2.7-Qt4.8.7-x64.exe/download">这个地址</a>安装下载，也可以用 chocolatey 安装</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install pyqt4 -y</span><br></pre></td></tr></tbody></table></figure></li><li><p>安装模块。参见 <a href="https://python.freelycode.com/contribution/detail/139">[官解]Windows上Python2和3如何兼容？</a></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">py -2 -m pip install xmltodict==0.11.0</span><br><span class="line">py -2 -m pip install httplib2</span><br><span class="line">py -2 -m pip install bs4</span><br><span class="line">py -2 -m pip install dpkt</span><br></pre></td></tr></tbody></table></figure></li><li><p>下载并解压 <a href="https://github.com/l7dpi/openQPA">openQPA</a>（没有 release，直接拉取整个项目就行），双击 <code>QPA.py</code> 打开，如果。跑两圈需要加速的应用然后把闹得欢的进程加入加速名单吧！</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210228063445.png"></p></li></ol><p>另外，tun/tap 的全局进程代理模式和绕过大陆/局域网模式：<code>[3] Bypass LAN and China (TUN/TAP)</code>，以及后续的全局进程白名单模式，我尚未进行测试，如果效果好上面这些操作就当闲的没事干了（</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/NetchX/Netch&quot;&gt;Netch&lt;/a&gt; 这么一个功能强大且逻辑合理的 gui，才出不久但各种文档已经足够详细，还要详细谈谈的必要嘛。。。&lt;/p&gt;
&lt;p&gt;还真有（&lt;/p&gt;</summary>
    
    
    
    <category term="game" scheme="https://zbttl-github-io.vercel.app/categories/game/"/>
    
    
    <category term="游戏加速" scheme="https://zbttl-github-io.vercel.app/tags/%E6%B8%B8%E6%88%8F%E5%8A%A0%E9%80%9F/"/>
    
    <category term="netch" scheme="https://zbttl-github-io.vercel.app/tags/netch/"/>
    
  </entry>
  
  <entry>
    <title>ikago 和 pcap2socks 使用体验</title>
    <link href="https://zbttl-github-io.vercel.app/ikago-he-pcap2socks-shi-yong-ti-yan/"/>
    <id>https://zbttl-github-io.vercel.app/ikago-he-pcap2socks-shi-yong-ti-yan/</id>
    <published>2021-02-19T16:00:00.000Z</published>
    <updated>2021-04-01T16:19:19.155Z</updated>
    
    <content type="html"><![CDATA[<p>参考文章：<a href="https://www.v2ex.com/t/672367#r_8979623">分享自己用 Go 写的游戏加速器 IkaGo - V2EX</a></p><p>从 <a href="https://t.me/NewlearnerChannel">Newlearner の自留地</a> 了解到的游戏加速软件。</p><p>后来发现作者还写了一个 pcap2socks 的项目，同样用于游戏加速。</p><p>区别在于，</p><ul><li>ikago 是完整的一套游戏加速方案；</li><li>pcap2socks 只保留了旁路由的功能，还需搭配 socks 代理使用。</li></ul><p>和很多专攻 pc 代理的加速器不同，这类型加速器的加速原理是旁路由，常见于给各种游戏主机加速。用过各种游戏加速器 pc 客户端主机加速的都应该有印象：在 pc 这边开好主机加速，再在游戏机那一段设置好 ip 配置，正确设置的话 pc 加速器这边会显示已成功加速。而这俩加速器的使用步骤也差不多是这样。</p><p>当然，自建加速器和大厂加速器的取舍我已经在<a href="">另一篇</a>文章里提过了，这里只谈这种方案在技术上对普通加速器的优势：</p><p>各个大厂的游戏加速器的主机加速功能只能为一台设备加速，而且这台设备还有平台限制；而自建加速器想加速多少设备就加速多少设备；只要你想，加速 pc 、手机也可以。</p><p>当然了，旁路由加速要求加速设备和被加速设备不能是同一个设备，用过大厂游戏加速器主机加速的人也应该对此深有体会，自己想玩主机却还要一直开着电脑？大厂们也知道这点，于是就趁机贩卖起能够更为小巧省电，独立运行器加速器的主机盒；以及我在<a href="https://zbttl.github.io/lu-you-qi-pao-fen-shua-ji-hou-ri-tan-ji-ji-ge-jia-su-qi-shi-yong-qing-kuang-shou-ji/?highlight=%E8%B7%AF%E7%94%B1#%E6%80%BB%E7%BB%93%E6%88%91%E7%94%A8%E8%BF%87%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8A%A0%E9%80%9F%E5%99%A8%E7%9A%84%E4%BC%98%E5%8A%A3%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89">另一篇文章</a>中谈到那些能安装加速器插件的路由器。其实原理都并没有脱离 arp 劫持 + 代理流量的旁路由模式。自建就更灵活了：只要你的设备能跑起 go，就能运行。各类软路由，甚至手机上的 termux，都可以达成要求，这里就不详细阐述了。</p><h2 id="ikago"><a href="#ikago" class="headerlink" title="ikago"></a><a href="https://github.com/zhxie/ikago">ikago</a></h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>server 和 client 端运行平台是 linux 或者 windows 的，直接下载对应 release。或者按文档给的方法，安装 go 并 git clone 项目后使用 go run 运行，适合其他平台。</p><h3 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h3><p>vps 这边新建一个 server.json，假设就放在 <code>/root</code> 下吧</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">"listen-devices": [],</span><br><span class="line">"upstream-device": "",</span><br><span class="line">"gateway": "",</span><br><span class="line">"mode": "faketcp",</span><br><span class="line">"method": "aes-128-gcm",</span><br><span class="line">"password": "[密码]",</span><br><span class="line">"rule": true,</span><br><span class="line">"monitor": 9400,</span><br><span class="line">"verbose": false,</span><br><span class="line">"log": "",</span><br><span class="line">"mtu": 1400,</span><br><span class="line">"kcp": false,</span><br><span class="line">"kcp-tuning": {</span><br><span class="line">    "sndwnd": 100,</span><br><span class="line">    "rcvwnd": 100,</span><br><span class="line">    "datashard": 20,</span><br><span class="line">    "parityshard": 20,</span><br><span class="line">    "acknodelay": false,</span><br><span class="line">    "nodelay": false,</span><br><span class="line">    "interval": 10,</span><br><span class="line">    "resend": 0,</span><br><span class="line">    "nc": 0</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">"fragment": 1400,</span><br><span class="line">"port": 9300</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以改的几个地方：</p><ul><li>monitor 是和 web 监控端链接的接口。不过 monitor 这个接口在 client 端开就足够了，不一定要在 server 端这里再开一个。</li><li>verbose，详情，设为 true 日志会变得更详细。</li><li>log。日志输出位置。但后续我们会用 supervisor 开启自启的同时去输出日志，所以没必要开这个。</li><li>port。远程端口。</li></ul><p>看起来可以调但其实不能调的地方：</p><ul><li>mode。文档写可选 tcp 和 faketcp，但实际上用 tcp 的话不能开启加密，即 method 那里只能填 none，否则连不通。</li><li>kcp。kcp 设为打开的话，client 端平台不能是 windows，否则也连不通，会报错 <code>network layer type not support</code>。</li></ul><p>这俩应该是 bug 吧（前者在项目的 <a href="https://github.com/zhxie/ikago#known-issues">Known Issues</a> 中有提到）。。。不过看作者项目好久没动，我也不好意思提 issue 去了（又不是不能用）。</p><p>假设咱的 release 版 server 端二进制文件放在 <code>/root/ikago</code> 下吧，启动看看：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/root/ikago/ikago-server -c /root/ikago/server.json</span><br></pre></td></tr></tbody></table></figure><p>大概效果是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210224092039.png"></p><h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><p>以 windows 为例，新建 client.json:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">"listen-devices": [],</span><br><span class="line">"upstream-device": "",</span><br><span class="line">"gateway": "",</span><br><span class="line">"mode": "faketcp",</span><br><span class="line">"method": "aes-128-gcm",</span><br><span class="line">"password": "[密码]",</span><br><span class="line">"rule": true,</span><br><span class="line">"monitor": 9400,</span><br><span class="line">"verbose": true,</span><br><span class="line">"log": "",</span><br><span class="line">"mtu": 1400,</span><br><span class="line">"kcp": false,</span><br><span class="line">"kcp-tuning": {</span><br><span class="line">    "sndwnd": 100,</span><br><span class="line">    "rcvwnd": 100,</span><br><span class="line">    "datashard": 20,</span><br><span class="line">    "parityshard": 20,</span><br><span class="line">    "acknodelay": false,</span><br><span class="line">    "nodelay": false,</span><br><span class="line">    "interval": 10,</span><br><span class="line">    "resend": 0,</span><br><span class="line">    "nc": 0</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">"publish": "10.6.0.2",</span><br><span class="line">"fragment": 1400,</span><br><span class="line">"port": 0,</span><br><span class="line">"sources": [</span><br><span class="line">    "10.6.0.1",</span><br><span class="line">    "10.6.0.3"</span><br><span class="line">],</span><br><span class="line">"server": "[vps_ip]:9300"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>monitor 和 verbose，和 server 那边含义一致。client 这边建议都开启。</li><li>sources：劫持并监听的本地 ip，即要加速的设备在路由器下的本地 ip。</li><li>publish：除了使用 arp 或者到路由器中获取需要加速设备的 ip 并填入 sources 中，更推荐的方法是单独做一个网段，用过加速器主机加速的各位应该都不陌生。作者选用的方法是模仿 tx 加速器的网段设置，被加速主机 ip 填 10.6.0.1，网关填 10.6.0.2,前者写到 sources 中，后者写到 publish 中，我个人又多加了一个 ip，这样如果还有另一个加速的设备就不用回来再修改了。</li></ul><p>启动</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\ikago-client.exe -c .\client.json</span><br></pre></td></tr></tbody></table></figure><p>效果差不多是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210225090832.jpg"></p><h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><p>被加速设备改用手动获取 ip 地址，publish 处的地址填入网关一项中；sources 处的其中一个地址填入 ip 一项中，子网掩码为 255.255.255.0，dns 一项填入 8.8.8.8。</p><p>打开 ikago-web，可以选择拉取项目 <a href="https://github.com/zhxie/ikago-web">zhxie/ikago-web: IkaGo Web is a front-end interface for IkaGo.</a> 在本地打开或者自搭，也可以使用<a href="http://ikago.ikas.ink/">作者搭建的 web 页面</a>。</p><p>点击 configure，path 改成 <code>localhost:9400</code>。正确设置的话，status 处会显示为 active，并且左下角显示有已经加速上的设备。</p><h3 id="服务端设置自启（可选）"><a href="#服务端设置自启（可选）" class="headerlink" title="服务端设置自启（可选）"></a>服务端设置自启（可选）</h3><ol><li><p>安装 supervisor</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install supervisorctl -y</span><br></pre></td></tr></tbody></table></figure></li><li><p>新建一个 <code>ikago.conf</code>，内容如下</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[program:ikago]</span><br><span class="line">user=root</span><br><span class="line">command=/root/ikago/ikago-server -c /root/ikago/server.json</span><br><span class="line">autostart=true</span><br><span class="line">redirect_stderr = true</span><br><span class="line">stdout_logfile_maxbytes = 1MB </span><br><span class="line">stdout_logfile = /tmp/ikago.log</span><br></pre></td></tr></tbody></table></figure><p> 把这个文件放进 <code>/etc/supervisor/conf.d</code>。</p></li><li><p>运行</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl reload</span><br></pre></td></tr></tbody></table></figure><p> 后续直接通过</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f /tmp/ikago.log</span><br></pre></td></tr></tbody></table></figure><p> 查看日志。</p></li></ol><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><ol><li><p>有时虽然配置正确了，被加速设备在 web 面板中却未出现，且被加速设备也连接不上网络。尝试重启笔记本和路由器，还有可能是某些路由器本身系统因素导致出现问题，我曾经就遭遇过加速设备在主路由（ac86u，梅林改，本身就不算稳定的系统）加速不上，挂上一个刷入小米路由器的联想 newifi mini 并让加速和被加速设备连上后加速成功的例子。</p><p> 另一种情况是我一开始习惯把网关设为 <code>.1</code> 为结尾的地址，因此 publish 处我填了 <code>10.6.0.1</code>，sources 处填了 <code>10.6.0.2</code>，而被加速设备处也进行相应顺序上的调换，结果发现加速不上；换回来就成功了。这就比较玄学了。。。后面的 pcapsocks 也出现过这样的问题。</p></li><li><p>我在<a href="">前一篇</a>文章中写过不太推荐这个加速器，原因就在于，我运行后也没在使用，但五六天后我的探针给我报警了，回来一查：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Xshell_D1Iuwab1Dc.png"></p><p>摊手（</p></li></ol><h2 id="pcap2socks-和-pcap2socks-gui"><a href="#pcap2socks-和-pcap2socks-gui" class="headerlink" title="pcap2socks 和 pcap2socks-gui"></a><a href="https://github.com/zhxie/pcap2socks">pcap2socks</a> 和 <a href="https://github.com/zhxie/pcap2socks-gui">pcap2socks-gui</a></h2><p>和 ikago 略有差异，pcap2socks 隧道的工作交给 socks5 了，只需要一个放在本地的二进制文件即可。假设 socks 开在 1080 端口，则：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\pcap2socks.exe -s 10.6.0.1 -p 10.6.0.2 -d 127.0.0.1:1080</span><br></pre></td></tr></tbody></table></figure><p>这里的 <code>-s</code> 和 <code>-p</code> 在上面的 ikago client 配置中都有对应项，还不熟悉的可以返回去看。</p><p>这时多半会报错</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: Cannot determine the interface. Available interfaces are listed below, and please use -i &lt;INTERFACE&gt; to designate:</span><br></pre></td></tr></tbody></table></figure><p>然后底下这些就是设备列表，找到你的上网网卡的设备，复制前面那一长串 <code>\Device\NPF_{xxx}</code>，在命令用 <code>-i</code> 参数带上，即再次输入：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\pcap2socks.exe -s 10.6.0.1 -p 10.6.0.2 -d 127.0.0.1:1080 -i '\Device\NPF_{xxx}'</span><br></pre></td></tr></tbody></table></figure><p>主机端参考 ikago 那边的设置就行了。</p><p>这个我还是不推荐用。。。因为有时运行一段时间就报错：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">warning: receive from proxy: TCP: xxx:443 -&gt; 0: 你的主机中的软件中止了一个已建立的连接。 (os error 10053)</span><br></pre></td></tr></tbody></table></figure><p>但其 gui 版本经过我实验表现相对稳定，也不用考虑网卡那串长长的 CLSID，甚至有 tx/uu 加速器默认的 ip 方案可直接选用，推荐使用。（这都喂到嘴里了，应该不用教了吧，gui 教程还要截图挺累的）</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210227054945.png"></p><p>（唯一的缺点也许是不能在软路由上用 gui 版。不过软路由直接设置成旁路由然后全局代理他不香嘛？）</p><p>不过这里还是有个小问题，某些设备（特别是 windows 20H2）打开这个 gui 看到的是一片空白，我排查了一下，应该是新版 edge 的锅，有这么几种解决方案：</p><ol><li><p>（优先使用）作者在项目中底下写的，启用 loopback 。以管理员权限运行 powershell，输入：</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CheckNetIsolation.exe LoopbackExempt -a -n="Microsoft.Win32WebViewHost_cw5n1h2txyewy"</span><br></pre></td></tr></tbody></table></figure></li><li><p>安装 chromium edge dev。可以从 <a href="https://www.microsoftedgeinsider.com/zh-cn/download/">Microsoft Edge Insider Channels</a> 下载。也可以直接用 chocolatey 安装。</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install microsoft-edge-insider-dev -y</span><br></pre></td></tr></tbody></table></figure></li><li><p>嫌 chromium edge dev 太臃肿？也可以只下 runtime：<a href="https://developer.microsoft.com/zh-cn/microsoft-edge/webview2/#download-section">Webview2 - Microsoft Edge Developer</a>。下载安装里面的 x64 版「常青版独立安装程序」（卧槽这翻译和坐和放宽有的一拼）。</p></li><li><p>（并不是正确的解决方法，但我潜意识感觉后续可能会有用，记录一下）更新 <code>WebView2Loader.dll</code>。<br> 安装 nuget</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install NuGet.CommandLine -y</span><br></pre></td></tr></tbody></table></figure><p>  安装 <a href="https://www.nuget.org/packages/Microsoft.Web.WebView2">NuGet Gallery | Microsoft.Web.WebView2 1.0.705.50</a>：</p>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nuget install Microsoft.Web.WebView2</span><br></pre></td></tr></tbody></table></figure><p>  提取 <code>WebView2Loader.dll</code>，可利用 everything 搜索，一般在 <code>C:\Windows\System32\Microsoft.Web.WebView2.1.0.705.50\build\x64\</code> 下，everything 可能会搜索到其他几个 x64 目录下也有 <code>WebView2Loader.dll</code>，应该都是同一个文件。pcap2socks 自带的 <code>WebView2Loader.dll</code> 应该包含了几个平台的依赖，大小 400 多 k，我们提取的 x64 版只有 133k。（这年头不会还有用 x86 的吧？用 x86 寨板跑加速？）</p><p>  然后把提取到的文件覆盖进 pcap2socks 目录内就行。</p><p> <strong>（21.4.2 更新）</strong> netch 已于上个月加入 pcapsocks 功能。我试了一下，好用。除了代理地址定义起来没有原版 pcap2socks 简单，以及界面不够好看，应该没啥缺点。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;参考文章：&lt;a href=&quot;https://www.v2ex.com/t/672367#r_8979623&quot;&gt;分享自己用 Go 写的游戏加速器 IkaGo - V2EX&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从 &lt;a href=&quot;https://t.me/NewlearnerChannel&quot;&gt;Newlearner の自留地&lt;/a&gt; 了解到的游戏加速软件。&lt;/p&gt;</summary>
    
    
    
    <category term="game" scheme="https://zbttl-github-io.vercel.app/categories/game/"/>
    
    
    <category term="游戏加速" scheme="https://zbttl-github-io.vercel.app/tags/%E6%B8%B8%E6%88%8F%E5%8A%A0%E9%80%9F/"/>
    
    <category term="ikago" scheme="https://zbttl-github-io.vercel.app/tags/ikago/"/>
    
    <category term="pcap2socks" scheme="https://zbttl-github-io.vercel.app/tags/pcap2socks/"/>
    
  </entry>
  
  <entry>
    <title>onedrive 挂载到 cloudflare</title>
    <link href="https://zbttl-github-io.vercel.app/onedrive-gua-zai-dao-cloudflare/"/>
    <id>https://zbttl-github-io.vercel.app/onedrive-gua-zai-dao-cloudflare/</id>
    <published>2021-02-16T16:00:00.000Z</published>
    <updated>2022-03-15T15:13:39.026Z</updated>
    
    <content type="html"><![CDATA[<p>感觉 azure 做的 oneIndex 目录打开还是贼慢。</p><p>玩玩 Spencer Woo 大佬修改的项目 <a href="https://github.com/spencerwooo/onedrive-cf-index">spencerwooo/onedrive-cf-index: 🏵 Probably the best looking OneDrive Index around! Powered by Cloudflare Workers.</a>，咱觉得能过 cf 的速度可能会快一丢丢。</p><p>本来就有详细的安装教程，本来说顺着教程摸过去就好？结果发现，还是有坑。</p><p>参考文章：</p><ul><li><a href="https://github.com/spencerwooo/onedrive-cf-index/blob/master/README-CN.md">onedrive-cf-index/README-CN.md at master · spencerwooo/onedrive-cf-index</a></li><li><a href="https://github.com/beetcb/onedrive-cf-index-CN">beetcb/onedrive-cf-index-CN: onedrive-cf-index ：世纪互联版简陋指南</a></li><li><a href="https://github.com/heymind/OneDrive-Index-Cloudflare-Worker#-%E6%96%B0%E7%89%B9%E6%80%A7-v11">heymind/OneDrive-Index-Cloudflare-Worker: DEPRECATED: Please use https://github.com/spencerwooo/onedrive-cf-index instead</a></li></ul><p>后两篇是第一篇的补充 / 原项目，在这里整合一下。</p><h3 id="azure-面板操作"><a href="#azure-面板操作" class="headerlink" title="azure 面板操作"></a>azure 面板操作</h3><ol><li><p>手工获取 <code>client_id</code> 和 <code>client secret</code>。<a href="https://zbttl.github.io/azure-yang-mao-er/#%E9%85%8D%E7%BD%AE-OneIndex">上一篇文章</a>中我详细讲过，跳过。</p></li><li><p>获取 <code>authorization code</code> 和 <code>refresh_token</code>。这里的问题在于文章中获取 <code>refresh_token</code> 接口的<a href="https://heymind.github.io/tools/microsoft-graph-api-auth">网站</a>已经 gg 了。不过里面获取 code 的功能还能用。而获取 <code>access_token</code>，可以参考微软官网的操作 <a href="https://docs.microsoft.com/en-us/onedrive/developer/rest-api/getting-started/graph-oauth?view=odsp-graph-online#code-flow">Authorization for OneDrive API via Microsoft Graph - OneDrive dev center | Microsoft Docs</a> 手工获取。</p><ol><li><p>打开接口页面 <a href="https://heymind.github.io/tools/microsoft-graph-api-auth">Microsoft Graph API Auth</a>，在 「Authorize for code  」处，填入 Client ID 并点击 Authorize 就会弹出一个浏览器消息，里面是 authorization code，是以 <code>M.R3_BAY</code> 开头的一串东西。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210220012033.png"></p><p>（手工获取）不排除未来这个网页的 code 获取接口也会爆。保险起见，翻译一下微软官网的做法：</p><blockquote><h3 id="Step-1-Get-an-authorization-code"><a href="#Step-1-Get-an-authorization-code" class="headerlink" title="Step 1. Get an authorization code"></a>Step 1. Get an authorization code</h3><p>To start the sign-in process with the code flow, use a web browser or web-browser control to load this URL request.</p><p>Copy</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id={client_id}&amp;scope={scope}</span><br><span class="line">  &amp;response_type=code&amp;redirect_uri={redirect_uri}</span><br></pre></td></tr></tbody></table></figure><h4 id="Required-query-string-parameters"><a href="#Required-query-string-parameters" class="headerlink" title="Required query string parameters"></a>Required query string parameters</h4><table><thead><tr><th align="left">Parameter name</th><th align="left">Value</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><em>client_id</em></td><td align="left">string</td><td align="left">The client ID created for your app.</td></tr><tr><td align="left"><em>scope</em></td><td align="left">string</td><td align="left">A space-separated list of scopes that your app requires.</td></tr><tr><td align="left"><em>redirect_uri</em></td><td align="left">string</td><td align="left">The redirect URL that the browser is sent to when authentication is complete.</td></tr><tr><td align="left"><em>response_type</em></td><td align="left">string</td><td align="left">The type of response expected from the authorization flow. For this flow, the value must be <strong>code</strong>.</td></tr></tbody></table><h4 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h4><p>Upon successful authentication and authorization of your application, the web browser will be redirected to your redirect URL with additional parameters added to the URL.</p><p>Copy</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://myapp.com/auth-redirect?code=df6aa589-1080-b241-b410-c4dff65dbf7c</span><br></pre></td></tr></tbody></table></figure></blockquote><p>简化一下就是，用浏览器访问（<code>client_id</code> 那里填入自己的 Client ID）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id=[client_id]</span><br><span class="line">&amp;scope=offline_access%20Files.Read%20Files.ReadWrite.All&amp;response_type=code&amp;redirect_uri=https://heymind.github.io/tools/microsoft-graph-api-auth</span><br></pre></td></tr></tbody></table></figure><p>如果 web 接口没坏的话，和用 web 的效果一样；坏了的话就会带到一个 404 网页。不要慌张，此时地址栏的 url 里面已经包含有以 <code>M.R3_BAY</code> 开头直到地址栏结尾的 code 了。</p><p>当然参考文章 2 里也给了一个略有差异但实际上也能使用的方法，同样是通过浏览器访问（不过原文是访问到世纪互联版 od，改个主机地址就成）：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   #原文的地址</span><br><span class="line">   #https://login.chinacloudapi.cn/common/oauth2/v2.0/authorize?client_id=[client_id]&amp;response_type=code&amp;redirect_uri=http://localhost/od-cf&amp;response_mode=query&amp;scope=offline_access%20Files.Read%20Files.ReadWrite.All</span><br><span class="line">#改个主机地址</span><br><span class="line">   https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id=[client_id]&amp;response_type=code&amp;redirect_uri=http://localhost/od-cf&amp;response_mode=query&amp;scope=offline_access%20Files.Read%20Files.ReadWrite.All</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   这里的 redirect_uri 用了虚无的 `http://localhost/od-cf`，可以改成 web 接口的地址，也可以保留并在 azure 面板的 `redirect_url` 处添加这个网址。仅就此处不同的 `redirect_url` 不影响后续使用。</span><br><span class="line"></span><br><span class="line">2. 安装一个 post 工具。比如 Insomnia 或者是 postman。都可以通过 chocolatey 安装。这里演示 postman 的。</span><br><span class="line"></span><br><span class="line">   微软官网上一共写了五个参数：</span><br><span class="line"></span><br><span class="line">   &gt;POST https://login.microsoftonline.com/common/oauth2/v2.0/token</span><br><span class="line">   &gt;Content-Type: application/x-www-form-urlencoded</span><br><span class="line">   &gt;</span><br><span class="line">   &gt;client_id={client_id}&amp;redirect_uri={redirect_uri}&amp;client_secret={client_secret}</span><br><span class="line">   &gt;&amp;code={code}&amp;grant_type=authorization_code</span><br><span class="line"></span><br><span class="line">   在 postman 中新建页面，请求类型设为 post，地址为 https://login.microsoftonline.com/common/oauth2/v2.0/token；切换到 boy 这个 tab，底下一栏选中 application/x-www-form-urlencoded；然后新建五个 key：</span><br><span class="line"></span><br><span class="line">   - `grant_type` 填 authorization_code</span><br><span class="line">   - `code `填刚刚获取的 `authorization code`</span><br><span class="line">   - `redirect_uri` 填刚刚那一步用的回调 url</span><br><span class="line">   - `client_id`：你们懂得。</span><br><span class="line">   - `client_secret`：同上。</span><br><span class="line">   </span><br><span class="line">   点击 send，不出意外的话结果里就会有 `access_token` 和 `refresh_token`。记录下 `refresh_token`。</span><br><span class="line">   </span><br><span class="line">   ![](https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210220035446.png)</span><br><span class="line">   </span><br><span class="line">   不过如果获取失败（比如显示 `error: "invalid_request"`），那么就说明参数有误。注意，此时需要重新从第一小步开始获取 `authorization code`，因为 `authorization code` 只能用一次。另外 authorization code 多次获取的话也只有最后一次获取的 code 能用来获取 `refresh_token`。</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="cloudflare-面板操作"><a href="#cloudflare-面板操作" class="headerlink" title="cloudflare 面板操作"></a>cloudflare 面板操作</h3></li></ol></li><li><p>搞一个域名并挂接到 cf 这事应该不用我强调了（</p></li><li><p>打开域名项，右下角有区域 id 和账户 id，记录下来。</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210220051612.png"></p><ol start="3"><li>从顶上那个 worker 图标中进入 worker 配置项，点击管理 worker -&gt; 创建 worker，可以修改一下左上角的部分域名名字（也是整个 worker 的名字），然后点击保存并部署。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210220052345.png"></p><ol start="4"><li><del>我不是特别能理解。。。cf 不是绑定域名就能用么，为什么做出来的 worker 一开始还用的是 <code>xxxx.yyy.workers.dev</code> 这种 cf 自己的域名。。。这么长不好记啊。</del>这个 worker 跟账号有关，跟域名无关。但因为太长不好记，所以推荐把这个 worker 的域名绑定我们本身的域名。参考文章：<a href="https://www.andressevilla.com/how-to-setup-cloudflare-workers-on-a-custom-domain/">How to Setup Cloudflare Workers on a Custom Domain - Andres Sevilla</a></li></ol><p>到顶上 dns 图标那里，添加记录，类型设为 cname；名称起一个顺耳的二级域名名称；目标则设置为我们刚刚创建的那个 <code>xxxx.yyy.workers.dev</code>，保存。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210220060402.png"></p><p>切回 worker，点添加路由，路由这栏设置为我们刚刚添加的域名，比如我们的域名是 xxxx.com，二级域名就按上面那张图的来，这里就填 <code>cf.xxxx.com/*</code>。 worker 就选择我们刚刚创建的 worker 就好了。</p><h3 id="本地-git-操作"><a href="#本地-git-操作" class="headerlink" title="本地 git 操作"></a>本地 git 操作</h3><ol><li><p>这一步装了 node 的可以忽略；没装 node 的，吃下作者的按理，装个 nvm 8：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">choco install nvm -y</span><br><span class="line">nvm install latest --lts</span><br><span class="line">nvm on</span><br></pre></td></tr></tbody></table></figure></li><li><p>拉取项目，安装：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/spencerwooo/onedrive-cf-index.git</span><br><span class="line">cd .\onedrive-cf-index\</span><br><span class="line">npm i @cloudflare/wrangler -g</span><br><span class="line">npm install</span><br><span class="line"># 使用 wrangler 登录 CloudFlare 账户</span><br><span class="line">wrangler login</span><br><span class="line"># 使用这一命令检查自己的登录状态</span><br><span class="line">wrangler whoami</span><br></pre></td></tr></tbody></table></figure></li><li><p>修改项目目录下的 <code>wrangler.toml</code>：</p><ul><li><code>name</code>：worker 的名字。</li><li><code>account_id</code>：账户 id；</li><li><code>zone_id</code>：区域 id。</li></ul><p>创建 KV bucket，如果待会要在本地预览效果的话，两个命令都要打（话说回来，这两个命令每个都会产生一个 id 和 一个 preview id，但两组数值串里面的 id 其实是一样的）。记下第一个命令生成的 id 和第二个命令生成的 preview id。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 创建 KV bucket</span><br><span class="line">wrangler kv:namespace create "BUCKET"</span><br><span class="line"></span><br><span class="line"># 创建包括预览功能的 KV bucket</span><br><span class="line">wrangler kv:namespace create "BUCKET" --preview</span><br></pre></td></tr></tbody></table></figure><p>回到 <code>wrangler.toml</code>，在 <code>kv_namespaces:</code> 下把刚刚记下的 id 和 preview id 填进去。</p><p>修改 <code>src/config/default.js</code>：</p><ul><li><code>client_id</code>：你懂得；</li><li><code>base</code>：你想要展示的网盘文件夹。要以斜杠 <code>/</code> 打头。</li></ul><p>使用 <code>wrangler</code> 添加 Cloudflare Workers 环境变量：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wrangler secret put REFRESH_TOKEN</span><br></pre></td></tr></tbody></table></figure><p> 随后会提示你输入 <code>refresh_token</code>，将双引号内的数据粘贴过去然后回车确定。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wrangler secret put CLIENT_SECRET</span><br></pre></td></tr></tbody></table></figure><p><code>client_secret</code> 也同样。</p></li><li><p>预览</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wrangler preview</span><br></pre></td></tr></tbody></table></figure><p>看起来一切顺利？才不是！</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/vmware_owHXCU2y2I.png"></p><p>这是人家 Spencer Woo 大佬的页眉和页脚啊~</p><p>根据原文说的：</p><blockquote><ul><li><p>我们 <strong>应该</strong> 更改默认「着落页面」，直接修改 <a href="https://github.com/spencerwooo/onedrive-cf-index/blob/master/src/folderView.js#L51-L55">src/folderView.js</a> 中 <code>intro</code> 的 HTML 即可；</p></li><li><p>我们也 <strong>应该</strong> 更改页面的 header，直接修改 <a href="https://github.com/spencerwooo/onedrive-cf-index/blob/master/src/render/htmlWrapper.js#L24">src/render/htmlWrapper.js</a> 即可；</p></li></ul></blockquote><p>着落页面即页脚，直接顺着链接点进去就知道在哪了：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210220072759.png"></p><p>页首要改的地方可能难找点，大概在 51 行：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210220073041.png"></p><p>还有一些地方，比如参考文章 3 写的三个高级功能，都在 <code>src/config/default.js</code> 能找到：</p><ul><li>离线下载，<code>proxyDownload</code>，默认已打开；</li><li>缓存，<code>cache</code>，默认已打开；</li><li>小文件上传，<code>upload</code>，默认未打开，如需要打开，还得回到 azure 面板中打开 <code>Files.ReadWrite</code> 权限，可参考<a href="https://zbttl.github.io/azure-yang-mao-er/#%E9%85%8D%E7%BD%AE-OneIndex">上一篇文章</a>。</li></ul><p>未提到的，图床的缩略图功能并没有代码控制，不用手动打开。</p><p>加密功能，类似于 oneIndex 的 <code>.password</code> 文件，在 <code>src/auth/config.js</code> 中，默认未打开。</p><p>这些都折腾完了，就可以正式部署了：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wrangler publish</span><br></pre></td></tr></tbody></table></figure><p>一切顺利的话，访问刚刚自己在 cf 绑定的二级域名即可。</p><hr><p>使用体验的话，凑合，部署起来是比 oneIndex + azure 麻烦多了，主要是把配置都移到本地而不是在 oneIndex 的 web 后台配置。</p><p>主要优势就是高峰期的时候，晚上 11 点这段时间，azure 这边不挂东西根本就下不动几 k 的跑；走 cf 代理流量的话，好歹有个 60k 左右的速度。。。聊胜于无嘛！</p><p><strong>（22.3.15 更新）</strong> refresh_token 有过期时间，过了一年多以后要更新一次网盘才能继续用。从头开始拿一遍 refresh_token，然后 <code>wrangler secret put REFRESH_TOKEN</code> 最后 <code>wrangler secret put REFRESH_TOKEN</code> 就能继续用了。</p><hr><p>另外作者做了个新项目 <a href="https://github.com/spencerwooo/onedrive-vercel-index">spencerwooo/onedrive-vercel-index: OneDrive public directory listing, powered by Vercel and Next.js</a>，新项目的其中一个优点就是解决了这个缓存刷新的问题，新项目能自动刷新并获取 refresh_token。除此之外还有以下优点：</p><ol><li><p>文档<a href="https://ovi.swo.moe/zh">Documentation - OneDrive Vercel Index</a>齐全，感觉坑少了不少，所以就不用单独起一篇东西了。</p></li><li><p>加上了搜索和下载文件夹功能</p></li></ol><p>不过就我而言，有两个问题导致原来的项目还是有一定可用武之地：</p><ol><li>要 fork 作者的 github 项目并修改一些信息。除非你是 github 会员，否则某些信息还是会被轻易看到的，比如公开的 onedrive 文件夹路径名称。因为需要和 vercel 集成，所以这个问题可能是无解的？</li><li>部署快捷的前提是用作者的接口，如果要用自己的 clientID 和 clientSecret 就会比原来更麻烦（要加密），好在现在共用同一组上面的信息应该不会导致限速问题。</li><li>不知道是不是我的错觉，感觉加载速度要稍微慢一点点。</li></ol><p>另外，还是有两个小坑：</p><ol><li><code>site.config.js</code> 中加密文件夹 protectedRoutes 字段里填写的是相对于 baseDirectory 的相对路径而不是绝对路径。也就是说，baseDirectory 中你已经填入了要分享的子文件夹后你想对整个文件夹进行加密，protectedRoutes 不要填和 baseDirectory  一样的路径而是填 ‘\‘。</li><li>根据万物皆可 cf 原则，可以在 vercel 的相应项目中，选到 settings-&gt;domain，填入相应的三级域名（注意是三级域名而不是托管在 cf 处的二级域名），点击 add，再把对应信息往 cf 里的 dns 中填就行了，其实类似的操作上面提过，往前翻一翻就能找到，这里就不再强调了~</li></ol></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;感觉 azure 做的 oneIndex 目录打开还是贼慢。&lt;/p&gt;
&lt;p&gt;玩玩 Spencer Woo 大佬修改的项目 &lt;a href=&quot;https://github.com/spencerwooo/onedrive-cf-index&quot;&gt;spencerwooo/onedrive-cf-index: 🏵 Probably the best looking OneDrive Index around! Powered by Cloudflare Workers.&lt;/a&gt;，咱觉得能过 cf 的速度可能会快一丢丢。&lt;/p&gt;</summary>
    
    
    
    <category term="Network" scheme="https://zbttl-github-io.vercel.app/categories/Network/"/>
    
    
    <category term="羊毛" scheme="https://zbttl-github-io.vercel.app/tags/%E7%BE%8A%E6%AF%9B/"/>
    
    <category term="托管" scheme="https://zbttl-github-io.vercel.app/tags/%E6%89%98%E7%AE%A1/"/>
    
    <category term="onedrive" scheme="https://zbttl-github-io.vercel.app/tags/onedrive/"/>
    
    <category term="cloudflare" scheme="https://zbttl-github-io.vercel.app/tags/cloudflare/"/>
    
  </entry>
  
</feed>
