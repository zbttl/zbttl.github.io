<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bao&#39;s 备忘录</title>
  
  
  <link href="https://zbttl-github-io.vercel.app/atom.xml" rel="self"/>
  
  <link href="https://zbttl-github-io.vercel.app/"/>
  <updated>2021-03-11T07:21:12.901Z</updated>
  <id>https://zbttl-github-io.vercel.app/</id>
  
  <author>
    <name>zbttl</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>服务器探针与流量重置</title>
    <link href="https://zbttl-github-io.vercel.app/fu-wu-qi-tan-zhen-yu-liu-liang-chong-zhi/"/>
    <id>https://zbttl-github-io.vercel.app/fu-wu-qi-tan-zhen-yu-liu-liang-chong-zhi/</id>
    <published>2021-03-10T16:00:00.000Z</published>
    <updated>2021-03-11T07:21:12.901Z</updated>
    
    <content type="html"><![CDATA[<p>之前薅了 azure 的羊毛，想想每个月 15g 流量，还是挂个探针吧。我之前一直在用 <a href="https://github.com/cppla/ServerStatus">cppla/ServerStatus: 云探针、多服务器探针、云监控、多服务器云监控，演示： https://tz.cloudcpp.com/</a>，因为它可以通过定时连接三网官网去探测服务器的延迟，好多画风更棒的探针都没这个功能（但准不准就不知道了，起码每天测出来的数据都是电信爆炸，这个我觉得是准的）。</p><h2 id="ServerStatus-安装"><a href="#ServerStatus-安装" class="headerlink" title="ServerStatus 安装"></a>ServerStatus 安装</h2><p>需要一台安装了 docker ，拥有公网 ip 的探针面板机，我选择装在境内的 tx 云学生机上，等过期了可能就装到家里的 n1 上然后靠 frp 端口透穿（</p><h3 id="面板机配置"><a href="#面板机配置" class="headerlink" title="面板机配置"></a>面板机配置</h3><p>下载配置文件，我习惯在 root 下单开文件夹：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /root/docker-compose/serverstatus</span><br><span class="line">cd /root/docker-compose/serverstatus</span><br><span class="line">wget https://raw.githubusercontent.com/cppla/ServerStatus/master/autodeploy/config.json</span><br></pre></td></tr></tbody></table></figure><p>并修改。默认配置文件中有四个文件块，对应着四个服务器，如果你手上没那么多 vps，可以酌情增减。抽出其中一个文件块来看。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">"username": "s01", #待会在客户端服务器中设置的用户名</span><br><span class="line">"name": "node1", #在 web 面板中显示的节点名</span><br><span class="line">"type": "xen", #在 web 面板中显示的服务器系统类型</span><br><span class="line">"host": "host1", #没啥用，作者在issue中说单纯为了区分用</span><br><span class="line">"location": "cn", #在 web 面板中显示的服务器地区</span><br><span class="line">"password": "USER_DEFAULT_PASSWORD" #待会在客户端服务器中设置的密码</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>设置好后，运行（80 port 太多东西占了，先调到 100 去）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always --name=serverstatus -v /root/docker-compose/serverstatus/config.json:/ServerStatus/server/config.json -p 100:80 -p 35601:35601 cppla/serverstatus</span><br></pre></td></tr></tbody></table></figure><h3 id="客户机配置"><a href="#客户机配置" class="headerlink" title="客户机配置"></a>客户机配置</h3><p>debian 默认带 python2，不用装了。直接下载（假设直接下到 <code>/root </code> 下）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -qO client-linux.py 'https://raw.githubusercontent.com/cppla/ServerStatus/master/clients/client-linux.py'</span><br></pre></td></tr></tbody></table></figure><p>运行：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python client-linux.py SERVER=[宿主服务器ip] USER=[宿主机配置中对应代码块的用户名] PASSWORD=[宿主机配置中对应代码块的密码]</span><br></pre></td></tr></tbody></table></figure><p>如果显示 <code>ipv4 granted</code> 之类的消息，那就证明连接正常。然后做后台运行和自启，请出老朋友 supervisor。</p><p>安装</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install supervisor -y</span><br></pre></td></tr></tbody></table></figure><p>新建文件 <code>tanzhen.conf</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[program:tanzhen]</span><br><span class="line">user=root</span><br><span class="line">command=python client-linux.py SERVER=[宿主服务器ip] USER=[宿主机配置中对应代码块的用户名] PASSWORD=[宿主机配置中对应代码块的密码]</span><br><span class="line">autostart=true</span><br><span class="line">redirect_stderr = true</span><br><span class="line">stdout_logfile_maxbytes = 1MB </span><br><span class="line">stdout_logfile = /tmp/tanzhen.log</span><br></pre></td></tr></tbody></table></figure><p>放入 <code>/etc/supervisor/conf.d</code> 中。重载配置：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl reload</span><br></pre></td></tr></tbody></table></figure><p>访问 <code>[面板机ip]:100</code>，正常的话就能看到客户端已连接。</p><hr><p>这么配置，总流量是找 <code>/proc/net/dev</code> 要的，于是出现两个问题：</p><ol><li>重启后流量显示重置</li><li>每月重置流量没法实现</li></ol><p>项目 issue [<a href="https://github.com/cppla/ServerStatus/issues/54">服务器流量统计怎么清零 · Issue #54 · cppla/ServerStatus</a>] 里面，作者建议用 vnstat 来探测流量。</p><h2 id="vnstat-探测流量与流量重置"><a href="#vnstat-探测流量与流量重置" class="headerlink" title="vnstat 探测流量与流量重置"></a>vnstat 探测流量与流量重置</h2><h3 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h3><p>安装 vnstat</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install vnstat</span><br></pre></td></tr></tbody></table></figure><p>安装后重启一遍服务，以网络获取接口情况；或者直接新建接口。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service vnstat restart</span><br><span class="line">#上面这个命令或者下面这个命令，二选一，假设网卡名为 eth0</span><br><span class="line">#vnstat --create -i eth0</span><br></pre></td></tr></tbody></table></figure><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -q</span><br></pre></td></tr></tbody></table></figure><p>出现类似</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210311143837.png"></p><p>就算成功。因为 5 分钟才刷新一次流量显示，所以 5 分钟后再次输入 <code>vnstat -q</code> 才会有正确的流量数据出现。类似于：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210311144006.png"></p><p>当然，如果等的不耐烦，也可以直接输入 <code>vnstat -u</code> 手动刷新流量显示值，然后输入 <code>vnstat -q</code> 查看。</p><h3 id="整合进探针中"><a href="#整合进探针中" class="headerlink" title="整合进探针中"></a>整合进探针中</h3><p>编辑探针客户端的 <code>client.py</code> 文件。</p><p>将</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">def liuliang():</span><br><span class="line">    NET_IN = 0</span><br><span class="line">    NET_OUT = 0</span><br><span class="line">    with open('/proc/net/dev') as f:</span><br><span class="line">        for line in f.readlines():</span><br><span class="line">            netinfo = re.findall('([^\s]+):[\s]{0,}(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)', line)</span><br><span class="line">            if netinfo:</span><br><span class="line">                if netinfo[0][0] == 'lo' or 'tun' in netinfo[0][0] \</span><br><span class="line">                        or 'docker' in netinfo[0][0] or 'veth' in netinfo[0][0] \</span><br><span class="line">                        or 'br-' in netinfo[0][0] or 'vmbr' in netinfo[0][0] \</span><br><span class="line">                        or 'vnet' in netinfo[0][0] or 'kube' in netinfo[0][0] \</span><br><span class="line">                        or netinfo[0][1]=='0' or netinfo[0][9]=='0':</span><br><span class="line">                    continue</span><br><span class="line">                else:</span><br><span class="line">                    NET_IN += int(netinfo[0][1])</span><br><span class="line">                    NET_OUT += int(netinfo[0][9])</span><br><span class="line">    return NET_IN, NET_OUT</span><br></pre></td></tr></tbody></table></figure><p>替换为</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def liuliang():</span><br><span class="line">NET_IN = 0</span><br><span class="line">NET_OUT = 0</span><br><span class="line">vnstat=os.popen('vnstat --dumpdb').readlines()</span><br><span class="line">for line in vnstat:</span><br><span class="line">if line[0:4] == "m;0;":</span><br><span class="line">mdata=line.split(";")</span><br><span class="line">NET_IN=int(mdata[3])*1024*1024</span><br><span class="line">NET_OUT=int(mdata[4])*1024*1024</span><br><span class="line">break</span><br><span class="line">return NET_IN, NET_OUT</span><br></pre></td></tr></tbody></table></figure><p>重载 supervisor 即可生效。</p><h3 id="配置定时重置和刷新时间"><a href="#配置定时重置和刷新时间" class="headerlink" title="配置定时重置和刷新时间"></a>配置定时重置和刷新时间</h3><p>vnstat 的配置放在 <code>/etc/vnstat.conf</code> 中。默认情况下每月流量重置时间为 1 号。如果需要修改，可以修改 MonthRotate 参数。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># on which day should months change</span><br><span class="line">MonthRotate 1</span><br></pre></td></tr></tbody></table></figure><p>流量总量显示 5 分钟刷新一次，有点久。可以修改</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># how often (in minutes) bandwidth detection is redone when</span><br><span class="line"># BandwidthDetection is enabled (0 = disabled)</span><br><span class="line">BandwidthDetectionInterval 5</span><br></pre></td></tr></tbody></table></figure><p>不过再怎么修改也没有默认的实时更新快。。。这也是使用 vnstat 代替默认方法的缺点之一。</p><p>还有，每月重置时间这个，如果你手动修改后再修改时区到最近的 0 点想看看能不能生效，多半是看不到的。根据：<a href="https://ubuntuforums.org/showthread.php?t=2324673">[SOLVED] vnstat not changing the start of the month [day]</a></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Having been in contact by e-mail with vnstat's author, Teemu Toivola, it was revealed that [as I suspected/hoped for] the new setting to MonthRotate will not take effect on the same month that it was done; so I will definitely have to wait until June 10th to confirm this feature of vnstat. Until then, I will keep this thread open.</span><br><span class="line">Oddly enough, despite my intense searching for an answer to this fact, I never read any explanation for it anywhere else; well, there is one now, right here!</span><br><span class="line">Thank you, Habitual, for the assistance.</span><br></pre></td></tr></tbody></table></figure><p>也就是说一定要等到真实时间的下个月才会重置流量。（当然把时间调到下个月能不能成功我就不知道了，懒得试）</p><h3 id="手动重置流量信息"><a href="#手动重置流量信息" class="headerlink" title="手动重置流量信息"></a>手动重置流量信息</h3><p>我还不知道上面这个方法能不能生效。。。如果不行的话，那就只能手动重置流量。</p><p>删除流量数据</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -r /var/lib/vnstat/.* </span><br><span class="line">rm -r /var/lib/vnstat/* </span><br></pre></td></tr></tbody></table></figure><p>重启 vnstat</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service vnstat restart</span><br></pre></td></tr></tbody></table></figure><p>改一改写进 crontab 也能达成自动重置流量的目的。</p><hr><p>如果删除后重启，查看 <code>service vnstat status</code> 发现遭遇文件权限问题：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R vnstat:vnstat /var/lib/vnstat</span><br></pre></td></tr></tbody></table></figure><p>另外，vnstat 的日志中还发现有一个叫 vnstat daemon，也就是叫 vnstatd 的东西。其实 vnstat 和 vnstatd 是同一个服务。操作（start/stop/restart/status）的时候只用操作其中一个就好。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前薅了 azure 的羊毛，想想每个月 15g 流量，还是挂个探针吧。我之前一直在用 &lt;a href=&quot;https://github.com/cppla/ServerStatus&quot;&gt;cppla/ServerStatus: 云探针、多服务器探针、云监控、多服务器云监控，演示： https://tz.cloudcpp.com/&lt;/a&gt;，因为它可以通过定时连接三网官网去探测服务器的延迟，好多画风更棒的探针都没这个功能（但准不准就不知道了，起码每天测出来的数据都是电信爆炸，这个我觉得是准的）。&lt;/p&gt;
&lt;h2 id=&quot;ServerStatus-安装&quot;&gt;&lt;a href=&quot;#ServerStatus-安装&quot; class=&quot;headerlink&quot; title=&quot;ServerStatus 安装&quot;&gt;&lt;/a&gt;ServerStatus 安装&lt;/h2&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://zbttl-github-io.vercel.app/categories/Linux/"/>
    
    
    <category term="探针" scheme="https://zbttl-github-io.vercel.app/tags/%E6%8E%A2%E9%92%88/"/>
    
    <category term="ServerStatus" scheme="https://zbttl-github-io.vercel.app/tags/ServerStatus/"/>
    
    <category term="vnstat" scheme="https://zbttl-github-io.vercel.app/tags/vnstat/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://zbttl-github-io.vercel.app/"/>
    <id>https://zbttl-github-io.vercel.app/</id>
    <published>2021-03-10T10:51:01.173Z</published>
    <updated>2021-03-10T14:13:11.312Z</updated>
    
    <content type="html"><![CDATA[<h1 id="debian-10-单独安装-mysql"><a href="#debian-10-单独安装-mysql" class="headerlink" title="debian 10 单独安装 mysql"></a>debian 10 单独安装 mysql</h1><p>之前在<a href="https://zbttl.github.io/yi-bu-dao-wei-de-vps-cong-ru-men-dao-fang-qi/?highlight=mysql">一步到位的 vps 从入门到放弃 | Bao’s 备忘录</a>谈过可以用 lnmp / 宝塔去装 mysql。 不过很多时候我并不需要 php，我自己的 vps 主用 caddy 而不是 nginx，只有 mysql 是刚需，加上我个人秉承着 「apt + dpkg 走天下」的暴论，就想着有没有官方的使用 apt 的单独安装 mysql 的方法（</p><p>只谈安装，剩下的配置流程，以前谈过了，参考本文开头那篇文章。</p><h2 id="使用-mysql-apt-config-安装"><a href="#使用-mysql-apt-config-安装" class="headerlink" title="使用 mysql-apt-config 安装"></a>使用 mysql-apt-config 安装</h2><p>和 ubuntu 那边的 ppa 是类似的东西（</p><p>参考文章：<a href="https://www.digitalocean.com/community/tutorials/how-to-install-the-latest-mysql-on-debian-10">How To Install the Latest MySQL on Debian 10 | DigitalOcean</a></p><ol><li><p>到 <a href="https://dev.mysql.com/downloads/repo/apt/">MySQL :: Download MySQL APT Repository</a> 获取最新的 mysql-apt-config 安装包。拿到地址后直接到系统里面 wget，现在的版本是 0.8.16-1，so：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://repo.mysql.com//mysql-apt-config_0.8.16-1_all.deb </span><br></pre></td></tr></tbody></table></figure></li><li><p>安装</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i mysql-apt-config*</span><br></pre></td></tr></tbody></table></figure><p>更新一下 apt 库</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></tbody></table></figure><p>安装</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install mysql-server</span><br></pre></td></tr></tbody></table></figure><p>安装过程中，会弹出两个窗口，一个是选择 mysql 需要安装的组件，一个是选择 mysql 的版本，目前可选 5.7 和 8.0；一个是输入 root 密码提权。</p></li></ol><h2 id="使用官网离线安装包"><a href="#使用官网离线安装包" class="headerlink" title="使用官网离线安装包"></a>使用官网离线安装包</h2><p>用上面的方法只能装两个版本，还要装更旧的就得去官网找包了。</p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>到<a href="https://downloads.mysql.com/archives/community/">MySQL :: Download MySQL Community Server (Archived Versions)</a>页面，选择相应版本和平台。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210310205740.png"></p><p>可以下载第一个 deb bundle，用于完全离线安装；也可以下载 mysql-community-server（上图第二个包）</p><h3 id="下载-mysql-community-server-并修复安装（二选一）"><a href="#下载-mysql-community-server-并修复安装（二选一）" class="headerlink" title="下载 mysql-community-server 并修复安装（二选一）"></a>下载 mysql-community-server 并修复安装（二选一）</h3><p>若是下载 mysql-community-server 的话，同样是获取到下载连接然后用 wget 下载再用 dpkg 安装，不在赘述；安装中一定会报错：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210310210236.png"></p><p>不过可以用命令来修复：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt --fix-broken install</span><br></pre></td></tr></tbody></table></figure><p>不报错，并提示输入 root 密码的话，基本就安装成功了。</p><h3 id="下载-deb-bundle-，完全离线安装（二选一）"><a href="#下载-deb-bundle-，完全离线安装（二选一）" class="headerlink" title="下载 deb bundle ，完全离线安装（二选一）"></a>下载 deb bundle ，完全离线安装（二选一）</h3><p>参考：<a href="https://dev.mysql.com/doc/mysql-installation-excerpt/5.7/en/linux-installation-debian.html">MySQL :: MySQL Installation Guide :: 7.6 Installing MySQL on Linux Using Debian Packages from Oracle</a></p><p>下载 deb bundle 包后解压</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir mysql</span><br><span class="line">tar -xvf mysql-server_*.tar -C ./mysql</span><br><span class="line">cd mysql</span><br></pre></td></tr></tbody></table></figure><p>安装 libaio</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install libaio1 -y</span><br></pre></td></tr></tbody></table></figure><p>配置，提权</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg-preconfigure mysql-community-server_*.deb</span><br></pre></td></tr></tbody></table></figure><p>安装</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -i mysql-{common,community-client,client,community-server,server}_*.deb</span><br></pre></td></tr></tbody></table></figure><p>不过说是完全离线，大概率还是要修复依赖。。。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt -f install -y</span><br></pre></td></tr></tbody></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>没法用 <code>apt remove</code> 命令直接下载，错误的卸载方法还可能导致未来无法正常安装。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-get remove --purge mysql-server mysql-client mysql-common -y</span><br><span class="line">apt-get autoremove -y</span><br><span class="line">apt-get autoclean</span><br><span class="line">rm -rf /etc/mysql</span><br></pre></td></tr></tbody></table></figure><p>中间弹出 <code>Remove data directories ?</code>，选 yes。</p><h3 id="提示-install-invalid-user-‘mysql’"><a href="#提示-install-invalid-user-‘mysql’" class="headerlink" title="提示 install: invalid user ‘mysql’"></a>提示 <code>install: invalid user ‘mysql’</code></h3><p>多半就是错误的卸载导致的。</p><p>运行</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adduser mysql</span><br></pre></td></tr></tbody></table></figure><p>设置一个密码即可。</p><h3 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h3><p>我闲的无聊折腾 mysql 安装就是因为我先装了 8.0 版本在 1g 的 azure 机子上，发现一重启探针就报警吃了 88% 内存，一排查发现是 mysql 的问题。</p><p>实测 8.0 版本吃的内存比 5.7 多一倍。。。换为 5.7，内存占用降为 63%。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;debian-10-单独安装-mysql&quot;&gt;&lt;a href=&quot;#debian-10-单独安装-mysql&quot; class=&quot;headerlink&quot; title=&quot;debian 10 单独安装 mysql&quot;&gt;&lt;/a&gt;debian 10 单独安装 mysql&lt;/h1&gt;&lt;p&gt;之前在&lt;a href=&quot;https://zbttl.github.io/yi-bu-dao-wei-de-vps-cong-ru-men-dao-fang-qi/?highlight=mysql&quot;&gt;一步到位的 vps 从入门到放弃 | Bao’s 备忘录&lt;/a&gt;谈过可以用 lnmp / 宝塔去装 mysql。 不过很多时候我并不需要 php，我自己的 vps 主用 caddy 而不是 nginx，只有 mysql 是刚需，加上我个人秉承着 「apt + dpkg 走天下」的暴论，就想着有没有官方的使用 apt 的单独安装 mysql 的方法（&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>netch 使用体验（代理规则获取）</title>
    <link href="https://zbttl-github-io.vercel.app/netch-shi-yong-ti-yan-dai-li-gui-ze-huo-qu/"/>
    <id>https://zbttl-github-io.vercel.app/netch-shi-yong-ti-yan-dai-li-gui-ze-huo-qu/</id>
    <published>2021-02-26T16:00:00.000Z</published>
    <updated>2021-03-09T18:03:17.593Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/NetchX/Netch">Netch</a> 这么一个功能强大且逻辑合理的 gui，才出不久但各种文档已经足够详细，还要详细谈谈的必要嘛。。。</p><p>还真有（</p><p>netch 本身自带的规则并不丰富，进程全局模式可用度不高，因此需要手动提取规则。</p><p>官方引用了 SSTAP-rule 处的文档<a href="https://github.com/FQrabbit/SSTap-Rule/wiki">Home · FQrabbit/SSTap-Rule Wiki</a>，给出了几种提取规则的方法：</p><blockquote><p><a href="https://github.com/oooldtoy/SSTAP_ip_crawl_tool#sstap_ip_crawl_tool">一个自动获取游戏远程ip，并自动写成SSTAP规则文件的脚本。 </a>(建议优先考虑此工具)</p><p><a href="https://github.com/NormanBB/N/blob/master/intro.md">使用 openQPA 进行基于游戏进程的ip地址获取</a></p><p><a href="https://github.com/FQrabbit/SSTap-Rule/blob/master/doc/UU-extract.md">提取加速器规则（超详细）</a></p></blockquote><p>经过实验，方法三加速效果最好也最简单。但也有两个问题：</p><ol><li>你得有 uu 加速器（tx 不行）会员，或者你有认识的人帮你提取（有会员为啥还要自建？）。</li><li>tun/tap 没有程序代理模式用起来那么稳定，特别是如果 netch 是二级代理模式那就更容易出问题了（有几率导致 loopback）。</li></ol><p>方法一，是提取游戏进程的路由。但问题的关键似乎并不是「该提取哪些路由规则」而是「哪些程序需要代理」。譬如 cod16 在仅代理本体 <code>ModernWarfare.exe</code> 的情况下游戏能够顺利进入，但丢包显示错误，且游戏下载并未加速。</p><p>方法二能找到游戏需要代理的进程（其本身也能找到需要加速进程的路由），需要将后台尽量清空，测试时流量跑的多的未知进程基本上就是需要代理的进程了。当然也不一定用方法 2 这个工具，许多工具都能达成目的，不过方法 2 这个程序，足够直观。缺点是，安装有点繁琐：</p><ol><li><p>安装 python2，如果之前安装有并主用 python3 的，不需要把 python2 加入 path 中。</p></li><li><p>安装 PyQt4。可以从<a href="https://sourceforge.net/projects/pyqt/files/PyQt4/PyQt-4.11.4/PyQt4-4.11.4-gpl-Py2.7-Qt4.8.7-x64.exe/download">这个地址</a>安装下载，也可以用 chocolatey 安装</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install pyqt4 -y</span><br></pre></td></tr></tbody></table></figure></li><li><p>安装模块。参见 <a href="https://python.freelycode.com/contribution/detail/139">[官解]Windows上Python2和3如何兼容？</a></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">py -2 -m pip install xmltodict==0.11.0</span><br><span class="line">py -2 -m pip install httplib2</span><br><span class="line">py -2 -m pip install bs4</span><br><span class="line">py -2 -m pip install dpkt</span><br></pre></td></tr></tbody></table></figure></li><li><p>下载并解压 <a href="https://github.com/l7dpi/openQPA">openQPA</a>（没有 release，直接拉取整个项目就行），双击 <code>QPA.py</code> 打开，如果。跑两圈需要加速的应用然后把闹得欢的进程加入加速名单吧！</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210228063445.png"></p></li></ol><p>另外，tun/tap 的全局进程代理模式和绕过大陆/局域网模式：<code>[3] Bypass LAN and China (TUN/TAP)</code>，以及后续的全局进程白名单模式，我尚未进行测试，如果效果好上面这些操作就当闲的没事干了（</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/NetchX/Netch&quot;&gt;Netch&lt;/a&gt; 这么一个功能强大且逻辑合理的 gui，才出不久但各种文档已经足够详细，还要详细谈谈的必要嘛。。。&lt;/p&gt;
&lt;p&gt;还真有（&lt;/p&gt;</summary>
    
    
    
    <category term="game" scheme="https://zbttl-github-io.vercel.app/categories/game/"/>
    
    
    <category term="游戏加速" scheme="https://zbttl-github-io.vercel.app/tags/%E6%B8%B8%E6%88%8F%E5%8A%A0%E9%80%9F/"/>
    
    <category term="netch" scheme="https://zbttl-github-io.vercel.app/tags/netch/"/>
    
  </entry>
  
  <entry>
    <title>ikago 和 pcap2socks 使用体验</title>
    <link href="https://zbttl-github-io.vercel.app/ikago-he-pcap2socks-shi-yong-ti-yan/"/>
    <id>https://zbttl-github-io.vercel.app/ikago-he-pcap2socks-shi-yong-ti-yan/</id>
    <published>2021-02-19T16:00:00.000Z</published>
    <updated>2021-02-26T22:48:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考文章：<a href="https://www.v2ex.com/t/672367#r_8979623">分享自己用 Go 写的游戏加速器 IkaGo - V2EX</a></p><p>从 <a href="https://t.me/NewlearnerChannel">Newlearner の自留地</a> 了解到的游戏加速软件。</p><p>后来发现作者还写了一个 pcap2socks 的项目，同样用于游戏加速。</p><p>区别在于，</p><ul><li>ikago 是完整的一套游戏加速方案；</li><li>pcap2socks 只保留了旁路由的功能，还需搭配 socks 代理使用。</li></ul><p>和很多专攻 pc 代理的加速器不同，这类型加速器的加速原理是旁路由，常见于给各种游戏主机加速。用过各种游戏加速器 pc 客户端主机加速的都应该有印象：在 pc 这边开好主机加速，再在游戏机那一段设置好 ip 配置，正确设置的话 pc 加速器这边会显示已成功加速。而这俩加速器的使用步骤也差不多是这样。</p><p>当然，自建加速器和大厂加速器的取舍我已经在<a href="">另一篇</a>文章里提过了，这里只谈这种方案在技术上对普通加速器的优势：</p><p>各个大厂的游戏加速器的主机加速功能只能为一台设备加速，而且这台设备还有平台限制；而自建加速器想加速多少设备就加速多少设备；只要你想，加速 pc 、手机也可以。</p><p>当然了，旁路由加速要求加速设备和被加速设备不能是同一个设备，用过大厂游戏加速器主机加速的人也应该对此深有体会，自己想玩主机却还要一直开着电脑？大厂们也知道这点，于是就趁机贩卖起能够更为小巧省电，独立运行器加速器的主机盒；以及我在<a href="https://zbttl.github.io/lu-you-qi-pao-fen-shua-ji-hou-ri-tan-ji-ji-ge-jia-su-qi-shi-yong-qing-kuang-shou-ji/?highlight=%E8%B7%AF%E7%94%B1#%E6%80%BB%E7%BB%93%E6%88%91%E7%94%A8%E8%BF%87%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8A%A0%E9%80%9F%E5%99%A8%E7%9A%84%E4%BC%98%E5%8A%A3%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89">另一篇文章</a>中谈到那些能安装加速器插件的路由器。其实原理都并没有脱离 arp 劫持 + 代理流量的旁路由模式。自建就更灵活了：只要你的设备能跑起 go，就能运行。各类软路由，甚至手机上的 termux，都可以达成要求，这里就不详细阐述了。</p><h2 id="ikago"><a href="#ikago" class="headerlink" title="ikago"></a><a href="https://github.com/zhxie/ikago">ikago</a></h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>server 和 client 端运行平台是 linux 或者 windows 的，直接下载对应 release。或者按文档给的方法，安装 go 并 git clone 项目后使用 go run 运行，适合其他平台。</p><h3 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h3><p>vps 这边新建一个 server.json，假设就放在 <code>/root</code> 下吧</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">"listen-devices": [],</span><br><span class="line">"upstream-device": "",</span><br><span class="line">"gateway": "",</span><br><span class="line">"mode": "faketcp",</span><br><span class="line">"method": "aes-128-gcm",</span><br><span class="line">"password": "[密码]",</span><br><span class="line">"rule": true,</span><br><span class="line">"monitor": 9400,</span><br><span class="line">"verbose": false,</span><br><span class="line">"log": "",</span><br><span class="line">"mtu": 1400,</span><br><span class="line">"kcp": false,</span><br><span class="line">"kcp-tuning": {</span><br><span class="line">    "sndwnd": 100,</span><br><span class="line">    "rcvwnd": 100,</span><br><span class="line">    "datashard": 20,</span><br><span class="line">    "parityshard": 20,</span><br><span class="line">    "acknodelay": false,</span><br><span class="line">    "nodelay": false,</span><br><span class="line">    "interval": 10,</span><br><span class="line">    "resend": 0,</span><br><span class="line">    "nc": 0</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">"fragment": 1400,</span><br><span class="line">"port": 9300</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以改的几个地方：</p><ul><li>monitor 是和 web 监控端链接的接口。不过 monitor 这个接口在 client 端开就足够了，不一定要在 server 端这里再开一个。</li><li>verbose，详情，设为 true 日志会变得更详细。</li><li>log。日志输出位置。但后续我们会用 supervisor 开启自启的同时去输出日志，所以没必要开这个。</li><li>port。远程端口。</li></ul><p>看起来可以调但其实不能调的地方：</p><ul><li>mode。文档写可选 tcp 和 faketcp，但实际上用 tcp 的话不能开启加密，即 method 那里只能填 none，否则连不通。</li><li>kcp。kcp 设为打开的话，client 端平台不能是 windows，否则也连不通，会报错 <code>network layer type not support</code>。</li></ul><p>这俩应该是 bug 吧（前者在项目的 <a href="https://github.com/zhxie/ikago#known-issues">Known Issues</a> 中有提到）。。。不过看作者项目好久没动，我也不好意思提 issue 去了（又不是不能用）。</p><p>假设咱的 release 版 server 端二进制文件放在 <code>/root/ikago</code> 下吧，启动看看：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/root/ikago/ikago-server -c /root/ikago/server.json</span><br></pre></td></tr></tbody></table></figure><p>大概效果是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210224092039.png"></p><h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><p>以 windows 为例，新建 client.json:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">"listen-devices": [],</span><br><span class="line">"upstream-device": "",</span><br><span class="line">"gateway": "",</span><br><span class="line">"mode": "faketcp",</span><br><span class="line">"method": "aes-128-gcm",</span><br><span class="line">"password": "[密码]",</span><br><span class="line">"rule": true,</span><br><span class="line">"monitor": 9400,</span><br><span class="line">"verbose": true,</span><br><span class="line">"log": "",</span><br><span class="line">"mtu": 1400,</span><br><span class="line">"kcp": false,</span><br><span class="line">"kcp-tuning": {</span><br><span class="line">    "sndwnd": 100,</span><br><span class="line">    "rcvwnd": 100,</span><br><span class="line">    "datashard": 20,</span><br><span class="line">    "parityshard": 20,</span><br><span class="line">    "acknodelay": false,</span><br><span class="line">    "nodelay": false,</span><br><span class="line">    "interval": 10,</span><br><span class="line">    "resend": 0,</span><br><span class="line">    "nc": 0</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">"publish": "10.6.0.2",</span><br><span class="line">"fragment": 1400,</span><br><span class="line">"port": 0,</span><br><span class="line">"sources": [</span><br><span class="line">    "10.6.0.1",</span><br><span class="line">    "10.6.0.3"</span><br><span class="line">],</span><br><span class="line">"server": "[vps_ip]:9300"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>monitor 和 verbose，和 server 那边含义一致。client 这边建议都开启。</li><li>sources：劫持并监听的本地 ip，即要加速的设备在路由器下的本地 ip。</li><li>publish：除了使用 arp 或者到路由器中获取需要加速设备的 ip 并填入 sources 中，更推荐的方法是单独做一个网段，用过加速器主机加速的各位应该都不陌生。作者选用的方法是模仿 tx 加速器的网段设置，被加速主机 ip 填 10.6.0.1，网关填 10.6.0.2,前者写到 sources 中，后者写到 publish 中，我个人又多加了一个 ip，这样如果还有另一个加速的设备就不用回来再修改了。</li></ul><p>启动</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\ikago-client.exe -c .\client.json</span><br></pre></td></tr></tbody></table></figure><p>效果差不多是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210225090832.jpg"></p><h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><p>被加速设备改用手动获取 ip 地址，publish 处的地址填入网关一项中；sources 处的其中一个地址填入 ip 一项中，子网掩码为 255.255.255.0，dns 一项填入 8.8.8.8。</p><p>打开 ikago-web，可以选择拉取项目 <a href="https://github.com/zhxie/ikago-web">zhxie/ikago-web: IkaGo Web is a front-end interface for IkaGo.</a> 在本地打开或者自搭，也可以使用<a href="http://ikago.ikas.ink/">作者搭建的 web 页面</a>。</p><p>点击 configure，path 改成 <code>localhost:9400</code>。正确设置的话，status 处会显示为 active，并且左下角显示有已经加速上的设备。</p><h3 id="服务端设置自启（可选）"><a href="#服务端设置自启（可选）" class="headerlink" title="服务端设置自启（可选）"></a>服务端设置自启（可选）</h3><ol><li><p>安装 supervisor</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install supervisorctl -y</span><br></pre></td></tr></tbody></table></figure></li><li><p>新建一个 <code>ikago.conf</code>，内容如下</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[program:ikago]</span><br><span class="line">user=root</span><br><span class="line">command=/root/ikago/ikago-server -c /root/ikago/server.json</span><br><span class="line">autostart=true</span><br><span class="line">redirect_stderr = true</span><br><span class="line">stdout_logfile_maxbytes = 1MB </span><br><span class="line">stdout_logfile = /tmp/ikago.log</span><br></pre></td></tr></tbody></table></figure><p> 把这个文件放进 <code>/etc/supervisor/conf.d</code>。</p></li><li><p>运行</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl reload</span><br></pre></td></tr></tbody></table></figure><p> 后续直接通过</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f /tmp/ikago.log</span><br></pre></td></tr></tbody></table></figure><p> 查看日志。</p></li></ol><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><ol><li><p>有时虽然配置正确了，被加速设备在 web 面板中却未出现，且被加速设备也连接不上网络。尝试重启笔记本和路由器，还有可能是某些路由器本身系统因素导致出现问题，我曾经就遭遇过加速设备在主路由（ac86u，梅林改，本身就不算稳定的系统）加速不上，挂上一个刷入小米路由器的联想 newifi mini 并让加速和被加速设备连上后加速成功的例子。</p><p> 另一种情况是我一开始习惯把网关设为 <code>.1</code> 为结尾的地址，因此 publish 处我填了 <code>10.6.0.1</code>，sources 处填了 <code>10.6.0.2</code>，而被加速设备处也进行相应顺序上的调换，结果发现加速不上；换回来就成功了。这就比较玄学了。。。后面的 pcapsocks 也出现过这样的问题。</p></li><li><p>我在<a href="">前一篇</a>文章中写过不太推荐这个加速器，原因就在于，我运行后也没在使用，但五六天后我的探针给我报警了，回来一查：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Xshell_D1Iuwab1Dc.png"></p><p>摊手（</p></li></ol><h2 id="pcap2socks-和-pcap2socks-gui"><a href="#pcap2socks-和-pcap2socks-gui" class="headerlink" title="pcap2socks 和 pcap2socks-gui"></a><a href="https://github.com/zhxie/pcap2socks">pcap2socks</a> 和 <a href="https://github.com/zhxie/pcap2socks-gui">pcap2socks-gui</a></h2><p>和 ikago 略有差异，pcap2socks 隧道的工作交给 socks5 了，只需要一个放在本地的二进制文件即可。假设 socks 开在 1080 端口，则：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\pcap2socks.exe -s 10.6.0.1 -p 10.6.0.2 -d 127.0.0.1:1080</span><br></pre></td></tr></tbody></table></figure><p>这里的 <code>-s</code> 和 <code>-p</code> 在上面的 ikago client 配置中都有对应项，还不熟悉的可以返回去看。</p><p>这时多半会报错</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: Cannot determine the interface. Available interfaces are listed below, and please use -i &lt;INTERFACE&gt; to designate:</span><br></pre></td></tr></tbody></table></figure><p>然后底下这些就是设备列表，找到你的上网网卡的设备，复制前面那一长串 <code>\Device\NPF_{xxx}</code>，在命令用 <code>-i</code> 参数带上，即再次输入：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\pcap2socks.exe -s 10.6.0.1 -p 10.6.0.2 -d 127.0.0.1:1080 -i '\Device\NPF_{xxx}'</span><br></pre></td></tr></tbody></table></figure><p>主机端参考 ikago 那边的设置就行了。</p><p>这个我还是不推荐用。。。因为有时运行一段时间就报错：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">warning: receive from proxy: TCP: xxx:443 -&gt; 0: 你的主机中的软件中止了一个已建立的连接。 (os error 10053)</span><br></pre></td></tr></tbody></table></figure><p>但其 gui 版本经过我实验表现相对稳定，也不用考虑网卡那串长长的 CLSID，甚至有 tx/uu 加速器默认的 ip 方案可直接选用，推荐使用。（这都喂到嘴里了，应该不用教了吧，gui 教程还要截图挺累的）</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210227054945.png"></p><p>（唯一的缺点也许是不能在软路由上用 gui 版。不过软路由直接设置成旁路由然后全局代理他不香嘛？）</p><p>不过这里还是有个小问题，某些设备（特别是 windows 20H2）打开这个 gui 看到的是一片空白，我排查了一下，应该是新版 edge 的锅，有这么几种解决方案：</p><ol><li><p>（优先使用）作者在项目中底下写的，启用 loopback 。以管理员权限运行 powershell，输入：</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CheckNetIsolation.exe LoopbackExempt -a -n="Microsoft.Win32WebViewHost_cw5n1h2txyewy"</span><br></pre></td></tr></tbody></table></figure></li><li><p>安装 chromium edge dev。可以从 <a href="https://www.microsoftedgeinsider.com/zh-cn/download/">Microsoft Edge Insider Channels</a> 下载。也可以直接用 chocolatey 安装。</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install microsoft-edge-insider-dev -y</span><br></pre></td></tr></tbody></table></figure></li><li><p>嫌 chromium edge dev 太臃肿？也可以只下 runtime：<a href="https://developer.microsoft.com/zh-cn/microsoft-edge/webview2/#download-section">Webview2 - Microsoft Edge Developer</a>。下载安装里面的 x64 版「常青版独立安装程序」（卧槽这翻译和坐和放宽有的一拼）。</p></li><li><p>（并不是正确的解决方法，但我潜意识感觉后续可能会有用，记录一下）更新 <code>WebView2Loader.dll</code>。<br> 安装 nuget</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install NuGet.CommandLine -y</span><br></pre></td></tr></tbody></table></figure><p>  安装 <a href="https://www.nuget.org/packages/Microsoft.Web.WebView2">NuGet Gallery | Microsoft.Web.WebView2 1.0.705.50</a>：</p>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nuget install Microsoft.Web.WebView2</span><br></pre></td></tr></tbody></table></figure><p>  提取 <code>WebView2Loader.dll</code>，可利用 everything 搜索，一般在 <code>C:\Windows\System32\Microsoft.Web.WebView2.1.0.705.50\build\x64\</code> 下，everything 可能会搜索到其他几个 x64 目录下也有 <code>WebView2Loader.dll</code>，应该都是同一个文件。pcap2socks 自带的 <code>WebView2Loader.dll</code> 应该包含了几个平台的依赖，大小 400 多 k，我们提取的 x64 版只有 133k。（这年头不会还有用 x86 的吧？用 x86 寨板跑加速？）</p><p>  然后把提取到的文件覆盖进 pcap2socks 目录内就行。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;参考文章：&lt;a href=&quot;https://www.v2ex.com/t/672367#r_8979623&quot;&gt;分享自己用 Go 写的游戏加速器 IkaGo - V2EX&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从 &lt;a href=&quot;https://t.me/NewlearnerChannel&quot;&gt;Newlearner の自留地&lt;/a&gt; 了解到的游戏加速软件。&lt;/p&gt;</summary>
    
    
    
    <category term="game" scheme="https://zbttl-github-io.vercel.app/categories/game/"/>
    
    
    <category term="游戏加速" scheme="https://zbttl-github-io.vercel.app/tags/%E6%B8%B8%E6%88%8F%E5%8A%A0%E9%80%9F/"/>
    
    <category term="ikago" scheme="https://zbttl-github-io.vercel.app/tags/ikago/"/>
    
    <category term="pcap2socks" scheme="https://zbttl-github-io.vercel.app/tags/pcap2socks/"/>
    
  </entry>
  
  <entry>
    <title>onedrive 挂载到 cloudflare</title>
    <link href="https://zbttl-github-io.vercel.app/onedrive-gua-zai-dao-cloudflare/"/>
    <id>https://zbttl-github-io.vercel.app/onedrive-gua-zai-dao-cloudflare/</id>
    <published>2021-02-16T16:00:00.000Z</published>
    <updated>2021-03-08T16:59:44.910Z</updated>
    
    <content type="html"><![CDATA[<p>感觉 azure 做的 oneIndex 目录打开还是贼慢。</p><p>玩玩 Spencer Woo 大佬修改的项目 <a href="https://github.com/spencerwooo/onedrive-cf-index">spencerwooo/onedrive-cf-index: 🏵 Probably the best looking OneDrive Index around! Powered by Cloudflare Workers.</a>，咱觉得能过 cf 的速度可能会快一丢丢。</p><p>本来就有详细的安装教程，本来说顺着教程摸过去就好？结果发现，还是有坑。</p><p>参考文章：</p><ul><li><a href="https://github.com/spencerwooo/onedrive-cf-index/blob/master/README-CN.md">onedrive-cf-index/README-CN.md at master · spencerwooo/onedrive-cf-index</a></li><li><a href="https://github.com/beetcb/onedrive-cf-index-CN">beetcb/onedrive-cf-index-CN: onedrive-cf-index ：世纪互联版简陋指南</a></li><li><a href="https://github.com/heymind/OneDrive-Index-Cloudflare-Worker#-%E6%96%B0%E7%89%B9%E6%80%A7-v11">heymind/OneDrive-Index-Cloudflare-Worker: DEPRECATED: Please use https://github.com/spencerwooo/onedrive-cf-index instead</a></li></ul><p>后两篇是第一篇的补充 / 原项目，在这里整合一下。</p><h3 id="azure-面板操作"><a href="#azure-面板操作" class="headerlink" title="azure 面板操作"></a>azure 面板操作</h3><ol><li><p>手工获取 <code>client_id</code> 和 <code>client secret</code>。<a href="https://zbttl.github.io/azure-yang-mao-er/#%E9%85%8D%E7%BD%AE-OneIndex">上一篇文章</a>中我详细讲过，跳过。</p></li><li><p>获取 <code>authorization code</code> 和 <code>refresh_token</code>。这里的问题在于文章中获取 <code>refresh_token</code> 接口的<a href="https://heymind.github.io/tools/microsoft-graph-api-auth">网站</a>已经 gg 了。不过里面获取 code 的功能还能用。而获取 <code>access_token</code>，可以参考微软官网的操作 <a href="https://docs.microsoft.com/en-us/onedrive/developer/rest-api/getting-started/graph-oauth?view=odsp-graph-online#code-flow">Authorization for OneDrive API via Microsoft Graph - OneDrive dev center | Microsoft Docs</a> 手工获取。</p><ol><li><p>打开接口页面 <a href="https://heymind.github.io/tools/microsoft-graph-api-auth">Microsoft Graph API Auth</a>，在 「Authorize for code  」处，填入 Client ID 并点击 Authorize 就会弹出一个浏览器消息，里面是 authorization code，是以 <code>M.R3_BAY</code> 开头的一串东西。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210220012033.png"></p><p>（手工获取）不排除未来这个网页的 code 获取接口也会爆。保险起见，翻译一下微软官网的做法：</p><blockquote><h3 id="Step-1-Get-an-authorization-code"><a href="#Step-1-Get-an-authorization-code" class="headerlink" title="Step 1. Get an authorization code"></a>Step 1. Get an authorization code</h3><p>To start the sign-in process with the code flow, use a web browser or web-browser control to load this URL request.</p><p>Copy</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id={client_id}&amp;scope={scope}</span><br><span class="line">  &amp;response_type=code&amp;redirect_uri={redirect_uri}</span><br></pre></td></tr></tbody></table></figure><h4 id="Required-query-string-parameters"><a href="#Required-query-string-parameters" class="headerlink" title="Required query string parameters"></a>Required query string parameters</h4><table><thead><tr><th align="left">Parameter name</th><th align="left">Value</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><em>client_id</em></td><td align="left">string</td><td align="left">The client ID created for your app.</td></tr><tr><td align="left"><em>scope</em></td><td align="left">string</td><td align="left">A space-separated list of scopes that your app requires.</td></tr><tr><td align="left"><em>redirect_uri</em></td><td align="left">string</td><td align="left">The redirect URL that the browser is sent to when authentication is complete.</td></tr><tr><td align="left"><em>response_type</em></td><td align="left">string</td><td align="left">The type of response expected from the authorization flow. For this flow, the value must be <strong>code</strong>.</td></tr></tbody></table><h4 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h4><p>Upon successful authentication and authorization of your application, the web browser will be redirected to your redirect URL with additional parameters added to the URL.</p><p>Copy</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://myapp.com/auth-redirect?code=df6aa589-1080-b241-b410-c4dff65dbf7c</span><br></pre></td></tr></tbody></table></figure></blockquote><p>简化一下就是，用浏览器访问（<code>client_id</code> 那里填入自己的 Client ID）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id=[client_id]</span><br><span class="line">&amp;scope=offline_access%20Files.Read%20Files.ReadWrite.All&amp;response_type=code&amp;redirect_uri=https://heymind.github.io/tools/microsoft-graph-api-auth</span><br></pre></td></tr></tbody></table></figure><p>如果 web 接口没坏的话，和用 web 的效果一样；坏了的话就会带到一个 404 网页。不要慌张，此时地址栏的 url 里面已经包含有以 <code>M.R3_BAY</code> 开头直到地址栏结尾的 code 了。</p><p>当然参考文章 2 里也给了一个略有差异但实际上也能使用的方法，同样是通过浏览器访问（不过原文是访问到世纪互联版 od，改个主机地址就成）：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://login.chinacloudapi.cn/common/oauth2/v2.0/authorize?client_id=[client_id]&amp;response_type=code&amp;redirect_uri=http://localhost/od-cf&amp;response_mode=query&amp;scope=offline_access%20Files.Read%20Files.ReadWrite.All</span><br></pre></td></tr></tbody></table></figure><p>这里的 redirect_uri 用了虚无的 <code>http://localhost/od-cf</code>，可以改成 web 接口的地址，也可以保留并在 azure 面板的 <code>redirect_url</code> 处添加这个网址。仅就此处不同的 <code>redirect_url</code> 不影响后续使用。</p></li><li><p>安装一个 post 工具。比如 Insomnia 或者是 postman。都可以通过 chocolatey 安装。这里演示 postman 的。</p><p>微软官网上一共写了五个参数：</p><blockquote><p>POST <a href="https://login.microsoftonline.com/common/oauth2/v2.0/token">https://login.microsoftonline.com/common/oauth2/v2.0/token</a><br>Content-Type: application/x-www-form-urlencoded</p><p>client_id={client_id}&amp;redirect_uri={redirect_uri}&amp;client_secret={client_secret}<br>&amp;code={code}&amp;grant_type=authorization_code</p></blockquote><p>在 postman 中新建页面，请求类型设为 post，地址为 <a href="https://login.microsoftonline.com/common/oauth2/v2.0/token%EF%BC%9B%E5%88%87%E6%8D%A2%E5%88%B0">https://login.microsoftonline.com/common/oauth2/v2.0/token；切换到</a> boy 这个 tab，底下一栏选中 application/x-www-form-urlencoded；然后新建五个 key：</p><ul><li><code>grant_type</code> 填 authorization_code</li><li><code>code </code>填刚刚获取的 <code>authorization code</code></li><li><code>redirect_uri</code> 填刚刚那一步用的回调 url</li><li><code>client_id</code>：你们懂得。</li><li><code>client_secret</code>：同上。</li></ul><p>点击 send，不出意外的话结果里就会有 <code>access_token</code> 和 <code>refresh_token</code>。记录下 <code>refresh_token</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210220035446.png"></p><p>不过如果获取失败（比如显示 <code>error: "invalid_request"</code>），那么就说明参数有误。注意，此时需要重新从第一小步开始获取 <code>authorization code</code>，因为 <code>authorization code</code> 只能用一次。另外 authorization code 多次获取的话也只有最后一次获取的 code 能用来获取 <code>refresh_token</code>。</p></li></ol></li></ol><h3 id="cloudflare-面板操作"><a href="#cloudflare-面板操作" class="headerlink" title="cloudflare 面板操作"></a>cloudflare 面板操作</h3><ol><li><p>搞一个域名并挂接到 cf 这事应该不用我强调了（</p></li><li><p>打开域名项，右下角有区域 id 和账户 id，记录下来。</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210220051612.png"></p><ol start="3"><li>从顶上那个 worker 图标中进入 worker 配置项，点击管理 worker -&gt; 创建 worker，可以修改一下左上角的部分域名名字（也是整个 worker 的名字），然后点击保存并部署。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210220052345.png"></p><ol start="4"><li>我不是特别能理解。。。cf 不是绑定域名就能用么，为什么做出来的 worker 一开始还用的是 <code>xxxx.yyy.workers.dev</code> 这种 cf 自己的域名。。。这么长不好记啊。推荐把这个 worker 的域名绑定我们本身的域名。参考文章：<a href="https://www.andressevilla.com/how-to-setup-cloudflare-workers-on-a-custom-domain/">How to Setup Cloudflare Workers on a Custom Domain - Andres Sevilla</a></li></ol><p>到顶上 dns 图标那里，添加记录，类型设为 cname；名称起一个顺耳的二级域名名称；目标则设置为我们刚刚创建的那个 <code>xxxx.yyy.workers.dev</code>，保存。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210220060402.png"></p><p>切回 worker，点添加路由，路由这栏设置为我们刚刚添加的域名，比如我们的域名是 xxxx.com，二级域名就按上面那张图的来，这里就填 <code>cf.xxxx.com/*</code>。 worker 就选择我们刚刚创建的 worker 就好了。</p><h3 id="本地-git-操作"><a href="#本地-git-操作" class="headerlink" title="本地 git 操作"></a>本地 git 操作</h3><ol><li><p>这一步装了 node 的可以忽略；没装 node 的，吃下作者的按理，装个 nvm 8：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">choco install nvm -y</span><br><span class="line">nvm install latest --lts</span><br><span class="line">nvm on</span><br></pre></td></tr></tbody></table></figure></li><li><p>拉取项目，安装：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/spencerwooo/onedrive-cf-index.git</span><br><span class="line">cd .\onedrive-cf-index\</span><br><span class="line">npm i @cloudflare/wrangler -g</span><br><span class="line">npm install</span><br><span class="line"># 使用 wrangler 登录 CloudFlare 账户</span><br><span class="line">wrangler login</span><br><span class="line"># 使用这一命令检查自己的登录状态</span><br><span class="line">wrangler whoami</span><br></pre></td></tr></tbody></table></figure></li><li><p>修改项目目录下的 <code>wrangler.toml</code>：</p><ul><li><code>name</code>：worker 的名字。</li><li><code>account_id</code>：账户 id；</li><li><code>zone_id</code>：区域 id。</li></ul><p>创建 KV bucket，如果待会要在本地预览效果的话，两个命令都要打（话说回来，这两个命令每个都会产生一个 id 和 一个 preview id，但两组数值串里面的 id 其实是一样的）。记下第一个命令生成的 id 和第二个命令生成的 preview id。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 创建 KV bucket</span><br><span class="line">wrangler kv:namespace create "BUCKET"</span><br><span class="line"></span><br><span class="line"># 创建包括预览功能的 KV bucket</span><br><span class="line">wrangler kv:namespace create "BUCKET" --preview</span><br></pre></td></tr></tbody></table></figure><p>回到 <code>wrangler.toml</code>，在 <code>kv_namespaces:</code> 下把刚刚记下的 id 和 preview id 填进去。</p><p>修改 <code>src/config/default.js</code>：</p><ul><li><code>client_id</code>：你懂得；</li><li><code>base</code>：你想要展示的网盘文件夹。要以斜杠 <code>/</code> 打头。</li></ul><p>使用 <code>wrangler</code> 添加 Cloudflare Workers 环境变量：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wrangler secret put REFRESH_TOKEN</span><br></pre></td></tr></tbody></table></figure><p> 随后会提示你输入 <code>refresh_token</code>，粘贴过去然后回车确定。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wrangler secret put CLIENT_SECRET</span><br></pre></td></tr></tbody></table></figure><p><code>client_secret</code> 也同样。</p></li><li><p>预览</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wrangler preview</span><br></pre></td></tr></tbody></table></figure><p>看起来一切顺利？才不是！</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/vmware_owHXCU2y2I.png"></p><p>这是人家 Spencer Woo 大佬的页眉和页脚啊~</p><p>根据原文说的：</p><blockquote><ul><li><p>我们 <strong>应该</strong> 更改默认「着落页面」，直接修改 <a href="https://github.com/spencerwooo/onedrive-cf-index/blob/master/src/folderView.js#L51-L55">src/folderView.js</a> 中 <code>intro</code> 的 HTML 即可；</p></li><li><p>我们也 <strong>应该</strong> 更改页面的 header，直接修改 <a href="https://github.com/spencerwooo/onedrive-cf-index/blob/master/src/render/htmlWrapper.js#L24">src/render/htmlWrapper.js</a> 即可；</p></li></ul></blockquote><p>着落页面即页脚，直接顺着链接点进去就知道在哪了：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210220072759.png"></p><p>页首要改的地方可能难找点，大概在 51 行：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210220073041.png"></p><p>还有一些地方，比如参考文章 3 写的三个高级功能，都在 <code>src/config/default.js</code> 能找到：</p><ul><li>离线下载，<code>proxyDownload</code>，默认已打开；</li><li>缓存，<code>cache</code>，默认已打开；</li><li>小文件上传，<code>upload</code>，默认未打开，如需要打开，还得回到 azure 面板中打开 <code>Files.ReadWrite</code> 权限，可参考<a href="https://zbttl.github.io/azure-yang-mao-er/#%E9%85%8D%E7%BD%AE-OneIndex">上一篇文章</a>。</li></ul><p>未提到的，图床的缩略图功能并没有代码控制，不用手动打开。</p><p>加密功能，类似于 oneIndex 的 <code>.password</code> 文件，在 <code>src/auth/config.js</code> 中，默认未打开。</p><p>这些都折腾完了，就可以正式部署了：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wrangler publish</span><br></pre></td></tr></tbody></table></figure><p>一切顺利的话，访问刚刚自己在 cf 绑定的二级域名即可。</p><hr><p>使用体验的话，凑合，部署起来是比 oneIndex + azure 麻烦多了，主要是把配置都移到本地而不是在 oneIndex 的 web 后台配置。</p><p>主要优势就是高峰期的时候，晚上 11 点这段时间，azure 这边不挂东西根本就下不动几 k 的跑；走 cf 代理流量的话，好歹有个 60k 左右的速度。。。聊胜于无嘛！</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;感觉 azure 做的 oneIndex 目录打开还是贼慢。&lt;/p&gt;
&lt;p&gt;玩玩 Spencer Woo 大佬修改的项目 &lt;a href=&quot;https://github.com/spencerwooo/onedrive-cf-index&quot;&gt;spencerwooo/onedrive-cf-index: 🏵 Probably the best looking OneDrive Index around! Powered by Cloudflare Workers.&lt;/a&gt;，咱觉得能过 cf 的速度可能会快一丢丢。&lt;/p&gt;</summary>
    
    
    
    <category term="Network" scheme="https://zbttl-github-io.vercel.app/categories/Network/"/>
    
    
    <category term="羊毛" scheme="https://zbttl-github-io.vercel.app/tags/%E7%BE%8A%E6%AF%9B/"/>
    
    <category term="托管" scheme="https://zbttl-github-io.vercel.app/tags/%E6%89%98%E7%AE%A1/"/>
    
    <category term="onedrive" scheme="https://zbttl-github-io.vercel.app/tags/onedrive/"/>
    
    <category term="cloudflare" scheme="https://zbttl-github-io.vercel.app/tags/cloudflare/"/>
    
  </entry>
  
  <entry>
    <title>azure 羊毛（二）</title>
    <link href="https://zbttl-github-io.vercel.app/azure-yang-mao-er/"/>
    <id>https://zbttl-github-io.vercel.app/azure-yang-mao-er/</id>
    <published>2021-02-14T16:00:00.000Z</published>
    <updated>2021-02-19T23:43:57.548Z</updated>
    
    <content type="html"><![CDATA[<p>azure 学生包除了那一个 Linux 服务器，还有以下的东西（参考<a href="https://www.jianshu.com/p/98c77e0ea05d">Azure 学生订阅包含内容 - 简书</a>）</p><blockquote><p><strong>一年时间内包括：</strong></p><p>100美元额度</p><p>2个免费主机（b1s 1核1G）<br> 1个windows主机<br> 1个linux主机</p><p>2个64G的免费磁盘</p><p>一个250G的SQLSERVER数据库</p><p>一个5 GB Azure Cosmos DB （可当做mongodb用）</p><p>每月20G流出流量免费（流入流量全免）</p><p>10个免费的App Service（可用于搭建OneIndex等不太占用流量的站点，好处有自带https，自带伪静态支持，自带用户验证，可以设成只有自己和指定的微软账号才能访问网站，并且全鼠标可视化操作，无需命令行敲代码。）</p></blockquote><p>20G 这个存疑（我之前得到的消息是 15G）。两个数据库没想通有啥用。。。那剩下的羊毛，就是 windows server 和 app service 这俩玩意了。</p><h2 id="Windows-server"><a href="#Windows-server" class="headerlink" title="Windows server"></a>Windows server</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>参考文章：<a href="https://51.ruyo.net/11319.html">Windows Azure学生订阅额度完全使用(薅干)指南教程 - 教程资源|网络资源 - 如有乐享</a></p><p>参考文章说的很清楚了，总结起来就是：</p><ol><li>建的时候选 b1s  smalldisk windows server 2012 r2，不用 smalldisk 后续磁盘缩不到 64g；单核也不建议用更高配置的系统；</li><li>创建成功后停止虚拟机，修改磁盘大小。</li></ol><p>另外还有两个细节：</p><ol><li>关闭实例优惠（默认应该就是关着的，而且一般人账号里面真的会有 windows server 2012 的授权吗）</li><li>用新的资源组，和之前 Linux 那个资源组区分开，以免删除的时候出现不必要的麻烦。</li></ol><hr><p>接着就能通过 rdp 愉快的使用了。一般来说，windows server 我们是用来挂机的，不过。。。如果我也想用这玩意来做「科学」用途呢（</p><h3 id="证书申请与验证"><a href="#证书申请与验证" class="headerlink" title="证书申请与验证"></a>证书申请与验证</h3><p>Windows 的各种操作大部分人都很熟悉，但搭建像 Linux 那样用途的服务器，因为环境和生态的原因，操作上还是有巨大的差距的。Windows 这边申请证书虽然有比较官方的 win-acme，但一个是刚转过来的我对这玩意比较陌生，二个是它用的 cloudflare 接口不仅是外挂的而且还要单开 api 接口参数， 而 Linux 这边的 acme.sh 只需要默认的 CF_Key，这么一对比还是后者更趁手。Windows 上用熟悉的 Linux 工具解决问题，呃。。。这很不优雅但有用（x）</p><ol><li><p>装 chocolatey 和 git。</p><p>吐槽一句自带的服务器版 ie 实在是太烦人了。。。还好有 chocolatey 可以直接装东西不用通过浏览器（</p><p>装 git 的原因是因为 git 自带精简版的 mingw。当然如果你要运行的东西需要一些其他的 dependence，装 cygwin 或 msys2 也不是不行（</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))</span><br><span class="line">choco install git -y</span><br></pre></td></tr></tbody></table></figure></li><li><p>用 choco 安装 acme.sh。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install acme.sh -y</span><br></pre></td></tr></tbody></table></figure><p>导航到 acme.sh 的安装目录，目前最新的版本是 2.88，用 chocolatey 安装的话大概就会在 <code>C:\ProgramData\chocolatey\lib\acme-sh\tools\acme.sh-2.8.8</code> 这里。</p><p>右键空白处，点击 <code>git bash here</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210217185446.png"></p></li><li><p>接下来就是大家熟悉的操作了。可以参考<a href="https://zbttl.github.io/yi-bu-dao-wei-de-vps-cong-ru-men-dao-fang-qi/#%E5%85%B3%E4%BA%8E%E8%AF%81%E4%B9%A6%E7%9A%84%E9%85%8D%E7%BD%AE">一步到位的vps从入门到放弃 | Bao’s 备忘录</a>。最后证书建议安装在一个路径固定的目录（方便以后操作，放在桌面等 <code>C:/Users/xxx</code> 打头的目录），但不要放在 c 盘根（权限问题）。我自己放在 %public% 文件夹（即  <code>C:\Users\Public</code>），新建的 <code>ssl</code> 文件夹中。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CF_Key="xxxxxx"</span><br><span class="line">export CF_Email="xxxxxx"</span><br><span class="line">./acme.sh --issue --dns dns_cf -d baobaobao.club -d *.baobaobao.club -k ec-256</span><br><span class="line">mkdir C:\\Users\\Public\\ssl</span><br><span class="line">./acme.sh --installcert -d baobaobao.club --keypath 'C:\Users\Public\ssl\baobaobao.key' --fullchainpath 'C:\Users\Public\ssl\baobaobao.crt' --ecc</span><br></pre></td></tr></tbody></table></figure></li><li><p>acme.sh 的自动续签依赖于 Linux 的 crontab。windows 没这玩意，只能自己搞个伪劣版（</p><p>新建 <code>acme-cron.sh</code> 放在 %public% 下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env bash</span><br><span class="line">cd 'C:\ProgramData\chocolatey\lib\acme-sh\tools\acme.sh-2.8.8'</span><br><span class="line">./acme.sh --renew --dns dns_cf -d baobaobao.club -d '*.baobaobao.club' -k ec-256</span><br><span class="line"> ./acme.sh --installcert -d baobaobao.club --keypath 'C:\Users\Public\ssl\baobaobao.key' --fullchainpath 'C:\Users\Public\ssl\baobaobao.crt' --ecc</span><br></pre></td></tr></tbody></table></figure><p>在同一目录下新建 <code>acme.bat</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">cmd /c ""%PROGRAMFILES%\Git\bin\bash.exe" --login -i -- %PUBLIC%\acme-cron.sh"</span><br></pre></td></tr></tbody></table></figure><p>新建一个计划任务</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schtasks /Create /tn acme-renew /tr "%public%/acme.bat" /sc  DAILY /st  00:00:00</span><br></pre></td></tr></tbody></table></figure><p>每天 0 点这个脚本就会弹窗定时续签了。反正是远程 rdp，又不是 24 小时盯着的，弹窗啥的，无所谓吧~</p></li></ol><hr><p>什么你说其他内容？不就剩下一个工具吗。</p><p>工具选择 v2，因为 v2 客户端服务端二进制是二合一的，只取决于配置文件如何配置，不需要再去考虑自己二进制版本是 sever 版还是 client 版。还有记得开放防火墙。</p><p>还不会就手放键盘脑补吧，前有嘴含内存条脑补游戏画面，今有申请了证书后手放键盘脑补 p 站首页（雾</p><h2 id="OneIndex-app-service-version"><a href="#OneIndex-app-service-version" class="headerlink" title="OneIndex app service version"></a>OneIndex app service version</h2><p>我刚好有 office 365 家庭版，也试过挂在 vps 上，但 app service 这类 PaaS 我没那么熟，这次就折腾看看。</p><p>参考文章：</p><ul><li><a href="https://www.imaegoo.com/2020/azure-app-service/">体验 Azure 应用服务：可以白嫖的 OneIndex 空间 - iMaeGoo’s Blog</a></li></ul><p>开服务既可以走 web 也可以走 cli：</p><h3 id="建立-Web-应用（web，二选一）"><a href="#建立-Web-应用（web，二选一）" class="headerlink" title="建立 Web 应用（web，二选一）"></a>建立 Web 应用（web，二选一）</h3><ol><li><p>在 azure 首页 -&gt; 创建资源 -&gt; 查看全部，搜索框中输入 web 应用，创建。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210218003811.png"></p></li><li><p>创建页面参考上一篇文章 <a href="https://zbttl.github.io/github-xue-sheng-bao-he-azure-yang-mao/#%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA">github 学生包和 azure 羊毛 - 创建虚拟机</a>，同样的最好不要和别的项目共用资源组。唯一要修改的地方是运行时堆栈选择 php 7.3。没提到的地方保持默认。最后点击下一步 -&gt; 创建，等他创建完成。</p></li></ol><h3 id="建立-web-应用（CLI，二选一）"><a href="#建立-web-应用（CLI，二选一）" class="headerlink" title="建立 web 应用（CLI，二选一）"></a>建立 web 应用（CLI，二选一）</h3><p>微软的 web 面板反应迟钝，也可以通过 CLI 创建，需要通过 azure-cli 软件。下文参考<a href="https://ld246.com/article/1542285912094">使用 Azure App Service 免费计划部署 Solo 博客过程记录 - 链滴</a>。</p><ol><li><p>安装 azure-cli</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install azure-cli -y</span><br></pre></td></tr></tbody></table></figure></li><li><p>登录 Azure 账号</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az login</span><br></pre></td></tr></tbody></table></figure><p>查看所有订阅，这里面 “id” 后面的这一串就是待会要用到的订阅 id</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az account list --all</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210218015139.png"></p><p>选择一个education 订阅进行操作</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az account set -s [订阅ID]</span><br></pre></td></tr></tbody></table></figure><p>创建部署用户（用户名密码自己起）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az webapp deployment user set --user-name [用户名] --password [密码]</span><br></pre></td></tr></tbody></table></figure><p>查看所有部署用户</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az webapp deployment user show</span><br></pre></td></tr></tbody></table></figure><p>查看所有可用区域</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az account list-locations</span><br></pre></td></tr></tbody></table></figure><p>创建资源组，-l 这里输入刚刚可用区域里面找到的相应区域名字，这里选择 East Asia（即香港区，其实部署在哪里无所谓啦，最后流量也不走服务器，目录查看并不太吃流量和速度）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az group create -l eastasia -n [资源组名称]</span><br></pre></td></tr></tbody></table></figure><p>创建免费的应用服务计划，注意这里 -n 参数和上面的 -n 参数含义不一样（毕竟 -n 应该是代表 new），这里的是服务器计划名称，资源组名称填在 -g。服务计划名称中不能含有下划线。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az appservice plan create -n [服务计划名称] -g [资源组名称] --sku FREE</span><br></pre></td></tr></tbody></table></figure><p>查看运行时堆栈</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az webapp list-runtimes</span><br></pre></td></tr></tbody></table></figure><p>创建应用。这里 -n 又变成应用服务名称了，服务计划名称放在 -p（plan）。我用的是 powershell，后面 -r 这里需要双重转义。用 cmd 的填 <code>-r "php|7.3"</code> 就行。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az webapp create -g [资源组名称] -p [服务计划名称] -n [应用服务名称] -r '"php|7.3"'</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目"></a>导入项目</h3><ol><li><p>创建完毕后从 azure 面板资源组找到创建的应用服务和应用服务计划，点开应用服务。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210218020450.png"></p></li><li><p>找到左侧的部署中心，右边会显示「未配置 CI/CD」，顺着按钮转到设置。在设置一项 -&gt; 源中选择本地 git 并保存。另外提一嘴，这里用 github 应该才是最方便的，但选 github 底下堆栈那里找不到 php，莫非是不支持？那就没辙了。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210218032603.png"></p></li><li><p>转到右侧的凭据，记下克隆 url，用户名和密码。用户名只用记以 $ 打头的后半部分（不知道为啥新版部署中心这里这么写，我第头几次输用户名的时候疯狂报错，后来到旁边的经典部署中心才发现斜杠前面的部分是多余的，不过旧版部署中心。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210218044156.png"></p></li><li><p>拉取 oneindex 项目到本地。oneindex 源项目已经被删掉挺久了。。。这里给出两个克隆 / 魔改版：</p><ul><li><del><a href="https://github.com/steven52880/Oneindex-Mod">steven52880/Oneindex-Mod: 适用于有较快php空间、小文件长时间展示不修改的情况。 比如展示多个小文件html，展示markdown等。</a></del></li><li><a href="https://github.com/cyrilsoy/Oneindex">cyrilsoy/Oneindex: Onedrive Directory Index</a></li></ul><p>后者是谷歌搜到的第一个，我翻了一下代码，又亲自部署了一下感觉没问题；前者来自 <a href="https://t.me/NewlearnerChannel">Newlearnerの自留地</a> 之前的推荐（后续发现部署错误，疑似回调接口损坏）。</p>   <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/steven52880/Oneindex-Mod.git</span><br><span class="line">cd oneindex</span><br><span class="line">git remote add azure [部署URL]</span><br><span class="line">git push azure -f</span><br></pre></td></tr></tbody></table></figure><p>如果 git push 这一步密码不慎输错的话。。。有可能需要到 windows 的凭据管理器 -&gt; windows 凭据中删除相应凭据回来再执行最后一步（直接修改可能不行）。</p></li></ol><h3 id="配置-OneIndex"><a href="#配置-OneIndex" class="headerlink" title="配置 OneIndex"></a>配置 OneIndex</h3><p>在部署中心处点击右侧的浏览，进入 OneIndex 站点。如果进去的时候发现不是下面这个样子，多半是还在部署，等等吧，等日志中显示部署成功。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210218045918.png"></p><p>点击下一步，点击获取应用 id 和机密，按要求操作，不出意料第一个界面会返回 client secret 而第二个界面中有 client_id，回来填入即可。</p><p>如果不成功的话，可以尝试手动获取。其中一个框里面已经填上了网址，这就是待会要用到的回调 url。记下来。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210218050036.png"></p><p>「回到」 azure。这里的回到打引号是因为开服务的这个号可以完成使命了，你可以换另一个号来获取剩下的内容（当然继续用开服务的这个号也可以）。搜索并进入「应用注册」，名称随便填；受支持的账户类型选最长的那一个；重定向 url 就填我们刚刚获得的回调 url。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210218051832.png"></p><p>点击确定后跳转到概要，记下其中的应用程序(客户端) ID。这个是 OneIndex 注册界面中 Client_id 的值。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210218052107.png"></p><p>从左侧面板来到证书和密码，点新客户端密码，说明随便起，截止日期可选从不。点击添加后，这个值便是 OneIndex 注册界面中的 Client_secret。记得保存好，出了该页面再回来这个值就会被打码（不过也没什么，删掉再建就行）。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210218052427.png"></p><p>来到 api 权限，点击添加权限，看到那个大大的 microsoft Graph，点进去，选委托的权限，勾选 OpenId 类下的 <code>offline_access</code>，Files 类下的 <code>Files.Read</code>、<code>Files.Read.All</code> 共三个权限，点击添加权限即可。</p><p>回到 OneIndex，填上这两个值即可。</p><p>后续按照流程绑定账号，不出意料就能进入管理界面了（默认密码 OneIndex）。完成部署。</p><h3 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h3><p>OneIndex 我只想共享两个目录的内容，但根目录下那么多文件夹一个个设置排除很麻烦，所以我干脆又做了一个 app service。部署的时候设置的 Client_id 和 client secret 可以反复使用，不用重新生成。</p><p>onedrive 目录类项目还有好多个变种，要换另一个试试的话，某些情况下直接导入到原来部署好的应用服务也可以生效，如果部署日志显示成功那就是可以。但也有很多情况需要重新删掉原来的应用服务重新建一个，比如要换 client_id 和 client_secret 的时候；不同的项目可能有不同的回调 url，如果用的同一个 client_id 的话，记得在对应的 client_id 应用 -&gt; 身份验证中添加对应的回调 url。</p><p>目前能部署的貌似只有 OneIndex?多个版本的 OLAINDEX 用这个方法部署不上去，估计可能是什么依赖没装。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;azure 学生包除了那一个 Linux 服务器，还有以下的东西（参考&lt;a href=&quot;https://www.jianshu.com/p/98c77e0ea05d&quot;&gt;Azure 学生订阅包含内容 - 简书&lt;/a&gt;）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;一年时间内包括：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;100美元额度&lt;/p&gt;
&lt;p&gt;2个免费主机（b1s 1核1G）&lt;br&gt; 1个windows主机&lt;br&gt; 1个linux主机&lt;/p&gt;
&lt;p&gt;2个64G的免费磁盘&lt;/p&gt;
&lt;p&gt;一个250G的SQLSERVER数据库&lt;/p&gt;
&lt;p&gt;一个5 GB Azure Cosmos DB （可当做mongodb用）&lt;/p&gt;
&lt;p&gt;每月20G流出流量免费（流入流量全免）&lt;/p&gt;
&lt;p&gt;10个免费的App Service（可用于搭建OneIndex等不太占用流量的站点，好处有自带https，自带伪静态支持，自带用户验证，可以设成只有自己和指定的微软账号才能访问网站，并且全鼠标可视化操作，无需命令行敲代码。）&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Network" scheme="https://zbttl-github-io.vercel.app/categories/Network/"/>
    
    
    <category term="羊毛" scheme="https://zbttl-github-io.vercel.app/tags/%E7%BE%8A%E6%AF%9B/"/>
    
    <category term="azure" scheme="https://zbttl-github-io.vercel.app/tags/azure/"/>
    
    <category term="windows server" scheme="https://zbttl-github-io.vercel.app/tags/windows-server/"/>
    
    <category term="app service" scheme="https://zbttl-github-io.vercel.app/tags/app-service/"/>
    
    <category term="acme.sh" scheme="https://zbttl-github-io.vercel.app/tags/acme-sh/"/>
    
    <category term="托管" scheme="https://zbttl-github-io.vercel.app/tags/%E6%89%98%E7%AE%A1/"/>
    
    <category term="onedrive" scheme="https://zbttl-github-io.vercel.app/tags/onedrive/"/>
    
  </entry>
  
  <entry>
    <title>k2 中继</title>
    <link href="https://zbttl-github-io.vercel.app/k2-zhong-ji/"/>
    <id>https://zbttl-github-io.vercel.app/k2-zhong-ji/</id>
    <published>2021-01-26T16:00:00.000Z</published>
    <updated>2021-03-08T16:21:25.359Z</updated>
    
    <content type="html"><![CDATA[<p>曾经在<a href="https://zbttl.github.io/lu-you-qi-pao-fen-shua-ji-hou-ri-tan-ji-ji-ge-jia-su-qi-shi-yong-qing-kuang-shou-ji/#%E5%B0%8F%E7%B1%B3%E5%9B%BA%E4%BB%B6%E5%8A%A0%E9%80%9F%E7%9A%84%E5%8A%A3%E5%8A%BF%EF%BC%8C%E5%92%8C%E5%90%8E%E7%BB%AD%E5%8A%A0%E9%80%9F%E6%96%B9%E6%A1%88%E7%9A%84%E5%AF%BB%E6%89%BE">路由器跑分 &amp;&amp; 刷机 后日谈 及 几个加速器使用情况收集</a>中提到过</p><blockquote><p>刷个 padavan 在家当非单独子网的无线中继好了，加速器识别到家中的华硕主路由器，让华硕来加速，这个就仅仅弥补 xbox 无线拉跨的问题。</p></blockquote><p>今天就谈谈中继的问题。</p><h2 id="padavan"><a href="#padavan" class="headerlink" title="padavan"></a>padavan</h2><p>参考文章：<a href="https://www.bilibili.com/read/cv5828717/">老毛子Padavan固件（华硕固件）无线中继设置以及自动切换脚本中继 - 哔哩哔哩</a></p><h3 id="打开中继"><a href="#打开中继" class="headerlink" title="打开中继"></a>打开中继</h3><p>padavan 界面经过几次调整，现在的中继菜单项在高级设置（记点进去而不是在它本身的下拉菜单项） -&gt; 无线 2.4 GHz/无线 5 Ghz -&gt; 无线桥接中。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-01-27%20072941.jpg"></p><p>需要做说明的就是其中的无线 AP 工作模式和无线 AP-Client 角色。</p><ul><li><p>AP 工作模式。分为 AP（禁用桥接）、WDS桥接（禁用AP）、WDS中继（桥接+AP）、APCliet（禁用AP）、APClient（APClient+AP) 五种。 </p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-01-27%20073051.jpg"></p><p>AP（禁用桥接）为默认不使用桥接时的模式，而 WDS中继（桥接+AP）、APClient（APClient+AP) 是在剩下两种上开启 AP（无线信号）的模式，所以我们在这两种中间选一种就行了。</p><p>WDS （注意不要和那个有漏洞的 WPS 功能混淆了）需要在被中继的路由上开启相关功能，ap 则不需要，本文我们选择后者。另外 WDS 中继还有升级版 —— 被称作 mesh（听起来熟悉多了吧，这两年各大厂都在吹这玩意）。</p></li><li><p>无线 AP-Client 角色。分为 LAN bridge 和 WAN（Wireless ISP）两种。简单来说，前者是网桥，后者是路由。之前用极路由 2 做 xbox 中继加速的时候，加速器在极路由上安装，所以是路由模式（极路由的中继也只有路由模式可选）；此处我们用 K2 做加速，但加速器在主路由（ac86u）上安装，那么就得用网桥模式。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-01-27%20182740.jpg"></p></li></ul><p>之后只要点开上级 SSID 搜索并选主路由的 SSID，输好密码，其他保持默认就行。</p><h3 id="网桥中继关闭-dhcp-及调整网段"><a href="#网桥中继关闭-dhcp-及调整网段" class="headerlink" title="网桥中继关闭 dhcp 及调整网段"></a>网桥中继关闭 dhcp 及调整网段</h3><p>但如果选择网桥中继，还需要做一些其他的设置：</p><ul><li>内部网络（LAN） -&gt; DHCP 服务器，关闭「启用 DHCP 服务器」的开关，因为主路由的 DHCP 会和中继路由的 DHCP 冲突。</li><li>内部网络（LAN）-&gt; 内网设置 -&gt; ip 地址，填入一个 ip 地址，格式为 192.168.x.y。x 和 y 的地址原则上随意，但 x 最好在自己常中继的设备的网段中，y 要避免和自己常中继设备网段设备中的设备 ip 冲突。打个比方，自己主路由的网关是 192.168.111.1，且通过查询主路由管理界面发现自己没有 ip 为 192.168.111.2 的设备，那么就可以把这个地址设置为 192.168.111.2。</li></ul><h3 id="打开中继后进入中继路由管理界面"><a href="#打开中继后进入中继路由管理界面" class="headerlink" title="打开中继后进入中继路由管理界面"></a>打开中继后进入中继路由管理界面</h3><p>成功中继后，路由器有可能就不能直接用原来的 ip 地址进入管理界面了。有两种情况：</p><ol><li><p>按上面所说的中继路由内部网络 ip 在主路由网段内。那么此时先尝试访问之前我们填的 ip 地址。如果访问不到，说明中继路由被主路由重新分配了 ip 地址。我们需要一些方法「探测」到中继路由在网段内的 ip 地址：</p><ul><li><p>通过主路由 web 管理中的设备管理界面（比如下面这张图最顶上那个就是 K2，但其实这个地址完全不对）</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210128035916.png"></p></li><li><p>windows 的 <code>arp -a</code> 命令（这个命令只能显示内网有多少设备但不显示具体设备名）或其他一些嗅探工具</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210128040228.png"></p></li><li><p>android 的 pingtools （推荐）或其他的一些嗅探工具</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Screenshot_20210128-045757.png"></p></li></ul></li><li><p>按上面所说的中继路由内部网络 ip 在不在主路由网段内。比如之前我说的，带 xbox 出门去同学家，同学的路由器刚好也是能加速的，那我也可以带 k2 去中继，但此时开机后你会发现因为没开 dhcp 连上的设备无法获得相应网段的 ip 地址自然访问不到中继路由的 web 界面了。两种解决方法。</p><ul><li><p>通过有线方式，路由器 wan 口连接其他有线路由器的 lan 口，自己的手机 / pc 连上接着中继路由的路由器然后使用「中继路由内部网络 ip 在主路由网段内」的几种方法就能找到中继路由的新 ip；</p></li><li><p>手动设置 ip。以 windows 为例，连上中继路由器后，右击任务栏的右侧的网络图标，选择“打开网络和 Internet 设置”，点击更改适配器选项，找到自己当前网卡的适配器，双击打开，进入属性，双击 Internet 协议版本 4，设置为使用下面的 ip 地址。ip 地址具体设置，还是以上面中继路由 ip 设置为的 192.168.111.2 为例，此处 ip 可填 192.168.111.x，子网掩码 255.255.255.0，网关 192.168.111.x，这里两个 x 填啥都可以，无所谓，目的只是为了最后让机子和路由器在同一网段中。设置好后确定，等一阵子打开 192.168.111.2 就是中继路由的管理界面了。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210128011605.png"></p><p>如果是安卓也是相同的改法，甚至更简单，这里就不再复述了（不过安卓需要在连接前就手动指定 ip 和网关，否则就会一直卡在获取 ip 地址这一步连不上 wifi，另外连接前可能要先关掉流量，有的机子判断 wifi 无法上网时还会继续跑流量，导致中继这边 web 打不开）。</p><p>修改完中继参数后记得再把系统这个 ip 设置改回自动获得。另外一点，设置好中继后有可能在主路由中看到中继路由，但因为网段不一样，所以是没法直接访问的，除非去改中继路由的内网 ip 地址。可拿回家又要再改，没必要。</p></li></ul></li></ol><h3 id="自动切换被中继路由"><a href="#自动切换被中继路由" class="headerlink" title="自动切换被中继路由"></a>自动切换被中继路由</h3><p>因为中继路由我只在自己家和我同学家使用，每次换地方设置中继都要折腾一边，有没有自动切换的方法？当然有。</p><p>就在中继页面的底部，可以编辑 ap_script，按照说明，在自动切换中继信号处写两条规则就行了。写完后点应用然后重启路由。注意！不要直接拔电源重启，而是按页面顶部的重启键重启，因为后者重启时会检测配置是否保存了，而前者有可能重启后你发现刚写的配置没了。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-01-28%20033440.jpg"></p><p>最后一点。在系统管理 -&gt; 操作模式处，也可以设置路由模式为无线接入点。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-01-28%20034658.jpg"></p><p>随后进行无线中继的话就会固定使用 LAN bridge无线 AP-Client 角色。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-01-27%20035053.jpg"></p><p>但使用这个模式会导致 ap_script 脚本失效（日志中显示连接了然后又断开再显示无法连接），和无线路由器模式相比没有优势（唯一算优势的地方，就是路由器模式下 LAN bridge 就算连上网了指示灯也是红的，而无线接入点模式下连上网灯是黄的，也就是正常的）。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-01-27%20035508.jpg"></p><hr><p><strong>（21.2.6 更新）</strong> 灯的问题属于 hiboy padavan 独有问题。自编译 <a href="https://github.com/hanwckf/rt-n56u">hanwckf/rt-n56u: Padavan</a> 中继模式灯颜色正常，但自编译又没有自切换中继信号的功能了。</p><p>另外 padavan 这么中继问题不小。。。过了几天拿到我朋友家，发现中继没有正常工作，不仅如此，用任何方法 web 管理界面都进不去了（包括访问我们修改过的内部网络 ip，通过有线接到别人的路由下等方法），甚至 pingtools 都探测不到中继路由的 ip，只得重置，感觉 padavan 不靠谱。</p><p><strong>(21.2.10 更新)</strong> 之前中继的时候用的是 newifi Y1S 附赠的 12V 1.5a 电源。后续买了一个 ppd 的 n1，送了一个 12v 1.5a 的电源，意外发现有时用 Y1S 电源时中继失败但换用 n1 电源就可以中继成功，看来电源稳定性对中继是有影响的（联想的几个硬件相对斐讯那算是「偷工减料」了），这个现象在后面的 asus 固件中继中又出现了一次。</p><h2 id="openwrt（21-2-6-更新）"><a href="#openwrt（21-2-6-更新）" class="headerlink" title="openwrt（21.2.6 更新）"></a>openwrt<strong>（21.2.6 更新）</strong></h2><p>padavan 不太行，那就换用 openwrt 吧。</p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>openwrt 的中继和自动切换热点需要加入两个 luci 插件：<code>luci-proto-relay</code> 和 <code>luci-app-travelmate</code>，可以自己用 ssh 的 opkg 命令安装，我的选择是在编译过程中添加，避免自己用 opkg 安装时出现依赖问题，<code>luci-proto-relay</code> 在  LuCI -&gt; Protocols 下；<code>luci-app-travelmate</code> 在 LuCI -&gt; Applications 下，不懂的编译的同学可以参考<a href="https://zbttl.github.io/lu-you-qi-pao-fen-shua-ji/?highlight=openwrt">这篇文章</a>。吐槽一句，k2 要编译成功还得多精简几个东西（比如 ipv6 啊，usb 驱动啊），8m 的 rom 太拮据了。。。</p><p>另外 travelmate 有两个前身。</p><p>一个叫 auto-ap，参考</p><ul><li><a href="https://www.right.com.cn/forum/thread-171010-1-1.html">【2016-05-12】 更新 - autoap 自动切换中继信号插件-支持LUCI界面配置 - OPENWRT专版 - 恩山无线论坛 - Powered by Discuz!</a> </li><li><a href="https://www.right.com.cn/forum/thread-347014-1-1.html">openwrt插件autoap（自动切换中继信号）系统配置配合调整 - OPENWRT专版 - 恩山无线论坛 - Powered by Discuz!</a>）</li></ul><p>另一个叫 luci-app-autorepeater，参考 <a href="https://github.com/peter-tank/luci-app-autorepeater">peter-tank/luci-app-autorepeater: Helps you turn your router as automatic repeater, by join scanned wireless station from ssid or bssid.</a></p><p>在最新的 openwrt R21.2.1 版本中，这两个插件已均不生效（但后来我尝试刷入旧版 openwrt 这俩东西也没成功生效过。。。）</p><h3 id="配置-travelmate"><a href="#配置-travelmate" class="headerlink" title="配置 travelmate"></a>配置 travelmate</h3><p>先配置自动切换中继路由的功能。在服务 -&gt; travelmate 处，默认的未配置情况下这里是 Interface Wizard 页面，需要在 <code>Create Uplink interface</code> 处把默认的 <code>trm_wwan</code> 改为自己的无线 wifi 中继接口。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210302001719.png"></p><p>默认为 <code>wwan</code>，改好后确定保存，即可进入真正的配置界面。</p><p>转到 Wireless Stations 处。此处的扫描 radio0 是扫描 5g 信号，radio1 则是扫描 2.4g 信号。通过扫描，把需要中继的信号都加进去，调整好顺序。</p><p>如果说目前受限于地理位置，无法通过扫描添加未来要自动切换的被中继信号呢？可以通过 Advanced -&gt; Edit Wireless Configuration，在下面的代码编辑器最后一行下面添加</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">config wifi-iface</span><br><span class="line">option network 'wwan'</span><br><span class="line">option device 'radio0'</span><br><span class="line">option mode 'sta'</span><br><span class="line">option ssid '[被中继信号ssid]'</span><br><span class="line">option encryption 'psk2'</span><br><span class="line">option key '[被中继信号密码]'</span><br><span class="line">option disabled '1'</span><br></pre></td></tr></tbody></table></figure><p>最后回到总览。启用 <code>Enable travelmate</code>，建议关闭 <code>Captive Portal Detection</code>（出门在外，可能会中继外面的 wifi 或自己的手机热点，信号没那么稳定，再开这个选项切来切去体验就会变差），最后保存并应用。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210302022533.png"></p><h3 id="配置中继桥"><a href="#配置中继桥" class="headerlink" title="配置中继桥"></a>配置中继桥</h3><p>参考文章：</p><ul><li><a href="https://openwrt.org/zh/docs/guide-user/network/wifi/relay_configuration">[OpenWrt Wiki] Wifi扩展器、中继器及桥接配置</a></li></ul><p>说到这里，使用 openwrt 有个好处：可以配置完所有功能再应用。padavan 配置网桥的话，如果顺序没有安排好，先配置关闭 dhcp 后还得手动调整自己机子的 ip 地址才能返回 web 管理界面；openwrt 则可以一次配置完后再去获取当前网段下中继路由的 ip。</p><ol><li><p>调整 wwan 的防火墙类型。在网络 -&gt; 接口中找到 wwan，选择修改，在配置 -&gt; 防火墙区域中把区域从 wan 调到 lan，并保存。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210302082144.png"></p></li><li><p>新建中继桥。新增一个接口，新接口协议选择「中继桥」（须安装 <code>luci-proto-relay</code> 才会有这个）。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210302082255.png"></p><p>提交后修改「网络间中继」，勾选 lan 和 wwan。然后同样将这个中继桥的防火墙区域指向 lan，保存。（这样设置其实还不行，但我卖一个关子，待会在 bug 那里说）</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210302082616.png"></p></li><li><p>修改 lan 接口。和 padavan 不同，这里设置的 lan ip 必须不在被中继路由子网内，比如被中继路由网关 ip 是 <code>192.168.100.1</code>，这里就不能填 <code>192.168.100.2</code> 之类的，可以填 <code>192.168.101.1</code>。勾选 dhcp 中的「忽略此接口」。此时可以保存并应用，必要时重启路由。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210302082916.png"></p></li></ol><h3 id="bug"><a href="#bug" class="headerlink" title="bug"></a>bug</h3><p>这么一通配置完了，发现几个问题：</p><ol><li><p>上不去网，因为 ip 没下发，看来是 dhcp 的包没从被中继路由那边传过来。</p></li><li><p>手动配置网关和 ip 后， windows 10 的网络连接显示从无连接变成了已连接。但几乎所有程序都还连不上网，除了浏览器，原因是浏览器我挂上了 cfw，我的 cfw 开起了 dns 服务。用 nslookup 检测的话，会报错 dns。也就是 dns 的包也没传过来。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210307075634.png"></p></li><li><p>时不时网络卡顿。</p></li></ol><p>第二点，可通过修改中继桥的本地 ipv4 地址解决。需要修改成中继路由在主路由中的 ip，可从总览 -&gt; 网络处获取。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210307075734.png"></p><p>但一和三就麻烦了，参考文章中也列出了该种 bug：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210305071401.png"></p><p>上面这段说明里面的 kmod-trelay，可以参考 <a href="https://forum.openwrt.org/t/howto-kmod-trelay/49610/2">Howto kmod-trelay - Installing and Using OpenWrt / Network and Wireless Configuration - OpenWrt Forum</a>。但我实验了几天，没成功，而且为了 dhcp 预计会导致两个更大的问题：</p><ol><li>只能用于无线中继转有线。起码无线连不上。参考文章中要给 wwan 改 mac，改成连接到中继路由设备的 mac，我用笔记本无线连接后改成笔记本无线网卡的 mac，一重启路由，发现笔记本找不到中继路由发的 5g 信号，估计是 wwan 拿的笔记本 mac 走的 5g 中继，笔记本也通过路由发送的 5g 连接路由器，两个 mac 冲突了。</li><li>因为第一点，导致只能中继一个设备，因为路由只有一个网卡，只能改一个 mac。</li></ol><hr><p>要配置网桥，移动地点后不能直接中继还得进 web 管理界面改网桥地址，这就太麻烦了。</p><p>还有诸如以下的麻烦：</p><ol><li>不能直接从 web 看在线了多少设备（曾经在线过的设备也会显示在在线列表中，而且不显示是否离线）。可以通过 ssh 命令 <code>ip neigh | grep REACHABLE</code>。</li><li>可能会有某个有线网口失效。</li><li>使用开源驱动导致 k2 的 pa+lna 信号放大芯片不生效，信号差一点。</li></ol><p>不过我也发现两个优势：</p><ol><li>手动修改 ip 连上中继并能正常上网后，仍然可以通过 lan ip 进入 web 管理界面。其他系统做不到这点，因为 lan ip 和中继路由不在一个网段，其他系统想进去 web 界面得手动修改到 lan ip 的网段；padavan 可以设置 lan ip 到中继路由的网段，但移动地点以后多半又不在同一个网段了，还是不如 openwrt 方便；</li><li>可以同时使用网桥中继和 WISP 中继。比如以下的方案——新开一个 wwan2.4 接口和 lan2 接口，lan2 和 wwan2.4 接口接起来，lan2 开启 dhcp，wwan2.4 和 2.4g 无线接起来，就可以达成连接 2.4g 进入相对稳定而方便的 WISP 中继，连接 5g 并手动设置 ip 进入网桥中继。有线一般走 lan，也就是网桥中继，这大家也可以自己设置，就不详细阐述了。另外从 2.4g 无法进入 ssh，因为在系统 -&gt; 管理权处 dropbear 只给了 lan 接口，可以多开一个给 lan2 接口，或者设置为未指定。</li></ol><p>看来 openwrt 也不太行。。。</p><p>转了一圈，试过了高铬，发现除了有个检测在线 qq 的功能，并没有其他优势，中继里也没有中继桥功能可用。</p><p>然后发现了带有 pa+lna 驱动的华硕固件，刷进去发现还不错。</p><h2 id="asus-中继（21-2-7-更新）"><a href="#asus-中继（21-2-7-更新）" class="headerlink" title="asus 中继（21.2.7 更新）"></a>asus 中继<strong>（21.2.7 更新）</strong></h2><p><a href="https://www.right.com.cn/forum/thread-4052903-1-1.html">K2 ASUS_AC1200HP自动编译版 - 斐讯无线路由器以及其它斐迅网络设备 - 恩山无线论坛 - Powered by Discuz!</a></p><p>第一次连接，就可以选择中继模式。这里的中继模式就直接是网桥（中继桥）模式了。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210307133213.png"></p><p>华硕的固件比较傲娇，成功中继后在被中继路由的管理界面看不到中继路由 ip，使用其他方法（比如 pingtools）也找不到。得使用华硕自己的软件 <a href="https://www.asus.com/uk/support/FAQ/1037094/">ASUS Device Discovery</a>。这个软件在苹果端 app store 和安卓端 google play 也有对应平台的移动端。虽说得多装个软件吧，但使用起来比用 arp 探测的几个方法要方便可靠多了：打开软件就能找到设备，点击配置就直接跳到 web 管理界面。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210307132240.png"></p><p>asus 固件没有自动切换中继功能，但手动切换中继比 padavan 方便多了。找不到中继信号的 asus k2 应该会把自己的 ip 自动设回 192.168.1.1，直接访问就行，不成功再用上面介绍的 app 找到管理 ip 并进入。点击主页的重新搜寻即可重新进入中继设置界面。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210307180031.png"></p><p>此时不点击自动设置无线就可以使用之前设置的无线密码连接中继路由。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210307180258.png"></p><p>当然进不去中继路由管理界面还有一种可能就是用了不可靠的电源。之前我换到同学家使用不仅打不开中继界面，连无线信号和联网状态也断断续续，把 Y1S 的电源换成 n1 原装电源解决。另一次供电不足甚至造成了无线 loopback，在主路由 web 中一瞬显示中继路由下挂了 30 多个设备。。。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/chrome_IrYpRrhfUV.png"></p><p>我感觉网桥中继模式应该比较吃供电来着。</p><hr><p>相比 padavan 另一个好评的地方是，灯颜色对了（</p><p>网桥中继除了有供电上的毛病，有时候设备第一次链接中继路由会发现第一时间上不去网，其实是通过中继路由一时半会拿不到主路由 dhcp 分配的 ip 地址。（主路由你快点！给主路由倒一杯卡布奇诺）</p><p>如果有多余的路由器，下面这个方案才是最合适的，集速度稳定网桥中继于一身，甚至就算供电不太稳使用起来依旧没什么问题。</p><h2 id="集客-ap-中继（21-3-1-更新）"><a href="#集客-ap-中继（21-3-1-更新）" class="headerlink" title="集客 ap 中继（21.3.1 更新）"></a>集客 ap 中继<strong>（21.3.1 更新）</strong></h2><p>参考文章：</p><ul><li><a href="https://www.right.com.cn/forum/thread-1501038-1-1.html">集客AC AP 知识大全 FAQ 小白扫盲贴 - 斐讯无线路由器以及其它斐迅网络设备 - 恩山无线论坛 - Powered by Discuz!</a></li><li><a href="https://www.right.com.cn/forum/thread-4046510-1-1.html">星际宝盒 CM520 刷集客AP MESH组网 - 斐讯无线路由器以及其它斐迅网络设备 - 恩山无线论坛 - Powered by Discuz!</a></li></ul><p>集客 ap 和普通网桥中继原理略有不同。集客 ap 需要通过有线方式挂一个路由器在主路由下，这个挂在主路由下的路由叫做 ac 面板。而真正的中继路由被称为 ap，ap 能通过各种方式和 ac 完成配对，完成配对后的 ac 和 ap，迁移环境后无需再次配对——也就是说，只要我在家里配置好 ac 和 ap，带到同学家，只要把 ac 挂到他的路由器上，ap 无论放在那里，只要一插电，过一会就能用了。因为 ac 面板有处理能力，dhcp 的速度和中继的稳定性也优于直接中继。另外 ap 除了可以通过无线配对，也能通过有线配对，被称为有线/无线回程。</p><p>记得我在 padavan 那边提到的 WDS 么？集客 ap 此处实现的功能便是 mesh 的一部分，WDS 这里也可以使用额外的两台路由完成中继，mesh 和 WDS 的区别在于，mesh 的管理功能和稳定性都要更强；不过 WDS 有一定泛用性，有的时候支持某两种不同品牌 / 系统的路由。但类似于 asus，使用 wds 需要进入两边的路由 web 界面把各自的 mac 添加进去；openwrt 还需要像上面网桥中继教程那样在中继路由上手动设置被中继路由的网关与 ip，跟 mesh 即插即用相比差了不是一点点。</p><p>集客 ap 下载地址：<a href="http://file.cnrouter.com/index.php/Index/apbeta.html">文件管理</a></p><p>页面中集客 AP_MTK_MIPS 是 ap，集客微路由_MTK 是 ac 面板。但 ap 中实际上带有微 ac，可以带最多 16 台 ap，所以我们下两个 ap 就好了，这样两个路由都可以胜任 ac / 中继 ap。我多出来的路由是极路由 2 和 newifi Y1S，这两个都没带 pa+lna，所以虽然处理器相同但要下的固件和 k2 的固件是不一样的，k2 下 AP230EP，另外两个路由应该下 AP230IP，我尝试给极路由 2 用 AP230EP，结果无线 mesh 回程失效，只剩有线回程可用。</p><h3 id="进入管理界面"><a href="#进入管理界面" class="headerlink" title="进入管理界面"></a>进入管理界面</h3><ol><li><p>第一次配对需要先把两个路由都通过网线接入同一个局域网。可以把 ac /  中继 ap 路由都接入主路由中；也可以把 ac / 中继 ap 的其中一个插到主路由上，另一个插到中继 ap / ac 上。但必须有一个路由接到主路由上，否则微 ap 中 -&gt; ap 列表中不会显示任何内容。</p></li><li><p>接着可以通过三种方法进入管理界面：</p><ul><li>在中继 ap / ac <strong>已连接</strong>到被中继路由（主路由）的情况下，连接到主路由，通过 arp 或者主路由 web 界面（详情见<a href="#%E6%89%93%E5%BC%80%E4%B8%AD%E7%BB%A7%E5%90%8E%E8%BF%9B%E5%85%A5%E4%B8%AD%E7%BB%A7%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86%E7%95%8C%E9%9D%A2">上文</a>）找到挂在主路由下的 ip 并进入；</li><li>手动修改连接设备的 ip，ip 地址修改为 6.6.6.1，子网掩码 255.0.0.0。然后连接到 ac / 中继 ap 发出的节点，节点名为 GECOOSAP-XXXX，浏览器输入 6.6.6.6 进入；</li><li>在中继 ap / ac <strong>未连接</strong>到被中继路由（主路由）的情况下，<del>按下路由的 reset 键，</del>过一会会出现一个 SOS_XXXX<del>（值得一提的是，同一个设备这里的 XXXX 和第二个方法中 GECOOSAP-XXXX 这一串里的 XXXX 是一样的字符串，刚开始开起了多个设备但不知道设备对应的节点名称是什么，可以用这个方法来确定）</del> 的节点，默认 wifi 密码为 88888888，由于没有连上主路由，所以中继 ap / ac 会打开自己的 dhcp，因此不需要和上面那个方法一样手动修改连接设备的 ip，直接输入 6.6.6.6 进入即可。</li></ul><p>第三点划去的部分是因为新版固件在检测到连接不上网络时就会自动释放 sos 节点，并且原来ac / 中继 ap 发出的节点末尾会增加一个感叹号。</p><p>进入成功后使用默认密码 admin 登录。</p></li></ol><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>参考：<a href="https://www.bilibili.com/video/BV1yJ411P748">200块的无缝组网体验堪比1699mesh套装？斐讯K2T无线路由KVR组网实战_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><ol><li><p>在 ac 和中继 ap 系统管理 -&gt; 基本设置中设置好格子的设备名称，将自动重启设为 0 天，修改密码。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-03-08%20204346.png"></p></li><li><p>进入 ac 的无线管理 -&gt; ssid 设置中，设置好相应的 2.4g / 5g 无线配置。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210308234442.png"></p></li><li><p>进入 ac 的微 ap -&gt; ap 列表，这里应该会显示 ac 和所有中继 ap 的设备名单，在这里我勾选上网络里的唯一一台中继 ap，选择克隆 -&gt; 克隆无线配置。当然此处也可以根据当前的网络环境自己调成各个节点的信道，不过因为我可能要带出门，各个地点的网络环境都不同所以就保持自动好了。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210308234608.png"></p></li></ol><h3 id="无线-mesh-回程"><a href="#无线-mesh-回程" class="headerlink" title="无线 mesh 回程"></a>无线 mesh 回程</h3><ol><li><p>此时在 ap 列表中，直接点击 ap 一栏的超链接就能进入相应设备的 web 管理界面了。</p></li><li><p>在 ac 端 -&gt; mesh 设置，开启 mesh，角色选择主 mesh，配对标识自己设置，待会在子 mesh 处要填一样的。射频选 5g。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-03-08%20234741.png"></p></li><li><p>从 ap 列表中进入 ap 中继端，在上面所述同样的地方开启 mesh，设置基本一致，除了角色需要选择为子 mesh。</p></li><li><p>拔掉子 mesh 端的网线，过一会子 mesh 就会通过无线连接上主 mesh 了。在子 mesh 上能看到无线回程变为在线状态：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210309000533.png"></p><p>主 mesh 这边：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210309001359.png"></p></li></ol><hr><p>集客 ap 几个中继路由可以选择不同的信道这点是其他中继做不到的。</p><p>风传集客 ap 中继能不受有线网口速度影响，我试了一下，是假的，中继后 speedtest 网速最高高不过百兆（几个中继路由都只有百兆口）。</p><p>除了需要用两台设备，缺点还有这么几个：</p><ol><li><p>k2 灯颜色不对，全程红灯；</p></li><li><p>设备间使用的加密没得选。参考文章中有提到：</p><blockquote><ol start="9"><li>问：相比用过的其他固件,我想设置加密方式为 WPA2,不用WPA,2.4G协议能不能只802n, 802b/g兼容关掉,类似这种选项能否开放出来?<br> 答：集客AP定们是工程级，在功能满足的情况下更多是要考虑降低安装和维护成本，尽量做到即插即用，加密方式目前只使用的最安全的。</li></ol></blockquote></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;曾经在&lt;a href=&quot;https://zbttl.github.io/lu-you-qi-pao-fen-shua-ji-hou-ri-tan-ji-ji-ge-jia-su-qi-shi-yong-qing-kuang-shou-ji/#%E5%B0%8F%E7%B1%B3%E5%9B%BA%E4%BB%B6%E5%8A%A0%E9%80%9F%E7%9A%84%E5%8A%A3%E5%8A%BF%EF%BC%8C%E5%92%8C%E5%90%8E%E7%BB%AD%E5%8A%A0%E9%80%9F%E6%96%B9%E6%A1%88%E7%9A%84%E5%AF%BB%E6%89%BE&quot;&gt;路由器跑分 &amp;amp;&amp;amp; 刷机 后日谈 及 几个加速器使用情况收集&lt;/a&gt;中提到过&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;刷个 padavan 在家当非单独子网的无线中继好了，加速器识别到家中的华硕主路由器，让华硕来加速，这个就仅仅弥补 xbox 无线拉跨的问题。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="路由器" scheme="https://zbttl-github-io.vercel.app/categories/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
    
    <category term="xbox" scheme="https://zbttl-github-io.vercel.app/tags/xbox/"/>
    
    <category term="padavan" scheme="https://zbttl-github-io.vercel.app/tags/padavan/"/>
    
    <category term="中继" scheme="https://zbttl-github-io.vercel.app/tags/%E4%B8%AD%E7%BB%A7/"/>
    
    <category term="openwrt" scheme="https://zbttl-github-io.vercel.app/tags/openwrt/"/>
    
    <category term="asusfirmware" scheme="https://zbttl-github-io.vercel.app/tags/asusfirmware/"/>
    
    <category term="集客ap" scheme="https://zbttl-github-io.vercel.app/tags/%E9%9B%86%E5%AE%A2ap/"/>
    
  </entry>
  
  <entry>
    <title>github 学生包和 azure 羊毛</title>
    <link href="https://zbttl-github-io.vercel.app/github-xue-sheng-bao-he-azure-yang-mao/"/>
    <id>https://zbttl-github-io.vercel.app/github-xue-sheng-bao-he-azure-yang-mao/</id>
    <published>2021-01-24T16:00:00.000Z</published>
    <updated>2021-02-17T17:02:54.755Z</updated>
    
    <content type="html"><![CDATA[<h2 id="github-学生包"><a href="#github-学生包" class="headerlink" title="github 学生包"></a>github 学生包</h2><p>虽然我早毕业了，但 github 学生包是大二的时候才办的，按两年需要续一次的规定，其实还剩大半年呢，先把能薅的都薅了（</p><p>先来复习一下 github 学生包申请方法：</p><ol><li><p>确保自己没开代理。打开 <a href="https://education.github.com/">github education</a> 网站，点击顶上的 get benefit。</p></li><li><p>按照提示一路填写真实信息即可。破学校没有教育邮箱，只好上传学生证。上传照片的部分拍上自己学生证上有头像和日期那一面。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210128055410.png"></p></li><li><p>大概会过两三天 github 就会给你发邮件告诉你申请成功了。我的亲身经历是申请成功的话邮件送达的时间会稍快，而失败的话就会慢的多。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210128064234.png"></p><center>上面那封成功 下面那封失败</center></li></ol><p>截止今天（21.1.25），github education 包里面有下面这些东西。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/GitHub%20Student%20Developer%20Pack%20-%20GitHub%20Education.jpg"></p><p>一眼扫过去，我觉得我认得且比较有用的：</p><ul><li>digitalocean 的一年 100 美元优惠码</li><li>azure 一年 100 美元优惠码</li><li>github 高级会员（私人仓库免费）</li><li>namecheap 和 name.com 各一年的免费域名（正好两年期间一年用一个）</li><li>termius 教育版会员（跨平台 ssh 工具，相比 xshell 赢一手 mosh）</li><li>jetbrain 教育版全家桶</li></ul><p><del>被羊毛贩子倒来倒去的主要是前两个</del>，do 会给优惠码，不过要先冲进去 5 美刀；azure 只要绑上一个微软账号就行了。使用有效期以激活优惠码 / 绑定账号激活教育优惠时为准。和 azure 相比，do 激活并不复杂，不提。</p><h2 id="azure-学生包激活"><a href="#azure-学生包激活" class="headerlink" title="azure 学生包激活"></a>azure 学生包激活</h2><p>先吐槽一句，也许是我水平不够，软软的东西，凡事遇到啥问题，google 一下就是软软的官方教程，那教程乍看起来写的是相当详细，但认真看的话，就是找不到自己想找的内容，总感觉有一种浓浓的<del>高数课本的味道</del>。。。</p><p>偏题了，最后还是<del>沙雕网友</del>能把我拉出来.jpg</p><p>参考文章：</p><ul><li><a href="https://51.ruyo.net/8043.html">Windows Azure学生免费帐户，获得100美元的优惠！ - VPS|国外VPS|教程资源|网络资源 - 如有乐享</a></li><li><a href="https://51.ruyo.net/11319.html">Windows Azure学生订阅额度完全使用(薅干)指南教程 - 教程资源|网络资源 - 如有乐享</a></li></ul><p>实话说，注册那段我已经忘了具体干了啥。。。只记得得从 github education 那里的连接登录到 azure，虽说教程说最好不要用中国但我自信满满的没看教程直接用中国注册过去了，还有并不用信用卡，就这么多，这部分略过。</p><h3 id="查看余额"><a href="#查看余额" class="headerlink" title="查看余额"></a>查看余额</h3><p>注册完，先从主页中搜索「订阅」，打开后能看到「Azure for education」这项，点开，顶上会有一个「若要查看剩余额度。。。」啥的。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210128174716.png"></p><p>点开以后，选「Check Your Balance」这一项，打开以后显示有 100 刀就说明注册成功。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210128174649.png"></p><h3 id="导入密钥（建议）"><a href="#导入密钥（建议）" class="headerlink" title="导入密钥（建议）"></a>导入密钥（建议）</h3><p>然后先把自己常用的密钥导入（登陆 ssh 用密钥是个好习惯）：</p><ol><li><p>在顶上搜索框搜索「密钥」，点开，点击新增。</p></li><li><p>如下图，有两个必填项目：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210128180113.png"></p><p>资源组随便新建一个，密钥上传自己的公钥，或者让它来生成。</p><p>创建后可能要等一段时间才能用。</p></li></ol><h3 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h3><ol><li><p>之后，搜索「虚拟机」，进入虚拟机管理界面，点击创建-&gt;虚拟机。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210128214751.png"></p><p>区域看个人 ISP 情况，电信这边我感觉香港（东亚）比较快，但我同学的移动就感觉新加坡（南亚）更快。可以自己用 <a href="https://cloudpingtest.com/">Cloud Ping Test (Latency) for different providers like AWS, Azure, GCP</a> 试试延迟（当然延迟这个东西仅供参考，更重要的实际能跑出来的是带宽）。映像一半用 ubuntu 或 debian，别用 CentOS 了，要凉了。大小选 B1S，虽然有更便宜的但微软学生包中其实包含了两个免费的 b1s 服务器。ssh 就选自己刚刚创建的密钥就好。</p><p>切换到磁盘这边，记得选 P6 而不是默认的 30G。os 磁盘类型维持默认，默认就是高级，不会因为选了标准就给你减免的（</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210128215625.png"></p><p>网络这边，选择出站端口，必选 22，可选 80、443，更多的端口需要创建后再改。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210128215847.png"></p><p>可以在高级处禁用诊断。我是觉得无所谓啦。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210128220009.png"></p></li><li><p>设置好后就可以点底下的查看 + 创建了。</p></li></ol><h3 id="使用静态-ip（可选）"><a href="#使用静态-ip（可选）" class="headerlink" title="使用静态 ip（可选）"></a>使用静态 ip（可选）</h3><ol><li><p>点开刚创建的虚拟机 -&gt; 网络，NIC 公共 IP 后面跟着的蓝色数字串是目前的动态 ip 地址，这个 ip 重启后会自动变更，不方便我们使用，点开他，选中左侧的「配置」，在右侧的「分配」处改为静态并保存即可。</p><p>不过静态 ip 每天要花差不多 0.04 刀，用一年可能就差不多十几刀了，如果不用静态 ip 的话建议绑个域名方便记忆，动态 ip 在面板中重启机器时会变换，换了以后再去域名里面改解析，稍微麻烦但还是比直接用域名要方便一些。（在 ssh 中使用 reboot 并不会导致 ip 被更换）</p><p>从动态 ip 改成静态 ip 很简单，但从静态 ip 改回动态 ip 略微麻烦，要先解绑网卡。可能需要先停机。在刚刚设置 ip 的地方，点击左边的「概述」进入概述页面，再点击「取消关联」。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210130041803.png"></p><p>再次回到「配置」，在右侧的「分配」处改为动态并保存；回到概述页面，点击关联，在右侧弹出的窗口中，「资源类型」改为网络接口，网络接口处点击下拉按钮就会显示有刚刚解绑的设备，选上并确定即可。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210130022757.png"></p></li></ol><h3 id="增加入站出站端口（可选）"><a href="#增加入站出站端口（可选）" class="headerlink" title="增加入站出站端口（可选）"></a>增加入站出站端口（可选）</h3><p>   我个人用 vps 是不喜欢开防火墙的，安全要求没那么高。点开刚创建的虚拟机 -&gt; 网络 -&gt; 入站端口规则 -&gt; 添加入站端口规则，目标端口范围 0-65535 满上。安全一些只开高端口 10000-65535 也可以，另外现在最新的某类型工具通过 fallback 能让所有那种类型的流量都通过 443 出入，那这里啥都不加也都可以，自己选择吧。</p><p>   <img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210128220516.png"></p><p>   然后出站流量规则那里也照猫画虎整一个就行。</p><h3 id="增加一块-p6-硬盘（可选）"><a href="#增加一块-p6-硬盘（可选）" class="headerlink" title="增加一块 p6 硬盘（可选）"></a>增加一块 p6 硬盘（可选）</h3><p>   学生包 azure 其实带了两块免费的 p6 硬盘，一块给 b1s Linux 用一块给 b1s windows 用，但如果 windows 的虚拟机你用不上，也可以把多出来的 p6 放进 linux 这边。</p><p>   转到创建的虚拟机中磁盘这一项，选创建并附加新磁盘，改大小为 64g ，点顶上的保存即可。不过附加的磁盘并不会立刻在虚拟机中生效，需要你自己挂载，而且我也没试过是不是真的能挂上去。。。。所以这条存疑（</p><p>   <img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210128221237.png"></p><h3 id="强制开启-root-账号（可选）"><a href="#强制开启-root-账号（可选）" class="headerlink" title="强制开启 root 账号（可选）"></a>强制开启 root 账号（可选）</h3><p>干完上面那些事就可以通过 ssh 登录 vps 了。默认的用户名是在设置第一屏的时候自己设置的，虽然用 root 而不用 sudo 是个不太好的习惯，但我就想用 root 登录怎么办？</p><p>   参考：<a href="https://khaledammar.com/technical-tips-and-tricks/technical-tricks/">How to ssh to your Amazon EC2 instance using by root? | Khaled Ammar</a></p><ol><li><p>登录后，编辑 <code>/etc/ssh/sshd_config</code> 文件，修改其中的</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PermitRootLogin forced-commands-only</span><br></pre></td></tr></tbody></table></figure><p>为</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PermitRootLogin without-password</span><br></pre></td></tr></tbody></table></figure></li><li><p>重启 sshd</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service restart sshd</span><br></pre></td></tr></tbody></table></figure></li><li><p>编辑 <code>/root/.ssh/authorized_keys</code>，定位到</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-rsa [big long key]</span><br></pre></td></tr></tbody></table></figure><p>将这串字符前面的内容全部删除。</p></li><li><p>此时即可使用 root 用户登录。</p></li></ol><h3 id="后续计费"><a href="#后续计费" class="headerlink" title="后续计费"></a>后续计费</h3><p><del>之前我谈到后续还可以新开一个 windows b1s 虚拟机，我对 windows server 不熟，这里就不多 bb 了。</del> windows server 的内容参考后续的文章。</p><p>1202 年了，现在这个时间 azure education 究竟包含了多少内容已经无法在订阅 -&gt; 使用配额中看到了（以前还能看到自己的 b1s 有 750 小时的进度条）。但现在开完虚拟机过一段时间后可以到余额处查看，自己开的这些东西是不是免费的（下面这张图就是我不小心用了默认大小的硬盘后扣的钱）：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210125183046.png"></p><p>azure 只计算回程流量，大概算一下，每个月好像是有 15 gb 的免费流量，加上 0.14 刀 / g 的超套流量，正正经经用100 刀 / 年也许够用 800g-900g 这样吧，没有 do 那么豪，但能嫖到香港的 vps 还要什么自行车呢？（不过毕竟没绑定信用卡，万一超了费用去哪了呢 hhhhh？）</p><p>azure 也没有明确的进度条告诉我还能用多少流量，只能看到已经用了多少流量。一种方法是依赖探针；另一种是通过虚拟机 -&gt; 指标，「度量值」选 Network Out Total，「聚合」选总和，右边的显示方法改成图表，时间跨度改成一个计费周期（计费周期具体是从多少号开始可以去余额那边看到），就能大概看出用了多少了。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210129020611.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;github-学生包&quot;&gt;&lt;a href=&quot;#github-学生包&quot; class=&quot;headerlink&quot; title=&quot;github 学生包&quot;&gt;&lt;/a&gt;github 学生包&lt;/h2&gt;&lt;p&gt;虽然我早毕业了，但 github 学生包是大二的时候才办的，按两年需要续一次的规定，其实还剩大半年呢，先把能薅的都薅了（&lt;/p&gt;</summary>
    
    
    
    <category term="Network" scheme="https://zbttl-github-io.vercel.app/categories/Network/"/>
    
    
    <category term="羊毛" scheme="https://zbttl-github-io.vercel.app/tags/%E7%BE%8A%E6%AF%9B/"/>
    
    <category term="github" scheme="https://zbttl-github-io.vercel.app/tags/github/"/>
    
    <category term="azure" scheme="https://zbttl-github-io.vercel.app/tags/azure/"/>
    
  </entry>
  
  <entry>
    <title>hexo 问题集合和那些被我放弃的功能</title>
    <link href="https://zbttl-github-io.vercel.app/hexo-wen-ti-ji-he-he-na-xie-bei-wo-fang-qi-de-gong-neng/"/>
    <id>https://zbttl-github-io.vercel.app/hexo-wen-ti-ji-he-he-na-xie-bei-wo-fang-qi-de-gong-neng/</id>
    <published>2021-01-22T16:00:00.000Z</published>
    <updated>2021-02-17T17:02:15.121Z</updated>
    
    <content type="html"><![CDATA[<p>一些是我从进阶那篇文章搬过来的坑，我感觉内容比较多，干脆单开一篇好了。</p><h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><h3 id="hexo-转移到-windows-上部署（吐槽，临时，没完全成功，已解决）"><a href="#hexo-转移到-windows-上部署（吐槽，临时，没完全成功，已解决）" class="headerlink" title="hexo 转移到 windows 上部署（吐槽，临时，没完全成功，已解决）"></a>hexo 转移到 windows 上部署（吐槽<del>，临时，没完全成功</del>，已解决）</h3><p>个人习惯，新玩意先在虚拟机上实验，因为之前 windows 上太多开发工具会把机子环境搞乱（比如 sql server 之类的），给后面其他软件的安装带来麻烦。不过观察到现在，hexo 除了安装拿一下影响全局环境，其他情况下都只在自己文件夹内做修改。一直用虚拟机编辑体验不太好（linux 下 vscode 还是挺卡的），索性搬到 windows 上。</p><p>然后发现：安装新组件，本地预览啥的没问题。但部署到 github 仓库的时候就出问题了。首先是告诉我，没权限，估计是没 key。</p><p>先把 key 导进去看看？</p><p>用 ssh-add 命令，报错。</p><p>参考 <a href="https://www.cnblogs.com/attackingmilo/p/Windows-ssh-add-error.html">Windows下使用ssh-add报错 Error connecting to agent: No such file or directory</a></p><p>把服务开起来</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Set-Service -Name ssh-agent -StartupType Manual</span><br><span class="line">Start-Service ssh-agent</span><br></pre></td></tr></tbody></table></figure><p>再添加</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ./id_rsa</span><br></pre></td></tr></tbody></table></figure><p>还报错。。。</p><p>把密钥放进系统用户目录中</p><p>再添加</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add C:\Users\zbttl\id_rsa</span><br></pre></td></tr></tbody></table></figure><p>总算是添加进去了，运行</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></tbody></table></figure><p>显示</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">warning: agent returned different signature type ssh-rsa (expected rsa-sha2-512)</span><br><span class="line">Hi zbttl! You've successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></tbody></table></figure><p>但我再次运行 <code>hexo g -d</code></p><p>还报错：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Error: git@github.com: Permission denied (publickey).</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br></pre></td></tr></tbody></table></figure><p>后面查阅到 <a href="https://github.com/hexojs/hexo/issues/3339">Win10使用ssh的hexo部署到github报错 ＃3339</a>，看起来应该是因为我的 rsa 密钥还带有密码，但 hexo-deployer-git 在 windows 下不会弹密码提示而是自作主张当做没密码的原因。但我既不想去掉密钥的密码，也不想用 git push 提交，所以直接用 windows 提交暂时是不成了。（不过我也没去查阅 hexo-deployer-git 那边有没有解决方案，起码我这边已经用的最新版了）</p><p>想到一个曲线救国的方法，开一个 vmware ubuntu 的共享文件夹，把 hexo 项目放在里面，就可以编辑的时候用 windows typora，部署的时候再用 ubuntu。我感觉用 wsl 也可以，但我没怎么用过那玩意，感兴趣的可以尝试。（wsl2 就算了，我对 hyper-v 印象超差的）</p><p><strong>（21.1.21 更新）</strong>已解决。把 ssh 私钥放到 <code>C:\Users\[用户名]\.ssh</code> 里面就完事了。</p><h3 id="hexo-更改-categories-大小写后部署-404-的问题"><a href="#hexo-更改-categories-大小写后部署-404-的问题" class="headerlink" title="hexo 更改 categories 大小写后部署 404 的问题"></a>hexo 更改 categories 大小写后部署 404 的问题</h3><p>参考文章：<a href="https://blog.csdn.net/liuergo/article/details/102640098">Hexo部署到Github文件夹大小写问题_liuergo的博客-CSDN博客</a></p><p>前一篇说过尽量约定好 tags 和 categories 大小写的原因是，我发现我有的文章归进了首字母大写的类别（如 Linux）里，有些归进了首字母小写的类别（如 linux）里，但实际上应该归为一类。我手动替换修改后，刷新提交发现是归为一类了，点进去显示 404。后来发现是 github 大小写不敏感的锅。</p><p>索引到 <code>.deploy_git/.git</code> 文件夹，修改 <code>config</code> 文件中的 <code>ignorecase</code> 参数为 false 即可。</p><h3 id="较长的行内代码导致段落字与字间距错误"><a href="#较长的行内代码导致段落字与字间距错误" class="headerlink" title="较长的行内代码导致段落字与字间距错误"></a>较长的行内代码导致段落字与字间距错误</h3><p>看一眼效果你们就明白我在说啥了：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210123042437.png"></p><p>解决方法嘛。。。说实话我现在找到的解决方法我不太喜欢，因为要改动主题文件夹，在 hexo 进阶那篇文章中我已经解释过为什么直接改动主题文件夹的内容是不太好的行为了，但现在我想不到其他办法（是我真的菜）。</p><p>来到 <code>themes\next\source\css\_common\scaffolding\highlight</code> 下，打开 <code>index.styl</code>。目前是下面这一段决定了行内代码的格式：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">code {</span><br><span class="line">  @extend $code-inline;</span><br><span class="line">  border-radius: 3px;</span><br><span class="line">  font-size: $table-font-size;</span><br><span class="line">  padding: 2px 4px;</span><br><span class="line">  word-wrap();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>将其修改为</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">code {</span><br><span class="line">  @extend $code-inline;</span><br><span class="line">  border-radius: 3px;</span><br><span class="line">  font-size: $table-font-size;</span><br><span class="line">  padding: 2px 4px;</span><br><span class="line">  white-space: pre-wrap;</span><br><span class="line">  word-break: break-all;  //自动换行，不显示横向滚动条。</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>即可。</p><p>原理是让行内代码块拥有自动换行和任意字符间断行的能力，参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/word-break">word-break - CSS（层叠样式表） | MDN</a>。未来如果又更新了代码的位置，或者用着其他主题也有这个问题的，在浏览器内用 f12 找一下相应代码的位置再过来改就成。</p><p>修改后：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210123234229.png"></p><p>另外值得一提的是，独立代码块自动换行功能也可以在这个文件中修改。但修改后行号显示会出现问题，目前没有解决方法。</p><p><strong>（21.2.17 更新）</strong>还有一种方法，参考 <a href="https://theme-next.js.org/docs/theme-settings/miscellaneous.html?highlight=fonts+customization">Misc Theme Settings | NexT</a>，修改主题配置文件的 <code>text_align</code>：</p> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Set the text alignment in the posts.</span><br><span class="line">text_align:</span><br><span class="line">  # Available values: start | end | left | right | center | justify | justify-all | match-parent</span><br><span class="line">  desktop: start</span><br><span class="line">  mobile: start</span><br></pre></td></tr></tbody></table></figure><p>但恕我直言，这效果。。。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210217072912.png"></p><p>咱还是用不那么优雅的方法获取优雅的效果吧（</p><h2 id="已弃用的功能"><a href="#已弃用的功能" class="headerlink" title="已弃用的功能"></a>已弃用的功能</h2><h3 id="hexo-文字特效"><a href="#hexo-文字特效" class="headerlink" title="hexo 文字特效"></a>hexo 文字特效</h3><p>参考文章：<a href="https://tding.top/archives/58cff12b.html">Hexo-NexT 添加打字特效、鼠标点击特效 | 小丁的个人博客</a></p><p>拷贝 <code>activate-power-mode.min.js</code> 代码，放入 <code>source\js</code> 中。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(function webpackUniversalModuleDefinition(root,factory){if(typeof exports==='object'&amp;&amp;typeof module==='object')module.exports=factory();else if(typeof define==='function'&amp;&amp;define.amd)define([],factory);else if(typeof exports==='object')exports["POWERMODE"]=factory();else root["POWERMODE"]=factory()})(this,function(){return(function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={exports:{},id:moduleId,loaded:false};modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.loaded=true;return module.exports}__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.p="";return __webpack_require__(0)})([function(module,exports,__webpack_require__){'use strict';var canvas=document.createElement('canvas');canvas.width=window.innerWidth;canvas.height=window.innerHeight;canvas.style.cssText='position:fixed;top:0;left:0;pointer-events:none;z-index:999999';window.addEventListener('resize',function(){canvas.width=window.innerWidth;canvas.height=window.innerHeight});document.body.appendChild(canvas);var context=canvas.getContext('2d');var particles=[];var particlePointer=0;POWERMODE.shake=true;function getRandom(min,max){return Math.random()*(max-min)+min}function getColor(el){if(POWERMODE.colorful){var u=getRandom(0,360);return'hsla('+getRandom(u-10,u+10)+', 100%, '+getRandom(50,80)+'%, '+1+')'}else{return window.getComputedStyle(el).color}}function getCaret(){var el=document.activeElement;var bcr;if(el.tagName==='TEXTAREA'||(el.tagName==='INPUT'&amp;&amp;el.getAttribute('type')==='text')){var offset=__webpack_require__(1)(el,el.selectionStart);bcr=el.getBoundingClientRect();return{x:offset.left+bcr.left,y:offset.top+bcr.top,color:getColor(el)}}var selection=window.getSelection();if(selection.rangeCount){var range=selection.getRangeAt(0);var startNode=range.startContainer;if(startNode.nodeType===document.TEXT_NODE){startNode=startNode.parentNode}bcr=range.getBoundingClientRect();return{x:bcr.left,y:bcr.top,color:getColor(startNode)}}return{x:0,y:0,color:'transparent'}}function createParticle(x,y,color){return{x:x,y:y,alpha:1,color:color,velocity:{x:-1+Math.random()*2,y:-3.5+Math.random()*2}}}function POWERMODE(){{var caret=getCaret();var numParticles=5+Math.round(Math.random()*10);while(numParticles--){particles[particlePointer]=createParticle(caret.x,caret.y,caret.color);particlePointer=(particlePointer+1)%500}}{if(POWERMODE.shake){var intensity=1+2*Math.random();var x=intensity*(Math.random()&gt;0.5?-1:1);var y=intensity*(Math.random()&gt;0.5?-1:1);document.body.style.marginLeft=x+'px';document.body.style.marginTop=y+'px';setTimeout(function(){document.body.style.marginLeft='';document.body.style.marginTop=''},75)}}};POWERMODE.colorful=false;function loop(){requestAnimationFrame(loop);context.clearRect(0,0,canvas.width,canvas.height);for(var i=0;i&lt;particles.length;++i){var particle=particles[i];if(particle.alpha&lt;=0.1)continue;particle.velocity.y+=0.075;particle.x+=particle.velocity.x;particle.y+=particle.velocity.y;particle.alpha*=0.96;context.globalAlpha=particle.alpha;context.fillStyle=particle.color;context.fillRect(Math.round(particle.x-1.5),Math.round(particle.y-1.5),3,3)}}requestAnimationFrame(loop);module.exports=POWERMODE},function(module,exports){(function(){var properties=['direction','boxSizing','width','height','overflowX','overflowY','borderTopWidth','borderRightWidth','borderBottomWidth','borderLeftWidth','borderStyle','paddingTop','paddingRight','paddingBottom','paddingLeft','fontStyle','fontVariant','fontWeight','fontStretch','fontSize','fontSizeAdjust','lineHeight','fontFamily','textAlign','textTransform','textIndent','textDecoration','letterSpacing','wordSpacing','tabSize','MozTabSize'];var isFirefox=window.mozInnerScreenX!=null;function getCaretCoordinates(element,position,options){var debug=options&amp;&amp;options.debug||false;if(debug){var el=document.querySelector('#input-textarea-caret-position-mirror-div');if(el){el.parentNode.removeChild(el)}}var div=document.createElement('div');div.id='input-textarea-caret-position-mirror-div';document.body.appendChild(div);var style=div.style;var computed=window.getComputedStyle?getComputedStyle(element):element.currentStyle;style.whiteSpace='pre-wrap';if(element.nodeName!=='INPUT')style.wordWrap='break-word';style.position='absolute';if(!debug)style.visibility='hidden';properties.forEach(function(prop){style[prop]=computed[prop]});if(isFirefox){if(element.scrollHeight&gt;parseInt(computed.height))style.overflowY='scroll'}else{style.overflow='hidden'}div.textContent=element.value.substring(0,position);if(element.nodeName==='INPUT')div.textContent=div.textContent.replace(/\s/g,"\u00a0");var span=document.createElement('span');span.textContent=element.value.substring(position)||'.';div.appendChild(span);var coordinates={top:span.offsetTop+parseInt(computed['borderTopWidth']),left:span.offsetLeft+parseInt(computed['borderLeftWidth'])};if(debug){span.style.backgroundColor='#aaa'}else{document.body.removeChild(div)}return coordinates}if(typeof module!="undefined"&amp;&amp;typeof module.exports!="undefined"){module.exports=getCaretCoordinates}else{window.getCaretCoordinates=getCaretCoordinates}}())}])});</span><br></pre></td></tr></tbody></table></figure><p>在 <code>_data/footer.njk</code> 中新增</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">{# 打字特效 #}</span><br><span class="line">{% if theme.typing_effect %}</span><br><span class="line">  &lt;script src="/js/activate-power-mode.min.js"&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    POWERMODE.colorful = {{ theme.typing_effect.colorful }};</span><br><span class="line">    POWERMODE.shake = {{ theme.typing_effect.shake }};</span><br><span class="line">    document.body.addEventListener('input', POWERMODE);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">{% endif %}</span><br></pre></td></tr></tbody></table></figure><p>在主题配置文件中新增：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># typing effect</span><br><span class="line">typing_effect:</span><br><span class="line">  colorful: true  # 礼花特效</span><br><span class="line">  shake: false  # 震动特效</span><br></pre></td></tr></tbody></table></figure><p>即可。</p><p>为啥我不用这个呢。。。因为只有在评论区生效，搜索时也要打字但并不生效，在本地部署时没有评论区，不好调试；另外就是这玩意我在手机上试了一下，打了几个字就卡住了，不太行。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一些是我从进阶那篇文章搬过来的坑，我感觉内容比较多，干脆单开一篇好了。&lt;/p&gt;
&lt;h2 id=&quot;坑&quot;&gt;&lt;a href=&quot;#坑&quot; class=&quot;headerlink&quot; title=&quot;坑&quot;&gt;&lt;/a&gt;坑&lt;/h2&gt;</summary>
    
    
    
    <category term="博客" scheme="https://zbttl-github-io.vercel.app/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="hexo" scheme="https://zbttl-github-io.vercel.app/tags/hexo/"/>
    
    <category term="NexT" scheme="https://zbttl-github-io.vercel.app/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>方向对了，奈何能力不足——cod17 僵尸模式试玩体验</title>
    <link href="https://zbttl-github-io.vercel.app/fang-xiang-dui-liao-nai-he-neng-li-bu-zu-cod17-jiang-shi-mo-shi-shi-wan-ti-yan/"/>
    <id>https://zbttl-github-io.vercel.app/fang-xiang-dui-liao-nai-he-neng-li-bu-zu-cod17-jiang-shi-mo-shi-shi-wan-ti-yan/</id>
    <published>2021-01-21T16:00:00.000Z</published>
    <updated>2021-01-24T16:46:53.335Z</updated>
    
    <content type="html"><![CDATA[<p>凌晨两点试玩结束，写一篇体验。</p><p>传统艺能，发售三个月还是只有一张图。第一遍玩下来，给我的感觉就是：图好小。。。</p><p>作为一个萌新，3arc 的僵尸我只玩过 cod12 和 cod15。cod17 这张图严格来说在整个系列中应该也算中等规模，但按前几座的惯例，第一张图应该是整个作品的牌面：拥有和全系列作品相比较大的地图规模；丰富的要素；和全作最多的彩蛋。但这次的地图我一遍走通两遍走熟，整个地图按区域划分不过两个平原一栋楼加底下两层。彩蛋方面，主线彩蛋也就是惯例的 pap，武器升级和最终 boss，盾牌都给砍掉了；而支线彩蛋更是只有僵尸抬棺这一个，实在是乏善可陈。而且僵尸抬棺这个彩蛋。。。第一遍乍看起来很有趣，而且简单上手还能拿奖励，但做多几次就发现为了拿点奖励要看他跳一分多钟啥事都不能干，实在有点。。。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E4%BD%BF%E5%91%BD%E5%8F%AC%E5%94%A4%C2%AE%EF%BC%9A%E9%BB%91%E8%89%B2%E8%A1%8C%E5%8A%A8%E5%86%B7%E6%88%98%20-%20Xbox%20Series%20XS.png"></p><center>专 业 团 队</center><p>其他方面，t 组在贡献了最「偷工减料」的一张首发图的同时，打算用相比前作更为完善的模式和玩法来弥补；除了本体模式，增加了 20 撤离和狂暴模式；同时在原来的刷波和通关主线两种玩法中又加了一种「撤离」玩法：10 波后就能每 5 波一次选择呼叫飞机并前往撤离点撤离，但撤离过程中会遭遇大量僵尸的围堵，此时你要干的就是找个角落然后用尽你所有的方法在规定时间内把僵尸全部清理掉，保证撤离点的安全，否则时间一到飞机就会被从动视裤裆里掏出来的火箭筒干掉，游戏结束~</p><p>t 组也大幅增加了养成要素在僵尸模式所占的比例。泡泡糖和勋章系统被移除，作为替代，游戏结束后会获得暗黑水晶，暗黑水晶能够赋予整个武器类型功能和能力上的强化；强化游戏中通过金钱购买的能力机器给予能力的强度；以及强化大招的等级以获取更强的功能，关键的是，这些强化是永久的，而且每个强化最多只有三级，每级的水晶需求数是 1/2/3，也就是说，只需要 6 个水晶就可以升满一个项目。这点我当然要给好评了，因为有仓鼠症的我总不舍得用那些高级泡泡糖和勋章。。。</p><p>而游戏中能够临时获取的，除了金钱，还有废料和高级废料，通过废料和高级废料，玩家能够购买各种杀伤性道具和战争机器等一系列高等级杀伤性装备，代替了原来在武器配置栏中的需要升级才能获取的各类装备；同时废料也可以升级枪械品质和护甲品质，喝过 3j 厚血拥有 3j 甲的人物甚至能拥有相当于 500 血的耐久。本作承袭自现代战争的等级系统也决定着玩家不需要反复跟 t 组祖传的转生系统斗争了（万恶的武器转生，转生 2 的击杀显示器我自己根本看不到好吧）。武器升级机变成了菜单，玩家再也不用数自己要强化几次才能强化满一把枪了，原来的元素升级也独立了出来，不需要先进行武器强化，且元素任选，只需要 2000。唯一变难了一点就是武器升级机涨价了，一阶 5000 二阶 15000 三阶 30000，不过武器升级机提升的伤害应该和前作相比也有增加，且本作的僵尸有血条也能直观的感受到升级过的武器和各枪械对僵尸的击杀能力。cod15 倒下后武器不再重置，本作取消了这点，和 cod12 一样武器会重置回初始武器，但本作的初始武器并不是手枪而是任选；增加了复活资金，10 关后死亡复活有上万的复活资金，不过要去强化武器还是要跑一段路，应该说这点上难度和上作持平。加上相对较小的地图规模，可以说，本作的僵尸模式的难度相比于前作大幅降低了。</p><p>再来说说僵尸模式在本作中的「定位」问题。本次僵尸模式的枪械，和多人模式共享了枪械配件和等级，这一点要给好评；但可能也正因此动视大幅度增加了多人模式下枪械升级的难度，这就有待商榷了。t 组制作的僵尸模式，从 cod5 和 7 两作打下地图和剧情方面的基础，到 9 的彩蛋元素初露锋芒，在 12 中可以称「登峰造极」了，明显走了一个类似「rouge like」的路线；而从 cod15 开始，推出了简单模式，枪械拥有特战改装，能够自选初始武器，僵尸模式的路线开始转向，玩法丰富化，难度简单化；到了本作，更是整合了多人模式的枪械，显然是为了吸引多人模式的玩家进场，同时降低难度，走大众化路线。遥想当年，第一次玩 cod12 的僵尸模式匹配，我当时的技术就只能玩到拿盾牌和装保险丝，但几个点我都烂熟于心，一通操作把东西都拿了，到了第七关被僵尸刮两下就 ob 了；本以为匹配的路人应该水平也就那样，但看着看着他们就把大保健和黑龙炮掏出来了，要不是当年的 uu 还很拉跨，最后掉线了，说不定我能躺平看人家打 boss？但本次我匹配到的几局，确实有绕僵尸的大佬，但彩蛋也就开到 pap 为止，奇迹武器啥的就更不知道了，显然是从多人来的。</p><p>另外，服务器应该还是老的 p2p 机制，但几次匹配我不是 0 延迟就是 500ms 左右，打个僵尸等半天才出击杀，还好在僵尸模式对延迟的要求远没有多人高，勉强能玩下去，一个新游戏就真没人玩？我觉得是 t 组没有优化好。但，这里就不能不提一嘴 t 组奇葩的「延迟锁」机制了：只能匹配到一定延迟内的玩家。因为这点，亚服玩家就只能和亚服玩家玩，就算用再好的加速器，也不能突破物理限制吧？到人数较多的美欧，延迟一定会超过 200ms，这已经超过延迟锁的匹配范围了。我目前主用平台是 xbox，体验是最差的，远古 cod10 还尚且能匹配 tdm，cod14 仍能秒配的今天，cod12 尽管贵为一代经典却早早鬼服，cod15 在特定时间才能匹配到人，要不就是通过进入线上好友或已经交手过的还在线的玩家的房间，blackout 则完全鬼服。ps4 亚洲区装机量较高且会免过 cod12 ；而 pc 有强制解延迟锁工具，但我没用过不知道好不好用（且听说还被官方鉴定为外挂工具），这两个平台状况应该比 xbox 这边好一点。匹配都匹配不到人，遑论体验了，延迟锁真可谓「本末倒置」。现在能够拉进 500ms 的匹配，加上源自上一作的跨平台联机机制，希望 t 组是真开窍了吧。</p><p>总结起来，我认为 t 组路线是对了，但无论是因为接的大锤的烂摊子，还是因为本身实力下降，此时僵尸模式首发内容不足是无可争辩的，我觉得若不是因为多人模式枪械整合的优势，僵尸模式可能要濒临鬼服了。目前放出的情报时僵尸模式可能会有新图，但也可能是几张重置图。上次烂尾的 15 最后好歹还有 8 张图，四张重置但塞进去许多元素，更别提 cod12 把重置图和新内容塞一起够出一个 dlc 的事情了，这次搞不好会更少哦。。。。逆水行舟，不进则退啊。</p><p>最后吐槽一句，本身我是不想专门写一篇这样的文章做总结的。但发生了件事让我不忍了：我知道凌晨两点结束测试，想趁最后时候刷一把。一般来说，测试都是就算超时也让人打完最后一把再赶人跑的，上次多人试玩也是这样。但这次我好不容易打到第 19 波，结果 2 点一到准时把我赶下线了。。。动视你至于贪那点时间么？？？</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;凌晨两点试玩结束，写一篇体验。&lt;/p&gt;
&lt;p&gt;传统艺能，发售三个月还是只有一张图。第一遍玩下来，给我的感觉就是：图好小。。。&lt;/p&gt;</summary>
    
    
    
    <category term="game" scheme="https://zbttl-github-io.vercel.app/categories/game/"/>
    
    
    <category term="cod" scheme="https://zbttl-github-io.vercel.app/tags/cod/"/>
    
    <category term="流水账" scheme="https://zbttl-github-io.vercel.app/tags/%E6%B5%81%E6%B0%B4%E8%B4%A6/"/>
    
  </entry>
  
  <entry>
    <title>总结一下【完美版】自动下载 B 站收藏视频 – Left&#39;s blog 遇到的坑</title>
    <link href="https://zbttl-github-io.vercel.app/zong-jie-yi-xia-wan-mei-ban-zi-dong-xia-zai-b-zhan-shou-cang-shi-pin-left-s-blog-yu-dao-de-keng/"/>
    <id>https://zbttl-github-io.vercel.app/zong-jie-yi-xia-wan-mei-ban-zi-dong-xia-zai-b-zhan-shou-cang-shi-pin-left-s-blog-yu-dao-de-keng/</id>
    <published>2021-01-07T16:00:00.000Z</published>
    <updated>2021-01-20T19:58:39.280Z</updated>
    
    <content type="html"><![CDATA[<p>原教程： <a href="https://left.pink/archives/3073">【完美版】自动下载 B 站收藏视频 – Left’s blog</a></p><p>虽然 Left 人家的实现方法是脚本，有点非典型吧（我用的东西大多是写成二进制或者 docker），不过既然能成功实现功能那就是好东西。不过脚本的固有问题，就是坑多。目前也没找到更好的工具替代，所以排了坑继续用吧。</p><ol><li><p>记得安装 mailutils、rclone。</p></li><li><p>记得几个工具给齐权限（特别是那个 danmaku2ass.py）</p></li><li><p>rsshub 建议自建。rsshub 公用接口有可能获取不到自己的收藏夹。</p></li><li><p>目前一共三个 bug。</p><ol><li><p>评论底下说的</p><blockquote><p>第三十行提示 “syntax error: unexpected end of file”</p></blockquote><p>其实是这句：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if [ $pubdate != $olddate ];</span><br></pre></td></tr></tbody></table></figure><p>得改成</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if [ "$pubdate" != "$olddate" ];</span><br></pre></td></tr></tbody></table></figure><p>我一开始还以为变量是指脚本路径和视频储存路径（</p></li><li><p>you-get 报错。可能要加 <code>-k</code> 参数。具体是第一个脚本的 41 行：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stat=$($you -i -c /home/zbttl/run/cookies.txt $link)</span><br></pre></td></tr></tbody></table></figure><p>改成</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stat=$($you -i -k -c /home/zbttl/run/cookies.txt $link)</span><br></pre></td></tr></tbody></table></figure><p><code>-k</code> 参数具体作用是忽视证书错误。我踩坑的原因是我的 openssl 是自己编译的。。。没把本地证书链接进去。不止 you-get 报错，wget 也报错。不排除其他原因（网络故障和你懂得），gayhub 上就有一样的 issue <a href="https://github.com/zhangn1985/ykdl/issues/452">b 站解析经常性 403 错误 you-get 没问题・Issue #452・zhangn1985/ykdl</a>。</p></li><li><p>需要替换的地方，包括脚本位置，储存位置，cookies 位置，danmaku2ass.py，rclone 参数，发送到的邮箱。特别是邮箱参数有两个，我一开始只替换了一个，我说怎么只收到一个，大 e 了。</p></li><li><p><strong>(已反馈，作者已修复）</strong>第二个脚本转换弹幕的那一句</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/python3 /root/bili/danmaku2ass.py /var/www/webdav/Bilibili/"$title"/"$fullfilen"</span><br></pre></td></tr></tbody></table></figure><p>我搜了一下，没找到 <code>fullfilen</code> 这个变量。</p><p>得改成</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/python3 /root/bili//danmaku2ass.py "$filename"</span><br></pre></td></tr></tbody></table></figure></li></ol></li><li><p>脚本只能下载运行时放在收藏夹最顶上的视频。所以运行前放在收藏夹最顶上的视频和运行后收藏的视频都能抓到。但不能下载之前收藏的视频，还有收藏了一个视频后必须等他处理完再收藏其他视频，手速太快就只会下载其中一个视频哦。</p></li><li><p>还有就是，you-get 最近还不一定能方便的获取到最高画质了，打个比方，这是正常的</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210108055751.png"></p><p>但这个。。。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210108192531.png"></p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Eee8fypU4AAOFjh.jpg"></p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;原教程： &lt;a href=&quot;https://left.pink/archives/3073&quot;&gt;【完美版】自动下载 B 站收藏视频 – Left’s blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;虽然 Left 人家的实现方法是脚本，有点非典型吧（我用的东西大多是写成二进制或者 docker），不过既然能成功实现功能那就是好东西。不过脚本的固有问题，就是坑多。目前也没找到更好的工具替代，所以排了坑继续用吧。&lt;/p&gt;</summary>
    
    
    
    <category term="Downloadtools" scheme="https://zbttl-github-io.vercel.app/categories/Downloadtools/"/>
    
    
    <category term="bilibili" scheme="https://zbttl-github-io.vercel.app/tags/bilibili/"/>
    
    <category term="linux" scheme="https://zbttl-github-io.vercel.app/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>vscode 调试 bash shell 脚本</title>
    <link href="https://zbttl-github-io.vercel.app/vscode-diao-shi-bash-shell-jiao-ben/"/>
    <id>https://zbttl-github-io.vercel.app/vscode-diao-shi-bash-shell-jiao-ben/</id>
    <published>2021-01-06T16:00:00.000Z</published>
    <updated>2021-01-20T19:57:36.327Z</updated>
    
    <content type="html"><![CDATA[<p>昨天说到日志的事，光知道报错也不行，得知道错哪里。所以我试着在 ubuntu 上用 vscode 调试 bash 脚本。</p><p>参考文章：<a href="https://liushiming.cn/article/debug-bash-on-macos.html">使用 vscode 调试 bash 脚本</a></p><ol><li><p>打开 vscode，去拓展商店装一个 bash debug。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210108020551.png"></p></li><li><p>将需要调试的脚本放到一个单独的文件夹中，使用文件-&gt;打开文件夹打开带脚本的那个文件夹。</p></li><li><p>在侧边栏选中那个一个虫子加一个播放键那个图标，点击右边的创建 <code>launch.json</code> 按钮</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210108021032.png"></p></li><li><p>找到左侧顶栏播放键旁的下拉菜单，选添加配置</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210108023523.png"></p><p>建议添加 select script from list of sh files 这个（即运行后提示用户选择要调试的脚本）</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210108023750.png"></p></li><li><p>使用下拉菜单选中刚刚我们添加的 select script from list of sh files，点击播放键运行。</p></li><li><p>bash 调试时并不会自动显示已修改变量的值，需要我们自己添加。在左半部分监视窗口中按加号添加表达式，以</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">${变量名}</span><br></pre></td></tr></tbody></table></figure><p>格式来添加，要确认哪个就添加哪个。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210108024834.png"></p></li></ol><p>剩下的步骤和其他语言程序的调试就差不多了，就不谈了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;昨天说到日志的事，光知道报错也不行，得知道错哪里。所以我试着在 ubuntu 上用 vscode 调试 bash 脚本。&lt;/p&gt;
&lt;p&gt;参考文章：&lt;a href=&quot;https://liushiming.cn/article/debug-bash-on-macos.html&quot;&gt;使用 vscode 调试 bash 脚本&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://zbttl-github-io.vercel.app/categories/Linux/"/>
    
    
    <category term="terminal" scheme="https://zbttl-github-io.vercel.app/tags/terminal/"/>
    
    <category term="vscode" scheme="https://zbttl-github-io.vercel.app/tags/vscode/"/>
    
    <category term="bash" scheme="https://zbttl-github-io.vercel.app/tags/bash/"/>
    
  </entry>
  
  <entry>
    <title>mailutils 查看日志/发送邮件</title>
    <link href="https://zbttl-github-io.vercel.app/mailutils-cha-kan-ri-zhi-fa-song-you-jian/"/>
    <id>https://zbttl-github-io.vercel.app/mailutils-cha-kan-ri-zhi-fa-song-you-jian/</id>
    <published>2021-01-05T16:00:00.000Z</published>
    <updated>2021-01-20T19:55:23.778Z</updated>
    
    <content type="html"><![CDATA[<p>之前写 crontab 提过一个简单的 postfix。后来玩大佬的<a href="https://left.pink/archives/3073">【完美版】自动下载 B 站收藏视频 – Left’s blog</a> 时，没调试好脚本一下子弹一堆错，脚本发的错误又不走 linux 的日志而是发去邮件，光靠简单的 postfix 就不好一条条查看了。得用更高一级的 mailutils。另外脚本本身还有发送邮件提示上传完毕的功能，也得通过 mailutils。</p><p>参考文章：<a href="https://unix.stackexchange.com/questions/26790/what-is-mail-and-how-is-it-navigated">linux - What is “mail”, and how is it navigated? - Unix &amp; Linux Stack Exchange</a></p><ol><li><p>安装</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install mailutils -y</span><br></pre></td></tr></tbody></table></figure></li><li><p>使用</p><p>通过命令 <code>mail</code> 进入邮箱。此时可以看到底下有个问号，那个地方就会显示你的输入的操作符。这个软件所有的操作逻辑都是操作符 + 回车，不输入操作符直接敲回车，软件就会依照所处位置进行对应的操作。为啥强调这个？因为这就是这个软件难用的地方。。。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Xshell_aEyufayMNT.png"></p></li><li><p>看到邮箱列表，最左边有个小箭头，表示选中的邮件。可以直接用回车进入被选中的邮件。但基于操作逻辑，你不能用上下方向键调整箭头指向的邮件。。。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210107223732.png"></p></li><li><p>在相关邮件查看处，按下回车看邮件剩余的部分；如果邮件已结束，则会跳到下一封。也可以按输入 <code>n</code> + 回车直接跳到下一封。</p></li><li><p>要重新显示邮件列表，可以使用 <code>z</code> + 回车，显示未读邮件；邮件列表太多的话，只会显示一部分，可以用 <code>z+</code> 或 <code>z-</code> + 回车，上下翻页；或者用 <code>f*</code> 显示所有邮件。</p></li><li><p>要指定进入某一个邮件，可以直接输入数字 + 回车；要删除所有邮件，输入 <code>d*</code> + 回车。</p></li><li><p>剩下的可以通过输入 <code>help</code> + 回车进入命令界面（虽然我感觉大多数人都看不懂，因为我没发现详细说明在哪）。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210108012406.png"></p></li><li><p>按下 <code>q</code> + 回车后退或直接退出。</p></li><li><p>发送邮件。使用命令</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mail -s "[邮件内容]" -r "[发送人]" [接收方邮箱]</span><br></pre></td></tr></tbody></table></figure><p>发送人最后在接收方会显示为 <code>root&lt;[发送人]@localhost.localdomain&gt;</code></p><p>另外发送邮件的机器可能还要做域名解析之类的（不是很清楚，我用虚拟机 ubuntu 发不出去，在 vps 的 ubuntu 发送就没问题，一般那个脚本应该都在 vps 上用的吧，所以我就没认真探究）。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前写 crontab 提过一个简单的 postfix。后来玩大佬的&lt;a href=&quot;https://left.pink/archives/3073&quot;&gt;【完美版】自动下载 B 站收藏视频 – Left’s blog&lt;/a&gt; 时，没调试好脚本一下子弹一堆错，脚本发的错误又不走 linux 的日志而是发去邮件，光靠简单的 postfix 就不好一条条查看了。得用更高一级的 mailutils。另外脚本本身还有发送邮件提示上传完毕的功能，也得通过 mailutils。&lt;/p&gt;
&lt;p&gt;参考文章：&lt;a href=&quot;https://unix.stackexchange.com/questions/26790/what-is-mail-and-how-is-it-navigated&quot;&gt;linux - What is “mail”, and how is it navigated? - Unix &amp;amp; Linux Stack Exchange&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://zbttl-github-io.vercel.app/categories/Linux/"/>
    
    
    <category term="log" scheme="https://zbttl-github-io.vercel.app/tags/log/"/>
    
    <category term="mailutils" scheme="https://zbttl-github-io.vercel.app/tags/mailutils/"/>
    
  </entry>
  
  <entry>
    <title>cod 战区复活岛活动吐槽</title>
    <link href="https://zbttl-github-io.vercel.app/cod-zhan-qu-fu-huo-dao-huo-dong-tu-cao/"/>
    <id>https://zbttl-github-io.vercel.app/cod-zhan-qu-fu-huo-dao-huo-dong-tu-cao/</id>
    <published>2021-01-04T16:00:00.000Z</published>
    <updated>2021-01-20T19:55:39.320Z</updated>
    
    <content type="html"><![CDATA[<p>其实前期活动还是蛮好做的，因为有队友活着就能无限复活，甚至比 codm 的只有 5 次复活机会还要夸张。虽说战区这个平衡性属实很烂，满地 m14 + 双持三连发，我觉得小蜜蜂（mac10，记忆中的 cs 1.6 叫法，csgo 里面好像改称吹风机了，小蜜蜂是 mp9）也不错，第一赛季刚出的时候好像玩的人也不少，但现在战区没啥人用。</p><p>但是，和第六赛季中期有码头后期没有一样，等我想肝的时候复活岛就变成迷你大逃杀了。。。用传奇武器和白板武器各杀 30 个的任务我死活完不成，前者难捡，后者干脆直接被吞了。。。原版复活岛地板是能见到白板枪的，改完以后只能捡空投箱的，还得是什么配件都没带的 rpd/ffar/三连发手枪才算白板。好在其中有两把轮椅，但 ffar 什么配件都没带的话开场就 26 发子弹，射速又快可能一个都扫不死，一定程度上还不如 rpd。还有下面这个破坏载具的任务，改版前说是打有人坐过的载具也算，反正改版后这么打就不算了- -</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E4%BD%BF%E5%91%BD%E5%8F%AC%E5%94%A4%C2%AE%EF%BC%9A%E7%8E%B0%E4%BB%A3%E6%88%98%E4%BA%89%C2%AE%20(5).png"></p><p>另外还有动视日常的「翻译错误」问题。打个括号是因为我也不知道究竟是翻译错误还是动视本身就写错了（我认为连玩梗都那么熟练的动视上海因为这个没少给总部背锅）。具体来说：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E4%BD%BF%E5%91%BD%E5%8F%AC%E5%94%A4%C2%AE%EF%BC%9A%E7%8E%B0%E4%BB%A3%E6%88%98%E4%BA%89%C2%AE%20(7).png"></p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E4%BD%BF%E5%91%BD%E5%8F%AC%E5%94%A4%C2%AE%EF%BC%9A%E7%8E%B0%E4%BB%A3%E6%88%98%E4%BA%89%C2%AE%20(6).png"></p><p>都是传奇武器？其实前面那张是白板武器而不是传奇武器。还有一个任务是「在复活岛购买 30 个连杀奖励」，这个我认真核对过简繁英三个版本，都说清楚了是在复活岛。但其实打夺金也能完成（</p><p>唯一让我感到开心点点的是，我这个 kd 不到 1 的典狱长终于吃到两把鸡啦~</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E4%BD%BF%E5%91%BD%E5%8F%AC%E5%94%A4%C2%AE%EF%BC%9A%E7%8E%B0%E4%BB%A3%E6%88%98%E4%BA%89%C2%AE%20(8).png"></p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E4%BD%BF%E5%91%BD%E5%8F%AC%E5%94%A4%C2%AE%EF%BC%9A%E7%8E%B0%E4%BB%A3%E6%88%98%E4%BA%89%C2%AE%20(9).png"></p><p>还是同一个小时内。。。第一把算是和队友苟到最后，第二把那真是就是躺的，队友三个活着就我倒了。。。凌晨三点的俄区，兼顾了延迟不算高和对手不太强的优点。吃完那两把鸡活动时间本来也就到了（昨天凌晨四点），但你们看上面的图，也是传统艺能了。第二天直到晚上 11 点我还能继续肝这个任务，正在我以为是不是动视又像第六赛季一样延期甚至变成永久任务的时候，凌晨两点再次上线的我就看不到这个任务了。。。但复活岛还是留下来，估计当常驻了吧（乌鸦摸鱼到现在新的战区地图还没做出来- -复活岛是旧图了，而且 codm 还比正作先上线）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;其实前期活动还是蛮好做的，因为有队友活着就能无限复活，甚至比 codm 的只有 5 次复活机会还要夸张。虽说战区这个平衡性属实很烂，满地 m14 + 双持三连发，我觉得小蜜蜂（mac10，记忆中的 cs 1.6 叫法，csgo 里面好像改称吹风机了，小蜜蜂是 mp9）也不错，第一赛季刚出的时候好像玩的人也不少，但现在战区没啥人用。&lt;/p&gt;
&lt;p&gt;但是，和第六赛季中期有码头后期没有一样，等我想肝的时候复活岛就变成迷你大逃杀了。。。用传奇武器和白板武器各杀 30 个的任务我死活完不成，前者难捡，后者干脆直接被吞了。。。原版复活岛地板是能见到白板枪的，改完以后只能捡空投箱的，还得是什么配件都没带的 rpd/ffar/三连发手枪才算白板。好在其中有两把轮椅，但 ffar 什么配件都没带的话开场就 26 发子弹，射速又快可能一个都扫不死，一定程度上还不如 rpd。还有下面这个破坏载具的任务，改版前说是打有人坐过的载具也算，反正改版后这么打就不算了- -&lt;/p&gt;</summary>
    
    
    
    <category term="game" scheme="https://zbttl-github-io.vercel.app/categories/game/"/>
    
    
    <category term="cod" scheme="https://zbttl-github-io.vercel.app/tags/cod/"/>
    
    <category term="流水账" scheme="https://zbttl-github-io.vercel.app/tags/%E6%B5%81%E6%B0%B4%E8%B4%A6/"/>
    
  </entry>
  
  <entry>
    <title>路由器跑分 &amp;&amp; 刷机 后日谈 及 几个加速器使用情况收集</title>
    <link href="https://zbttl-github-io.vercel.app/lu-you-qi-pao-fen-shua-ji-hou-ri-tan-ji-ji-ge-jia-su-qi-shi-yong-qing-kuang-shou-ji/"/>
    <id>https://zbttl-github-io.vercel.app/lu-you-qi-pao-fen-shua-ji-hou-ri-tan-ji-ji-ge-jia-su-qi-shi-yong-qing-kuang-shou-ji/</id>
    <published>2021-01-01T16:00:00.000Z</published>
    <updated>2021-03-08T17:00:31.876Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>要说新年有啥目标。。。年底这一波，看来又得物色路由器了。或者换个新的加速方法</p></blockquote><p>光速出坑（不是</p><p>前几天说了，开开心心折腾 openwrt 的我遇到给 xbox 加速的极路由 2 崩了，怎么重置都无效，干脆一起刷了 openwrt。虽然极路由原厂系统也是基于 openwrt，但显然腾讯加速器不认这个；再次刷回原厂系统发现进不去插件中心，进去直接显示 503，也没法用手机客户端，甚至自动对时都不行，怀疑是时间不对的我手动对时，没用（此时我还没意识到真正的问题）。最后惊讶的发现极路由还有个 key 机制，不备份一刷就没了，没了就进不去插件中心了。痛心疾首的我不甘心，边想着大不了再买一个边找是不是还有其他办法暴力破 root 或者直接进插件中心，让我下个开发者模式插件就行。</p><h2 id="极路由强制进入插件中心（作废）"><a href="#极路由强制进入插件中心（作废）" class="headerlink" title="极路由强制进入插件中心（作废）"></a>极路由强制进入插件中心（作废）</h2><p>结果真让我找到一个：<a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=205316&amp;ordertype=1">极路由2（hc5761）恢复mac教程无key - 无线路由器硬件改造以及故障维修 - 恩山无线论坛 - Powered by Discuz!</a></p><blockquote><p>本帖最后由 航校门口二楼修 于 2017-6-29 16:53 编辑</p><p>本人刷机的时候没有备份 key 刷第 3 方固件 导致 mac 丢失 刷回官方固件无法安装插件。<br>首先是需要的工具<br>1.【固件编辑器】<br>2. 极路由 2 的恢复固件    链接: <a href="http://pan.baidu.com/s/1ccXyfO">http://pan.baidu.com/s/1ccXyfO</a> 密码: dh35<br>3. 必须要有刷不死，否则你可以忽略这帖子了</p><p>接下来是教程内容：</p><ol><li>用固件编辑器打开恢复固件<br>按 ctrl+h 出现替换文本对话框<br>搜索 000000000000 和搜索 00:00:00:00:00:00 替换你的 mac</li><li>进入 breed 选择固件直接刷机就可以了。和刷普通固件方法一样。（注意不要选编程器固件刷入，刷前先恢复出厂）</li></ol><p>注意：</p><ol><li>不能直接从路由器中进入云插件，会提示 103 错误，估计是 key 丢失了（联系微信客服要寄回去修）</li><li>可以从官方网页进入 极路由云平台 安装插件（我是绑定了极路由账号的，不知道没有绑定的可不可以） </li><li>手机安装 app 管理 路由器 可以用 安装和卸载插件 完美，没有什么错误（前提要绑定过你的极路由账号）</li><li>从官网进入路由器云插件页面的，需要卸载插件后从新安装才能正常使用。</li></ol></blockquote><p>试过手上最新版固件文件找不到 000000000000 ，只能用他给的版本。但也还是 504，而且这回有提示 103 了，我才回忆起刚开始就算进不去也不会提示 103，合着刚刚可能没丢，但也没想着备份，现在再让我刷一个修改版彻底刷丢了。。。</p><p>再去恩山搜索极路由，喔，这回连带加速器加速失败的罪魁祸首都给抖出来了，原来是极路由网站也跑路了，极路由彻底凉了。那也不用再买台新的了，买到了你也开不了开发者模式加不了速。</p><p>那怎么办？又要回到电脑加速时代？</p><p>我想了想，不是还有小米 mini 吗？小米 mini 和极路由 2、newifi mini 配置一样，就可能体积大一点，而且不是用 micro-usb 口充电而是用 3.5 dc 口充电，感觉和 newifi mini 一毛一样啊？度了一下果然，极路由 2 似乎没啥教程能刷成小米的系统，但 newifi mini 可以。</p><h2 id="newifi-mini-刷入小米固件"><a href="#newifi-mini-刷入小米固件" class="headerlink" title="newifi mini 刷入小米固件"></a>newifi mini 刷入小米固件</h2><p>参考文章：</p><ul><li><a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=173247">【新提醒】NEWIFI mini 完美刷小米 mini - 可用 APP 安装插件 - 随意改 SN - 小米无线路由器以及小米无线相关的设备 - 恩山无线论坛 - Powered by Discuz!</a></li><li><a href="https://www.jianshu.com/p/e4e0a5818c3d">小米路由器青春版刷入 Breed 教程 - 简书</a></li><li><a href="http://www.360doc.com/content/16/1202/07/32686726_611203705.shtml">小米路由器 3 开启 SSH 最简单的方法</a></li></ul><ol><li><p>到参考文章 1 中下载小米的编译器固件</p><blockquote><p>小米路由器编程器固件下载地址：链接：<a href="http://pan.baidu.com/s/1dD4QW5j">http://pan.baidu.com/s/1dD4QW5j</a> 密码：78wj</p></blockquote></li><li><p>进入 breed，以防万一备份一次编译器固件再说。然后在固件更新中切换到「编译器固件」，选择下载的小米编译器固件，取消掉自动重启的勾，其他不要动。</p></li><li><p>刷完到固件启动中，切换启动方式为小米 mini。</p></li><li><p>重启，发现怎么灯一个也不亮？但插上网线以后，wan 亮了，虚惊一场。和极路由刷成 openwrt lan 灯报废一样，只不过这次似乎连 2.4g 和 5g 的灯都报废了，就剩 wan 口和 lan 口灯能亮。。。</p></li><li><p>进入管理页面</p><blockquote><p>小米路由器 IP 192.168.31.1 登录密码：<strong>12345678</strong> <em>后期可以自己修改</em></p></blockquote></li><li><p>确定无误尝试用 ssh 连接路由器。虽说文章里说：</p><blockquote><p>固件默认开启 ssh…… 账号 root 密码 admin</p></blockquote><p>但后续我更新了就进不去了，而且刷了 breed 以后，不可以用小米官方的 root 方法（因为小米官方的 root 方法最重要的一部是插入含有特定文件的 u 盘，然后按住 reset 键启动路由器，然后这不就和进入 breed 的方法冲突了么）。所以趁现在是旧版固件，先破一遍。</p></li><li><p>回到管理界面，复制此时管理界面的网址 url，此时的 url 应该是类似这种形状的</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.31.1/cgi-bin/luci/;stok=《你的 stok》/web/home#router</span><br></pre></td></tr></tbody></table></figure><p>删掉 <code>《你的 stok》</code> 以后的部分，留下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.31.1/cgi-bin/luci/;stok=《你的 stok》</span><br></pre></td></tr></tbody></table></figure><p>这一段我称之为 header，放到文本编辑器中待用。</p></li><li><p>在 header 后加上</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/api/xqnetwork/set_wifi_ap?ssid=tianbao&amp;encryption=NONE&amp;enctype=NONE&amp;channel=1%3Bnvram%20set%20ssh%5Fen%3D1%3B%20nvram%20commit</span><br></pre></td></tr></tbody></table></figure><p>访问。访问成功后网页应显示</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“{'msg':'未能连接到指定 WiFi(Probe timeout)','code':1616}”</span><br></pre></td></tr></tbody></table></figure><p>注意这个 code。如果成功应该就显示 1616。我用新版本尝试虽然也能显示一句类似的内容，但 code 不是 1616，最后也没成功。</p><p>之后重复上面的步骤，不过在 header 后添加的内容要经过修改。第二次访问添加：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/api/xqnetwork/set_wifi_ap?ssid=tianbao&amp;encryption=NONE&amp;enctype=NONE&amp;channel=1%3Bsed%20%2Di%20%22%3Ax%3AN%3As%2Fif%20%5C%5B%2E%2A%5C%3B%20then%5Cn%2E%2Areturn%200%5Cn%2E%2Afi%2F%23tb%2F%3Bb%20x%22%20%2Fetc%2Finit.d%2Fdropbear</span><br></pre></td></tr></tbody></table></figure><p>第三次访问添加</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/api/xqnetwork/set_wifi_ap?ssid=tianbao&amp;encryption=NONE&amp;enctype=NONE&amp;channel=1%3B%2Fetc%2Finit.d%2Fdropbear%20start</span><br></pre></td></tr></tbody></table></figure><p>最后一次访问</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/api/xqsystem/set_name_password?oldPwd=《你当前的后台管理密码》&amp;newPwd=《新密码》</span><br></pre></td></tr></tbody></table></figure><p>最后一次访问结果就不是 1616 了，而是 “{‘code’:0}”，表示修改密码成功。</p><p>之后就可以用修改的密码登录 ssh 了，管理界面的密码似乎也会被同步修改。</p><p>但和极路由一样，旧版固件装不上腾讯加速器的插件。还得更新，更新不能在网页端更新（未经验证），得使用手机 app。下载<a href="https://cdn.cnbj1.fds.api.mi-img.com/xiaoqiang/client/xqapp_dev.apk">开发版 app</a>，登录后会自动检测到新固件，更新完可能要手动重启一遍路由器。重启后就能安装了（应该，也说不准，我当时手机就装不上，上次日记吐槽过了）。为防万一（毕竟破解啥的还比较麻烦），固件更新前和更新且所有配置设置好后最好就都做一次编译器固件备份，实测备份以后还原能成功复原所有配置，且功能全部正常。</p></li></ol><h2 id="小米固件加速的劣势，和后续加速方案的寻找"><a href="#小米固件加速的劣势，和后续加速方案的寻找" class="headerlink" title="小米固件加速的劣势，和后续加速方案的寻找"></a>小米固件加速的劣势，和后续加速方案的寻找</h2><p>   正如我上一篇文章所说，小米的固件根本没有单独子网的无线中继功能，只有所谓的 ap 中继：</p><blockquote><p>别急，我发现小米的固件显然有问题，不能 nat 中继（中继的时候 newifi 和我的 ac86u 在同一子网，而总网关也就是 192.168.xxx.1是华硕的路由器），导致如果无线中继手机读取到的是 ac86u。只有通过极路由中继，然后用一根网线接极路由的 wan 和 newifi 的 lan 让 newifi 自己做一个子网出来才行。。。还好当年没有买小米 mini。凑合着用。</p></blockquote><p>   线下离网线近还好，如果离得远或者只能我开手机热点的情况下，我就得带两个路由（其中一个支持无线中继）。</p><p>   把做过一番操作的极路由备份一遍编程器固件，重新刷入 openwrt。此时我又发现一个极路由 2 比较差的地方：5g wifi 的发射强度能在 openwrt 中看到，newifi mini 可以发射出 22 dbm 信噪比的信号，但极路由 2 只能发射 10 dbm。另一点，在 breed 刷完 openwrt 自动重启到能进入管理界面的速度，newifi mini 也远快于极路由 2，前者大概 10s 就能近了，后者要接近一分钟，等无线信号灯亮了我才能进管理界面。</p><p>   但没办法，如果极路由能刷小米的系统就好了。。。让 newifi 做无线中继效果应该好一点，毕竟信号强的多。但做无线中继的 openwrt 和极路由原生系统比，也有个缺陷：极路由的系统中继能够记录多个中继节点，比如家中的 wifi，带出去后在同学家添加他家的 wifi ，回到家还能自动连上我家的 wifi 而不需要再次重新寻找 ssid 输密码；openwrt 记不住，和 xbox 一样一样的，出门后还要删掉那个已经填好的家中的中继的无线节点，再次添加。</p><p>   这时候我想起家里还有个 k2，那玩意 flash 和 rom 更低，相比另外两个砍半；但无线四个天线，cpu 也没缩水，信号反而更强。但是。。。同样是 dc 3.5 接口，newifi mini 就能插在 xbox 上，k2 只能用专用的一体式 12v 1a 适配器（说起来，k2 本身的适配器被学校那个穷凶极恶的老鼠咬断了，但newifi mini 的适配器也是 12v 的，试过通用），无论是插 xbox 上还是插 5v2a 的手机插头，都会导致无限重启，无线信号时断时连。反正就是带不出去。。。刷个 padavan 在家当非单独子网的无线中继好了，加速器识别到家中的华硕主路由器，让华硕来加速，这个就仅仅弥补 xbox 无线拉跨的问题。</p><p>   我之前不是说我还想买个网件来加速么。看起来也不行，网件吃电相比 k2 只能更多不能更少，想接 xbox 口就能吃到足够的供电，做梦吧。</p><p>   还有，无线非 nat 中继也有坑爹的地方：nat 中继你连上路由后会获得中继路由给你发的 ip，你沿着这个 ip 就能摸到中继路由的网关；但 ap 中继，好处是你链接中继路由和直接链接主路由获取到的 ip 是一样的，坏处是你这就不能直接知道中继路由的 ip 是啥了。本来我想着主路由华硕的管理界面应该有所有连接设备的 wifi 吧，排除掉我在用的设备不就是那个中继路由的 ip 喽？结果：</p><p>   <img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210104162929.png"></p><p>   算了。直接用点工具强行 arp 探测好了。下了个 pingtools，抓到了。</p><p>   <img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210104163439.png"></p><p>   那还有其他方案么？还真有，那就是：不用 tx 加速器。</p><p>   uu 就在 10 月份支持 openwrt 加速：<a href="https://router.uu.163.com/app/baike/public/5f963c9304c215e129ca40e8.html">网易UU加速器</a></p><p>   恩山老哥总结的路由器加速设备表：<a href="https://www.right.com.cn/forum/thread-4056285-1-1.html">【　　　】游戏加速器路由器支持情况小统计 - 网友联络、交流（禁止广告，违反封账户） - 恩山无线论坛 - Powered by Discuz!</a></p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210104165940.png"></p><h2 id="总结我用过的一些加速器的优劣（持续更新）"><a href="#总结我用过的一些加速器的优劣（持续更新）" class="headerlink" title="总结我用过的一些加速器的优劣（持续更新）"></a>总结我用过的一些加速器的优劣（持续更新）</h2><h3 id="腾讯加速器"><a href="#腾讯加速器" class="headerlink" title="腾讯加速器"></a>腾讯加速器</h3><ul><li>便宜（14 元/月）</li><li>曾经是唯一支持用 pc 管理路由加速的加速器（下载 6 月左右的旧版 pc 客户端也许还可用）</li><li>不限设备绑定，不限单路由下加速设备数量</li><li>但路由加速 bug 频发，最主要的 bug 就是加速一段时间，加速的设备重启或者待机唤醒后就会断网。通过重启路由，或者通过 ssh 进入路由器，用 <code>netstat -plun</code> 检索 tx 加速进程（名为 pmplugin），kill 后重新加速即可。</li><li>下载加速节点大多数属于空气节点。实测 cod16 和微软模拟飞行下载加速都很慢，烂橘子效果尚可。</li><li>微软商店的游戏几乎都加速不起来。腐烂国度 2 windows store 版加速基本没效果。</li><li>手机端不支持 xbox 云游戏加速。</li><li>支持设备最少。</li></ul><h3 id="uu-加速器"><a href="#uu-加速器" class="headerlink" title="uu 加速器"></a>uu 加速器</h3><ul><li>贵（30 元/月）</li><li>限制一个设备绑定，且该设备下只能同时加速两个设备。</li><li>下载加速效果不错。</li><li>支持 xbox 云游戏加速。</li><li>openwrt 路由插件不能用手机 app 直接安装。</li><li>没有 tx 那样的 bug。</li><li>过节时线路拥堵，延迟会变高。</li></ul><h3 id="灵缇加速器"><a href="#灵缇加速器" class="headerlink" title="灵缇加速器"></a>灵缇加速器</h3><ul><li>价格居中（16 元/月）</li><li>不支持 xbox 云游戏加速。</li><li>支持 padavan。</li><li>支持 openwrt 手机安装和 padavan。但 openwrt 路由器需要提前安装 kmod-tun 功能（目前如果是自己编译的 openwrt，直接安装源上的 kmod-tun 会提示你当前依赖版本太低，但其实 kmod-tun 功能已经作为模块编译了，去编译目录找一下安装就行，实测成功）。</li><li>也没有 tx 那样的 bug。</li></ul><h3 id="雷神加速器"><a href="#雷神加速器" class="headerlink" title="雷神加速器"></a>雷神加速器</h3><ul><li>便宜到爆。按使用时间付费而不是按月付费，冲个几千小时基本用不完。</li><li>效果玄学。电信环境下，也就是开了比不开好一点点的效果，但和其他加速器相比，两个字，拉跨。</li><li>不支持任何路由器。</li><li>cod16 拿不到 nat 开放。</li></ul><h3 id="自建"><a href="#自建" class="headerlink" title="自建"></a>自建</h3><p>自建加速器方案有很多，我也写过一些，这里只分析一波自建和上面大厂加速器的取舍：</p><ol><li>线路是一个加速器是否好用的关键。除非花了大价钱，否则自建的线路会烂一些。各个大厂专营的加速器们把主要成本都花在了线路优化上面，加速器走的远程隧道基本都是专线，后续再通过用户数量来摊薄成本，自建加速器自然比不上；可选多个线路这点更是同价格自建无法比拟的。</li><li>自建第一个优势在于更为灵活。大厂加速器通过账号和客户端限制能加速几台设备，而自建完全没有这种限制，想加速几台加速几台。</li><li>大厂加速器把大多数钱投入线路上，再把剩下的一部分钱投入服务器负载均衡技术上，估计剩下的一点油渣才是给加速器实现技术的；其次一般情况下技术难度 = 规模 + 功能，加速器用户基数大导致研发新功能还需要考量到服务器稳定性的问题，最后导致无论是啥加速器都有其暂时不支持，无法加速的游戏/设备。而各类开源的自建加速器的技术发展到现在，单纯功能上讲基本完爆闭源的大厂加速器几条街。只要你肯折腾，没有啥加速不上的设备。</li><li>线路上的劣势能通过技术手段弥补吗？部分情况下可以，使用多倍发包，前向纠错等技术，付出多一些流量，可以较为有效的改善丢包和延迟问题。</li><li>当然，技术不是万能的，但钱在这里也许是万能的。某些线路过高的丢包就算是用各种技术去弥补也无济于事，这时候我们可以考虑更换线路，更换运营商等方式。只要肯加钱上专线，完爆大厂加速器不是梦！</li></ol><p>总结：自建适合</p><ul><li>有钱有时间的人</li><li>没钱有时间的人，玩的游戏对延迟敏感度不高</li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;要说新年有啥目标。。。年底这一波，看来又得物色路由器了。或者换个新的加速方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;光速出坑（不是&lt;/p&gt;</summary>
    
    
    
    <category term="game" scheme="https://zbttl-github-io.vercel.app/categories/game/"/>
    
    
    <category term="游戏加速" scheme="https://zbttl-github-io.vercel.app/tags/%E6%B8%B8%E6%88%8F%E5%8A%A0%E9%80%9F/"/>
    
    <category term="openwrt" scheme="https://zbttl-github-io.vercel.app/tags/openwrt/"/>
    
    <category term="持续更新" scheme="https://zbttl-github-io.vercel.app/tags/%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
    
  </entry>
  
  <entry>
    <title>2020，这一年，xbox 新玩家的一年</title>
    <link href="https://zbttl-github-io.vercel.app/2020-zhe-yi-nian-xbox-xin-wan-jia-de-yi-nian/"/>
    <id>https://zbttl-github-io.vercel.app/2020-zhe-yi-nian-xbox-xin-wan-jia-de-yi-nian/</id>
    <published>2020-12-30T16:00:00.000Z</published>
    <updated>2021-01-23T19:26:58.973Z</updated>
    
    <content type="html"><![CDATA[<p>今年对世界是艰难的一年，不过对我这个宅来说。。。可能算是「波澜壮阔」的一年（用词不当警告）。</p><p>该总结的事情很多，我毕业了，而且后续应该不打算再读研究生啥的（数学太烂），放下了陪伴我接近 20 年的学生身份；毕业这一年我也没认真找工作，毕竟计算机这边我还有好多东西想玩清楚；今年因为种种原因在家里的时间是我这二十几年来最长的，也写了大学四年来最多的日记，最后我鼓起勇气开了个博客慢慢把日记放上来。诸如此类等等等。</p><p>但如果让我选「今年在什么东西上花费的精力最多？」，那应该还是这台 xbox one S。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20201231_155252913.jpg"></p><p>这台东西是去年双十二买的，当时的背景是我亲戚给了我一张 5000 大洋的购物卡让我换掉大学期间的这台电脑，当时我妈还想着要是钱不够还可以给我填点，毕竟大学用的暗影 2 是 6000 元级的，我妈以为毕业后预算可能还要再高点。但我大学期间感受最深的是笔记本的便携性真的很重要。。。。后续我的暗影 2 都待在家里插着显示器当台式机用，我去年买了个更大更高的桌子放显示器，而那个更矮更小的桌子就插在大桌子下面，笔记本就合盖放在小桌子上（为了散热我还会垫几个瓶盖在 b 和 c 面之间），然后接上鼠标键盘 hub hdmi 啥的。除非是要线下打游戏才会扛出去，如果是有编程任务，我宁愿带我高中买的 500 大洋的 windows 平板出去，毕竟大学的课业编程任务并不需要很好的硬件。就算用得着我也选择开个远程，毕竟要把暗影 2 带过来要拔一大堆线，回来还要重新把小桌子拉出来，把机子摆上去插好线开好机再塞回去（</p><p>所以我当时就打定主意买轻薄本了。既然是买轻薄本，当时市场上最棒的选择就是小新 pro13，那玩意才 4499。虽然最后被京东坑了一笔，我看双十二之前就有付 200 定金然后双十二发货的事了，结果双十二的时候尾款不可以用礼品卡付，后面放弃定金在当天买照样 4499 立刻发货。。。。</p><p>那剩下的 500（被坑了一笔只剩 300 了），想了想我 10 月份才买了 3 个月的 xgp 试用，看着主机库比 pc 库多一大堆游戏；我那时候还蛮想继续玩地平线 4，但对每次开游戏都要关一堆程序甚至重启一遍电脑否则就要吃掉帧警告这件事感到疲倦，有了 xbox 自然就没这个问题了；还有 8 月份趁极限竞速 6 下架 34 大洋薅的全 dlc 包（我当时是考虑到以后可能买 xbox，做梦都没有想到年底就能买，更没有想到有了 xbox 这一年这游戏我也没开几次）。还有，我 18 年买的 ns 分期一年，到 12 月刚好还完，xbox one S 纯数字版那时候 1k3 扣掉 300 还有 1000，六期还完每期也就 200 不到，在我每月接受范围之内。</p><p>然后就是日常的喜新厌旧流程。。。买到 xbox 的这一年我的日常游戏平台从 ns 基本转向 xbox，最常玩的两个游戏，从年初到年中的 cod15 多人 + 僵尸；三月份开始持续一整年的 cod16。cod15 僵尸较 cod12 僵尸难度降低不少，还有机器人队友，以我的实力能打到奇迹武器出来了；16 的季票制毁誉参半，但 yysy 托季票的福我有动力肝了，枪几乎都满级了，还有十月份那一波穿墙 bug 说起来是很讨人嫌但玩着那是真香啊。。。话说回来这两个游戏我都有 pc 版还都是买的首发，但因为 pc 的配置问题以及 pc 端没有同屏没人陪我玩，完全没动力玩。特别是 cod 16 我买的首发却错过了前三个赛季这点。。。虽然都玩的挺爽，但值得吐槽的地方也不少：cod15 的锁 ping，才出了一年我就匹配不到吃鸡了，甚至想匹配到多人都要挑好时间（凌晨有人几率降低）选好节点（亚洲，美国匹配不到）；16 的阴间图，后期的匹配崩坏和最后一个赛季不得善终，作为一款里程碑式的游戏落得这样一个下场，令人唏嘘。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201231175932.png"></p><p>除了最主要的这两个，中间还穿插着玩了挺多游戏：年初的地平线 4，年中定了三年 xgp 后玩的皇牌空战 7，趁出 xgp 库前玩的鬼泣 5，dlc 都入了库的命运 2；ea play 进 xgp 后玩的战地 4，还有早就买了但最后才玩的 cod14，没钱买疯狂打试玩的 cod17 等等。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201231173039.png"></p><p>（没想到只打人机的我，dota2 还是游戏时间最长的游戏，不过起码有 50 小时左右的时长我是挂机挂出来的，那时候用人机实验一天究竟能打几只斧王，搞了满地图的斧王；战地 1 实打实的肝出了所有枪，cod16 时间应该更多，毕竟我在战网上也有玩，gog 统计不到；鬼泣 5 和皇牌空战 7 一个起码 10 小时一个起码 50 小时，应该是因为我玩的时候不想联网的原因，离线状态下的游戏时间没有算进去）</p><p>线下同屏部分，主机上的大作同屏能力完爆 pc，cod 每一作都能同屏，僵尸模式离线状态下甚至能四人同屏，pc 上只有 12 勉强能双人同屏，而且还只能访客模式同屏；微软这边的两个重量级独占作品，光环和战争机器，除了光环 5 那是作作都能同屏过剧情，战争机器 5 甚至能三人同屏（343 你看看人家，鬼面兽警告）；borderland 在 pc 上同屏你得有配置运行几个游戏，在主机上同时开四个号完全没有压力，遗憾的是 borderland 本世代作品没有中文，因为我在 pc 端玩中文比较熟了就切成两个朋友比较熟悉的日文来玩；borderland3 开始有中文但在 xbox one 上只能最多双人，但在已经到来的次时代机型上可以四人，不过 3 目前还是贵，等一个骨折，或者入xgp（ 今年的线下部分，因为疫情的原因我家附近的两个初中同学并不用回武汉和福建，趁年初把 borderland 2 刷到三周目，把战争机器系列和光环系列都通了。而偶尔和我高中同学进行的线下聚会，最令人惊喜的是的是细胞分裂黑名单，有中文，有老司机带，玩起来节目效果爆炸 2333。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201231190158.png"></p><p>（单机通关列表，刚好一页）</p><p>当然，作为「坑王」，这一年有不少挖坑入坑出坑回坑的瞬间，而且有不少时候让人感叹「好险没掉进去」：</p><p>年初几天趁 xgp 还在，趁金会员价买了 cod14、15，学会了跨巴西区买便宜的 cod，但那时还不知道怎么用手上的信用卡，只能在淘宝买礼品卡。cod16 最后三月份我在港服买的，那时候巴西区比港区便宜接近 50 元，但 cod16 那时候大概 160 雷亚尔，只有 50、100、200 雷亚尔额度的礼品卡，200 雷亚尔大概 320 左右，手上现金不够（穷啊）。1 月底的时候我奶奶住院我要去看着，下了战地 1 和战地 5 进小新 pro13，战地 1 降点解析度居然还能玩（amd yes！），战地 5 就不太行，但更关键的是我确定了雷神加速器完全不彳亍，uu 又太贵（而且两年前我玩 cod12 出现频繁断线问题最后确认是 uu 的锅，换成海豚就没问题，所以我一直对 uu 印象不太好），最后用网络条件比较需求苛刻的 cod16 大战场验证了一下没问题（有问题就会频繁丢包卡顿，雷神就这样），趁 1 月特惠以一年价格上车了腾讯加速器一年半会员（那时候主机加速还是免费的）。</p><p>虽然带上一年前买的手柄和买 xbox one 送的手柄我手上有两个手柄，但经常晚上和我线下的两个初中同学加起来得三个手柄，就在月中暂时找我高中同学借了一个。借完了以后试了试四人同屏，发现 cod15 本身可以线下四人，可连接第三个手柄了以后花式卡机闪退。去 reddit 转了一圈发现大把人出这个问题，遂到微软商店给差评。但到现在都还没有修。所以线下两人以上的大作只剩下 borderland2 和后来买的 cod12（gears5 在月初就打通了）。</p><p>一月底我把机器带到我同学家的时候开机提示进入救援模式，没法复原，最后只能初始化。还好游戏没丢，初始化完不用重下。后面我才知道 xbox 默认关机键其实是待机，正式的关机方法是在菜单那边找完全关机这个选项。待机的时候断点可能就会进救援模式出不来只能初始化，后面我就注意了。要是这事发生在锁区后那就鬼故事了。。。</p><p>二三月份，大号 xgp 到期，我尝试用小号续了一份三个月的 xgp，登录小号后设置机子为常用主机（也就是常说的 home），成功让大号也能正常网战玩 xgp 游戏（唯一不太行的地方就是领金会员免费游戏，只能领在小号上）。不过此时国服还没彻底锁死，我发现国服的网络似乎比外服好，还经常用 u 盘大法切回去，如果下游戏或者领会免就又切回来。</p><p>三月底我的手柄 rt 键频繁按键时发出呲呲呲的声音，我想着反正买的国行找京东算账，结果京东说南宁有维修点叫我过去修。我想了想等我的两个同学会学校再说吧，修的久了就没法线下了。结果到最后人也没回学校，手柄自己不响了，到了过保都没修。。。但我闲的无聊和我爸去看了一眼维修点，也不远，但居然和我高中同学修微星笔记本是同一个维修点（关键是他的笔记本没修好，最后还出了大问题），这就。。。。微软爸爸这样真的好么？</p><p>四月，borderland 出 xgp 库，不过那时我们才打到二周目，我想了想趁特价买下来吧，这回跑到阿根廷区去买。阿根廷锁区，这次得从网上找代理，拿着码进 windows 商店一个个换可用代理知道把码换成功为止。不过 borderland 2 的豪华版缺一个莉莉斯 dlc（去年 8 月免费送过），更要命的是我关注了一年，愣是没打折。。。</p><p>光环基本通关，准备玩战争机器，发现 2 和 3 还只有 xbox 360 版。但 3 在商店里找不到？研究了一圈发现只有美区有，而且只有繁体下才显示中文。另外玩这些个单机的时候发现连着网不开加速器等 n 久还可能进不去游戏，折腾了半天断网秒进。</p><p>五月份，小号的 xgp 也到期了。这回我不想又开个新小号了，xgp 游戏我也不常玩，常玩的 cod 主要是网战需要金会员，尝试用国服金会员顶着，没问题。但 cod16 阴了我一手：cod16 新赛季要玩多人，需要下两个数据包。国服商店找不到这两个数据包，切到外服没有金会员根本进不去在线模式，直接在商店里又找不到这两个数据包，必须从在线模式的设置里跳转到商店才能看见。固然可以买 14 天的金会员然后下这两个包，可再下个赛季怎么办？我看了看时间，这台 xbox 分六期，下个月还完；大号 xgp 过期超过 3 个月了。于是我果断淘宝三年金会员 627，进商店一看果然有 10 港币活动，3 年金会员打满留在外区。没成想还没 10 天 xbox 国服冬窗事发，留在国区的跑不掉了，好险！</p><p>同样在五月份，毕业论文答辩的前一天，发生了神界原罪羊毛事件。详情我单独写成了一篇文章，一个月后我用阿根廷区换点卡同样的方法薅到羊毛。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201231235143.png"></p><p>五月买完 xgpu 开始皇牌空战和腐烂国度，发现这两个玩意一个只能在繁体显示中文一个只能在简体显示中文。皇牌空战难度是有点高，打剧情废了我半天事，而且我在战地 1 里开飞机看大佬都不用追逐视角而用固定视角，想着什么时候学一下，结果玩完皇牌空战好吧彻底改不过来了。打剧情我全程断网，估计就因为这个没算我时间（不过连上网倒是把成就都补给我了）。</p><p>六月份腾讯宣布主机加速收费和增加 svip，原有的 vip 自动升级成 svip，svip 一年要 240 多，好耶， 白嫖（不过半年国区没发现 svip 有啥用，该速度起不来的游戏还是起不来，而且自动选择节点每次都给我选择 vip 而不是 svip 节点）。但主机加速收费这个就很讨厌了，我大学同学来我家玩，cod 战区不能同屏，但我不是 pc 有一份 xbox 有一份么，cod 16 开始能跨平台，所以我只要开小新 pro13 来加速就可以了。收费后，虽然我有 svip 但一个账号不可以两地登。不过正好我初中同学剩下一台 ac86u，我试了一下，能用路由加速功能，600 大洋分 6 期我就抬走了。不过用了一段时间，有 bug，开了加速过了一两天主机就连不上网了，得重启路由，有点烦。另外，我同学剩下 ac86u 的原因就是他家换 ax88u 了，ax88u 并不在下面的表里面，但我试过也可以加速，到他家玩就不需要再多带一台电脑了。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201231232143.png"></p><p>七月份。那出远门线下呢？华硕网件太贵，从小米和极路由挑。小米 1 小米 2 带硬盘的，二手也很贵；极路由 3 之后体积又大性能又差，1s 没有 5g；最后剩下极路由 2 和小米 mini，极路由 2 用的是 micro-usb 供电而不是 3.5mm 线，用不着为了他再找一个电源插头，插在 xbox 上就好了。拿回来解绑原来的账号，开启 root，更新固件，顺利启用。后面偶然发现了更意外的事情：我的路由器放在房间里面，而 xbox 放在客厅。cod16 大战场开了加速器还是偶尔丢包，我以为是 tx 的问题，直到我在国贸开开手机热点给极路由 2 然后因为网络情况复杂不得已只能用网线把 xbox 和极路由连起来，发现不怎么丢包了。回到家我尝试也用无线中继，结论相同。原来 xbox 的无线性能这么烂，还不如 40 大洋的二手路由器。。。。</p><p>八月份。我 19 年 1 月到的工行 visa 卡，吐槽了一年半，每次付款都告诉我余额不足。结果这时我突然会用了，原来要去结售汇先换成对应货币（如果没有对应货币就先换成美元，到时候会自动转的）。怎么发现的？给我的俄罗斯服务器续费的时候，刚买的时候可以用支付宝，从 8 月开始不能用了，也没有 visa，我硬着头皮本来说不能续费就算了，结果用信用卡就真给我续上了。能用 visa 的话我就不用买礼品卡了。靠这张信用卡我还完成了 xbox 360 转区 （转区转了半天失败，结果一觉醒来告诉我转成功了），再过一个月左右，微软就停售礼品卡了。。。阿根廷区成为绝唱，巴西区礼品卡大幅涨价。。。</p><p>八月底，听说鬼泣 5 出库，还没打通关的我火速断网，时间往后倒，成功的在出库后十来天打通关了。这时我发现，没断网的话，打到一半关机不关游戏，唤醒机器有一定可能从游戏中退出；但不断网绝对没事，唤醒后你关机前在那关机后还在那。另外鬼泣这个只有亚洲版有中文，亚洲版不打折，后续还出究极版不知道能不能继承记录的操作，也算是惊到我了，真有你的卡婊 ~ 后面我连上网，鬼泣五下角的 xgpu 标志光速消失，这时就算我再断网时间往回调，也进不去了。</p><p>不过后续我试用了三天 uu，这三天没出像 tx 一样重启断网的 bug，唤醒机器从游戏中退出的问题也没见过，看起来 uu 的路由加速技术肯定能甩 tx 几条街。不过 uu 一台路由只能加速两个设备，而绑定后你想在另一台路由加速还要先手动解绑。最后一天用 uu 的时候还出现了游戏闪退然后重新打开游戏打不开的问题，重启路由没用但重启 xbox 有用，就不知道是网易的锅还是微软的锅了。</p><p>年尾。ea-play 加入 xgpu。然后就是令人爆笑的战地 4 豪华版不在 xgpu 里的「真相」。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/2020-12-31_23-54-21.PNG"></p><p>还有昨天发生的事，极路由的官网彻底炸了，以为加速不成功是因为机子坏了的我盲目刷机导致 key 丢失，想再买一台极路由 2 结果上了恩山发现原来是这事。再后面发现大学毕业宿舍剩下的 newifi 能刷小米 mini 固件，虽然是 3.5 dc 口用的 12V 1A 电源，但我尝试用高中便携风扇的 dc 转 usb 口给 newifi 和 xbox 接上，能亮。经过一段复杂的折腾（root+更新），发现 android 端的 app 加速不上，显示 ssh 未开启。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Screenshot_20201231-053505.png"></p><p>快死心了，换上 ios 再试，结果装上了。。。意思是可以带出去了？别急，我发现小米的固件显然有问题，不能 nat 中继（中继的时候 newifi 和我的 ac86u 在同一子网，而总网关也就是 192.168.xxx.1是华硕的路由器），导致如果无线中继手机读取到的是 ac86u。只有通过极路由中继，然后用一根网线接极路由的 wan 和 newifi 的 lan 让 newifi 自己做一个子网出来才行。。。还好当年没有买小米 mini。凑合着用。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/2020-12-31%2005.34.47.png"></p><p>总结：都什么乱七八糟的坑，印度程序员出来挨打！</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/HupuBBS_201231081453-1242822577.png"></p><p>要说新年有啥目标。。。年底这一波，看来又得物色路由器了。或者换个新的加速方法？去年就喊着买 xss 和便携显示器的我，现在都还没买。等我找到工作，就把 xss 便携显示器和 cod17 都买了（怒）</p><p>就这样吧。祝各位看官新年快乐！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今年对世界是艰难的一年，不过对我这个宅来说。。。可能算是「波澜壮阔」的一年（用词不当警告）。&lt;/p&gt;
&lt;p&gt;该总结的事情很多，我毕业了，而且后续应该不打算再读研究生啥的（数学太烂），放下了陪伴我接近 20 年的学生身份；毕业这一年我也没认真找工作，毕竟计算机这边我还有好多东西想玩清楚；今年因为种种原因在家里的时间是我这二十几年来最长的，也写了大学四年来最多的日记，最后我鼓起勇气开了个博客慢慢把日记放上来。诸如此类等等等。&lt;/p&gt;</summary>
    
    
    
    <category term="game" scheme="https://zbttl-github-io.vercel.app/categories/game/"/>
    
    
    <category term="流水账" scheme="https://zbttl-github-io.vercel.app/tags/%E6%B5%81%E6%B0%B4%E8%B4%A6/"/>
    
    <category term="xbox" scheme="https://zbttl-github-io.vercel.app/tags/xbox/"/>
    
  </entry>
  
  <entry>
    <title>吐槽 crontab</title>
    <link href="https://zbttl-github-io.vercel.app/tu-cao-crontab/"/>
    <id>https://zbttl-github-io.vercel.app/tu-cao-crontab/</id>
    <published>2020-12-27T16:00:00.000Z</published>
    <updated>2021-01-20T16:48:24.446Z</updated>
    
    <content type="html"><![CDATA[<p>干嘛写这玩意呢。。。因为这玩意坑不少。</p><p>作为 linux 的计划任务程序，使用方法大家都很清楚：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></tbody></table></figure><p>然后会用不知道什么程序打开 cron 的配置文件。对我没用错词汇，就是不知道什么程序，我见过用 vim 的、用 nano 的、用一个不知道叫啥名字但快捷键很像 tmux 的（可能是 emcas？），有的系统第一次用 crontab 的时候会让你选用哪种编辑器，但有的完全不会。。。</p><p>然后敲命令进去</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * * * [command]</span><br></pre></td></tr></tbody></table></figure><p>那几个星号：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*    *    *    *    *</span><br><span class="line">-    -    -    -    -</span><br><span class="line">|    |    |    |    |</span><br><span class="line">|    |    |    |    +----- 星期中星期几 (0 - 7) (星期天 为0)</span><br><span class="line">|    |    |    +---------- 月份 (1 - 12) </span><br><span class="line">|    |    +--------------- 一个月中的第几天 (1 - 31)</span><br><span class="line">|    +-------------------- 小时 (0 - 23)</span><br><span class="line">+------------------------- 分钟 (0 - 59)</span><br></pre></td></tr></tbody></table></figure><p>另外可以用 <code>*/n</code> 这种格式，表示时间刻度内执行 n 次。<code>*</code> 既可以填入单个数字表示某一时间，也可以填入类似 <code>1-9</code> 这种形式，表示时间段。</p><p>坑来了：后面的命令，有几个值得注意的地方：</p><ol><li><p>运行时涉及的所有文件和命令需要绝对路径。</p><p>比如用于 hostloc 一键签到的 php 脚本：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php loc.php</span><br></pre></td></tr></tbody></table></figure><p>在 crontab 中就得这么写：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 1 * * * /usr/bin/php /root/loc.php &gt;&gt;/var/log/hostloc.log</span><br></pre></td></tr></tbody></table></figure></li><li><p>“命令里面夹命令”，需要用 <code>`</code> 号替换括号；如果命令里面有 <code>%</code> 号，需要在前面用 <code>\</code> 转义。</p><p>比如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 0 1 * * /root/traffic.sh &gt; /root/$(date +%y%m%d).txt&amp;&amp;/root/traffic.sh reset</span><br></pre></td></tr></tbody></table></figure><p>就需要改成</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 0 1 * * /root/traffic.sh &gt; /root/`date "+\%y\%m\%d"`.txt&amp;&amp;/root/traffic.sh reset</span><br></pre></td></tr></tbody></table></figure></li><li><p>如果运行出错，crontab 不会主动报错，你可以查看一下 crontab 的 service 日志（参考<a href="https://unix.stackexchange.com/questions/212355/where-is-my-logfile-of-crontab">cron - Where is my logfile of crontab? - Unix &amp; Linux Stack Exchange</a>）：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">journalctl -u cron.service</span><br><span class="line">#或者用下面两个</span><br><span class="line">#journalctl _COMM=cron</span><br><span class="line">#journalctl _COMM=cron --since="date" --until="date"</span><br></pre></td></tr></tbody></table></figure><p>或者查看它本身导出的日志文件（不同的 linux 发行版路径可能不一样，以下这个适用于 debian）：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /var/log/syslog</span><br></pre></td></tr></tbody></table></figure><p>但这样看到的错误日志其实不够详细。仔细观察的话，出错的日志后面有这么一条：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(CRON) info (No MTA installed, discarding output)</span><br></pre></td></tr></tbody></table></figure><p>意思是 cron 想把错误发到系统内的邮件管理器，但你没装。</p><p>那就装一个好了：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install postfix</span><br><span class="line">service postfix start</span><br></pre></td></tr></tbody></table></figure><p>后续出错的时候就可以通过</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /var/spool/mail/root</span><br></pre></td></tr></tbody></table></figure><p>查看错误的详细情况。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;干嘛写这玩意呢。。。因为这玩意坑不少。&lt;/p&gt;
&lt;p&gt;作为 linux 的计划任务程序，使用方法大家都很清楚：&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://zbttl-github-io.vercel.app/categories/Linux/"/>
    
    
    <category term="log" scheme="https://zbttl-github-io.vercel.app/tags/log/"/>
    
    <category term="crontab" scheme="https://zbttl-github-io.vercel.app/tags/crontab/"/>
    
  </entry>
  
  <entry>
    <title>玩一下 FFmpeg</title>
    <link href="https://zbttl-github-io.vercel.app/wan-yi-xia-ffmpeg/"/>
    <id>https://zbttl-github-io.vercel.app/wan-yi-xia-ffmpeg/</id>
    <published>2020-12-22T16:00:00.000Z</published>
    <updated>2021-01-20T19:53:31.941Z</updated>
    
    <content type="html"><![CDATA[<h1 id="玩一下-FFmpeg"><a href="#玩一下-FFmpeg" class="headerlink" title="玩一下 FFmpeg"></a>玩一下 FFmpeg</h1><p>因为最近有两件事情，所以要研究一下这玩意：把一整个 capoo 动画分割出几个小片段然后做成表情包（capoo 好萌），还有就是 vps 上下的动画，直接用 filebroswer 播不了，需要稍微转一下码才行。</p><p>总参数参考：<a href="https://ffmpeg.org/ffmpeg.html">ffmpeg Documentation</a></p><h2 id="视频精确分割"><a href="#视频精确分割" class="headerlink" title="视频精确分割"></a>视频精确分割</h2><p>关键词：帧内编码（intra）</p><p>参考文章：<a href="https://www.jianshu.com/p/cf1e61eb6fc8">FFMPEG 视频分割和合并</a></p><p>不过这篇文章没有谈一个参数，to，to 是裁剪到时间节点而 t 是裁剪自开始以来的一段时间长度，这里为了方便我很明显是要用 to 的。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -ss 00:00.00 -to 00:00.01 -i capoo.mp4 -vcodec copy -acodec copy "C:\Users\zbttl\OneDrive - go.Stockton.edu\Desktop\capoo\ capoo1.mp4"</span><br></pre></td></tr></tbody></table></figure><p>不过发到 telegram 上的 gif 的 mp4 不能带音频，所以索性再改一下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -ss 00:00.00 -to 00:00.01 -i capoo.mp4 -vcodec copy -an "C:\Users\zbttl\OneDrive - go.Stockton.edu\Desktop\capoo\ capoo1.mp4"</span><br></pre></td></tr></tbody></table></figure><p>顺便附带一个文件夹内批量转换为无声 mp4 的例子：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for i in *.mp4; do ffmpeg -i $i -vcodec copy -an "/home/zbttl/capoo/${i%%.*}.mp4";done</span><br></pre></td></tr></tbody></table></figure><p>参数里可以加上 <code>-avoid_negative_ts</code> 移动关键帧使其与要剪辑的位置相符。</p><h3 id="使用-gui（不成熟）"><a href="#使用-gui（不成熟）" class="headerlink" title="使用 gui（不成熟）"></a>使用 gui（不成熟）</h3><p>也可以使用 gui 工具 <a href="https://github.com/mifi/lossless-cut">LosslessCut</a>。gui 可以通过视频中的 Intra（I 帧，关键帧）识别转场，操作上便捷许多。不过很多视频由于参数原因（I 帧过多会增大视频体积），所以 I 帧和真正的转场不一定完全符合，可能还要通过 ffmpeg 转一下码。</p><p>参考：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/28008666">FFmpeg精准时间切割视频文件</a></li><li><a href="https://zhuanlan.zhihu.com/p/85895180">FFmpeg视频抽帧那些事</a></li><li><a href="%5Bhttps://weichao.io/2018/05/27/FFmpeg-%E8%BD%AF%E7%BC%96%E7%A0%81-H264%E3%80%81H265/%5D(https://weichao.io/2018/05/27/FFmpeg-%E8%BD%AF%E7%BC%96%E7%A0%81-H264%E3%80%81H265/)">FFmpeg 软编码 H264、H265</a></li><li><a href="https://zhuanlan.zhihu.com/p/36109778">ffmpeg和H264视频的编解码</a></li></ul><p>加入以下参数：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-keyint_min #Intra最小间隔时间，可设置为 0。</span><br><span class="line">-g #group of picture，Intra最大间隔时间。设置为 1 就全部都是关键帧。全部设置为关键帧有助于手动切割。</span><br><span class="line">-sc_threshold #(scenecut)设置场景更改检测的阈值。可设置为 0-无限。</span><br></pre></td></tr></tbody></table></figure><p>比较有用的就是这三个参数。我还实验了 <code>-profile</code>、<code>-preset</code> 两个参数。<code>profile</code> 在文档中有 <code>extended</code> 这个选项可能对关键帧切换有帮助，但实际使用起来选项无法使用；<code>preset</code> 只要不设置成比较快的那些选项，使用 <code>slow</code> 和什么都不用出来的 I 帧数量和分布没有区别。</p><p>ffmpeg 使用非 copy 模式转码会显示 I/P/B 帧的数量和占比。也可以使用 <code>elecard streameye tools</code> 查看 I/P/B 的数量和分布（但要花钱，破解找不到，要不就只能试用）。</p><p>转码的时候也不要加入 <code>-c:a copy</code> 参数，可能导致时间轴误差。</p><p>例子：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -y -i '.\capoo.mp4'  -preset slow -keyint_min 1 -sc_threshold 60 './capoo_1.mp4'</span><br></pre></td></tr></tbody></table></figure><p>再用得到的新视频文件在 gui 内裁剪。</p><p>然而实际使用时发现在每个关键帧处还要往上倒三帧否则就会包含下个场景的画面。原因是这个 gui 命令里面用了 <code>-c copy</code> 参数。。。目前还无解。而且除了这个，有时候导出的某些视频还会出现只剪了后面没剪前面的情况，貌似是因为放在桌面，桌面的路径里面有中文（onedrive 的锅）。。。。</p><p>还有其他的 gui 工具，比如 <a href="https://sourceforge.net/projects/ffmpegyag/">ffmpegyag</a>。但这就没有根据 Intra 帧在时间轴上快捷指向的功能了（虽然还是能识别处 I/P/B 帧）。而且不能直接使用（点 OK 就卡住），生成脚本后运行倒是没问题。</p><h3 id="配合-opencv"><a href="#配合-opencv" class="headerlink" title="配合 opencv"></a>配合 opencv</h3><p>门槛有点高。给两篇参考文章，先挖个坑。</p><ul><li><a href="https://www.cnblogs.com/dskit/p/10003722.html">基于opencv+ffmpeg的镜头分割</a></li><li><a href="https://yuyujunjun.github.io/segmentation-keyframe-extraction">视频镜头分割和关键帧提取</a></li></ul><h2 id="vps-动画转码"><a href="#vps-动画转码" class="headerlink" title="vps 动画转码"></a>vps 动画转码</h2><p>为什么播不了？我想估计是位深太大了，使用 ffmpeg x264 默认参数转一下就好了。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg  -i "[Sakurato.sub][Nande Koko ni Sensei ga!][01][GB][1080P].mp4" -vcodec libx264 -acodec copy  test.mp4</span><br></pre></td></tr></tbody></table></figure><p>不过转出来感觉略微有点不太对，windows potplayer 缩略图显示不出东西来。。。原因不明，排除了 10bit 不兼容原因（原案是 10bit，可显示）和 hevc（h265）与 avc（h264）原因（用哪个编码器都转不出来）。</p><p>另外，x264 编译器还有很多奇奇怪怪的参数，参考这里：<a href="https://trac.ffmpeg.org/wiki/Encode/H.264">H.264 Video Encoding Guide</a></p><h3 id="显卡加速"><a href="#显卡加速" class="headerlink" title="显卡加速"></a>显卡加速</h3><p>参考文章：<a href="https://www.jianshu.com/p/59da3d350488">使用GPU硬件加速FFmpeg视频转码</a></p><p>ffmpeg 还支持显卡加速<del>，不过嘛。。。参数很麻烦，没什么可靠的参考（因为 ffmpeg 的参数经常有顺序限制的，上面那篇文章的参考我试了一下，失败），下面这个，我转起来速度比较快（不过也有是用 8bit 的原因），而且 potplayer 识别了缩略图，另外显卡也工作了（不过占用只有百分之8。。。。）</del>（未加 <code>-hwaccel cuda</code>，虽然是硬解但仍然经过内存。但下面的命令仅硬解码，且仅 h265）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg  -hwaccel cuda  -c:v h265_cuvid -i "[Sakurato.sub][Nande Koko ni Sensei ga!][01][GB][1080P].mp4" -pix_fmt yuv420p test.mp4</span><br></pre></td></tr></tbody></table></figure><p>参考：<a href="https://developer.nvidia.com/zh-cn/blog/nvidia-ffmpeg-transcoding-guide/">NVIDIA FFmpeg 转码指南</a></p><p>拿来转部落战视频用的，因为 ipad 录的视频码率高，而且带了旋转属性（很诡异，是写在 ffmpeg 参数里面的，也就是说对于支持的播放器打开后会自动转正变成横屏，但其实视频硬属性是竖着的），因为有这个自动旋转所以网上写的大部分硬件转码无法使用（不支持关掉自动旋转并摆正视频），但是我试了一个新的，还凑合，而且 gpu 打满。原理是硬解硬编码，下面的方框部分是指定使用最广泛的 h264 硬解，记得如果原来就是 h265 视频需要把这个参数换掉（<code>hevc_cuvid</code>）或关掉。硬编码的部分也可以换成 <code>h264_nvenc</code>。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -y -vsync 0 -hwaccel cuda [-c:v h264_cuvid]  -i xxx.MP4 -vcodec hevc_nvenc -b:v 3000k xxx.mp4</span><br></pre></td></tr></tbody></table></figure><p>hwaccel 也有被称为 cuvid 的参数。但我用 cuvid 代替 cuda 时会报错</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pixel format 'yuvj420p' is not supported</span><br></pre></td></tr></tbody></table></figure><p>原因未知。cuvid 和 cuda 的区别我也没发现有参考资料能解释。</p><p>对于其他硬解方式，可以参考这篇文章：<a href="https://www.bilibili.com/read/cv4579978/">（三+1）用显卡加速视频转码压制之ffmpeg、media coder、shana encoder</a></p><p>查看解码方法：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -decoders</span><br></pre></td></tr></tbody></table></figure><p>查看编码方法：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -encoders</span><br></pre></td></tr></tbody></table></figure><p>上面提到的 <code>cuda</code> 和 <code>h264_cuvid</code> 就在解码方法里面，而 <code>hevc_nvenc</code> 就在编码方法里面。对于 intel 系来说，硬解应该是 <code>qsv</code> 后缀一类的方法；而 amd 是 <code>amf</code> 后缀一类的方法。我仔细看了看最新版 ffmpeg，发现起码对于 amd，只找到了编码方法（比如 <code>h264_amf</code>）而没有找到解码方法。。。好在我平常操作的视频都是解码不怎么费劲的视频，解码费劲的 4k 编码起来必然更慢，暂时不属于我手上硬件能触及的范围了。。。</p><p>另外，文章提到</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -hwaccels</span><br></pre></td></tr></tbody></table></figure><p>能查看当前硬件和 ffmpeg 支持的硬解，但我看结果感觉扯淡。。。我用 amd 的机子能查出来 intel 和 cuda，却没有 amf，就 tm 离谱（当然文章里面也提到了这个方法不准就是了）。</p><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>参考文章：<a href="https://blog.csdn.net/educast/article/details/81866749">ffmpeg 多线程转码</a></p><p>通过写在 <code>-i</code> 参数前的 <code> -threads [线程数]</code> 可以指定 ffmpeg 使用的线程。不过经过测试比较新的 ffmpeg 都会用完 cpu 的所有线程，所以除非要限制 cpu 功率否则这个参数没必要动。</p><h2 id="mkv-内挂字幕嵌入-mp4"><a href="#mkv-内挂字幕嵌入-mp4" class="headerlink" title="mkv 内挂字幕嵌入 mp4"></a>mkv 内挂字幕嵌入 mp4</h2><p>参考文章：<a href="http://andrew-reynolds-bootcamp.com/questions/2027/ffmpeg-mkvdao-mp4zhuan-huan-shi-qu-liao-zi-mu">題 FFMPEG mkv到mp4轉換失去了字幕</a></p><p>内挂字幕的 mkv 在 filebroswer 里面看不到字幕啊。。。于是要想办法提取字幕出来，再把字幕直接内嵌进去。</p><p>有两种方法：</p><ol><li><p>不靠谱方法，很快，但是不一定能识别</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mkv -c copy -c:s mov_text output.mp4</span><br></pre></td></tr></tbody></table></figure></li><li><p>重新编码的方法。一定能识别，但是慢过爹</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mkv -vf subtitles=input.mkv output.mp4</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="mp4-批量转换-gif"><a href="#mp4-批量转换-gif" class="headerlink" title="mp4 批量转换 gif"></a>mp4 批量转换 gif</h2><p>参考文章：<a href="http://blog.pkh.me/p/21-high-quality-gif-with-ffmpeg.html#content">High quality GIF with FFmpeg</a></p><p>以 centos 为例，先编辑个小脚本：</p><p>change.sh</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">palette="./palette.png"</span><br><span class="line"></span><br><span class="line">filters="fps=15,scale=-1:-1:flags=lanczos"</span><br><span class="line"></span><br><span class="line">ffmpeg -v warning -i $1 -vf "$filters,palettegen" -y $palette</span><br><span class="line">ffmpeg -v warning -i $1 -i $palette -lavfi "$filters [x]; [x][1:v] paletteuse" -y $2                                                                                     </span><br></pre></td></tr></tbody></table></figure><p>运行 </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./change.sh './[要转换的mp4]' '[转换成的gif名字]'</span><br></pre></td></tr></tbody></table></figure><p>或者把需要转换的 mp4 文件放到和上面这个脚本相同目录中，执行</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for i in *.mp4; do ./change.sh $i "${i%%.*}.gif";done</span><br></pre></td></tr></tbody></table></figure><p>这条命令会把所有的 mp4 的后缀名去掉，换成 gif。</p><p>另外，windows 端也可以通过修改成两个 bat 文件做到类似的效果（不过第二部我不知道怎么把原 mp4 文件夹的所有后缀替换成 gif，只能直接加 gif），要批量转换的时候运行第二个 bat 就 ok 了</p><p>change.bat</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">cd /d %~dp0 </span><br><span class="line">set palette="palette.png"</span><br><span class="line"></span><br><span class="line">set filters="fps=15,scale=-1:-1:flags=lanczos"</span><br><span class="line"></span><br><span class="line">ffmpeg -v warning -i %1 -vf "%filters%,palettegen" -y %palette%</span><br><span class="line">ffmpeg -v warning -i %1 -i %palette% -lavfi "%filters% [x]; [x][1:v] paletteuse" -y %2       </span><br></pre></td></tr></tbody></table></figure><p>change_all.bat</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">for %%i in (*.mp4) do change.bat "%%i" "%%i.gif"</span><br></pre></td></tr></tbody></table></figure><p>嫌转换成的 gif 太大？改点参数就成，比如：</p><p>change_slim.bat</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">cd /d %~dp0 </span><br><span class="line">set palette="palette.png"</span><br><span class="line"></span><br><span class="line">set filters="fps=10,scale=350:-1"</span><br><span class="line"></span><br><span class="line">ffmpeg -v warning -i %1 -vf "%filters%,palettegen" -y %palette%</span><br><span class="line">ffmpeg -v warning -i %1 -i %palette% -b:v 1000k -lavfi "%filters% [x]; [x][1:v] paletteuse" -y %2       </span><br></pre></td></tr></tbody></table></figure><h2 id="合并音视频"><a href="#合并音视频" class="headerlink" title="合并音视频"></a>合并音视频</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i xxx -i xxx -c:v copy -c:a copy output.mp4</span><br></pre></td></tr></tbody></table></figure><h2 id="mp4-转音频"><a href="#mp4-转音频" class="headerlink" title="mp4 转音频"></a>mp4 转音频</h2><p>对于大部分 mp4，可以直接提取其中的音频，速度很快：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i .\test.mp4 -acodec copy -vn test.mp3</span><br></pre></td></tr></tbody></table></figure><p>不过，这条命令是直接把 mp4 封装中的音频部分提取出来，如果音频部分不是 mp3 格式就会出错：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/6zkXFjh.png"></p><p>从日志里面，我们可以观察到原来封装里面是什么格式的，比如这里就是 aac 的：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/mtmQeQT.png"></p><p>这时候就需要把命令中的格式从 mp3 改成 aac：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i .\test.mp4 -acodec copy -vn test.aac</span><br></pre></td></tr></tbody></table></figure><p>如果需要转换其他格式，可以使用 <code>c:a</code> 参数替代 <code>acodec</code>，比如转换为当前较先进的 opus 格式（当然速度就慢多了）：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i .\test.mp4 -c:a libopus -vn test.opus</span><br></pre></td></tr></tbody></table></figure><h2 id="下载-m3u8"><a href="#下载-m3u8" class="headerlink" title="下载 m3u8"></a>下载 m3u8</h2><p>参考文章：<a href="https://stackoverflow.com/questions/50455695/why-does-ffmpeg-ignore-protocol-whitelist-flag-when-converting-https-m3u8-stream">Why does ffmpeg ignore protocol_whitelist flag when converting https m3u8 stream?</a></p><p>某些视频网站和 ios 软件用的视频地址抓出来是 m3u8 的。比如机核的视频。可以用 chrome 插件<a href="https://chrome.google.com/webstore/detail/%E7%8C%AB%E6%8A%93/jfedfbgedapdagkghmgibemcoggfppbb">猫抓</a>获取 m3u8 文件。然后，加入相关参数，注意需要紧跟在 ffmpeg 命令后面：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -protocol_whitelist file,http,https,tcp,tls,crypto -i xxxx.m3u8 xxxx.xxx</span><br></pre></td></tr></tbody></table></figure><p>xxxx.xxx 指的是你需要输出的视频名字和格式，因为 m3u8 流切下来一般是 h264 的，封装格式需要你自己来确定，ffmpeg 会帮你把所有切片合并。</p><h2 id="自动裁切黑边"><a href="#自动裁切黑边" class="headerlink" title="自动裁切黑边"></a>自动裁切黑边</h2><p>参考文章：<a href="https://www.bogotobogo.com/FFMpeg/ffmpeg_cropdetect_ffplay.php">CROPDETECT AND FFPLAY - 2020</a></p><p>先检测黑边：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i .\test.mp4 -vcodec copy -acodec copy cropdetect=24:16:0 test1.mp4</span><br></pre></td></tr></tbody></table></figure><p>24:16:0 是默认参数，一般如果要调也只调第一个参数（黑边阈值）。</p><p>输出的日志中会有类似于</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Parsed_cropdetect_0 @ 0x3704360] x1:0 x2:639 y1:43 y2:317 w:640 h:272 x:0 y:46 pts:181320 t:181.320000 crop=640:272:0:46</span><br></pre></td></tr></tbody></table></figure><p>其中有用的就是 w、h、x、y 四个参数，分别放入新命令的相应位置</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i .\test.mp4 -vcodec copy -acodec copy -vf crop=640:272:0:46 test1.mp4</span><br></pre></td></tr></tbody></table></figure><p>即可。（虽然经过我测试默认参数检测还是有点偏差，但稍微手动调一下 w 和 h 的值效果就令人满意了）</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>参考文章：<a href="https://linux.cn/article-10932-1.html">给新手的 20 多个 FFmpeg 命令示例</a></p><p>比较有用的几个地方：</p><h3 id="转换格式时不压缩视频"><a href="#转换格式时不压缩视频" class="headerlink" title="转换格式时不压缩视频"></a>转换格式时不压缩视频</h3><p>使用<code>-qscale 0</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ffmpeg -i input.webm -qscale 0 output.mp4</span><br></pre></td></tr></tbody></table></figure><h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><p>ffmpeg windows 端出了新的编译版：<a href="https://github.com/BtbN/FFmpeg-Builds">BtbN/FFmpeg-Builds</a>。release 中有许多不同版本。lgbl 和 gbl 应该是许可证之间的不同，但大小也有区别，我个人认为是为了 lgbl 剔除了一些东西；shared 和不带 shared 的版本，区别是运行库合并进了 ffmpeg 中。最关键的是 vulkan 版本，带有 vulkan 版本需要比较新的独显和新的驱动才能使用，我的 965m 运行都会报错 <code>Lossless encoding not supported</code>。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;玩一下-FFmpeg&quot;&gt;&lt;a href=&quot;#玩一下-FFmpeg&quot; class=&quot;headerlink&quot; title=&quot;玩一下 FFmpeg&quot;&gt;&lt;/a&gt;玩一下 FFmpeg&lt;/h1&gt;&lt;p&gt;因为最近有两件事情，所以要研究一下这玩意：把一整个 capoo 动画分割出几个小片段然后做成表情包（capoo 好萌），还有就是 vps 上下的动画，直接用 filebroswer 播不了，需要稍微转一下码才行。&lt;/p&gt;</summary>
    
    
    
    <category term="影音" scheme="https://zbttl-github-io.vercel.app/categories/%E5%BD%B1%E9%9F%B3/"/>
    
    
    <category term="ffmpeg" scheme="https://zbttl-github-io.vercel.app/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>hexo 进阶</title>
    <link href="https://zbttl-github-io.vercel.app/hexo-jin-jie/"/>
    <id>https://zbttl-github-io.vercel.app/hexo-jin-jie/</id>
    <published>2020-12-20T16:00:00.000Z</published>
    <updated>2021-02-25T22:18:17.273Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NexT-更新"><a href="#NexT-更新" class="headerlink" title="NexT 更新"></a>NexT 更新</h2><p>光 速 更 新（不是</p><p>啊我刚写完上一篇挑博客系统的时候发现 gitment 怎么都不生效，想想是不是 next 有其他的生效方法。。。摸到 next 项目的 md 那边才发现一个惊讶的事实：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201221175721.png"></p><p>我上一篇用的是 7.8.0。。。原因啊，毕竟我也是看的人家的教程来学的，然后 clone 人家教程上面的 url 告诉我这个仓库的 NexT 过时了，显示了个新的仓库，我就直接摸过去了，谁知道还有更新的，佛了。</p><p>那就老老实实迁移吧，备份主题配置文件，删掉 themes 下的 NexT 主题，clone 新仓库的主题，</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp themes/next/_config.yml themes/_config.yml.bak</span><br><span class="line">rm -r themes/next</span><br><span class="line">git clone https://github.com/next-theme/hexo-theme-next.git themes/next</span><br></pre></td></tr></tbody></table></figure><p>然后用 vscode 对一下新 clone 下来的主题配置文件和备份的旧版主题配置文件的差别，把要改的地方怼过去。。。</p><p>慢！</p><p>根据 <a href="https://theme-next.js.org/docs/getting-started/configuration.html">Configuration</a>，咱们现在用的 hexo 5.0 已经支持这种新的配置方式了，说人话就是不用再进 <code>themes/next</code> 里面改配置了，只需要在全局主题里面加（并且在这些配置的开头顶上加 <code>theme_config</code> 并给这些配置一个两空格缩进），或者在 hexo 根目录新开一个 <code>_config.next.yml</code> 把要改的配置丢进去就完事了。有点像以前写过的 rime 输入法的 patch 文件。</p><p>按上一篇文章的功能来，大部分需要修改主题配置文件的地方我都抽取出来放在了<code>_config.next.yml</code> ，以下是代码参考：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"># Define custom file paths.</span><br><span class="line"># Create your custom files in site directory `source/_data` and uncomment needed files below.</span><br><span class="line">custom_file_path:</span><br><span class="line">  #head: source/_data/head.njk</span><br><span class="line">  #header: source/_data/header.njk</span><br><span class="line">  #sidebar: source/_data/sidebar.njk</span><br><span class="line">  #postMeta: source/_data/post-meta.njk</span><br><span class="line">  #postBodyEnd: source/_data/post-body-end.njk</span><br><span class="line">  footer: source/_data/footer.njk</span><br><span class="line">  bodyEnd: source/_data/body-end.njk</span><br><span class="line">  #variable: source/_data/variables.styl</span><br><span class="line">  #mixin: source/_data/mixins.styl</span><br><span class="line">  #style: source/_data/styles.styl</span><br><span class="line"></span><br><span class="line">creative_commons:</span><br><span class="line">  license: by-sa</span><br><span class="line">  sidebar: false</span><br><span class="line">  post: true</span><br><span class="line">  language:</span><br><span class="line"></span><br><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  tags: /tags/ || fa fa-tags</span><br><span class="line">  categories: /categories/ || fa fa-th</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line">  #schedule: /schedule/ || fa fa-calendar</span><br><span class="line">  #sitemap: /sitemap.xml || fa fa-sitemap</span><br><span class="line">  #commonweal: /404/ || fa fa-heartbeat</span><br><span class="line">  about: /about/ || fa fa-user</span><br><span class="line"></span><br><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/zbttl || fab fa-github</span><br><span class="line">  E-Mail: mailto:zbttls@gmail.com|| fa fa-envelope</span><br><span class="line">  #Weibo: https://weibo.com/yourname || fab fa-weibo</span><br><span class="line">  #Google: https://plus.google.com/yourname || fab fa-google</span><br><span class="line">  #Twitter: https://twitter.com/yourname || fab fa-twitter</span><br><span class="line">  #FB Page: https://www.facebook.com/yourname || fab fa-facebook</span><br><span class="line">  #StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span><br><span class="line">  #YouTube: https://youtube.com/yourname || fab fa-youtube</span><br><span class="line">  #Instagram: https://instagram.com/yourname || fab fa-instagram</span><br><span class="line">  #Skype: skype:yourname?call|chat || fab fa-skype</span><br><span class="line"></span><br><span class="line">footer:</span><br><span class="line">  # Specify the year when the site was setup. If not defined, current year will be used.</span><br><span class="line">  #since: 2020</span><br><span class="line"></span><br><span class="line">  # Icon between year and copyright info.</span><br><span class="line">  icon:</span><br><span class="line">    # Icon name in Font Awesome. See: https://fontawesome.com/icons</span><br><span class="line">    name: fa fa-heart</span><br><span class="line">    # If you want to animate the icon, set it to true.</span><br><span class="line">    animated: false</span><br><span class="line">    # Change the color of icon, using Hex Code.</span><br><span class="line">    color: "#ff0000"</span><br><span class="line"></span><br><span class="line">  # If not defined, `author` from Hexo `_config.yml` will be used.</span><br><span class="line">  copyright:</span><br><span class="line"></span><br><span class="line">  # Powered by Hexo &amp; NexT</span><br><span class="line">  powered: false</span><br><span class="line"></span><br><span class="line">  # Beian ICP and gongan information for Chinese users. See: https://beian.miit.gov.cn, http://www.beian.gov.cn</span><br><span class="line">  beian:</span><br><span class="line">    enable: false</span><br><span class="line">    icp:</span><br><span class="line">    # The digit in the num of gongan beian.</span><br><span class="line">    gongan_id:</span><br><span class="line">    # The full num of gongan beian.</span><br><span class="line">    gongan_num:</span><br><span class="line">    # The icon for gongan beian. See: http://www.beian.gov.cn/portal/download</span><br><span class="line">    gongan_icon_url:</span><br><span class="line"></span><br><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true</span><br><span class="line">  item_text_post: true</span><br><span class="line">  item_text_total: true</span><br><span class="line"></span><br><span class="line">codeblock:</span><br><span class="line">  # Code Highlight theme</span><br><span class="line">  # All available themes: https://theme-next.js.org/highlight/</span><br><span class="line">  theme:</span><br><span class="line">    light: default</span><br><span class="line">    dark: tomorrow-night</span><br><span class="line">  prism:</span><br><span class="line">    light: prism</span><br><span class="line">    dark: prism-dark</span><br><span class="line">  # Add copy button on codeblock</span><br><span class="line">  copy_button:</span><br><span class="line">    enable: true</span><br><span class="line">    # Available values: default | flat | mac</span><br><span class="line">    style:</span><br><span class="line"></span><br><span class="line">back2top:</span><br><span class="line">  enable: true</span><br><span class="line">  # Back to top in sidebar.</span><br><span class="line">  sidebar: false</span><br><span class="line">  # Scroll percent label in b2t button.</span><br><span class="line">  scrollpercent: true</span><br><span class="line"></span><br><span class="line">busuanzi_count:</span><br><span class="line">  enable: true</span><br><span class="line">  total_visitors: true</span><br><span class="line">  total_visitors_icon: fa fa-user</span><br><span class="line">  total_views: false</span><br><span class="line">  total_views_icon: fa fa-eye</span><br><span class="line">  post_views: true</span><br><span class="line">  post_views_icon: far fa-eye</span><br><span class="line"></span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # If auto, trigger search by changing input.</span><br><span class="line">  # If manual, trigger search by pressing enter key or search button.</span><br><span class="line">  trigger: auto</span><br><span class="line">  # Show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  # Unescape html strings to the readable one.</span><br><span class="line">  unescape: false</span><br><span class="line">  # Preload the search data when the page loads.</span><br><span class="line">  preload: false</span><br><span class="line"></span><br><span class="line"># cursor_effect:</span><br><span class="line">#   enabled: true</span><br><span class="line">#   type: fireworks  # fireworks：礼花 | explosion：爆炸 | love：浮出爱心 | text：浮出文字</span><br><span class="line">cursor_effect: text</span><br></pre></td></tr></tbody></table></figure><p>认真看是不是还少了什么？</p><p>对了，背景动态火柴棍没了。。。。</p><p>记得这个效果是怎么实现的吗？是通过 git clone 本插件到 <code>next/source/lib</code> 中。根据 <a href="https://theme-next.js.org/docs/getting-started/upgrade.html">Upgrade</a> 所说：</p><blockquote><p>Since v8.0.0, all libraries under the <code>next/source/lib</code> directory was moved out to <a href="https://github.com/next-theme/plugins">@next-theme/plugins</a>. Please see this article for the new 3rd-party libraries installation method: <a href="https://theme-next.js.org/docs/third-party-services/#Adding-Plugins">Adding Plugins</a>.</p></blockquote><p>但我查了一下这个库，发现也没有 <code>canvas_nest</code>，看来多半是被 delete 了。</p><p>没关系，我们还有大力出奇迹（</p><p>找到 <code>canvas_nest</code>的 github 库：<a href="https://github.com/theme-next">theme-next</a>/<strong><a href="https://github.com/theme-next/theme-next-canvas-nest">theme-next-canvas-nest</a></strong></p><p>按说明行事：</p><ol><li><p>在 <code>hexo/source/_data</code> 中新建 <code>footer.njk</code>（不是 <code>footer.swig</code> 哦）。</p><blockquote><p> 由于 NexT 以前使用的 swig 模版引擎停止维护，去年迁移到了 Nunjucks</p></blockquote></li><li><p>加入以下内容</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script color="120,120,120" opacity="0.5" zIndex="-1" count="150" src="https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js"&gt;&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p>（修改了一下，和原来我们在主题配置文件中实现的效果一致，就是不能单独设置移动端是否显示了）</p></li><li><p>在 <code>_config.next.yml</code> 解除 <code>footer: source/_data/footer.njk</code> 的注释（上面的参考代码中我已经开了）。</p></li></ol><p>即可。</p><p>话说回来记得我们另一个大力出奇迹的功能是啥么？回去复习~（还好我选择了放在 hexo 根目录的方法，否则这个功能也要再折腾一边）</p><p>关于其他的更新功能和差异，及迁移方法，可以查阅：</p><ul><li><a href="https://github.com/next-theme/hexo-theme-next/issues/4">【必读】更新说明及常见问题 #4</a></li><li><a href="https://theme-next.js.org/docs/getting-started/upgrade.html">Upgrade</a></li></ul><p>更新后 NexT 仍自带，可通过编辑配置启用的功能模块：</p><ul><li><a href="https://theme-next.js.org/docs/third-party-services/#Adding-Plugins">Third-party Services</a></li></ul><h2 id="评论（临时）"><a href="#评论（临时）" class="headerlink" title="评论（临时）"></a>评论（临时）</h2><p>上次我看了几个评论系统。一开始打算用简单而泛用的 Valine。结果刚开始我发现注册账号需要手机号码而且后续还要实名就感觉这玩意不对，后续在 NexT 更新公告里面看见这么一段：</p><blockquote><p>Valine 评论系统出现了一些令人担忧的问题：</p><ul><li>NexT 团队曾多次收到关于 Valine 评论系统存在隐私泄露问题的反馈；</li><li>Valine 自 1.4 版本起不再开源，因此 NexT 团队无法对 Valine 评论系统 Debug。并且发布的打包版本中存在未告知用户的百度统计代码；</li><li>11 月下旬出现了针对 Valine 评论系统的攻击。</li></ul><p>考虑到这些问题已经严重影响到 NexT 用户的数据安全，我们决定将其移除，需要继续使用的用户请安装插件： <a href="https://github.com/next-theme/hexo-next-valine">https://github.com/next-theme/hexo-next-valine</a><br>（插件的配置项使用驼峰命名，与 Valine 本身一致，需要注意将 <code>appid</code> 和 <code>appkey</code> 改为 <code>appId</code> 和 <code>appKey</code>）<br>鉴于以上原因，如果在使用 Valine 时出现<em>任何</em>问题，请在这里反馈： <a href="https://github.com/xCss/Valine/issues">https://github.com/xCss/Valine/issues</a><br>迁移到 Disqus： <a href="https://github.com/YunYouJun/valine-to-disqus">https://github.com/YunYouJun/valine-to-disqus</a></p></blockquote><p>怕了。另外的呢？接着就是上面我说的 gitment，我试了半天没用，开启后文章底下啥都出不来。后来发现这玩意是 2018 年更新的了。。。以及依赖 github Oauth Apps 的评论系统，调查了一下可能有安全问题（虽然参考文章都是两年前一年前的了，但配置文件中 secret 显然还是用的明码）：</p><ul><li><a href="https://henryhou.com/post/gitment_and_gittalk_secure/">评论插件 gitment 和 gittalk 存在安全性问题</a></li><li><a href="https://www.v2ex.com/t/535608">建议大家弃用 Gitalk 和 Gitment 等权限过高的 Github OAuth App</a></li></ul><p>我关注的大佬里面有用 Disqus 的，比如 <a href="https://blog.ichr.me/">ChrAlpha’s Blog</a>：<a href="https://blog.ichr.me/post/use-disqus-conveniently/">在特殊地区科学使用 Disqus 评论系统</a>。不过我瞄了一眼，似乎挺复杂的样子。。。。以后再说。</p><p>依赖 github issue 的评论系统虽然有安全问题，但我也有小号啊 ~ 在小号上开应该安全许多，这类型的还有另一个选择：gitalk，先用着吧。</p><p>参考文章：</p><ul><li><a href="https://segmentfault.com/a/1190000014085547">为Hexo添加Gitalk评论插件</a></li></ul><ol><li><p>先安装</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gitalk</span><br></pre></td></tr></tbody></table></figure></li><li><p>去小号那里创建一个 OAuth Apps</p><p>打开 <a href="https://github.com/settings/applications/new">New OAuth App</a>（从头像 -&gt;settings-&gt;Developer settings 这里也可以找到）。</p><p>新建一个。（不要慌填错后续还能改）</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201222005052.png"></p><p>在稍后的界面获取一个 client secret，和 client id 一起记着待会要用。</p></li><li><p>打开主题配置文件（现在是 <code>_config.next.yml</code> 啦），新增</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">gitalk:</span><br><span class="line">  enable: true #用来做启用判断可以不用</span><br><span class="line">  owner: #Github 用户名,填小号的不要填大号的</span><br><span class="line">  repo: #储存评论issue的github仓库名</span><br><span class="line">  admin: #Github 用户名,</span><br><span class="line">  clientID: #`Github Application clientID`</span><br><span class="line">  clientSecret: #`Github Application clientSecret`</span><br><span class="line"> gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  github_id:  # GitHub repo owner，即小号的用户名</span><br><span class="line">  repo:  # Repository name to store issues，储存评论issue的github仓库名</span><br><span class="line">  client_id:  # GitHub Application Client ID，刚获取的</span><br><span class="line">  client_secret:  # GitHub Application Client Secret，刚获取的</span><br><span class="line">  admin_user:  # GitHub repo owner and collaborators, only these guys can initialize gitHub issues，还是填小号的用户名</span><br><span class="line">  distraction_free_mode: true # Facebook-like distraction free mode</span><br><span class="line">  # Gitalk's display language depends on user's browser or system environment</span><br><span class="line">  # If you want everyone visiting your site to see a uniform language, you can set a force language value</span><br><span class="line">  # Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span><br><span class="line">  language:ok，</span><br></pre></td></tr></tbody></table></figure></li><li><p>ok，接下来部署到网站后看到文章下面就有评论区了，登录自己的小号就能开启评论区，注意每个文章都需要手动开启。另外连 about 和 tags 那几个界面都有评论区。。。。我们可以在那几个文章的文前代码块里面加上</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">comments: false</span><br></pre></td></tr></tbody></table></figure><p>即可屏蔽掉那些文章的评论区。</p><h2 id="链接中中文转拼音，以及修改-permalinks"><a href="#链接中中文转拼音，以及修改-permalinks" class="headerlink" title="链接中中文转拼音，以及修改 permalinks"></a>链接中中文转拼音，以及修改 permalinks</h2></li></ol><p>参考文章：<a href="https://zhuanlan.zhihu.com/p/123286944">Github+Hexo+matery 博客搭建小白教程 - 知乎</a></p><blockquote><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。</p></blockquote><p>还有一点：Permalinks 我直接设置的日记文件标题（便于 seo），其实我的日记文件标题也就是当天的日期。不经任何修改可猜到可碰撞的网站一级目录文件，vps 文件漏洞 ptsd 警告（</p><p><del>其实我想找能够混淆 url 的 hexo 插件，没找到，先用这个凑合一下（</del>（可以使用 hexo-abbrlink，参考 <a href="https://blog.csdn.net/nineya_com/article/details/103445898">hexo博客进阶（一）url设置和百度url提交、百度访问量统计_玖涯博客-CSDN博客</a>）</p><p>安装</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-permalink-pinyin</span><br></pre></td></tr></tbody></table></figure><p>在全局配置文件 <code>_config.yml</code> 新增：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">permalink_pinyin:</span><br><span class="line">  enable: true</span><br><span class="line">  separator: '-' # default: '-'</span><br></pre></td></tr></tbody></table></figure><p>后续，我研究了一下 permalinks，可以用文章标题代替文件标题的 url 部分。参考：<a href="https://hexo.io/zh-cn/docs/permalinks.html">永久链接（Permalinks） | Hexo</a></p><p>修改全局配置文件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">permalink: :post_title/</span><br></pre></td></tr></tbody></table></figure><p>甚至还可以加上 hash 值（但可能对 seo 产生副作用）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">permalink: :post_title-:hash/</span><br></pre></td></tr></tbody></table></figure><p>修改后需要刷新</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean&amp;&amp;hexo g</span><br></pre></td></tr></tbody></table></figure><h2 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h2><p>参考文章：</p><ul><li><a href="https://steemit.com/cn/@greedyboy/hexo-next-rss">将hexo静态博客next主题安装rss插件功能 — Steemit</a></li><li><a href="https://www.zywvvd.com/2020/03/20/next/14_add_rss/next-add-rss/">Next -14- 为Hexo Next7.7.1 添加RSS （带按钮） | 又见苍岚</a></li><li><a href="https://suyin-blog.club/2020/2M3YWE7/">给 Hexo 中的 Next 主题添加 RSS 功能 | 苏寅 Blog</a></li></ul><p>安装 rss 插件：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-generator-feed</span><br></pre></td></tr></tbody></table></figure><p>在全局配置文件中新增：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">feed:</span><br><span class="line">    type: atom</span><br><span class="line">    path: atom.xml</span><br><span class="line">    limit: 20 #展示文章的数量，使用 0 或则 false 代表展示全所有的帖子</span><br><span class="line">    #content: #（可选）设置 true 可以在 RSS 文件中包含文章全部内容，默认：false</span><br><span class="line">    content_limit:300 #（可选）摘要中使用的帖子内容的默认长度。 仅在内容设置为 false 且未显示自定义帖子描述时才使用。</span><br><span class="line">    #content_limit_delim: #（可选）开启content_limit时，在显示的帖子内容中如果有分隔符，优先按分隔符进行分割。默认不使用。</span><br><span class="line">    #order_by: -date #rss 文章排序方法</span><br></pre></td></tr></tbody></table></figure><p>之后有三种显示方法（可以同时开启，但 2 和 3 没必要一起开）：</p><ol><li><p>显示在每篇文章末尾。这是 next 默认情况下推荐的方法，在 next 文件夹原来的配置文件中可以找到。</p><p>在主题配置文件 <code>_config.next.yml</code> 中新增</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">follow_me:</span><br><span class="line">  #Twitter: https://twitter.com/包包包zb || fab fa-twitter</span><br><span class="line">  #Telegram: https://t.me/channel_name || fab fa-telegram</span><br><span class="line">  #WeChat: /images/wechat_channel.jpg || fab fa-weixin</span><br><span class="line">  RSS: /atom.xml || fa fa-rss</span><br></pre></td></tr></tbody></table></figure><p>效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210104030713.png"></p></li><li><p>和侧边栏的联系方式显示在一起</p><p>修改主题配置文件中的 <code>social</code> 项：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">social:</span><br><span class="line">  ...</span><br><span class="line">  RSS: /atom.xml || fa fa-rss</span><br></pre></td></tr></tbody></table></figure><p>效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210104030940.png"></p></li><li><p>（不太推荐，因为和侧边栏动画无法统一）显示在侧边栏中部</p><p>修改 <code>\themes\next\layout\_partials\sidebar\site-overview.njk</code></p><p>在 <code>{%- if theme.site_state %}</code> 前新增</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">{% if theme.rss %}</span><br><span class="line">   &lt;div class="feed-link motion-element"&gt;</span><br><span class="line">     &lt;a href="{{ url_for(theme.rss) }}" rel="alternate"&gt;</span><br><span class="line">       &lt;i class="fa fa-rss"&gt;&lt;/i&gt;</span><br><span class="line">       RSS</span><br><span class="line">     &lt;/a&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">{% endif %}</span><br><span class="line"></span><br><span class="line">{%- if theme.site_state %}</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><p>然后在主题配置文件中添加</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rss: /atom.xml</span><br></pre></td></tr></tbody></table></figure><p>效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210104031356.png"></p></li></ol><p>修改完后需要刷新，此时查看 public 文件夹中应该正确生成 atom.xml。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean&amp;&amp;hexo g</span><br></pre></td></tr></tbody></table></figure><h2 id="显示运行时间"><a href="#显示运行时间" class="headerlink" title="显示运行时间"></a>显示运行时间</h2><p>参考文章：<a href="https://yansheng836.github.io/article/50902a4.html">hexo+yilia添加网站运行时间，ICP备案信息，设定站点建立时间 | 荷塘月色的博客</a></p><p>在 <code>source\_data\footer.njk</code> 中添加：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--《添加网站运行时间 --&gt;</span><br><span class="line">&lt;!--&lt;br/&gt;--&gt;</span><br><span class="line">&lt;span id="timeDate"&gt;载入天数...&lt;/span&gt;&lt;span id="times"&gt;载入时分秒...&lt;/span&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var now = new Date();</span><br><span class="line"></span><br><span class="line">    function createtime() {</span><br><span class="line">        var grt = new Date("07/25/2019 12:00:00"); //此处修改你的建站时间或者网站上线时间 </span><br><span class="line">        now.setTime(now.getTime() + 250);</span><br><span class="line">        days = (now - grt) / 1000 / 60 / 60 / 24;</span><br><span class="line">        dnum = Math.floor(days);</span><br><span class="line">        hours = (now - grt) / 1000 / 60 / 60 - (24 * dnum);</span><br><span class="line">        hnum = Math.floor(hours);</span><br><span class="line">        if (String(hnum).length == 1) {</span><br><span class="line">            hnum = "0" + hnum;</span><br><span class="line">        }</span><br><span class="line">        minutes = (now - grt) / 1000 / 60 - (24 * 60 * dnum) - (60 * hnum);</span><br><span class="line">        mnum = Math.floor(minutes);</span><br><span class="line">        if (String(mnum).length == 1) {</span><br><span class="line">            mnum = "0" + mnum;</span><br><span class="line">        }</span><br><span class="line">        seconds = (now - grt) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);</span><br><span class="line">        snum = Math.round(seconds);</span><br><span class="line">        if (String(snum).length == 1) {</span><br><span class="line">            snum = "0" + snum;</span><br><span class="line">        }</span><br><span class="line">        document.getElementById("timeDate").innerHTML = " 本站已安全运行 " + dnum + " 天 "; //去掉了一个分隔符竖杠，因为用了不算子，已经自动做了换行分割</span><br><span class="line">        document.getElementById("times").innerHTML = hnum + " 小时 " + mnum + " 分 " + snum + " 秒";</span><br><span class="line">    }</span><br><span class="line">    setInterval("createtime()", 250);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;!-- 添加网站运行时间》 --&gt;</span><br></pre></td></tr></tbody></table></figure><p>即参考文章中的「硬性配置」。</p><p>另外参考文章中有所谓「灵活配置」，将开关和建站时间设定提取成主题配置文件的配置项。但亲测使用灵活配置还得修改主题配置文件夹，修改放在全局配置文件夹的 <code>footer.njk</code> 不生效，不符合我们迁移时说的「不修改主题文件夹」的思想。</p><p>还有就是。我以为判断运行时间是会有更高级的方法，比如调用什么接口测试你的网站是啥时候开的，什么时候第一次部署的什么的，没想到是手工设置，和我的设想还是有点出入。。。</p><h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>参考文章：<a href="https://www.zhyong.cn/posts/fc22/">hexo-next 添加文章置顶功能和评分功能等 | YouForever</a></p><p>在主题配置文件中添加</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rating:</span><br><span class="line">  enable: true</span><br><span class="line">  id:</span><br><span class="line">  color:  "#fc6423"</span><br></pre></td></tr></tbody></table></figure><p>其中的 id，需要到 <a href="https://widgetpack.com/">widgetpack</a> 新建一个账号，新建完在左上角有显示。</p><p>建议配置评分方式，侧栏 &gt; Rating &gt; Setting，建议用 IP address 或 Device (cookie)，免登录。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210104032640.png"></p><h2 id="markdown-emoji"><a href="#markdown-emoji" class="headerlink" title="markdown emoji"></a>markdown emoji</h2><p>参考文章：</p><ul><li><a href="https://github.com/crimx/hexo-filter-github-emojis">crimx/hexo-filter-github-emojis: github emojis for hexo!</a></li><li><a href="https://spacefan.github.io/2018/06/30/hexo-emoji/">Hexo 博客使用 emoji 表情 | Home</a></li></ul><p>安装：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-filter-github-emojis</span><br></pre></td></tr></tbody></table></figure><p>在全局配置文件中新增：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">githubEmojis:</span><br><span class="line">  enable: true</span><br><span class="line">  className: github-emoji</span><br><span class="line">  inject: true</span><br><span class="line">  #unicode: true #这个参数我也不知道加不加，出问题再说</span><br><span class="line">  styles:</span><br><span class="line">  customEmojis:</span><br></pre></td></tr></tbody></table></figure><p>修改完之后需要刷新。</p><p>不过，对于目前我的浏览器这个插件有个小 bug：</p><p> 目前的效果：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210113073831.png"></p><p>看起来不错。其实还有一个狗头：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210113073930.png"></p><p>只要选中就出现了。不知道是插件的效果还是 github 表情本身就有这个效果（我没用过不知道），挺好玩。。。但这个效果是在干净的 edge 上才能显示出来，在我配置过字体 stylus 的 centbrowser 这里就出问题了：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210113074220.png"></p><p>我想暂时先关掉这个变来变去的彩蛋，只显示一种狗头就好了，然而找不到方法，就先不管了，反正停掉一个单一网页的字体优化就一个选框的事。</p><p>我也试了一下另一个插件<a href="https://github.com/theme-next/hexo-filter-emoji">theme-next/hexo-filter-emoji: 🎉 GitHub emojis for Hexo!</a>，也能生效，但会出问题，无论我换不换字体，不选择时的狗头都出不来，只有选中时候的狗头才出现，这就属于「不能用」的情况了。</p><h2 id="修改正文字体大小"><a href="#修改正文字体大小" class="headerlink" title="修改正文字体大小"></a>修改正文字体大小</h2><p>感觉正文有一丢丢大。不过按照 Next 主题配置文件内的 fonts 属性配置（可参考 <a href="https://theme-next.js.org/docs/theme-settings/miscellaneous.html?highlight=fonts+customization">Misc Theme Settings | NexT</a>），发现没法单独修改正文字体的大小。</p><p>后来偶然发现开调试的时候，正文的字体大小是 1.125em：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210217072142.png"></p><p>对应的是 <code>$font-size-large</code> 这个属性（参考 <a href="https://blog.csdn.net/dpdpdppp/article/details/102387532">hexo(Next主题)修改文字大小_dpdpdppp的博客-CSDN博客</a>）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Font size</span><br><span class="line">$font-size-base           = 1em;</span><br><span class="line">$font-size-base           = unit(hexo-config('font.global.size'), em) if hexo-config('font.global.size') is a 'unit';</span><br><span class="line">$font-size-smallest       = .75em;</span><br><span class="line">$font-size-smaller        = .8125em;</span><br><span class="line">$font-size-small          = .875em;</span><br><span class="line">$font-size-medium         = 1em;</span><br><span class="line">$font-size-large          = 1.125em;</span><br><span class="line">$font-size-larger         = 1.25em;</span><br><span class="line">$font-size-largest        = 1.375em;</span><br></pre></td></tr></tbody></table></figure><p>于是，修改主题配置文件，取消 <code>custom_file_path</code> 代码块中的 <code> variable: source/_data/variables.styl</code> 这行注释。然后在 <code>source/_data/</code>中新建 <code>variables.styl</code>，添加：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$font-size-large = 1.05em</span><br></pre></td></tr></tbody></table></figure><p>即可。</p><p>但这时又发现标题的字体大小不够了。。。这回没辙了，标题大小单独写死在主题中没法覆盖（优先级仅次于带 $ 号的全局字体属性比如上面这个，高于 h1 这种标签，所以改 h1 也不成），除非修改主题文件夹中某个文件的 <code>.posts-expand .post-title</code> 这一段属性，算了算了。</p><h2 id="谷歌百度搜索收录"><a href="#谷歌百度搜索收录" class="headerlink" title="谷歌百度搜索收录"></a>谷歌百度搜索收录</h2><p>参考文章：</p><ul><li><a href="https://www.jianshu.com/p/f8ec422ebd52">Hexo博客提交百度和Google收录 - 简书</a></li><li><a href="http://www.yuan-ji.me/Hexo-%E4%BC%98%E5%8C%96%EF%BC%9A%E6%8F%90%E4%BA%A4sitemap%E5%8F%8A%E8%A7%A3%E5%86%B3%E7%99%BE%E5%BA%A6%E7%88%AC%E8%99%AB%E6%8A%93%E5%8F%96-GitHub-Pages-%E9%97%AE%E9%A2%98/">Hexo 优化：提交 sitemap 及解决百度爬虫无法抓取 GitHub Pages 链接问题 | JI’s Blog</a></li></ul><h3 id="谷歌"><a href="#谷歌" class="headerlink" title="谷歌"></a>谷歌</h3><p>谷歌最简单，而且也不需要实名。而且。。。听说只要时间一长，google 的爬虫会自动把你的页面爬进去，根本不用申请。不过我比较猴急，我现在！马上！就要在谷歌娘身体里面看到我的痕迹（滴嘟滴嘟</p><ol><li><p>安装谷歌站点地图生成工具</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-generator-sitemap</span><br></pre></td></tr></tbody></table></figure></li><li><p>在全局配置文件中添加</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#hexo sitemap</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br></pre></td></tr></tbody></table></figure></li><li><p>刷新，此时查看 public 文件夹中应该正确生成 sitemap.xml</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean&amp;&amp;hexo g</span><br></pre></td></tr></tbody></table></figure></li><li><p>访问<a href="https://search.google.com/search-console/">欢迎使用 Google Search Console</a>，除非绑定了自己的域名，否则在网址前缀中输入博客主页 url（带 https），即 <code>https://xxx.github.io</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210104051916.png"></p></li><li><p>然后谷歌会给你一个文件。用文本编辑器打开，在最开头加上</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">layout: false</span><br><span class="line">sitemap: false</span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure><p>然后把这个文件放到 hexo 的 <code>_posts</code> 文件夹中，部署 <code>hexo d -g</code>。</p></li><li><p>大概要过段时间（因为一个我们用的 github 静态博客同步没那么快，二个谷歌本身就没那么快，我大概等了一个小时左右），此时再进这里就会进入 Google Search Console 网站管理界面了。</p></li><li><p>（可选）趁等待谷歌反应过来的间隙，继续优化一下。使用 nofollow，大概意思是自动判断出索引黑名单，不爬取黑名单的页面。</p><p>安装</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-autonofollow</span><br></pre></td></tr></tbody></table></figure><p>在全局配置文件中添加</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nofollow:</span><br><span class="line">    enable: true</span><br><span class="line">    exclude: # 不添加 nofollow 标签的连接</span><br><span class="line">    - exclude1.com</span><br><span class="line">    - exclude2.com</span><br></pre></td></tr></tbody></table></figure></li><li><p>（可选）添加 rebot.txt。大概意思是使用规则判断索引黑白名单。在 <code>source/</code>文件夹下新建一个 rebots.txt 文件，放入以下内容：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># hexo robots.txt</span><br><span class="line">User-agent: *</span><br><span class="line">Allow: /</span><br><span class="line">Allow: /archives/</span><br><span class="line"></span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /js/</span><br><span class="line">Disallow: /css/</span><br><span class="line">Disallow: /fonts/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /fancybox/</span><br><span class="line"></span><br><span class="line">Sitemap: http://xxx.github.io/sitemap.xml</span><br><span class="line">Sitemap: http://xxx.github.io/baidusitemap.xml</span><br></pre></td></tr></tbody></table></figure><p>然后刷新，部署。</p></li><li><p>在索引-&gt;站点地图-&gt;输入站点地图地址，填入 <code>sitemap.xml</code>，有可能马上提示成功，也可能提示失败。失败的话估计要等个半天一天再过来看，如果还失败就重新提交，我是提交到第三次就显示成功了。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210104052701.png"></p></li><li><p>在 google 中输入 <code>site:xxxx.github.io</code>，如果显示搜不到，稍安勿躁，估计又是要等个一两天半周的。</p></li><li><p><strong>（21.1.21）</strong>后续我更新了一下网站结构，十多天过去了，google 没读取我新的站点地图，得手动刷新。方法是到覆盖率中，找到任意一个 404 的网页，点击已解决。</p></li></ol><h3 id="百度（存疑）"><a href="#百度（存疑）" class="headerlink" title="百度（存疑）"></a>百度（存疑）</h3><p>我自己没有亲自实验过，但听说 baidu 搜索引擎是没办法爬 <code>github.io</code> 的，说是百度爬的太多被 github 官方 ban 了。解决方法有三种：</p><ul><li>双线部署。部署到 coding 或者 gitlab 上。coding 被腾讯收购了，速度有保障，但要实名啥的，好像还要域名；gitlab 不需要手机号啥的，但访问速度比 github 还要不乐观。可以参考 <a href="https://zhuanlan.zhihu.com/p/111796666">Hexo 双线部署到 Coding 和 GitHub 提升访问速度 - 知乎</a>。</li><li>镜像部署，我现在用的是这种。参考<a href="https://zhuanlan.zhihu.com/p/111773896">如何让百度收录 GitHub Pages 个人博客 - 知乎</a>。部署到 <a href="https://vercel.com/">Vercel</a> 上，当检测到 github 仓库更新，vercel 这边也会自动重新拉取并部署。自带 cdn 也能保证速度，部署起来比前一种方便，缺点就是每个月只有 20G 访问流量，目前对于我这种小透明博客也够用了；还有就是注册的时候还是要用到手机号的。</li><li>使用主动推送。即部署时通过插件主动提交网页给搜索引擎。</li></ul><p><strong>前两种方法统称为使用镜像站点。使用镜像站点的方法和使用主动推送的方法是有一定冲突的。因为主动推送推送给搜索引擎的域名是以全局配置文件开头的 <code>url</code> 参数为准，而 <code>url</code> 参数中只能写一个域名，所以此时只能选谷歌 / 百度其中一个引擎做主动推送。同时，使用镜像站还需要使用「侵入式」方法修改站点地图模块生成的 url，否则其中一个站点地图就会出错。</strong>打个比方，全局配置文件开头的 <code>url</code> 我们写的是 github.io 的域名，也就是主站域名。此时生成的给百度的站点目录和主动推送域名也都是关于主站的而不是镜像站的，但百度那边我们填的是镜像站的域名，这就乱套了。另外将 <code>url</code> 修改为镜像站域名，直觉告诉我，未来有可能会引发什么其他的依赖于 url 插件的 bug。唯一一个能让镜像站和主动推送完美共存的方法就是通过 cname 链接到同一个自己的域名上，这就超出本文的研究范围了，不做探讨。</p><h4 id="不使用镜像站，仅使用主动推送提交页面"><a href="#不使用镜像站，仅使用主动推送提交页面" class="headerlink" title="不使用镜像站，仅使用主动推送提交页面"></a>不使用镜像站，仅使用主动推送提交页面</h4><ol><li><p>打开<a href="https://ziyuan.baidu.com/">百度搜索资源平台</a>，注册啥的我就略过了，注册完毕点击普通收录，在输入网站界面，协议选择 https 并输入我们的 <code>xxx.github.io</code> 域名，站点属性这里看实际情况选几个分类，然后验证网站这里选文件验证，下载。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210124015247.png"></p></li><li><p>和谷歌那边一样，获得的文件用文本编辑器打开，在最开头加上</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">layout: false</span><br><span class="line">sitemap: false</span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure><p>然后把这个文件放到 hexo 的 <code>_posts</code> 文件夹中，部署 <code>hexo d -g</code>。</p></li><li><p>同样，和 google 那边一样，过段时间再回来再点完成验证。实测百度这里的响应时间要比谷歌快得多，但。。。点完完成验证多半会进入 https 认证界面告诉你验证失败，这时点击再次验证，多半还会告诉你验证失败，不用管，估计过半天回来就成功了，好家伙，原来比谷歌快的真相是 https 验证耗得时间放到这里来了。。。不过，好消息是，我们不用等待它 https 验证完毕就可以下一步了。</p></li><li><p>配置主动推送模块。有两种选择，一个是 <a href="https://github.com/huiwang/hexo-baidu-url-submit">hexo-baidu-url-submit</a>，这个模块比较老但挺稳定，只用于百度主动推送；另一个是 <a href="https://github.com/cjh0613/hexo-submit-urls-to-search-engine">hexo-submit-urls-to-search-engine</a>，能同时用于 google / 必应的推送，但我第一次搞就报错了。。。所以我现在只用前一个。</p><p>在刚刚 sitemap 位置的旁边，有个 api 提交，下面就有个接口调用地址，把地址中 <code>token=</code> 后面的内容记下来。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210124025621.png"></p><p>安装百度主动推送插件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-baidu-url-submit</span><br></pre></td></tr></tbody></table></figure><p>在全局配置文件中新增：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">baidu_url_submit:</span><br><span class="line">  count: 100                 # 提交最新的多少个链接</span><br><span class="line">  host:                      # 在百度站长平台中添加的域名</span><br><span class="line">  token:                     # 秘钥</span><br><span class="line">  path: baidu_urls.txt</span><br></pre></td></tr></tbody></table></figure><p>并修改全局配置文件中 deploy 对应代码块，将原来的：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:xxx/xxx.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></tbody></table></figure><p>改成</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  - type: git</span><br><span class="line">    repository: git@github.com:xxx/xxx.github.io.git</span><br><span class="line">    branch: master</span><br><span class="line">  - type: baidu_url_submitter</span><br></pre></td></tr></tbody></table></figure><p>重新部署即可。</p></li></ol><p><strong>（21.2.26 更新）</strong> 照上面的一通做下来：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210226061535.png"></p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210226061627.png"></p><p>啊这。。。我明明提交的是后面这个网站呀？</p><h4 id="使用镜像站"><a href="#使用镜像站" class="headerlink" title="使用镜像站"></a>使用镜像站</h4><ol><li><p>两种镜像站只简单写写我用的这种，也就是第二种。打开 <a href="https://vercel.com/">Vercel</a>，注册一个账号后关联自己的 github，导入博客的 repo，后面部署的选项维持默认即可，注意 <code>FRAMEWORK PRESET</code> 这里不要选择 hexo，维持 other 即可。部署需要一定时间，部署完一切正常的话，点开 view build logs 应该是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210124021027.png"></p><p>此时 domains 那里应该有三个域名，挑其中一个域名记着待会备用。</p></li></ol><p>2-4. 参考不使用镜像站时的 1-3 步，差别就是填入的域名从 <code>xxx.github.io</code> 改为刚刚我们获得的镜像站域名。</p><ol start="5"><li><p>安装百度站点地图生成工具</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-generator-baidu-sitemap</span><br></pre></td></tr></tbody></table></figure></li><li><p>在全局配置文件中添加</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#hexo sitemap</span><br><span class="line">sitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br></pre></td></tr></tbody></table></figure></li><li><p>此时就需要进行抉择：</p><ul><li>修改百度站点地图生成工具代码，使其不依赖全局配置文件 url 独立生成镜像站 url 的站点配置。不需要修改全局配置文件的 url，只能兼容谷歌的主动推送工具。</li><li>修改全局配置文件 url 为镜像站 url；修改谷歌站点地图生成工具代码，使其不依赖全局配置文件 url 独立生成主站 url 的站点配置。只能兼容百度的主动推送工具，修改全局配置文件 url 可能未来会出现未知 bug。</li></ul><p>参考<a href="https://zhuanlan.zhihu.com/p/31411755">修改hexo sitemap 生成插件中的链接模板 - 知乎</a>。</p><ul><li><p>修改百度站点地图生成工具代码：</p><p>定位到 <code>hexo\node_modules\hexo-generator-baidu-sitemap</code>，打开 <code>baidusitemap.ejs</code>，找到</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;loc&gt;&lt;%- encodeURI(url + post.path) %&gt;&lt;/loc&gt;</span><br></pre></td></tr></tbody></table></figure><p>修改为类似于</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;loc&gt;&lt;%- encodeURI("https://xxx.github.io/" + post.path) %&gt;&lt;/loc&gt;</span><br></pre></td></tr></tbody></table></figure><p>即可。</p></li><li><p>修改谷歌站点地图生成工具代码:</p><p>谷歌这边就不用侵入式修改了，因为这个插件支持配合模板使用。</p><p>下载<a href="https://raw.githubusercontent.com/hexojs/hexo-generator-sitemap/master/sitemap.xml">模板</a>，重命名为 sitemap_template.xml。放入 hexo 根目录。</p><p>找到以下内容：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;loc&gt;{{ post.permalink | uriencode }}&lt;/loc&gt;</span><br><span class="line"></span><br><span class="line">&lt;loc&gt;{{ config.url | uriencode }}&lt;/loc&gt;</span><br><span class="line"></span><br><span class="line">&lt;loc&gt;{{ tag.permalink | uriencode }}&lt;/loc&gt;</span><br><span class="line"></span><br><span class="line">&lt;loc&gt;{{ cat.permalink | uriencode }}&lt;/loc&gt;</span><br></pre></td></tr></tbody></table></figure><p>依次修改为类似于下面的内容：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;loc&gt;{{ "https://xxx.github.io/" + post.path | uriencode }}&lt;/loc&gt;</span><br><span class="line"></span><br><span class="line">&lt;loc&gt;https://xxx.github.io/&lt;/loc&gt;</span><br><span class="line"></span><br><span class="line">&lt;loc&gt;{{ "https://xxx.github.io/" + tag.path | uriencode }}&lt;/loc&gt;</span><br><span class="line"></span><br><span class="line">&lt;loc&gt;{{ "https://xxx.github.io/" + cat.path | uriencode }}&lt;/loc&gt;</span><br></pre></td></tr></tbody></table></figure><p>在全局配置文件中修改相应位置：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#hexo sitemap</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">  template: ./sitemap_template.xml</span><br></pre></td></tr></tbody></table></figure><p>重新部署即可。</p></li></ul></li><li><p>刷新，此时查看 public 文件夹中应该正确生成 baidusitemap.xml（和 sitemap.xml），可打开查看域名是否正确。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean&amp;&amp;hexo g</span><br></pre></td></tr></tbody></table></figure></li><li><p>nofollow 和 robots.txt 之前部署谷歌收录的时候部署过了，在百度这里通用（除了 robots.txt 中百度站点地图的地址可能要改成镜像站地址），没有进行谷歌收录部署的可以往上翻谷歌部署的第 7、8 步；直接部署站点地图就好了。点站点管理页面左侧侧边栏的资源提交 -&gt; 普通提交 -&gt; sitemap，输入 <code>[镜像站名]/baidusitemap.xml</code>，提交即可。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210124023841.png"></p></li><li><p>（可选，仅 url 设置为镜像站域名时可用）配置主动提交。参考不使用镜像站时的第 4 步，区别只是全局配置中的相应 host 参数改为镜像站的。</p></li><li><p>（可选）许多参考文章还提到一个自动推送。但百度去年改过依次规则，域名已备案的才可使用自动推送，且相关接口（swig 文件）业已从 NexT 主题中删除。如有需要的可自己研究，这里不涉及。</p></li></ol><h2 id="加载速度优化"><a href="#加载速度优化" class="headerlink" title="加载速度优化"></a>加载速度优化</h2><h3 id="快速连接技术"><a href="#快速连接技术" class="headerlink" title="快速连接技术"></a>快速连接技术</h3><p>照抄文章：<a href="https://lvxuefei.top/%E5%88%A9%E7%94%A8Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89-%E4%BC%98%E5%8C%96-%E5%90%84%E7%A7%8Dtips%E3%80%81%E9%BB%91%E7%A7%91%E6%8A%80%EF%BC%8C%E4%B8%8D%E6%96%AD%E6%9B%B4%E6%96%B0/">利用 Hexo+Next 搭建个人博客（三）—— 优化 (各种 tips、黑科技，不断更新) | 槐雪</a></p><blockquote><p>什么是快速连接技术，下面是其 <a href="https://github.com/GoogleChromeLabs/quicklink">GitHub 源地址</a>上给出的解释：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过在空闲时间预取视区内链接来加快后续页面加载速度</span><br></pre></td></tr></tbody></table></figure><p>按我的理解应该是在我们访问博文页面的时候，如果博文位于视区内的部分有网页链接，那么浏览器在空闲时会预加载该链接对应的页面以达到加快后续的访问速度的目的。</p></blockquote><p>安装</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i quicklink</span><br></pre></td></tr></tbody></table></figure><p>在主题配置文件中添加</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">quicklink:</span><br><span class="line">  enable: true</span><br></pre></td></tr></tbody></table></figure><h3 id="使用-Gulp-压缩静态资源"><a href="#使用-Gulp-压缩静态资源" class="headerlink" title="使用 Gulp 压缩静态资源"></a>使用 Gulp 压缩静态资源</h3><p>参考文章：<a href="http://yifanstar.top/2020/07/19/hexo-blog-creat/">Hexo + GitHub Pages 搭建个人博客及 NexT 主题配置 | Star’s Tech Blog</a></p><p>看起来有点复杂。。。我得想办法先确认这些加速手段有用再继续，先占坑。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;NexT-更新&quot;&gt;&lt;a href=&quot;#NexT-更新&quot; class=&quot;headerlink&quot; title=&quot;NexT 更新&quot;&gt;&lt;/a&gt;NexT 更新&lt;/h2&gt;&lt;p&gt;光 速 更 新（不是&lt;/p&gt;</summary>
    
    
    
    <category term="博客" scheme="https://zbttl-github-io.vercel.app/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="hexo" scheme="https://zbttl-github-io.vercel.app/tags/hexo/"/>
    
    <category term="NexT" scheme="https://zbttl-github-io.vercel.app/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>hexo 入门</title>
    <link href="https://zbttl-github-io.vercel.app/hexo-ru-men/"/>
    <id>https://zbttl-github-io.vercel.app/hexo-ru-men/</id>
    <published>2020-12-17T16:00:00.000Z</published>
    <updated>2021-02-16T20:25:09.054Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>罗马不是一日建成的。</p></blockquote><p>但我的博客可以！<span class="github-emoji"><span>🐶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f436.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>0202 年了，要写博客选择很多，远古时期发展来的 wordpress 配置相对复杂，但发展那么多年是这里面最成熟的选择了；年中我为了续费阿里云学生机曾经快速过过一遍主页那些小教程，玩了一下里面的 vuepress 感觉也不错；还有好像挺多大佬用 typecho 的？不过作为萌新，先从当前最成熟最简单的开始，就 hexo + Next 了。</p><p>hexo 网上教程烂大街了，所以步骤我介绍的很简单，详细步骤参见相应的参考文章，我只介绍大概步骤和一些坑。（说是最成熟最简单，我这个跳坑大王还是遇到不少坑。</p><p>使用的软件版本：</p><p>nodejs 和 hexo 运行平台：Ubuntu 19.10（话说我现在才发现这个系统过期导致 apt update 失灵，等我解决了还可以水一篇文章）</p><p>nodejs（linux）：v14.6.0 <code>nodejs -v</code></p><p>hexo（linux）：5.2.0 <code>cd hexo</code> <code>hexo -v</code></p><p>hexo-next（linux）：7.8.0（可以在 <code>themes/next/package.json</code>内查到）</p><p><a href="https://github.com/Molunerfinn/PicGo">pic-go</a>（windows）：2.3.0-beta.3</p><p>另外先附上我们两个主角的官方中文文档：</p><ul><li><a href="https://hexo.io/zh-cn/docs/">hexo 文档</a></li><li><a href="https://theme-next.iissnan.com/getting-started.html">NexT 开始使用</a></li></ul><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>参考文章：</p><ul><li><a href="https://blog.ichr.me/post/set-up-hexo-on-github-page/">Github Page + Hexo 免费搭建个人博客教程</a></li><li><a href="http://blog.fujian.show/2019/05/11/hexo-github-build-blog/">史上最完整教程！Hexo + GitHub page免费搭建个人博客</a></li></ul><ol><li><p>装 nodejs 和 git</p></li><li><p>全局安装 hexo，新建个目录作为 <strong>hexo 根目录</strong>，在里面初始化 hexo，安装组件，生成文件。未来所有以 hexo 和 npm 开头的命令都需要在 hexo 文件夹下执行。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br><span class="line">mkdir hexo &amp;&amp; cd hexo</span><br><span class="line">hexo init</span><br><span class="line">npm install</span><br><span class="line">hexo g</span><br></pre></td></tr></tbody></table></figure></li><li><p>装 NexT 主题（许多教程里面的 next 还用的是 iissnan/hexo-theme-next 的这个旧版，用旧版运行时会报错，且运行的时候有提示让你更新新版）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next.git themes/next</span><br></pre></td></tr></tbody></table></figure><p>修改 hexo 根目录中的 <code>_config.yml</code>，将其中的 theme 改为 next。（注意，如果此处修改后运行报错参考<a href="https://www.jianshu.com/p/861307262429">搭建博客遇到Plugin load failed: %s hexo-theme-landscape错误</a>删除 <code>package.json</code> 中原主题 landscape 的依赖即可）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></tbody></table></figure><p>此时就可以打开本地预览看看效果：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></tbody></table></figure></li><li><p>建文章。本地预览中显示的这篇文章 <code>source/_posts/hello_world.md</code> 中。第一篇文章可以修改这个文件，也可以删掉重新建一个。通过终端建立新文章的方法参考<a href="https://hexo.io/zh-cn/docs/writing.html">写作</a>：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post &lt;title&gt; title.md</span><br></pre></td></tr></tbody></table></figure><p>文件名称（也就是 title.md）不影响在博客中显示的效果。但 title 影响。</p><p>这么建文章有个问题。。。我之前写的日记，我想按我日记上的日期显示在博客里咋整？</p><p>那我们可以手动对 <code>source/_posts</code> 里的 md 文件进行一些修改。</p><p>原来写的日记，如果是普通的文本请改成 markdown 格式（这里不再展开），好在我原来写的日志就是 md 格式的，仿照 <code>hello-world.md</code> 在全文前面加上代表 title 和初始日期的代码块就行了。这个代码块里面还可以指定本文的分类、tag、是否置顶等属性，这个我们之后再说。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201220025108.png"></p><p>另外，之前文章的总标题我都用一级标题的形式书写的。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201220025319.png" alt="比如这样"></p><p>而刚刚代码块里面的 title 在文章中显示出来的大小和一级标题一模一样，看起来重复了。所以还要把一级标题删掉，直接放到 title 上。</p></li><li><p>修整一下 hexo 全局配置文件 <code>_config.yml</code> 和 next 主题的配置文件 <code>themes/next/_config.yml</code>中的相应项目。全局配置文件中，网站基本描述（修改这里的时候注意，这些参数原来冒号后面跟的是单引号，别当双引号看了，最好一开始就直接删掉那些引号，这里的参数值就算是汉字也不需要用引号括起来）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Bao's 备忘录</span><br><span class="line">subtitle: </span><br><span class="line">description: 玩点好玩的</span><br><span class="line"># keyword:</span><br><span class="line">author: zbttl</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: Asia/Shanghai</span><br></pre></td></tr></tbody></table></figure><p>可引用外部图片</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></tbody></table></figure><p>next 主题配置文件中，主页需要需要启用菜单功能（我这里多启用了关于、标签、种类三个功能）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  tags: /tags/ || fa fa-tags</span><br><span class="line">  categories: /categories/ || fa fa-th</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line">  #schedule: /schedule/ || fa fa-calendar</span><br><span class="line">  #sitemap: /sitemap.xml || fa fa-sitemap</span><br><span class="line">  #commonweal: /404/ || fa fa-heartbeat</span><br><span class="line">  about: /about/ || fa fa-user</span><br></pre></td></tr></tbody></table></figure><p>（多嘴一句，后面美化主题新加功能的时候少不了折腾这两个文件，特别是 next 主题的配置文件，英语过关的话认真看里面已经写了很多插件功能了，装好模块删掉注释就能开）</p></li><li><p>把自己之前的一些文章转换好在本地看完效果后，发布。本来是想发布到自己的服务器和域名上，想想算了。。。毕竟那个东西，是用来干一些（咳咳</p><p>那就托管到 github.io 好了。在 github 上建一个名为你的用户名 .github.io 的仓库。放（或者建）一个 ssh key 到 github 里面。（玩 vps 的 ssh key 这玩意应该人手一个吧）</p><p>搞定以后再次修改全局配置文件 <code>_config.yml</code>的相应内容：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 刚刚建的仓库的域名</span><br><span class="line">url: https://xxx.github.io/</span><br><span class="line">root: /</span><br><span class="line">#permalink: :year/:month/:day/:title/</span><br><span class="line">permalink: :title/ #使url简洁，方便搜索引擎收录</span><br><span class="line">...</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:xxx/xxx.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></tbody></table></figure><p>repository 这项不清楚的话，打开你的项目下面，点击那个绿色的下载按钮 code-&gt;ssh</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201220033031.png"></p><p>配置 git 用户和邮箱：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "Your Name"</span><br><span class="line">git config --global user.email "email@example.com" </span><br></pre></td></tr></tbody></table></figure><p>把自己 ssh key 中的私钥 <code>id_rsa</code> 放到自己 linux 用户目录的 <code>.ssh</code> 文件夹里面，改权限为 0600。</p><p>安装 hexo-github 插件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git </span><br></pre></td></tr></tbody></table></figure><p>提交！</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></tbody></table></figure><p>一会儿访问 xxx.github.io 就能看到自己的博客了。</p></li></ol><h2 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h2><p>参考文章：</p><ul><li><a href="https://blog.csdn.net/tangyb828/article/details/110389851">PicGo+GitHub 你的最佳免费图床选择！</a></li><li><a href="https://blog.csdn.net/weixin_43571641/article/details/106448498">[教程] PicGo+GitHub 免费图床搭建</a></li></ul><p>其实凑合一点存在项目内也不是不行。不过我的文章先在另一台设备的 typora 里面写完再上传到博客的，这样显然不太行。</p><p>如果不考虑国内访问，存在 imgur 就可以了，还有 shareX 这种工具能够方便的截图上传。</p><p>如果坚信自己的图片能够过审核！那可以存在 sm.ms。（我本来打算存那儿的，结果就那么几张为了实验找出来的图我还给敏感部位打了码最后还是被 delete 了两张）</p><p>最后决定先存 github 吧。虽然 github 的 raw.githubusercontent.com 今年由于某个原因变得不稳定了起来，但偶尔还能用，而且还有 cdn 加速勉强撑着。和上面两个图床相比还有一个优势就是上传上去的图片文件名不会变。未来无论是重新下回来还是上传到其他也不会改文件名的图床都会方便一些（批量改域名就可以）。</p><p>如果有 vps 而且流量多的话，可以考虑在 vps 中开一个图床，这里就不详细探究了。</p><ol><li><p>在 github 新建一个默认创建 README.md 的 public 仓库。（话说我有点害怕 github 来查我水表，于是我新开了了一个小号）</p></li><li><p>获取一个 github Personal access tokens，只需要 repo 权限。</p></li><li><p>在 picgo 中填写相应参数。坑来了：现在已经是 0202 年了，新项目没有 master 分支这个说法了。。。我踩进去半天才反应过来。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201218041918.png"></p><p>仓库名填 [ 账号名 ]/[ 仓库名 ]。</p><p>自定义域名，可以用 github 源 url。不排除未来 github 的源 url 再次更改，没关系，项目里面不是默认有个 README.md 吗？点开他，下面有个 raw，点开以后显示的域名去掉 README.md 就是我们要往自定义域名填的东西。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://raw.githubusercontent.com/[用户名]/[仓库名]/[分支名]</span><br></pre></td></tr></tbody></table></figure><p>或者用加速 cdn <a href="https://www.jsdelivr.com/?docs=gh">jsdelivr</a>。version 这里填分支名。后面带上 README.md 访问一下就知道自己有没有改对 url 了。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/user/repo@version</span><br></pre></td></tr></tbody></table></figure><p><strong>（20.12.23 更新）</strong> 今天传图片的时候遇到问题了。传了一张 50k 的图片，在 typora 中没显示出来。用浏览器打开一看：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Package size exceeded the configured limit of 50 MB. Try https://github.com/zbpicture/picture/tree/main/img/iiHvIIn.png instead.</span><br></pre></td></tr></tbody></table></figure><p>问题是这个图片那么小是怎么超过 50M 的？而且后面又传了两个图片，没问题。打开 github，上面三张图片都在。</p><p>原因未知但有解决方法：参考<a href="https://blog.shiyunhong.com/3353.html">记一下JsDelivr踩的坑</a>。</p><p>把链接中的 main 改成 master 就能显示出来了。</p><p>问题和解决方法都一样神秘的说。</p><p><strong>(21.1.1 更新)</strong> 发现一张图片码没打全，去 github 那边手动删掉重新上传，但发现 cdn 那边还是没有更新的样子？看来只能手动更新了。参考文章：<a href="https://www.cnblogs.com/UncleZhao/p/13753723.html">jsdelivr CDN 使用和缓存刷新 - 易波叶平 - 博客园</a></p><p>打开那张图片的 url，将其中的</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/</span><br></pre></td></tr></tbody></table></figure><p>切换为</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://purge.jsdelivr.net/</span><br></pre></td></tr></tbody></table></figure><p>即可。</p></li></ol><h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><h3 id="添加标签和分类"><a href="#添加标签和分类" class="headerlink" title="添加标签和分类"></a>添加标签和分类</h3><p>参考文章：</p><ul><li><a href="https://www.zhihu.com/question/29017171">hexo 下的分类和表签无法显示，怎么解决？</a></li><li><a href="https://aiellochan.com/2018/02/13/hexo/Hexo-%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%A4%9A%E4%B8%AA-categories/">Hexo 一篇文章多个 categories</a></li></ul><p>添加相应的文件夹：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new page "tags"</span><br><span class="line">hexo new page "categories"</span><br></pre></td></tr></tbody></table></figure><p>然后在 <code>source/</code> 相应文件夹下会看到一个 <code>index.md</code>，打开在代码块里面新增一个 type，type 的值就放相应的功能名。如果你不知道相应的功能名叫什么的话，去 next 配置文件里面 menu 那个地方看，或者直接往上翻，我曾经提到过。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201220065728.png"></p><p>之后就可以在对应博文的代码块中加入 categories 和 tags 属性了。要注意，如果要设置多个标签，格式是这样的：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tags：</span><br><span class="line">- tag1</span><br><span class="line">- tag2</span><br></pre></td></tr></tbody></table></figure><p><strong>（21.1.20 更新）</strong> 可以但不推荐的方法（虽然看起来显得简洁，但如果未来要使用 <a href="https://github.com/D0n9X1n/hexo-blog-encrypt">hexo-blog-encrypt</a> 来加密文章的话，这样写最后部署会报错，参见<a href="https://github.com/D0n9X1n/hexo-blog-encrypt/issues/163">安装后 hexo 部署报错 · Issue #163 · D0n9X1n/hexo-blog-encrypt</a>）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tags: [tag1,tag2]</span><br></pre></td></tr></tbody></table></figure><p>但如果要设置多个种类，格式是这样的：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line"> - [category1]</span><br><span class="line"> - [category2]</span><br></pre></td></tr></tbody></table></figure><p>还要注意，此时如果你边开着本地预览边改，需要重启一遍 <code>hexo s</code> 才会生效。如果你更换了文章的 tag，还需要刷新（完全重新部署，这个命令很常用，接下来还会频繁用到）：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean&amp;&amp;hexo g</span><br><span class="line">#新方法，嫌旧方法执行两个命令麻烦的时候使用，无法完全替代旧方法</span><br><span class="line">#hexo g -f</span><br></pre></td></tr></tbody></table></figure><p>注意 tags 和 categories 的大小写问题，建议做好约定以便区分，比如 categories 除了特定名词外固定首字母大写，其他小写；tags 除了固定名词外一律小写。如果不小心出现了大小写混淆导致刷新不完全的问题，参见 <a href="https://zbttl.github.io/hexo-jin-jie/">hexo 进阶</a>。</p><h3 id="添加火柴棒动态背景"><a href="#添加火柴棒动态背景" class="headerlink" title="添加火柴棒动态背景"></a>添加火柴棒动态背景</h3><p>参考文章：<a href="https://lvxuefei.top/%E5%88%A9%E7%94%A8Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89-%E4%BC%98%E5%8C%96-%E5%90%84%E7%A7%8Dtips%E3%80%81%E9%BB%91%E7%A7%91%E6%8A%80%EF%BC%8C%E4%B8%8D%E6%96%AD%E6%9B%B4%E6%96%B0/">利用 Hexo+Next 搭建个人博客（三）—— 优化 (各种 tips、黑科技，不断更新)</a>)</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd themes/next</span><br><span class="line">git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest</span><br></pre></td></tr></tbody></table></figure><p>在主题配置文件中新增：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">canvas_nest:</span><br><span class="line">  enable: true# 是否显示true|false</span><br><span class="line">  onmobile: true # 是否在移动端展示true|false</span><br><span class="line">  color: "120,120,120" # 线条的颜色（RGB表示）, 用 `,` 隔开</span><br><span class="line">  opacity: 0.5 # 线条头透明度: 0~1</span><br><span class="line">  zIndex: -1 # 用于控制线条所在层的位置, 默认:-1。值越大，显示的层面离用户越近。</span><br><span class="line">  count: 150# 线条的总条数</span><br></pre></td></tr></tbody></table></figure><h3 id="添加鼠标点击特效"><a href="#添加鼠标点击特效" class="headerlink" title="添加鼠标点击特效"></a>添加鼠标点击特效</h3><p>有两种实现方法，第一种参考<a href="https://blog.csdn.net/qq_42889280/article/details/103087564">Hexo博客+Next主题鼠标点击特效</a>，是老版本在 <code>/themes/next/layout/_custom/custom.swig</code> 调用第三方 js，虽然新版本已经不存在 <code>/themes/next/layout/_custom/</code>这个文件夹了，但仍可以通过手工创建并在  <code>/themes/next/layout/_layout.swig</code> body 中用 include 引入生效。</p><p>但我更推荐新方法：</p><p>参考文章：<a href="https://dongguagua.gitee.io/archives/6f944b02.html">NexT 主题自定义样式</a></p><p>相比上面的旧方法，新方法热切换鼠标点击效果的时候本地预览不会突然崩掉。</p><p>在主题配置文件中找到 <code>custom_file_path:</code>，取消下面</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bodyEnd: source/_data/body-end.swig</span><br></pre></td></tr></tbody></table></figure><p>这行的 # 号注释。</p><p>编辑（新建） <code>source/_data/body-end.swig</code>，加入下面的内容：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">{# 鼠标点击特效 #}</span><br><span class="line">{% if theme.cursor_effect == "fireworks" %}</span><br><span class="line">  &lt;script async src="/js/cursor/fireworks.js"&gt;&lt;/script&gt;</span><br><span class="line">{% elseif theme.cursor_effect == "explosion" %}</span><br><span class="line">  &lt;canvas class="fireworks" style="position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;" &gt;&lt;/canvas&gt;</span><br><span class="line">  &lt;script src="//cdn.bootcss.com/animejs/2.2.0/anime.js"&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script async src="/js/cursor/explosion.min.js"&gt;&lt;/script&gt;</span><br><span class="line">{% elseif theme.cursor_effect == "love" %}</span><br><span class="line">  &lt;script async src="/js/cursor/love.min.js"&gt;&lt;/script&gt;</span><br><span class="line">{% elseif theme.cursor_effect == "text" %}</span><br><span class="line">  &lt;script async src="/js/cursor/text.js"&gt;&lt;/script&gt;</span><br><span class="line">{% endif %}</span><br></pre></td></tr></tbody></table></figure><p>然后打开 <code>source/js</code>，新建 <code>cursor</code> 文件夹。进入其中用 wget 下载四个 js 文件，对应四种特效：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://cdn.jsdelivr.net/gh/zbpicture/picture@main/explosion.min.js</span><br><span class="line">wget https://cdn.jsdelivr.net/gh/zbpicture/picture@main/fireworks.js</span><br><span class="line">wget https://cdn.jsdelivr.net/gh/zbpicture/picture@main/love.min.js</span><br><span class="line">wget https://cdn.jsdelivr.net/gh/zbpicture/picture@main/text.js</span><br></pre></td></tr></tbody></table></figure><p>最后在主题配置文件中放入一行</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cursor_effect: text # fireworks：礼花 | explosion：爆炸 | love：浮出爱心 | text：浮出文字</span><br></pre></td></tr></tbody></table></figure><p>即可</p><p>才怪。你会发现除了 text 以为的特效都正常，但使用 text 时，什么都没发生？按下 f12，弹出这么个错误：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201219211715.png"></p><p>查了半天不知道什么问题，干脆大力出奇迹。在 <code>source/_data/body-end.swig</code> 最顶上加一行：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type="text/javascript" src=" https://cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js"&gt;&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p><del>搞定。</del></p><p><strong>(21.1.22 更新）</strong> 才怪。我们刚刚修改了 <code>source</code> 文件夹下的 <code>_data</code> 和 <code>js</code> 文件夹。但 hexo 的机制，会在部署时把 <code>source</code> 下开头不带下划线的文件夹文件都渲染了，<code>_data</code> 带下划线没事，<code>js</code> 文件夹的文件一渲染内容就全乱了，然后就会出错。解决方法是设置渲染 <code>skip_render</code>。参考文章：<a href="https://segmentfault.com/q/1010000003957602">Hexo编译文档时把JS给写乱了，请问怎么解决？ - SegmentFault 思否</a></p><p>修改全局配置文件，找到 <code>skip_render:</code>，设置值为：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render: js/**</span><br></pre></td></tr></tbody></table></figure><p>意思是渲染时跳过 <code>source/js</code> 下所有文件和文件夹。</p><h3 id="添加置顶"><a href="#添加置顶" class="headerlink" title="添加置顶"></a>添加置顶</h3><p>参考文章：<a href="https://www.cnblogs.com/lqerio/p/11117467.html">HEXO添加置顶功能</a></p><p>卸载旧模块安装新模块：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-generator-index</span><br><span class="line">npm install hexo-generator-index-pin-top</span><br></pre></td></tr></tbody></table></figure><p>在需要置顶的博文的开头代码块中加入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top: true</span><br></pre></td></tr></tbody></table></figure><p>即可。</p><h3 id="去除-hexo-支持信息与主题版本信息，侧边栏社交信息链接，向上滚动按钮整合文章进度显示，添加代码块复制按钮，权利声明"><a href="#去除-hexo-支持信息与主题版本信息，侧边栏社交信息链接，向上滚动按钮整合文章进度显示，添加代码块复制按钮，权利声明" class="headerlink" title="去除 hexo 支持信息与主题版本信息，侧边栏社交信息链接，向上滚动按钮整合文章进度显示，添加代码块复制按钮，权利声明"></a>去除 hexo 支持信息与主题版本信息，侧边栏社交信息链接，向上滚动按钮整合文章进度显示，添加代码块复制按钮，权利声明</h3><p>参考文章：<a href="https://lvxuefei.top/%E5%88%A9%E7%94%A8Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89-%E4%BC%98%E5%8C%96-%E5%90%84%E7%A7%8Dtips%E3%80%81%E9%BB%91%E7%A7%91%E6%8A%80%EF%BC%8C%E4%B8%8D%E6%96%AD%E6%9B%B4%E6%96%B0/">利用 Hexo+Next 搭建个人博客（三）—— 优化 (各种 tips、黑科技，不断更新)</a>)</p><p>都是内置功能。</p><p>可以在主题配置文件里面找到相应内容。</p><p>支持信息和主题版本搜索 <code>powered</code> <del>和 <code>theme</code></del> 字段。（<strong>21.2.17 更新</strong>，发现新版本不再需要修改 theme 字段。后来我又给加回来了，最近翻到一些好康的 hexo 博客总想看看人家用了啥主题，感觉把自己的用的主题亮出来避免新人找来找去也不是件坏事吧？就是这个「由 xx 强力驱动」翻译怪怪的。。。得空的话我自己改一下，似乎修改主题配置文件夹的 <code>languages\zh-CN.yml</code> 相应翻译即可）</p><p>社交信息链接搜索 <code>social</code> 字段。</p><p>代码块复制按钮搜索 <code>codeblock</code> 字段，修改其中的 <code>copy_button</code> 参数。</p><p>向上滚动按钮整合文章进度显示搜索 <code>back2top</code> 字段，修改其中的 <code>scrollpercent</code> 参数。</p><p>权利声明修改 <code>creative_commons</code> 字段，其中的 <code>license</code> 参数决定你使用那种权利声明，参考<a href="https://zhuanlan.zhihu.com/p/154075043">怎样为自己的文章添加合适的许可（共用许可证-Creative Commons licenses）</a>，我觉得既然咱们决定用这玩意那最少也用个 by-sa。</p><h3 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h3><p>参考文章：<a href="https://lvxuefei.top/%E5%88%A9%E7%94%A8Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89-%E4%BC%98%E5%8C%96-%E5%90%84%E7%A7%8Dtips%E3%80%81%E9%BB%91%E7%A7%91%E6%8A%80%EF%BC%8C%E4%B8%8D%E6%96%AD%E6%9B%B4%E6%96%B0/">利用 Hexo+Next 搭建个人博客（三）—— 优化 (各种 tips、黑科技，不断更新)</a>)</p><ol><li>安装 <a href="https://links.jianshu.com/go?to=https://github.com/flashlab/hexo-generator-search">hexo-generator-searchdb</a> 插件</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>打开全局配置文件，在下面添加</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 搜索</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>打开主题配置文件找到 <code>Local search</code>，将 <code>enable</code> 设置为 <code>true</code></li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  trigger: auto# trigger若为auto, 通过改变输入触发搜索</span><br><span class="line">  # trigger若为manual, 通过按下enter键或者点击搜索按钮触发搜索</span><br><span class="line">  top_n_per_article: 1 # 展示每篇文章的前n个结果，如果想要展示所有结果，设置为-1</span><br><span class="line">  unescape: false# 将html字符串转义为可读的字符串。</span><br><span class="line">  preload: false# 当加载页面时预加载搜索结果</span><br></pre></td></tr></tbody></table></figure><h3 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h3><p>参考：<a href="https://github.com/theme-next/hexo-symbols-count-time">theme-next/hexo-symbols-count-time: Symbols count and time to read of articles for Hexo.</a></p><p>安装 <code>hexo-symbols-count-time</code> 模块</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-symbols-count-time</span><br></pre></td></tr></tbody></table></figure><p>其实就能生效了。但相应的参数还可以改一下。</p><p>打开全局配置文件新增 <code>symbols_count_time</code> 字段。顺便吐槽一句，参考文章推荐的 4/275 参数有点离谱，2500 字的文章正常人真的能在 2 分钟内读完吗。。。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: true</span><br><span class="line">  exclude_codeblock: false</span><br><span class="line">  awl: 3</span><br><span class="line">  wpm: 275</span><br><span class="line">  suffix: "mins."</span><br></pre></td></tr></tbody></table></figure><p>再打开主题配置文件找到 <code>symbols_count_time</code> 字段：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true</span><br><span class="line">  item_text_post: true</span><br><span class="line">  item_text_total: true</span><br></pre></td></tr></tbody></table></figure><p>然后做一次刷新</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean&amp;&amp;hexo g</span><br></pre></td></tr></tbody></table></figure><p>避免出现不生效的 bug。（参考<a href="https://github.com/theme-next/hexo-symbols-count-time/issues/53">The symbols count is undefined and reading time is NaN:aN. #53</a>）</p><h3 id="统计访问量"><a href="#统计访问量" class="headerlink" title="统计访问量"></a>统计访问量</h3><p>参考文章：<a href="https://lvxuefei.top/%E5%88%A9%E7%94%A8Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89-%E4%BC%98%E5%8C%96-%E5%90%84%E7%A7%8Dtips%E3%80%81%E9%BB%91%E7%A7%91%E6%8A%80%EF%BC%8C%E4%B8%8D%E6%96%AD%E6%9B%B4%E6%96%B0/">利用 Hexo+Next 搭建个人博客（三）—— 优化 (各种 tips、黑科技，不断更新)</a>)</p><p>使用<a href="http://ibruce.info/2015/04/04/busuanzi/">不蒜子</a></p><p>打开主题配置文件找到 <code>busuanzi_count</code> 字段，将 <code>enbale</code> 设置为 <code>true</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  enable: true                #是否显示计数ture|false</span><br><span class="line">  total_visitors: true  #访客数，uv的方式，单个用户连续点击n篇文章，只记录1次访客数</span><br><span class="line">  total_visitors_icon: user</span><br><span class="line">  total_views: true           #访问量，pv的方式，单个用户连续点击n篇文章，记录n次访问量</span><br><span class="line">  total_views_icon: eye</span><br><span class="line">  post_views: true            #是否显示每篇文章的访问次数ture|false</span><br><span class="line">  post_views_icon: eye</span><br></pre></td></tr></tbody></table></figure><h3 id="文章自动折叠"><a href="#文章自动折叠" class="headerlink" title="文章自动折叠"></a>文章自动折叠</h3><ol><li><p>安装插件 <code>hexo-excerpt</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-excerpt</span><br></pre></td></tr></tbody></table></figure></li><li><p>修改全局配置文件，新增以下内容（话说好多参考文章甚至是官方文档用的 <code>auto_excerpt</code> 在我这不生效，不知道啥原因）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">excerpt:</span><br><span class="line">  depth: 2</span><br><span class="line">  excerpt_excludes: []</span><br><span class="line">  more_excludes: []</span><br><span class="line">  hideWholePostExcerpts: false</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><p>一顿操作，不免装了一些没用模块，用些命令清理一下。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm prune</span><br><span class="line">hexo clean</span><br></pre></td></tr></tbody></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>现在博客只搞了最基础的美化，以及我觉得有必要实现的功能。其他高级一点的功能再说吧，比如 rss 啊，评论啊，说回来我评论不怎么想开（玻璃心），但想着能发动人民群众给我挑错误也还不错。不过听说评论还有好多种不同的实现方式，研究研究再说。（实在是受不了我就开个类似的东西，比如点赞？hexo 支持这玩意么）</p><h2 id="其他优秀参考文章集合"><a href="#其他优秀参考文章集合" class="headerlink" title="其他优秀参考文章集合"></a>其他优秀参考文章集合</h2><ul><li><a href="https://www.jianshu.com/p/9f0e90cc32c2">Hexo-NexT配置超炫网页效果</a></li><li><a href="https://tding.top/archives/567debe0.html">本博客当前使用的插件总结</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;罗马不是一日建成的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但我的博客可以！&lt;span class=&quot;github-emoji&quot;&gt;&lt;span&gt;🐶&lt;/span&gt;&lt;img src=&quot;https://github.githubassets.com/images/icons/emoji/unicode/1f436.png?v8&quot; aria-hidden=&quot;true&quot; onerror=&quot;this.parent.classList.add(&#39;github-emoji-fallback&#39;)&quot;&gt;&lt;/span&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="博客" scheme="https://zbttl-github-io.vercel.app/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="hexo" scheme="https://zbttl-github-io.vercel.app/tags/hexo/"/>
    
    <category term="NexT" scheme="https://zbttl-github-io.vercel.app/tags/NexT/"/>
    
  </entry>
  
</feed>
