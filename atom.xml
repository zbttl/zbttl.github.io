<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bao&#39;s 备忘录</title>
  
  
  <link href="https://zbttl.github.io/atom.xml" rel="self"/>
  
  <link href="https://zbttl.github.io/"/>
  <updated>2021-01-20T19:58:39.280Z</updated>
  <id>https://zbttl.github.io/</id>
  
  <author>
    <name>zbttl</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>总结一下【完美版】自动下载 B 站收藏视频 – Left&#39;s blog 遇到的坑</title>
    <link href="https://zbttl.github.io/2021-01-08-00/"/>
    <id>https://zbttl.github.io/2021-01-08-00/</id>
    <published>2021-01-07T16:00:00.000Z</published>
    <updated>2021-01-20T19:58:39.280Z</updated>
    
    <content type="html"><![CDATA[<p>原教程： <a href="https://left.pink/archives/3073">【完美版】自动下载 B 站收藏视频 – Left’s blog</a></p><p>虽然 Left 人家的实现方法是脚本，有点非典型吧（我用的东西大多是写成二进制或者 docker），不过既然能成功实现功能那就是好东西。不过脚本的固有问题，就是坑多。目前也没找到更好的工具替代，所以排了坑继续用吧。</p><ol><li><p>记得安装 mailutils、rclone。</p></li><li><p>记得几个工具给齐权限（特别是那个 danmaku2ass.py）</p></li><li><p>rsshub 建议自建。rsshub 公用接口有可能获取不到自己的收藏夹。</p></li><li><p>目前一共三个 bug。</p><ol><li><p>评论底下说的</p><blockquote><p>第三十行提示 “syntax error: unexpected end of file”</p></blockquote><p>其实是这句：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if [ $pubdate != $olddate ];</span><br></pre></td></tr></tbody></table></figure><p>得改成</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if [ "$pubdate" != "$olddate" ];</span><br></pre></td></tr></tbody></table></figure><p>我一开始还以为变量是指脚本路径和视频储存路径（</p></li><li><p>you-get 报错。可能要加 <code>-k</code> 参数。具体是第一个脚本的 41 行：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stat=$($you -i -c /home/zbttl/run/cookies.txt $link)</span><br></pre></td></tr></tbody></table></figure><p>改成</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stat=$($you -i -k -c /home/zbttl/run/cookies.txt $link)</span><br></pre></td></tr></tbody></table></figure><p><code>-k</code> 参数具体作用是忽视证书错误。我踩坑的原因是我的 openssl 是自己编译的。。。没把本地证书链接进去。不止 you-get 报错，wget 也报错。不排除其他原因（网络故障和你懂得），gayhub 上就有一样的 issue <a href="https://github.com/zhangn1985/ykdl/issues/452">b 站解析经常性 403 错误 you-get 没问题・Issue #452・zhangn1985/ykdl</a>。</p></li><li><p>需要替换的地方，包括脚本位置，储存位置，cookies 位置，danmaku2ass.py，rclone 参数，发送到的邮箱。特别是邮箱参数有两个，我一开始只替换了一个，我说怎么只收到一个，大 e 了。</p></li><li><p><strong>(已反馈，作者已修复）</strong>第二个脚本转换弹幕的那一句</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/python3 /root/bili/danmaku2ass.py /var/www/webdav/Bilibili/"$title"/"$fullfilen"</span><br></pre></td></tr></tbody></table></figure><p>我搜了一下，没找到 <code>fullfilen</code> 这个变量。</p><p>得改成</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/python3 /root/bili//danmaku2ass.py "$filename"</span><br></pre></td></tr></tbody></table></figure></li></ol></li><li><p>脚本只能下载运行时放在收藏夹最顶上的视频。所以运行前放在收藏夹最顶上的视频和运行后收藏的视频都能抓到。但不能下载之前收藏的视频，还有收藏了一个视频后必须等他处理完再收藏其他视频，手速太快就只会下载其中一个视频哦。</p></li><li><p>还有就是，you-get 最近还不一定能方便的获取到最高画质了，打个比方，这是正常的</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210108055751.png"></p><p>但这个。。。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210108192531.png"></p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Eee8fypU4AAOFjh.jpg"></p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;原教程： &lt;a href=&quot;https://left.pink/archives/3073&quot;&gt;【完美版】自动下载 B 站收藏视频 – Left’s blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;虽然 Left 人家的实现方法是脚本，有点非典型吧（我用的东西大多是写成二进制或者 docker），不过既然能成功实现功能那就是好东西。不过脚本的固有问题，就是坑多。目前也没找到更好的工具替代，所以排了坑继续用吧。&lt;/p&gt;</summary>
    
    
    
    <category term="Downloadtools" scheme="https://zbttl.github.io/categories/Downloadtools/"/>
    
    
    <category term="bilibili" scheme="https://zbttl.github.io/tags/bilibili/"/>
    
    <category term="linux" scheme="https://zbttl.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>vscode 调试 bash shell 脚本</title>
    <link href="https://zbttl.github.io/2021-01-07-00/"/>
    <id>https://zbttl.github.io/2021-01-07-00/</id>
    <published>2021-01-06T16:00:00.000Z</published>
    <updated>2021-01-20T19:57:36.327Z</updated>
    
    <content type="html"><![CDATA[<p>昨天说到日志的事，光知道报错也不行，得知道错哪里。所以我试着在 ubuntu 上用 vscode 调试 bash 脚本。</p><p>参考文章：<a href="https://liushiming.cn/article/debug-bash-on-macos.html">使用 vscode 调试 bash 脚本</a></p><ol><li><p>打开 vscode，去拓展商店装一个 bash debug。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210108020551.png"></p></li><li><p>将需要调试的脚本放到一个单独的文件夹中，使用文件-&gt;打开文件夹打开带脚本的那个文件夹。</p></li><li><p>在侧边栏选中那个一个虫子加一个播放键那个图标，点击右边的创建 <code>launch.json</code> 按钮</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210108021032.png"></p></li><li><p>找到左侧顶栏播放键旁的下拉菜单，选添加配置</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210108023523.png"></p><p>建议添加 select script from list of sh files 这个（即运行后提示用户选择要调试的脚本）</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210108023750.png"></p></li><li><p>使用下拉菜单选中刚刚我们添加的 select script from list of sh files，点击播放键运行。</p></li><li><p>bash 调试时并不会自动显示已修改变量的值，需要我们自己添加。在左半部分监视窗口中按加号添加表达式，以</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">${变量名}</span><br></pre></td></tr></tbody></table></figure><p>格式来添加，要确认哪个就添加哪个。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210108024834.png"></p></li></ol><p>剩下的步骤和其他语言程序的调试就差不多了，就不谈了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;昨天说到日志的事，光知道报错也不行，得知道错哪里。所以我试着在 ubuntu 上用 vscode 调试 bash 脚本。&lt;/p&gt;
&lt;p&gt;参考文章：&lt;a href=&quot;https://liushiming.cn/article/debug-bash-on-macos.html&quot;&gt;使用 vscode 调试 bash 脚本&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://zbttl.github.io/categories/Linux/"/>
    
    
    <category term="terminal" scheme="https://zbttl.github.io/tags/terminal/"/>
    
    <category term="vscode" scheme="https://zbttl.github.io/tags/vscode/"/>
    
    <category term="bash" scheme="https://zbttl.github.io/tags/bash/"/>
    
  </entry>
  
  <entry>
    <title>mailutils 查看日志/发送邮件</title>
    <link href="https://zbttl.github.io/2021-01-06-00/"/>
    <id>https://zbttl.github.io/2021-01-06-00/</id>
    <published>2021-01-05T16:00:00.000Z</published>
    <updated>2021-01-20T19:55:23.778Z</updated>
    
    <content type="html"><![CDATA[<p>之前写 crontab 提过一个简单的 postfix。后来玩大佬的<a href="https://left.pink/archives/3073">【完美版】自动下载 B 站收藏视频 – Left’s blog</a> 时，没调试好脚本一下子弹一堆错，脚本发的错误又不走 linux 的日志而是发去邮件，光靠简单的 postfix 就不好一条条查看了。得用更高一级的 mailutils。另外脚本本身还有发送邮件提示上传完毕的功能，也得通过 mailutils。</p><p>参考文章：<a href="https://unix.stackexchange.com/questions/26790/what-is-mail-and-how-is-it-navigated">linux - What is “mail”, and how is it navigated? - Unix &amp; Linux Stack Exchange</a></p><ol><li><p>安装</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install mailutils -y</span><br></pre></td></tr></tbody></table></figure></li><li><p>使用</p><p>通过命令 <code>mail</code> 进入邮箱。此时可以看到底下有个问号，那个地方就会显示你的输入的操作符。这个软件所有的操作逻辑都是操作符 + 回车，不输入操作符直接敲回车，软件就会依照所处位置进行对应的操作。为啥强调这个？因为这就是这个软件难用的地方。。。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Xshell_aEyufayMNT.png"></p></li><li><p>看到邮箱列表，最左边有个小箭头，表示选中的邮件。可以直接用回车进入被选中的邮件。但基于操作逻辑，你不能用上下方向键调整箭头指向的邮件。。。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210107223732.png"></p></li><li><p>在相关邮件查看处，按下回车看邮件剩余的部分；如果邮件已结束，则会跳到下一封。也可以按输入 <code>n</code> + 回车直接跳到下一封。</p></li><li><p>要重新显示邮件列表，可以使用 <code>z</code> + 回车，显示未读邮件；邮件列表太多的话，只会显示一部分，可以用 <code>z+</code> 或 <code>z-</code> + 回车，上下翻页；或者用 <code>f*</code> 显示所有邮件。</p></li><li><p>要指定进入某一个邮件，可以直接输入数字 + 回车；要删除所有邮件，输入 <code>d*</code> + 回车。</p></li><li><p>剩下的可以通过输入 <code>help</code> + 回车进入命令界面（虽然我感觉大多数人都看不懂，因为我没发现详细说明在哪）。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210108012406.png"></p></li><li><p>按下 <code>q</code> + 回车后退或直接退出。</p></li><li><p>发送邮件。使用命令</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mail -s "[邮件内容]" -r "[发送人]" [接收方邮箱]</span><br></pre></td></tr></tbody></table></figure><p>发送人最后在接收方会显示为 <code>root&lt;[发送人]@localhost.localdomain&gt;</code></p><p>另外发送邮件的机器可能还要做域名解析之类的（不是很清楚，我用虚拟机 ubuntu 发不出去，在 vps 的 ubuntu 发送就没问题，一般那个脚本应该都在 vps 上用的吧，所以我就没认真探究）。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前写 crontab 提过一个简单的 postfix。后来玩大佬的&lt;a href=&quot;https://left.pink/archives/3073&quot;&gt;【完美版】自动下载 B 站收藏视频 – Left’s blog&lt;/a&gt; 时，没调试好脚本一下子弹一堆错，脚本发的错误又不走 linux 的日志而是发去邮件，光靠简单的 postfix 就不好一条条查看了。得用更高一级的 mailutils。另外脚本本身还有发送邮件提示上传完毕的功能，也得通过 mailutils。&lt;/p&gt;
&lt;p&gt;参考文章：&lt;a href=&quot;https://unix.stackexchange.com/questions/26790/what-is-mail-and-how-is-it-navigated&quot;&gt;linux - What is “mail”, and how is it navigated? - Unix &amp;amp; Linux Stack Exchange&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://zbttl.github.io/categories/Linux/"/>
    
    
    <category term="log" scheme="https://zbttl.github.io/tags/log/"/>
    
    <category term="mailutils" scheme="https://zbttl.github.io/tags/mailutils/"/>
    
  </entry>
  
  <entry>
    <title>cod 战区复活岛活动吐槽</title>
    <link href="https://zbttl.github.io/2021-01-05-00/"/>
    <id>https://zbttl.github.io/2021-01-05-00/</id>
    <published>2021-01-04T16:00:00.000Z</published>
    <updated>2021-01-20T19:55:39.320Z</updated>
    
    <content type="html"><![CDATA[<p>其实前期活动还是蛮好做的，因为有队友活着就能无限复活，甚至比 codm 的只有 5 次复活机会还要夸张。虽说战区这个平衡性属实很烂，满地 m14 + 双持三连发，我觉得小蜜蜂（mac10，记忆中的 cs 1.6 叫法，csgo 里面好像改称吹风机了，小蜜蜂是 mp9）也不错，第一赛季刚出的时候好像玩的人也不少，但现在战区没啥人用。</p><p>但是，和第六赛季中期有码头后期没有一样，等我想肝的时候复活岛就变成迷你大逃杀了。。。用传奇武器和白板武器各杀 30 个的任务我死活完不成，前者难捡，后者干脆直接被吞了。。。原版复活岛地板是能见到白板枪的，改完以后只能捡空投箱的，还得是什么配件都没带的 rpd/ffar/三连发手枪才算白板。好在其中有两把轮椅，但 ffar 什么配件都没带的话开场就 26 发子弹，射速又快可能一个都扫不死，一定程度上还不如 rpd。还有下面这个破坏载具的任务，改版前说是打有人坐过的载具也算，反正改版后这么打就不算了- -</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E4%BD%BF%E5%91%BD%E5%8F%AC%E5%94%A4%C2%AE%EF%BC%9A%E7%8E%B0%E4%BB%A3%E6%88%98%E4%BA%89%C2%AE%20(5).png"></p><p>另外还有动视日常的「翻译错误」问题。打个括号是因为我也不知道究竟是翻译错误还是动视本身就写错了（我认为连玩梗都那么熟练的动视上海因为这个没少给总部背锅）。具体来说：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E4%BD%BF%E5%91%BD%E5%8F%AC%E5%94%A4%C2%AE%EF%BC%9A%E7%8E%B0%E4%BB%A3%E6%88%98%E4%BA%89%C2%AE%20(7).png"></p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E4%BD%BF%E5%91%BD%E5%8F%AC%E5%94%A4%C2%AE%EF%BC%9A%E7%8E%B0%E4%BB%A3%E6%88%98%E4%BA%89%C2%AE%20(6).png"></p><p>都是传奇武器？其实前面那张是白板武器而不是传奇武器。还有一个任务是「在复活岛购买 30 个连杀奖励」，这个我认真核对过简繁英三个版本，都说清楚了是在复活岛。但其实打夺金也能完成（</p><p>唯一让我感到开心点点的是，我这个 kd 不到 1 的典狱长终于吃到两把鸡啦~</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E4%BD%BF%E5%91%BD%E5%8F%AC%E5%94%A4%C2%AE%EF%BC%9A%E7%8E%B0%E4%BB%A3%E6%88%98%E4%BA%89%C2%AE%20(8).png"></p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E4%BD%BF%E5%91%BD%E5%8F%AC%E5%94%A4%C2%AE%EF%BC%9A%E7%8E%B0%E4%BB%A3%E6%88%98%E4%BA%89%C2%AE%20(9).png"></p><p>还是同一个小时内。。。第一把算是和队友苟到最后，第二把那真是就是躺的，队友三个活着就我倒了。。。凌晨三点的俄区，兼顾了延迟不算高和对手不太强的优点。吃完那两把鸡活动时间本来也就到了（昨天凌晨四点），但你们看上面的图，也是传统艺能了。第二天直到晚上 11 点我还能继续肝这个任务，正在我以为是不是动视又像第六赛季一样延期甚至变成永久任务的时候，凌晨两点再次上线的我就看不到这个任务了。。。但复活岛还是留下来，估计当常驻了吧（乌鸦摸鱼到现在新的战区地图还没做出来- -复活岛是旧图了，而且 codm 还比正作先上线）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;其实前期活动还是蛮好做的，因为有队友活着就能无限复活，甚至比 codm 的只有 5 次复活机会还要夸张。虽说战区这个平衡性属实很烂，满地 m14 + 双持三连发，我觉得小蜜蜂（mac10，记忆中的 cs 1.6 叫法，csgo 里面好像改称吹风机了，小蜜蜂是 mp9）也不错，第一赛季刚出的时候好像玩的人也不少，但现在战区没啥人用。&lt;/p&gt;
&lt;p&gt;但是，和第六赛季中期有码头后期没有一样，等我想肝的时候复活岛就变成迷你大逃杀了。。。用传奇武器和白板武器各杀 30 个的任务我死活完不成，前者难捡，后者干脆直接被吞了。。。原版复活岛地板是能见到白板枪的，改完以后只能捡空投箱的，还得是什么配件都没带的 rpd/ffar/三连发手枪才算白板。好在其中有两把轮椅，但 ffar 什么配件都没带的话开场就 26 发子弹，射速又快可能一个都扫不死，一定程度上还不如 rpd。还有下面这个破坏载具的任务，改版前说是打有人坐过的载具也算，反正改版后这么打就不算了- -&lt;/p&gt;</summary>
    
    
    
    <category term="game" scheme="https://zbttl.github.io/categories/game/"/>
    
    
    <category term="cod" scheme="https://zbttl.github.io/tags/cod/"/>
    
    <category term="流水账" scheme="https://zbttl.github.io/tags/%E6%B5%81%E6%B0%B4%E8%B4%A6/"/>
    
  </entry>
  
  <entry>
    <title>路由器跑分 &amp;&amp; 刷机 后日谈 及 几个加速器使用情况收集</title>
    <link href="https://zbttl.github.io/2021-01-02-00/"/>
    <id>https://zbttl.github.io/2021-01-02-00/</id>
    <published>2021-01-01T16:00:00.000Z</published>
    <updated>2021-01-20T19:54:48.678Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>要说新年有啥目标。。。年底这一波，看来又得物色路由器了。或者换个新的加速方法</p></blockquote><p>光速出坑（不是</p><p>前几天说了，开开心心折腾 openwrt 的我遇到给 xbox 加速的极路由 2 崩了，怎么重置都无效，干脆一起刷了 openwrt。虽然极路由原厂系统也是基于 openwrt，但显然腾讯加速器不认这个；再次刷回原厂系统发现进不去插件中心，进去直接显示 503，也没法用手机客户端，甚至自动对时都不行，怀疑是时间不对的我手动对时，没用（此时我还没意识到真正的问题）。最后惊讶的发现极路由还有个 key 机制，不备份一刷就没了，没了就进不去插件中心了。痛心疾首的我不甘心，边想着大不了再买一个边找是不是还有其他办法暴力破 root 或者直接进插件中心，让我下个开发者模式插件就行。</p><h2 id="极路由强制进入插件中心（作废）"><a href="#极路由强制进入插件中心（作废）" class="headerlink" title="极路由强制进入插件中心（作废）"></a>极路由强制进入插件中心（作废）</h2><p>结果真让我找到一个：<a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=205316&amp;ordertype=1">极路由2（hc5761）恢复mac教程无key - 无线路由器硬件改造以及故障维修 - 恩山无线论坛 - Powered by Discuz!</a></p><blockquote><p>本帖最后由 航校门口二楼修 于 2017-6-29 16:53 编辑</p><p>本人刷机的时候没有备份 key 刷第 3 方固件 导致 mac 丢失 刷回官方固件无法安装插件。<br>首先是需要的工具<br>1.【固件编辑器】<br>2. 极路由 2 的恢复固件    链接: <a href="http://pan.baidu.com/s/1ccXyfO">http://pan.baidu.com/s/1ccXyfO</a> 密码: dh35<br>3. 必须要有刷不死，否则你可以忽略这帖子了</p><p>接下来是教程内容：</p><ol><li>用固件编辑器打开恢复固件<br>按 ctrl+h 出现替换文本对话框<br>搜索 000000000000 和搜索 00:00:00:00:00:00 替换你的 mac</li><li>进入 breed 选择固件直接刷机就可以了。和刷普通固件方法一样。（注意不要选编程器固件刷入，刷前先恢复出厂）</li></ol><p>注意：</p><ol><li>不能直接从路由器中进入云插件，会提示 103 错误，估计是 key 丢失了（联系微信客服要寄回去修）</li><li>可以从官方网页进入 极路由云平台 安装插件（我是绑定了极路由账号的，不知道没有绑定的可不可以） </li><li>手机安装 app 管理 路由器 可以用 安装和卸载插件 完美，没有什么错误（前提要绑定过你的极路由账号）</li><li>从官网进入路由器云插件页面的，需要卸载插件后从新安装才能正常使用。</li></ol></blockquote><p>试过手上最新版固件文件找不到 000000000000 ，只能用他给的版本。但也还是 504，而且这回有提示 103 了，我才回忆起刚开始就算进不去也不会提示 103，合着刚刚可能没丢，但也没想着备份，现在再让我刷一个修改版彻底刷丢了。。。</p><p>再去恩山搜索极路由，喔，这回连带加速器加速失败的罪魁祸首都给抖出来了，原来是极路由网站也跑路了，极路由彻底凉了。那也不用再买台新的了，买到了你也开不了开发者模式加不了速。</p><p>那怎么办？又要回到电脑加速时代？</p><p>我想了想，不是还有小米 mini 吗？小米 mini 和极路由 2、newifi mini 配置一样，就可能体积大一点，而且不是用 micro-usb 口充电而是用 3.5 dc 口充电，感觉和 newifi mini 一毛一样啊？度了一下果然，极路由 2 似乎没啥教程能刷成小米的系统，但 newifi mini 可以。</p><h2 id="newifi-mini-刷入小米固件"><a href="#newifi-mini-刷入小米固件" class="headerlink" title="newifi mini 刷入小米固件"></a>newifi mini 刷入小米固件</h2><p>参考文章：</p><ul><li><a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=173247">【新提醒】NEWIFI mini 完美刷小米 mini - 可用 APP 安装插件 - 随意改 SN - 小米无线路由器以及小米无线相关的设备 - 恩山无线论坛 - Powered by Discuz!</a></li><li><a href="https://www.jianshu.com/p/e4e0a5818c3d">小米路由器青春版刷入 Breed 教程 - 简书</a></li><li><a href="http://www.360doc.com/content/16/1202/07/32686726_611203705.shtml">小米路由器 3 开启 SSH 最简单的方法</a></li></ul><ol><li><p>到参考文章 1 中下载小米的编译器固件</p><blockquote><p>小米路由器编程器固件下载地址：链接：<a href="http://pan.baidu.com/s/1dD4QW5j">http://pan.baidu.com/s/1dD4QW5j</a> 密码：78wj</p></blockquote></li><li><p>进入 breed，以防万一备份一次编译器固件再说。然后在固件更新中切换到「编译器固件」，选择下载的小米编译器固件，取消掉自动重启的勾，其他不要动。</p></li><li><p>刷完到固件启动中，切换启动方式为小米 mini。</p></li><li><p>重启，发现怎么灯一个也不亮？但插上网线以后，wan 亮了，虚惊一场。和极路由刷成 openwrt lan 灯报废一样，只不过这次似乎连 2.4g 和 5g 的灯都报废了，就剩 wan 口和 lan 口灯能亮。。。</p></li><li><p>进入管理页面</p><blockquote><p>小米路由器 IP 192.168.31.1 登录密码：<strong>12345678</strong> <em>后期可以自己修改</em></p></blockquote></li><li><p>确定无误尝试用 ssh 连接路由器。虽说文章里说：</p><blockquote><p>固件默认开启 ssh…… 账号 root 密码 admin</p></blockquote><p>但后续我更新了就进不去了，而且刷了 breed 以后，不可以用小米官方的 root 方法（因为小米官方的 root 方法最重要的一部是插入含有特定文件的 u 盘，然后按住 reset 键启动路由器，然后这不就和进入 breed 的方法冲突了么）。所以趁现在是旧版固件，先破一遍。</p></li><li><p>回到管理界面，复制此时管理界面的网址 url，此时的 url 应该是类似这种形状的</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.31.1/cgi-bin/luci/;stok=《你的 stok》/web/home#router</span><br></pre></td></tr></tbody></table></figure><p>删掉 <code>《你的 stok》</code> 以后的部分，留下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.31.1/cgi-bin/luci/;stok=《你的 stok》</span><br></pre></td></tr></tbody></table></figure><p>这一段我称之为 header，放到文本编辑器中待用。</p></li><li><p>在 header 后加上</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/api/xqnetwork/set_wifi_ap?ssid=tianbao&amp;encryption=NONE&amp;enctype=NONE&amp;channel=1%3Bnvram%20set%20ssh%5Fen%3D1%3B%20nvram%20commit</span><br></pre></td></tr></tbody></table></figure><p>访问。访问成功后网页应显示</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“{'msg':'未能连接到指定 WiFi(Probe timeout)','code':1616}”</span><br></pre></td></tr></tbody></table></figure><p>注意这个 code。如果成功应该就显示 1616。我用新版本尝试虽然也能显示一句类似的内容，但 code 不是 1616，最后也没成功。</p><p>之后重复上面的步骤，不过在 header 后添加的内容要经过修改。第二次访问添加：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/api/xqnetwork/set_wifi_ap?ssid=tianbao&amp;encryption=NONE&amp;enctype=NONE&amp;channel=1%3Bsed%20%2Di%20%22%3Ax%3AN%3As%2Fif%20%5C%5B%2E%2A%5C%3B%20then%5Cn%2E%2Areturn%200%5Cn%2E%2Afi%2F%23tb%2F%3Bb%20x%22%20%2Fetc%2Finit.d%2Fdropbear</span><br></pre></td></tr></tbody></table></figure><p>第三次访问添加</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/api/xqnetwork/set_wifi_ap?ssid=tianbao&amp;encryption=NONE&amp;enctype=NONE&amp;channel=1%3B%2Fetc%2Finit.d%2Fdropbear%20start</span><br></pre></td></tr></tbody></table></figure><p>最后一次访问</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/api/xqsystem/set_name_password?oldPwd=《你当前的后台管理密码》&amp;newPwd=《新密码》</span><br></pre></td></tr></tbody></table></figure><p>最后一次访问结果就不是 1616 了，而是 “{‘code’:0}”，表示修改密码成功。</p><p>之后就可以用修改的密码登录 ssh 了，管理界面的密码似乎也会被同步修改。</p><p>但和极路由一样，旧版固件装不上腾讯加速器的插件。还得更新，更新不能在网页端更新（未经验证），得使用手机 app。下载<a href="https://cdn.cnbj1.fds.api.mi-img.com/xiaoqiang/client/xqapp_dev.apk">开发版 app</a>，登录后会自动检测到新固件，更新完可能要手动重启一遍路由器。重启后就能安装了（应该，也说不准，我当时手机就装不上，上次日记吐槽过了）。为防万一（毕竟破解啥的还比较麻烦），固件更新前和更新且所有配置设置好后最好就都做一次编译器固件备份，实测备份以后还原能成功复原所有配置，且功能全部正常。</p></li></ol><h2 id="小米固件加速的劣势，和后续加速方案的寻找"><a href="#小米固件加速的劣势，和后续加速方案的寻找" class="headerlink" title="小米固件加速的劣势，和后续加速方案的寻找"></a>小米固件加速的劣势，和后续加速方案的寻找</h2><p>   正如我上一篇文章所说，小米的固件根本没有单独子网的无线中继功能，只有所谓的 ap 中继：</p><blockquote><p>别急，我发现小米的固件显然有问题，不能 nat 中继（中继的时候 newifi 和我的 ac86u 在同一子网，而总网关也就是 192.168.xxx.1是华硕的路由器），导致如果无线中继手机读取到的是 ac86u。只有通过极路由中继，然后用一根网线接极路由的 wan 和 newifi 的 lan 让 newifi 自己做一个子网出来才行。。。还好当年没有买小米 mini。凑合着用。</p></blockquote><p>   线下离网线近还好，如果离得远或者只能我开手机热点的情况下，我就得带两个路由（其中一个支持无线中继）。</p><p>   把做过一番操作的极路由备份一遍编程器固件，重新刷入 openwrt。此时我又发现一个极路由 2 比较差的地方：5g wifi 的发射强度能在 openwrt 中看到，newifi mini 可以发射出 22 dbm 信噪比的信号，但极路由 2 只能发射 10 dbm。另一点，在 breed 刷完 openwrt 自动重启到能进入管理界面的速度，newifi mini 也远快于极路由 2，前者大概 10s 就能近了，后者要接近一分钟，等无线信号灯亮了我才能进管理界面。</p><p>   但没办法，如果极路由能刷小米的系统就好了。。。让 newifi 做无线中继效果应该好一点，毕竟信号强的多。但做无线中继的 openwrt 和极路由原生系统比，也有个缺陷：极路由的系统中继能够记录多个中继节点，比如家中的 wifi，带出去后在同学家添加他家的 wifi ，回到家还能自动连上我家的 wifi 而不需要再次重新寻找 ssid 输密码；openwrt 记不住，和 xbox 一样一样的，出门后还要删掉那个已经填好的家中的中继的无线节点，再次添加。</p><p>   这时候我想起家里还有个 k2，那玩意 flash 和 rom 更低，相比另外两个砍半；但无线四个天线，cpu 也没缩水，信号反而更强。但是。。。同样是 dc 3.5 接口，newifi mini 就能插在 xbox 上，k2 只能用专用的一体式 12v 1a 适配器（说起来，k2 本身的适配器被学校那个穷凶极恶的老鼠咬断了，但newifi mini 的适配器也是 12v 的，试过通用），无论是插 xbox 上还是插 5v2a 的手机插头，都会导致无限重启，无线信号时断时连。反正就是带不出去。。。刷个 padavan 在家当非单独子网的无线中继好了，加速器识别到家中的华硕主路由器，让华硕来加速，这个就仅仅弥补 xbox 无线拉跨的问题。</p><p>   我之前不是说我还想买个网件来加速么。看起来也不行，网件吃电相比 k2 只能更多不能更少，想接 xbox 口就能吃到足够的供电，做梦吧。</p><p>   还有，无线非 nat 中继也有坑爹的地方：nat 中继你连上路由后会获得中继路由给你发的 ip，你沿着这个 ip 就能摸到中继路由的网关；但 ap 中继，好处是你链接中继路由和直接链接主路由获取到的 ip 是一样的，坏处是你这就不能直接知道中继路由的 ip 是啥了。本来我想着主路由华硕的管理界面应该有所有连接设备的 wifi 吧，排除掉我在用的设备不就是那个中继路由的 ip 喽？结果：</p><p>   <img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210104162929.png"></p><p>   算了。直接用点工具强行 arp 探测好了。下了个 pingtools，抓到了。</p><p>   <img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210104163439.png"></p><p>   那还有其他方案么？还真有，那就是：不用 tx 加速器。</p><p>   uu 就在 10 月份支持 openwrt 加速：<a href="https://router.uu.163.com/app/baike/public/5f963c9304c215e129ca40e8.html">网易UU加速器</a></p><p>   恩山老哥总结的路由器加速设备表：<a href="https://www.right.com.cn/forum/thread-4056285-1-1.html">【　　　】游戏加速器路由器支持情况小统计 - 网友联络、交流（禁止广告，违反封账户） - 恩山无线论坛 - Powered by Discuz!</a></p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210104165940.png"></p><h2 id="总结我用过的一些加速器的优劣（持续更新）"><a href="#总结我用过的一些加速器的优劣（持续更新）" class="headerlink" title="总结我用过的一些加速器的优劣（持续更新）"></a>总结我用过的一些加速器的优劣（持续更新）</h2><h3 id="腾讯加速器"><a href="#腾讯加速器" class="headerlink" title="腾讯加速器"></a>腾讯加速器</h3><ul><li>便宜（14 元/月）</li><li>曾经是唯一支持用 pc 管理路由加速的加速器（下载 6 月左右的旧版 pc 客户端也许还可用）</li><li>不限设备绑定，不限单路由下加速设备数量</li><li>但路由加速 bug 频发，最主要的 bug 就是加速一段时间，加速的设备重启或者待机唤醒后就会断网。通过重启路由，或者通过 ssh 进入路由器，用 <code>netstat -plun</code> 检索 tx 加速进程（名为 pmplugin），kill 后重新加速即可。</li><li>基本不支持下载加速。实测 cod16 和微软模拟飞行下载加速都很慢，烂橘子效果尚可。</li><li>手机端不支持 xbox 云游戏加速。</li><li>支持设备最少。</li></ul><h3 id="uu-加速器"><a href="#uu-加速器" class="headerlink" title="uu 加速器"></a>uu 加速器</h3><ul><li>贵（30 元/月）</li><li>限制一个设备绑定，且该设备下只能同时加速两个设备。</li><li>下载加速效果不错。</li><li>支持 xbox 云游戏加速。</li><li>openwrt 路由插件不能用手机 app 直接安装。</li><li> 没有 tx 那样的 bug。</li></ul><h3 id="灵缇加速器"><a href="#灵缇加速器" class="headerlink" title="灵缇加速器"></a>灵缇加速器</h3><ul><li>价格居中（16 元/月）</li><li>不支持 xbox 云游戏加速。</li><li>支持 padavan。</li><li>支持 openwrt 手机安装和 padavan。但 openwrt 路由器需要提前安装 kmod-tun 功能（目前如果是自己编译的 openwrt，直接安装源上的 kmod-tun 会提示你当前依赖版本太低，但其实 kmod-tun 功能已经作为模块编译了，去编译目录找一下安装就行，实测成功）。</li><li>也没有 tx 那样的 bug。</li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;要说新年有啥目标。。。年底这一波，看来又得物色路由器了。或者换个新的加速方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;光速出坑（不是&lt;/p&gt;</summary>
    
    
    
    <category term="game" scheme="https://zbttl.github.io/categories/game/"/>
    
    
    <category term="游戏加速" scheme="https://zbttl.github.io/tags/%E6%B8%B8%E6%88%8F%E5%8A%A0%E9%80%9F/"/>
    
    <category term="openwrt" scheme="https://zbttl.github.io/tags/openwrt/"/>
    
    <category term="持续更新" scheme="https://zbttl.github.io/tags/%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
    
  </entry>
  
  <entry>
    <title>2020，这一年，xbox 新玩家的一年</title>
    <link href="https://zbttl.github.io/2020-12-31-00/"/>
    <id>https://zbttl.github.io/2020-12-31-00/</id>
    <published>2020-12-30T16:00:00.000Z</published>
    <updated>2021-01-20T19:55:31.680Z</updated>
    
    <content type="html"><![CDATA[<p>今年对世界是艰难的一年，不过对我这个宅来说。。。可能算是「波澜壮阔」的一年（用词不当警告）。</p><p>该总结的事情很多，我毕业了，而且后续应该不打算再读研究生啥的（数学太烂），放下了陪伴我接近 20 年的学生身份；毕业这一年我也没认真找工作，毕竟计算机这边我还有好多东西想玩清楚；今年因为种种原因在家里的时间是我这二十几年来最长的，也写了大学四年来最多的日记，最后我鼓起勇气开了个博客慢慢把日记放上来。诸如此类等等等。</p><p>但如果让我选今年对我影响最大的东西，那应该还是这台 xbox one S。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20201231_155252913.jpg"></p><p>这台东西是去年双十二买的，当时的背景是我姨妈给了我一张 5000 大洋的购物卡让我换掉大学期间的这台电脑，当时我妈还想着要是钱不够还可以给我填点，毕竟大学用的暗影 2 是 6000 元级的，我妈以为毕业后预算可能还要再高点。但我大学期间感受最深的是笔记本的便携性真的很重要。。。。后续我的暗影 2 都待在家里插着显示器当台式机用，我去年买了个更大更高的桌子放显示器，而那个更矮更小的桌子就插在大桌子下面，笔记本就合盖放在小桌子上（为了散热我还会垫几个瓶盖在 b 和 c 面之间），然后接上鼠标键盘 hub hdmi 啥的。除非是要线下打游戏才会扛出去，如果是有编程任务，我宁愿带我高中买的 500 大洋的 windows 平板出去，毕竟大学的课业编程任务并不需要很好的硬件。就算用得着我也选择开个远程，毕竟要把暗影 2 带过来要拔一大堆线，回来还要重新把小桌子拉出来，把机子摆上去插好线开好机再塞回去（</p><p>所以我当时就打定主意买轻薄本了。既然是买轻薄本，当时市场上最棒的选择就是小新 pro13，那玩意才 4499。虽然最后被京东坑了一笔，我看双十二之前就有付 200 定金然后双十二发货的事了，结果双十二的时候尾款不可以用礼品卡付，后面放弃定金在当天买照样 4499 立刻发货。。。。</p><p>那剩下的 500（被坑了一笔只剩 300 了），想了想我 10 月份才买了 3 个月的 xgp 试用，看着主机库比 pc 库多一大堆游戏；我那时候还蛮想继续玩地平线 4，但对每次开游戏都要关一堆程序甚至重启一遍电脑否则就要吃掉帧警告这件事感到疲倦，有了 xbox 自然就没这个问题了；还有 8 月份趁极限竞速 6 下架 34 大洋薅的全 dlc 包（我当时是考虑到以后可能买 xbox，做梦都没有想到年底就能买，更没有想到有了 xbox 这一年这游戏我也没开几次）。还有，我 18 年买的 ns 分期一年，到 12 月刚好还完，xbox one S 纯数字版那时候 1k3 扣掉 300 还有 1000，六期还完每期也就 200 不到，在我每月接受范围之内。</p><p>然后就是日常的喜新厌旧流程。。。买到 xbox 的这一年我的日常游戏平台从 ns 基本转向 xbox，最常玩的两个游戏，从年初到年中的 cod15 多人 + 僵尸；三月份开始持续一整年的 cod16。cod15 僵尸较 cod12 僵尸难度降低不少，还有机器人队友，以我的实力能打到奇迹武器出来了；16 的季票制毁誉参半，但 yysy 托季票的福我有动力肝了，枪几乎都满级了，还有十月份那一波穿墙 bug 说起来是很讨人嫌但玩着那是真香啊。。。话说回来这两个游戏我都有 pc 版还都是买的首发，但因为 pc 的配置问题以及 pc 端没有同屏没人陪我玩，完全没动力玩。特别是 cod 16 我买的首发却错过了前三个赛季这点。。。虽然都玩的挺爽，但值得吐槽的地方也不少：cod15 的锁 ping，才出了一年我就匹配不到吃鸡了，甚至想匹配到多人都要挑好时间（凌晨有人几率降低）选好节点（亚洲，美国匹配不到）；16 的阴间图，后期的匹配崩坏和最后一个赛季不得善终，作为一款里程碑式的游戏落得这样一个下场，令人唏嘘。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201231175932.png"></p><p>除了最主要的这两个，中间还穿插着玩了挺多游戏：年初的地平线 4，年中定了三年 xgp 后玩的皇牌空战 7，趁出 xgp 库前玩的鬼泣 5，dlc 都入了库的命运 2；ea play 进 xgp 后玩的战地 4，还有早就买了但最后才玩的 cod14，没钱买疯狂打试玩的 cod17 等等。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201231173039.png"></p><p>（没想到只打人机的我，dota2 还是游戏时间最长的游戏，不过起码有 50 小时左右的时长我是挂机挂出来的，那时候用人机实验一天究竟能打几只斧王，搞了满地图的斧王哈哈哈；战地 1 实打实的肝出了所有枪，cod16 时间应该更多，毕竟我在战网上也有玩，gog 统计不到；鬼泣 5 和皇牌空战 7 一个起码 10 小时一个起码 50 小时，应该是因为我玩的时候不想联网的原因，离线状态下的游戏时间没有算进去）</p><p>线下同屏部分，主机上的大作同屏能力完爆 pc，cod 每一作都能同屏，僵尸模式离线状态下甚至能四人同屏，pc 上只有 12 勉强能双人同屏，而且还只能访客模式同屏；微软这边的两个重量级独占作品，光环和战争机器，除了光环 5 那是作作都能同屏过剧情，战争机器 5 甚至能三人同屏（343 你看看人家，鬼面兽警告）；borderland 在 pc 上同屏你得有配置运行几个游戏，在主机上同时开四个号完全没有压力，遗憾的是 borderland 本世代作品没有中文，因为我在 pc 端玩中文比较熟了就切成两个朋友比较熟悉的日文来玩；borderland3 开始有中文但在 xbox one 上只能最多双人，但在已经到来的次时代机型上可以四人，不过 3 目前还是贵，等一个骨折，或者入xgp（ 今年的线下部分，因为疫情的原因我家附近的两个初中同学并不用回武汉和福建，趁年初把 borderland 2 刷到三周目，把战争机器系列和光环系列都通了。而偶尔和我高中同学进行的线下聚会，最令人惊喜的是的是细胞分裂黑名单，有中文，有老司机带，玩起来节目效果爆炸 2333。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201231190158.png"></p><p>（单机通关列表，刚好一页）</p><p>当然，作为「坑王」，这一年有不少挖坑入坑出坑回坑的瞬间，而且有不少时候让人感叹「好险没掉进去」：</p><p>年初几天趁 xgp 还在，趁金会员价买了 cod14、15，学会了跨巴西区买便宜的 cod，但那时还不知道怎么用手上的信用卡，只能在淘宝买礼品卡。cod16 最后三月份我在港服买的，那时候巴西区比港区便宜接近 50 元，但 cod16 那时候大概 160 雷亚尔，只有 50、100、200 雷亚尔额度的礼品卡，200 雷亚尔大概 320 左右，手上现金不够（穷啊）。1 月底的时候我奶奶住院我要去看着，下了战地 1 和战地 5 进小新 pro13，战地 1 降点解析度居然还能玩（amd yes！），战地 5 就不太行，但更关键的是我确定了雷神加速器完全不彳亍，uu 又太贵（而且两年前我玩 cod12 出现频繁断线问题最后确认是 uu 的锅，换成海豚就没问题，所以我一直对 uu 印象不太好），最后用网络条件比较需求苛刻的 cod16 大战场验证了一下没问题（有问题就会频繁丢包卡顿，雷神就这样），趁 1 月特惠以一年价格上车了腾讯加速器一年半会员（那时候主机加速还是免费的）。</p><p>虽然带上一年前买的手柄和买 xbox one 送的手柄我手上有两个手柄，但经常晚上和我线下的两个初中同学加起来得三个手柄，就在月中暂时找我高中同学借了一个。借完了以后试了试四人同屏，发现 cod15 本身可以线下四人，可连接第三个手柄了以后花式卡机闪退。去 reddit 转了一圈发现大把人出这个问题，遂到微软商店给差评。但到现在都还没有修。所以线下两人以上的大作只剩下 borderland2 和后来买的 cod12（gears5 在月初就打通了）。</p><p>一月底我把机器带到我同学家的时候开机提示进入救援模式，没法复原，最后只能初始化。还好游戏没丢，初始化完不用重下。后面我才知道 xbox 默认关机键其实是待机，正式的关机方法是在菜单那边找完全关机这个选项。待机的时候断点可能就会进救援模式出不来只能初始化，后面我就注意了。要是这事发生在锁区后那就鬼故事了。。。</p><p>二三月份，大号 xgp 到期，我尝试用小号续了一份三个月的 xgp，登录小号后设置机子为常用主机（也就是常说的 home），成功让大号也能正常网战玩 xgp 游戏（唯一不太行的地方就是领金会员免费游戏，只能领在小号上）。不过此时国服还没彻底锁死，我发现国服的网络似乎比外服好，还经常用 u 盘大法切回去，如果下游戏或者领会免就又切回来。</p><p>三月底我的手柄 rt 键频繁按键时发出呲呲呲的声音，我想着反正买的国行找京东算账，结果京东说南宁有维修点叫我过去修。我想了想等我的两个同学会学校再说吧，修的久了就没法线下了。结果到最后人也没回学校，手柄自己不响了，到了过保都没修。。。但我闲的无聊和我爸去看了一眼维修点，也不远，但居然和我高中同学修微星笔记本是同一个维修点（关键是他的笔记本没修好，最后还出了大问题），这就。。。。微软爸爸这样真的好么？</p><p>四月，borderland 出 xgp 库，不过那时我们才打到二周目，我想了想趁特价买下来吧，这回跑到阿根廷区去买。阿根廷锁区，这次得从网上找代理，拿着码进 windows 商店一个个换可用代理知道把码换成功为止。不过 borderland 2 的豪华版缺一个莉莉斯 dlc（去年 8 月免费送过），更要命的是我关注了一年，愣是没打折。。。</p><p>光环基本通关，准备玩战争机器，发现 2 和 3 还只有 xbox 360 版。但 3 在商店里找不到？研究了一圈发现只有美区有，而且只有繁体下才显示中文。另外玩这些个单机的时候发现连着网不开加速器等 n 久还可能进不去游戏，折腾了半天断网秒进。</p><p>五月份，小号的 xgp 也到期了。这回我不想又开个新小号了，xgp 游戏我也不常玩，常玩的 cod 主要是网战需要金会员，尝试用国服金会员顶着，没问题。但 cod16 阴了我一手：cod16 新赛季要玩多人，需要下两个数据包。国服商店找不到这两个数据包，切到外服没有金会员根本进不去在线模式，直接在商店里又找不到这两个数据包，必须从在线模式的设置里跳转到商店才能看见。固然可以买 14 天的金会员然后下这两个包，可再下个赛季怎么办？我看了看时间，这台 xbox 分六期，下个月还完；大号 xgp 过期超过 3 个月了。于是我果断淘宝三年金会员 627，进商店一看果然有 10 港币活动，3 年金会员打满留在外区。没成想还没 10 天 xbox 国服冬窗事发，留在国区的跑不掉了，好险！</p><p>同样在五月份，毕业论文答辩的前一天，发生了神界原罪羊毛事件。详情我单独写成了一篇文章，一个月后我用阿根廷区换点卡同样的方法薅到羊毛。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201231235143.png"></p><p>五月买完 xgpu 开始皇牌空战和腐烂国度，发现这两个玩意一个只能在繁体显示中文一个只能在简体显示中文。皇牌空战难度是有点高，打剧情废了我半天事，而且我在战地 1 里开飞机看大佬都不用追逐视角而用固定视角，想着什么时候学一下，结果玩完皇牌空战好吧彻底改不过来了。打剧情我全程断网，估计就因为这个没算我时间（不过连上网倒是把成就都补给我了）。</p><p>六月份腾讯宣布主机加速收费和增加 svip，原有的 vip 自动升级成 svip，svip 一年要 240 多，好耶， 白嫖（不过半年国区没发现 svip 有啥用，该速度起不来的游戏还是起不来，而且自动选择节点每次都给我选择 vip 而不是 svip 节点）。但主机加速收费这个就很讨厌了，我大学同学来我家玩，cod 战区不能同屏，但我不是 pc 有一份 xbox 有一份么，cod 16 开始能跨平台，所以我只要开小新 pro13 来加速就可以了。收费后，虽然我有 svip 但一个账号不可以两地登。不过正好我初中同学剩下一台 ac86u，我试了一下，能用路由加速功能，600 大洋分 6 期我就抬走了。不过用了一段时间，有 bug，开了加速过了一两天主机就连不上网了，得重启路由，有点烦。另外，我同学剩下 ac86u 的原因就是他家换 ax88u 了，ax88u 并不在下面的表里面，但我试过也可以加速，到他家玩就不需要再多带一台电脑了。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201231232143.png"></p><p>七月份。那出远门线下呢？华硕网件太贵，从小米和极路由挑。小米 1 小米 2 带硬盘的，二手也很贵；极路由 3 之后体积又大性能又差，1s 没有 5g；最后剩下极路由 2 和小米 mini，极路由 2 用的是 micro-usb 供电而不是 3.5mm 线，用不着为了他再找一个电源插头，插在 xbox 上就好了。拿回来解绑原来的账号，开启 root，更新固件，顺利启用。后面偶然发现了更意外的事情：我的路由器放在房间里面，而 xbox 放在客厅。cod16 大战场开了加速器还是偶尔丢包，我以为是 tx 的问题，直到我在国贸开开手机热点给极路由 2 然后因为网络情况复杂不得已只能用网线把 xbox 和极路由连起来，发现不怎么丢包了。回到家我尝试也用无线中继，结论相同。原来 xbox 的无线性能这么烂，还不如 40 大洋的二手路由器。。。。</p><p>八月份。我 19 年 1 月到的工行 visa 卡，吐槽了一年半，每次付款都告诉我余额不足。结果这时我突然会用了，原来要去结售汇先换成对应货币（如果没有对应货币就先换成美元，到时候会自动转的）。怎么发现的？给我的俄罗斯服务器续费的时候，刚买的时候可以用支付宝，从 8 月开始不能用了，也没有 visa，我硬着头皮本来说不能续费就算了，结果用信用卡就真给我续上了。能用 visa 的话我就不用买礼品卡了。靠这张信用卡我还完成了 xbox 360 转区 （转区转了半天失败，结果一觉醒来告诉我转成功了），再过一个月左右，微软就停售礼品卡了。。。阿根廷区成为绝唱，巴西区礼品卡大幅涨价。。。</p><p>八月底，听说鬼泣 5 出库，还没打通关的我火速断网，时间往后倒，成功的在出库后十来天打通关了。这时我发现，没断网的话，打到一半关机不关游戏，唤醒机器有一定可能从游戏中退出；但不断网绝对没事，唤醒后你关机前在那关机后还在那。另外鬼泣这个只有亚洲版有中文，亚洲版不打折，后续还出究极版不知道能不能继承记录的操作，也算是惊到我了，真有你的卡婊 ~ 后面我连上网，鬼泣五下角的 xgpu 标志光速消失，这时就算我再断网时间往回调，也进不去了。</p><p>不过后续我试用了三天 uu，这三天没出像 tx 一样重启断网的 bug，唤醒机器从游戏中退出的问题也没见过，看起来 uu 的路由加速技术肯定能甩 tx 几条街。不过 uu 一台路由只能加速两个设备，而绑定后你想在另一台路由加速还要先手动解绑。最后一天用 uu 的时候还出现了游戏闪退然后重新打开游戏打不开的问题，重启路由没用但重启 xbox 有用，就不知道是网易的锅还是微软的锅了。</p><p>年尾。ea-play 加入 xgpu。然后就是令人爆笑的战地 4 豪华版不在 xgpu 里的「真相」。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/2020-12-31_23-54-21.PNG"></p><p>还有昨天发生的事，极路由的官网彻底炸了，以为加速不成功是因为机子坏了的我盲目刷机导致 key 丢失，想再买一台极路由 2 结果上了恩山发现原来是这事。再后面发现大学毕业宿舍剩下的 newifi 能刷小米 mini 固件，虽然是 3.5 dc 口用的 12V 1A 电源，但我尝试用高中便携风扇的 dc 转 usb 口给 newifi 和 xbox 接上，能亮。经过一段复杂的折腾（root+更新），发现 android 端的 app 加速不上，显示 ssh 未开启。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Screenshot_20201231-053505.png"></p><p>快死心了，换上 ios 再试，结果装上了。。。意思是可以带出去了？别急，我发现小米的固件显然有问题，不能 nat 中继（中继的时候 newifi 和我的 ac86u 在同一子网，而总网关也就是 192.168.xxx.1是华硕的路由器），导致如果无线中继手机读取到的是 ac86u。只有通过极路由中继，然后用一根网线接极路由的 wan 和 newifi 的 lan 让 newifi 自己做一个子网出来才行。。。还好当年没有买小米 mini。凑合着用。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/2020-12-31%2005.34.47.png"></p><p>总结：都什么乱七八糟的坑，印度程序员出来挨打！</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/HupuBBS_201231081453-1242822577.png"></p><p>要说新年有啥目标。。。年底这一波，看来又得物色路由器了。或者换个新的加速方法？去年就喊着买 xss 和便携显示器的我，现在都还没买。等我找到工作，就把 xss 便携显示器和 cod17 都买了（怒）</p><p>就这样吧。祝各位看官新年快乐！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今年对世界是艰难的一年，不过对我这个宅来说。。。可能算是「波澜壮阔」的一年（用词不当警告）。&lt;/p&gt;
&lt;p&gt;该总结的事情很多，我毕业了，而且后续应该不打算再读研究生啥的（数学太烂），放下了陪伴我接近 20 年的学生身份；毕业这一年我也没认真找工作，毕竟计算机这边我还有好多东西想玩清楚；今年因为种种原因在家里的时间是我这二十几年来最长的，也写了大学四年来最多的日记，最后我鼓起勇气开了个博客慢慢把日记放上来。诸如此类等等等。&lt;/p&gt;</summary>
    
    
    
    <category term="game" scheme="https://zbttl.github.io/categories/game/"/>
    
    
    <category term="流水账" scheme="https://zbttl.github.io/tags/%E6%B5%81%E6%B0%B4%E8%B4%A6/"/>
    
    <category term="xbox" scheme="https://zbttl.github.io/tags/xbox/"/>
    
  </entry>
  
  <entry>
    <title>吐槽 crontab</title>
    <link href="https://zbttl.github.io/2020-12-28-00/"/>
    <id>https://zbttl.github.io/2020-12-28-00/</id>
    <published>2020-12-27T16:00:00.000Z</published>
    <updated>2021-01-20T16:48:24.446Z</updated>
    
    <content type="html"><![CDATA[<p>干嘛写这玩意呢。。。因为这玩意坑不少。</p><p>作为 linux 的计划任务程序，使用方法大家都很清楚：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></tbody></table></figure><p>然后会用不知道什么程序打开 cron 的配置文件。对我没用错词汇，就是不知道什么程序，我见过用 vim 的、用 nano 的、用一个不知道叫啥名字但快捷键很像 tmux 的（可能是 emcas？），有的系统第一次用 crontab 的时候会让你选用哪种编辑器，但有的完全不会。。。</p><p>然后敲命令进去</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * * * [command]</span><br></pre></td></tr></tbody></table></figure><p>那几个星号：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*    *    *    *    *</span><br><span class="line">-    -    -    -    -</span><br><span class="line">|    |    |    |    |</span><br><span class="line">|    |    |    |    +----- 星期中星期几 (0 - 7) (星期天 为0)</span><br><span class="line">|    |    |    +---------- 月份 (1 - 12) </span><br><span class="line">|    |    +--------------- 一个月中的第几天 (1 - 31)</span><br><span class="line">|    +-------------------- 小时 (0 - 23)</span><br><span class="line">+------------------------- 分钟 (0 - 59)</span><br></pre></td></tr></tbody></table></figure><p>另外可以用 <code>*/n</code> 这种格式，表示时间刻度内执行 n 次。<code>*</code> 既可以填入单个数字表示某一时间，也可以填入类似 <code>1-9</code> 这种形式，表示时间段。</p><p>坑来了：后面的命令，有几个值得注意的地方：</p><ol><li><p>运行时涉及的所有文件和命令需要绝对路径。</p><p>比如用于 hostloc 一键签到的 php 脚本：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php loc.php</span><br></pre></td></tr></tbody></table></figure><p>在 crontab 中就得这么写：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 1 * * * /usr/bin/php /root/loc.php &gt;&gt;/var/log/hostloc.log</span><br></pre></td></tr></tbody></table></figure></li><li><p>“命令里面夹命令”，需要用 <code>`</code> 号替换括号；如果命令里面有 <code>%</code> 号，需要在前面用 <code>\</code> 转义。</p><p>比如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 0 1 * * /root/traffic.sh &gt; /root/$(date +%y%m%d).txt&amp;&amp;/root/traffic.sh reset</span><br></pre></td></tr></tbody></table></figure><p>就需要改成</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 0 1 * * /root/traffic.sh &gt; /root/`date "+\%y\%m\%d"`.txt&amp;&amp;/root/traffic.sh reset</span><br></pre></td></tr></tbody></table></figure></li><li><p>如果运行出错，crontab 不会主动报错，你可以查看一下 crontab 的 service 日志（参考<a href="https://unix.stackexchange.com/questions/212355/where-is-my-logfile-of-crontab">cron - Where is my logfile of crontab? - Unix &amp; Linux Stack Exchange</a>）：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">journalctl -u cron.service</span><br><span class="line">#或者用下面两个</span><br><span class="line">#journalctl _COMM=cron</span><br><span class="line">#journalctl _COMM=cron --since="date" --until="date"</span><br></pre></td></tr></tbody></table></figure><p>或者查看它本身导出的日志文件（不同的 linux 发行版路径可能不一样，以下这个适用于 debian）：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /var/log/syslog</span><br></pre></td></tr></tbody></table></figure><p>但这样看到的错误日志其实不够详细。仔细观察的话，出错的日志后面有这么一条：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(CRON) info (No MTA installed, discarding output)</span><br></pre></td></tr></tbody></table></figure><p>意思是 cron 想把错误发到系统内的邮件管理器，但你没装。</p><p>那就装一个好了：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install postfix</span><br><span class="line">service postfix start</span><br></pre></td></tr></tbody></table></figure><p>后续出错的时候就可以通过</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /var/spool/mail/root</span><br></pre></td></tr></tbody></table></figure><p>查看错误的详细情况。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;干嘛写这玩意呢。。。因为这玩意坑不少。&lt;/p&gt;
&lt;p&gt;作为 linux 的计划任务程序，使用方法大家都很清楚：&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://zbttl.github.io/categories/Linux/"/>
    
    
    <category term="log" scheme="https://zbttl.github.io/tags/log/"/>
    
    <category term="crontab" scheme="https://zbttl.github.io/tags/crontab/"/>
    
  </entry>
  
  <entry>
    <title>玩一下 FFmpeg</title>
    <link href="https://zbttl.github.io/2020-12-23-00/"/>
    <id>https://zbttl.github.io/2020-12-23-00/</id>
    <published>2020-12-22T16:00:00.000Z</published>
    <updated>2021-01-20T19:53:31.941Z</updated>
    
    <content type="html"><![CDATA[<h1 id="玩一下-FFmpeg"><a href="#玩一下-FFmpeg" class="headerlink" title="玩一下 FFmpeg"></a>玩一下 FFmpeg</h1><p>因为最近有两件事情，所以要研究一下这玩意：把一整个 capoo 动画分割出几个小片段然后做成表情包（capoo 好萌），还有就是 vps 上下的动画，直接用 filebroswer 播不了，需要稍微转一下码才行。</p><p>总参数参考：<a href="https://ffmpeg.org/ffmpeg.html">ffmpeg Documentation</a></p><h2 id="视频精确分割"><a href="#视频精确分割" class="headerlink" title="视频精确分割"></a>视频精确分割</h2><p>关键词：帧内编码（intra）</p><p>参考文章：<a href="https://www.jianshu.com/p/cf1e61eb6fc8">FFMPEG 视频分割和合并</a></p><p>不过这篇文章没有谈一个参数，to，to 是裁剪到时间节点而 t 是裁剪自开始以来的一段时间长度，这里为了方便我很明显是要用 to 的。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -ss 00:00.00 -to 00:00.01 -i capoo.mp4 -vcodec copy -acodec copy "C:\Users\zbttl\OneDrive - go.Stockton.edu\Desktop\capoo\ capoo1.mp4"</span><br></pre></td></tr></tbody></table></figure><p>不过发到 telegram 上的 gif 的 mp4 不能带音频，所以索性再改一下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -ss 00:00.00 -to 00:00.01 -i capoo.mp4 -vcodec copy -an "C:\Users\zbttl\OneDrive - go.Stockton.edu\Desktop\capoo\ capoo1.mp4"</span><br></pre></td></tr></tbody></table></figure><p>顺便附带一个文件夹内批量转换为无声 mp4 的例子：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for i in *.mp4; do ffmpeg -i $i -vcodec copy -an "/home/zbttl/capoo/${i%%.*}.mp4";done</span><br></pre></td></tr></tbody></table></figure><p>参数里可以加上 <code>-avoid_negative_ts</code> 移动关键帧使其与要剪辑的位置相符。</p><h3 id="使用-gui（不成熟）"><a href="#使用-gui（不成熟）" class="headerlink" title="使用 gui（不成熟）"></a>使用 gui（不成熟）</h3><p>也可以使用 gui 工具 <a href="https://github.com/mifi/lossless-cut">LosslessCut</a>。gui 可以通过视频中的 Intra（I 帧，关键帧）识别转场，操作上便捷许多。不过很多视频由于参数原因（I 帧过多会增大视频体积），所以 I 帧和真正的转场不一定完全符合，可能还要通过 ffmpeg 转一下码。</p><p>参考：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/28008666">FFmpeg精准时间切割视频文件</a></li><li><a href="https://zhuanlan.zhihu.com/p/85895180">FFmpeg视频抽帧那些事</a></li><li><a href="%5Bhttps://weichao.io/2018/05/27/FFmpeg-%E8%BD%AF%E7%BC%96%E7%A0%81-H264%E3%80%81H265/%5D(https://weichao.io/2018/05/27/FFmpeg-%E8%BD%AF%E7%BC%96%E7%A0%81-H264%E3%80%81H265/)">FFmpeg 软编码 H264、H265</a></li><li><a href="https://zhuanlan.zhihu.com/p/36109778">ffmpeg和H264视频的编解码</a></li></ul><p>加入以下参数：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-keyint_min #Intra最小间隔时间，可设置为 0。</span><br><span class="line">-g #group of picture，Intra最大间隔时间。设置为 1 就全部都是关键帧。全部设置为关键帧有助于手动切割。</span><br><span class="line">-sc_threshold #(scenecut)设置场景更改检测的阈值。可设置为 0-无限。</span><br></pre></td></tr></tbody></table></figure><p>比较有用的就是这三个参数。我还实验了 <code>-profile</code>、<code>-preset</code> 两个参数。<code>profile</code> 在文档中有 <code>extended</code> 这个选项可能对关键帧切换有帮助，但实际使用起来选项无法使用；<code>preset</code> 只要不设置成比较快的那些选项，使用 <code>slow</code> 和什么都不用出来的 I 帧数量和分布没有区别。</p><p>ffmpeg 使用非 copy 模式转码会显示 I/P/B 帧的数量和占比。也可以使用 <code>elecard streameye tools</code> 查看 I/P/B 的数量和分布（但要花钱，破解找不到，要不就只能试用）。</p><p>转码的时候也不要加入 <code>-c:a copy</code> 参数，可能导致时间轴误差。</p><p>例子：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -y -i '.\capoo.mp4'  -preset slow -keyint_min 1 -sc_threshold 60 './capoo_1.mp4'</span><br></pre></td></tr></tbody></table></figure><p>再用得到的新视频文件在 gui 内裁剪。</p><p>然而实际使用时发现在每个关键帧处还要往上倒三帧否则就会包含下个场景的画面。原因是这个 gui 命令里面用了 <code>-c copy</code> 参数。。。目前还无解。而且除了这个，有时候导出的某些视频还会出现只剪了后面没剪前面的情况，貌似是因为放在桌面，桌面的路径里面有中文（onedrive 的锅）。。。。</p><p>还有其他的 gui 工具，比如 <a href="https://sourceforge.net/projects/ffmpegyag/">ffmpegyag</a>。但这就没有根据 Intra 帧在时间轴上快捷指向的功能了（虽然还是能识别处 I/P/B 帧）。而且不能直接使用（点 OK 就卡住），生成脚本后运行倒是没问题。</p><h3 id="配合-opencv"><a href="#配合-opencv" class="headerlink" title="配合 opencv"></a>配合 opencv</h3><p>门槛有点高。给两篇参考文章，先挖个坑。</p><ul><li><a href="https://www.cnblogs.com/dskit/p/10003722.html">基于opencv+ffmpeg的镜头分割</a></li><li><a href="https://yuyujunjun.github.io/segmentation-keyframe-extraction">视频镜头分割和关键帧提取</a></li></ul><h2 id="vps-动画转码"><a href="#vps-动画转码" class="headerlink" title="vps 动画转码"></a>vps 动画转码</h2><p>为什么播不了？我想估计是位深太大了，使用 ffmpeg x264 默认参数转一下就好了。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg  -i "[Sakurato.sub][Nande Koko ni Sensei ga!][01][GB][1080P].mp4" -vcodec libx264 -acodec copy  test.mp4</span><br></pre></td></tr></tbody></table></figure><p>不过转出来感觉略微有点不太对，windows potplayer 缩略图显示不出东西来。。。原因不明，排除了 10bit 不兼容原因（原案是 10bit，可显示）和 hevc（h265）与 avc（h264）原因（用哪个编码器都转不出来）。</p><p>另外，x264 编译器还有很多奇奇怪怪的参数，参考这里：<a href="https://trac.ffmpeg.org/wiki/Encode/H.264">H.264 Video Encoding Guide</a></p><h3 id="显卡加速"><a href="#显卡加速" class="headerlink" title="显卡加速"></a>显卡加速</h3><p>参考文章：<a href="https://www.jianshu.com/p/59da3d350488">使用GPU硬件加速FFmpeg视频转码</a></p><p>ffmpeg 还支持显卡加速<del>，不过嘛。。。参数很麻烦，没什么可靠的参考（因为 ffmpeg 的参数经常有顺序限制的，上面那篇文章的参考我试了一下，失败），下面这个，我转起来速度比较快（不过也有是用 8bit 的原因），而且 potplayer 识别了缩略图，另外显卡也工作了（不过占用只有百分之8。。。。）</del>（未加 <code>-hwaccel cuda</code>，虽然是硬解但仍然经过内存。但下面的命令仅硬解码，且仅 h265）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg  -hwaccel cuda  -c:v h265_cuvid -i "[Sakurato.sub][Nande Koko ni Sensei ga!][01][GB][1080P].mp4" -pix_fmt yuv420p test.mp4</span><br></pre></td></tr></tbody></table></figure><p>参考：<a href="https://developer.nvidia.com/zh-cn/blog/nvidia-ffmpeg-transcoding-guide/">NVIDIA FFmpeg 转码指南</a></p><p>拿来转部落战视频用的，因为 ipad 录的视频码率高，而且带了旋转属性（很诡异，是写在 ffmpeg 参数里面的，也就是说对于支持的播放器打开后会自动转正变成横屏，但其实视频硬属性是竖着的），因为有这个自动旋转所以网上写的大部分硬件转码无法使用（不支持关掉自动旋转并摆正视频），但是我试了一个新的，还凑合，而且 gpu 打满。原理是硬解硬编码，下面的方框部分是指定使用最广泛的 h264 硬解，记得如果原来就是 h265 视频需要把这个参数换掉（<code>hevc_cuvid</code>）或关掉。硬编码的部分也可以换成 <code>h264_nvenc</code>。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -y -vsync 0 -hwaccel cuda [-c:v h264_cuvid]  -i xxx.MP4 -vcodec hevc_nvenc -b:v 3000k xxx.mp4</span><br></pre></td></tr></tbody></table></figure><p>hwaccel 也有被称为 cuvid 的参数。但我用 cuvid 代替 cuda 时会报错</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pixel format 'yuvj420p' is not supported</span><br></pre></td></tr></tbody></table></figure><p>原因未知。cuvid 和 cuda 的区别我也没发现有参考资料能解释。</p><p>对于其他硬解方式，可以参考这篇文章：<a href="https://www.bilibili.com/read/cv4579978/">（三+1）用显卡加速视频转码压制之ffmpeg、media coder、shana encoder</a></p><p>查看解码方法：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -decoders</span><br></pre></td></tr></tbody></table></figure><p>查看编码方法：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -encoders</span><br></pre></td></tr></tbody></table></figure><p>上面提到的 <code>cuda</code> 和 <code>h264_cuvid</code> 就在解码方法里面，而 <code>hevc_nvenc</code> 就在编码方法里面。对于 intel 系来说，硬解应该是 <code>qsv</code> 后缀一类的方法；而 amd 是 <code>amf</code> 后缀一类的方法。我仔细看了看最新版 ffmpeg，发现起码对于 amd，只找到了编码方法（比如 <code>h264_amf</code>）而没有找到解码方法。。。好在我平常操作的视频都是解码不怎么费劲的视频，解码费劲的 4k 编码起来必然更慢，暂时不属于我手上硬件能触及的范围了。。。</p><p>另外，文章提到</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -hwaccels</span><br></pre></td></tr></tbody></table></figure><p>能查看当前硬件和 ffmpeg 支持的硬解，但我看结果感觉扯淡。。。我用 amd 的机子能查出来 intel 和 cuda，却没有 amf，就 tm 离谱（当然文章里面也提到了这个方法不准就是了）。</p><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>参考文章：<a href="https://blog.csdn.net/educast/article/details/81866749">ffmpeg 多线程转码</a></p><p>通过写在 <code>-i</code> 参数前的 <code> -threads [线程数]</code> 可以指定 ffmpeg 使用的线程。不过经过测试比较新的 ffmpeg 都会用完 cpu 的所有线程，所以除非要限制 cpu 功率否则这个参数没必要动。</p><h2 id="mkv-内挂字幕嵌入-mp4"><a href="#mkv-内挂字幕嵌入-mp4" class="headerlink" title="mkv 内挂字幕嵌入 mp4"></a>mkv 内挂字幕嵌入 mp4</h2><p>参考文章：<a href="http://andrew-reynolds-bootcamp.com/questions/2027/ffmpeg-mkvdao-mp4zhuan-huan-shi-qu-liao-zi-mu">題 FFMPEG mkv到mp4轉換失去了字幕</a></p><p>内挂字幕的 mkv 在 filebroswer 里面看不到字幕啊。。。于是要想办法提取字幕出来，再把字幕直接内嵌进去。</p><p>有两种方法：</p><ol><li><p>不靠谱方法，很快，但是不一定能识别</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mkv -c copy -c:s mov_text output.mp4</span><br></pre></td></tr></tbody></table></figure></li><li><p>重新编码的方法。一定能识别，但是慢过爹</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mkv -vf subtitles=input.mkv output.mp4</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="mp4-批量转换-gif"><a href="#mp4-批量转换-gif" class="headerlink" title="mp4 批量转换 gif"></a>mp4 批量转换 gif</h2><p>参考文章：<a href="http://blog.pkh.me/p/21-high-quality-gif-with-ffmpeg.html#content">High quality GIF with FFmpeg</a></p><p>以 centos 为例，先编辑个小脚本：</p><p>change.sh</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">palette="./palette.png"</span><br><span class="line"></span><br><span class="line">filters="fps=15,scale=-1:-1:flags=lanczos"</span><br><span class="line"></span><br><span class="line">ffmpeg -v warning -i $1 -vf "$filters,palettegen" -y $palette</span><br><span class="line">ffmpeg -v warning -i $1 -i $palette -lavfi "$filters [x]; [x][1:v] paletteuse" -y $2                                                                                     </span><br></pre></td></tr></tbody></table></figure><p>运行 </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./change.sh './[要转换的mp4]' '[转换成的gif名字]'</span><br></pre></td></tr></tbody></table></figure><p>或者把需要转换的 mp4 文件放到和上面这个脚本相同目录中，执行</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for i in *.mp4; do ./change.sh $i "${i%%.*}.gif";done</span><br></pre></td></tr></tbody></table></figure><p>这条命令会把所有的 mp4 的后缀名去掉，换成 gif。</p><p>另外，windows 端也可以通过修改成两个 bat 文件做到类似的效果（不过第二部我不知道怎么把原 mp4 文件夹的所有后缀替换成 gif，只能直接加 gif），要批量转换的时候运行第二个 bat 就 ok 了</p><p>change.bat</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">cd /d %~dp0 </span><br><span class="line">set palette="palette.png"</span><br><span class="line"></span><br><span class="line">set filters="fps=15,scale=-1:-1:flags=lanczos"</span><br><span class="line"></span><br><span class="line">ffmpeg -v warning -i %1 -vf "%filters%,palettegen" -y %palette%</span><br><span class="line">ffmpeg -v warning -i %1 -i %palette% -lavfi "%filters% [x]; [x][1:v] paletteuse" -y %2       </span><br></pre></td></tr></tbody></table></figure><p>change_all.bat</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">for %%i in (*.mp4) do change.bat "%%i" "%%i.gif"</span><br></pre></td></tr></tbody></table></figure><p>嫌转换成的 gif 太大？改点参数就成，比如：</p><p>change_slim.bat</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">cd /d %~dp0 </span><br><span class="line">set palette="palette.png"</span><br><span class="line"></span><br><span class="line">set filters="fps=10,scale=350:-1"</span><br><span class="line"></span><br><span class="line">ffmpeg -v warning -i %1 -vf "%filters%,palettegen" -y %palette%</span><br><span class="line">ffmpeg -v warning -i %1 -i %palette% -b:v 1000k -lavfi "%filters% [x]; [x][1:v] paletteuse" -y %2       </span><br></pre></td></tr></tbody></table></figure><h2 id="合并音视频"><a href="#合并音视频" class="headerlink" title="合并音视频"></a>合并音视频</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i xxx -i xxx -c:v copy -c:a copy output.mp4</span><br></pre></td></tr></tbody></table></figure><h2 id="mp4-转音频"><a href="#mp4-转音频" class="headerlink" title="mp4 转音频"></a>mp4 转音频</h2><p>对于大部分 mp4，可以直接提取其中的音频，速度很快：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i .\test.mp4 -acodec copy -vn test.mp3</span><br></pre></td></tr></tbody></table></figure><p>不过，这条命令是直接把 mp4 封装中的音频部分提取出来，如果音频部分不是 mp3 格式就会出错：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/6zkXFjh.png"></p><p>从日志里面，我们可以观察到原来封装里面是什么格式的，比如这里就是 aac 的：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/mtmQeQT.png"></p><p>这时候就需要把命令中的格式从 mp3 改成 aac：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i .\test.mp4 -acodec copy -vn test.aac</span><br></pre></td></tr></tbody></table></figure><p>如果需要转换其他格式，可以使用 <code>c:a</code> 参数替代 <code>acodec</code>，比如转换为当前较先进的 opus 格式（当然速度就慢多了）：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i .\test.mp4 -c:a libopus -vn test.opus</span><br></pre></td></tr></tbody></table></figure><h2 id="下载-m3u8"><a href="#下载-m3u8" class="headerlink" title="下载 m3u8"></a>下载 m3u8</h2><p>参考文章：<a href="https://stackoverflow.com/questions/50455695/why-does-ffmpeg-ignore-protocol-whitelist-flag-when-converting-https-m3u8-stream">Why does ffmpeg ignore protocol_whitelist flag when converting https m3u8 stream?</a></p><p>某些视频网站和 ios 软件用的视频地址抓出来是 m3u8 的。比如机核的视频。可以用 chrome 插件<a href="https://chrome.google.com/webstore/detail/%E7%8C%AB%E6%8A%93/jfedfbgedapdagkghmgibemcoggfppbb">猫抓</a>获取 m3u8 文件。然后，加入相关参数，注意需要紧跟在 ffmpeg 命令后面：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -protocol_whitelist file,http,https,tcp,tls,crypto -i xxxx.m3u8 xxxx.xxx</span><br></pre></td></tr></tbody></table></figure><p>xxxx.xxx 指的是你需要输出的视频名字和格式，因为 m3u8 流切下来一般是 h264 的，封装格式需要你自己来确定，ffmpeg 会帮你把所有切片合并。</p><h2 id="自动裁切黑边"><a href="#自动裁切黑边" class="headerlink" title="自动裁切黑边"></a>自动裁切黑边</h2><p>参考文章：<a href="https://www.bogotobogo.com/FFMpeg/ffmpeg_cropdetect_ffplay.php">CROPDETECT AND FFPLAY - 2020</a></p><p>先检测黑边：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i .\test.mp4 -vcodec copy -acodec copy cropdetect=24:16:0 test1.mp4</span><br></pre></td></tr></tbody></table></figure><p>24:16:0 是默认参数，一般如果要调也只调第一个参数（黑边阈值）。</p><p>输出的日志中会有类似于</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Parsed_cropdetect_0 @ 0x3704360] x1:0 x2:639 y1:43 y2:317 w:640 h:272 x:0 y:46 pts:181320 t:181.320000 crop=640:272:0:46</span><br></pre></td></tr></tbody></table></figure><p>其中有用的就是 w、h、x、y 四个参数，分别放入新命令的相应位置</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i .\test.mp4 -vcodec copy -acodec copy -vf crop=640:272:0:46 test1.mp4</span><br></pre></td></tr></tbody></table></figure><p>即可。（虽然经过我测试默认参数检测还是有点偏差，但稍微手动调一下 w 和 h 的值效果就令人满意了）</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>参考文章：<a href="https://linux.cn/article-10932-1.html">给新手的 20 多个 FFmpeg 命令示例</a></p><p>比较有用的几个地方：</p><h3 id="转换格式时不压缩视频"><a href="#转换格式时不压缩视频" class="headerlink" title="转换格式时不压缩视频"></a>转换格式时不压缩视频</h3><p>使用<code>-qscale 0</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ffmpeg -i input.webm -qscale 0 output.mp4</span><br></pre></td></tr></tbody></table></figure><h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><p>ffmpeg windows 端出了新的编译版：<a href="https://github.com/BtbN/FFmpeg-Builds">BtbN/FFmpeg-Builds</a>。release 中有许多不同版本。lgbl 和 gbl 应该是许可证之间的不同，但大小也有区别，我个人认为是为了 lgbl 剔除了一些东西；shared 和不带 shared 的版本，区别是运行库合并进了 ffmpeg 中。最关键的是 vulkan 版本，带有 vulkan 版本需要比较新的独显和新的驱动才能使用，我的 965m 运行都会报错 <code>Lossless encoding not supported</code>。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;玩一下-FFmpeg&quot;&gt;&lt;a href=&quot;#玩一下-FFmpeg&quot; class=&quot;headerlink&quot; title=&quot;玩一下 FFmpeg&quot;&gt;&lt;/a&gt;玩一下 FFmpeg&lt;/h1&gt;&lt;p&gt;因为最近有两件事情，所以要研究一下这玩意：把一整个 capoo 动画分割出几个小片段然后做成表情包（capoo 好萌），还有就是 vps 上下的动画，直接用 filebroswer 播不了，需要稍微转一下码才行。&lt;/p&gt;</summary>
    
    
    
    <category term="影音" scheme="https://zbttl.github.io/categories/%E5%BD%B1%E9%9F%B3/"/>
    
    
    <category term="ffmpeg" scheme="https://zbttl.github.io/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>hexo 进阶</title>
    <link href="https://zbttl.github.io/2020-12-21-00/"/>
    <id>https://zbttl.github.io/2020-12-21-00/</id>
    <published>2020-12-20T16:00:00.000Z</published>
    <updated>2021-01-21T22:59:38.379Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NexT-更新"><a href="#NexT-更新" class="headerlink" title="NexT 更新"></a>NexT 更新</h2><p>光 速 更 新（不是</p><p>啊我刚写完上一篇挑博客系统的时候发现 gitment 怎么都不生效，想想是不是 next 有其他的生效方法。。。摸到 next 项目的 md 那边才发现一个惊讶的事实：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201221175721.png"></p><p>我上一篇用的是 7.8.0。。。原因啊，毕竟我也是看的人家的教程来学的，然后 clone 人家教程上面的 url 告诉我这个仓库的 NexT 过时了，显示了个新的仓库，我就直接摸过去了，谁知道还有更新的，佛了。</p><p>那就老老实实迁移吧，备份主题配置文件，删掉 themes 下的 NexT 主题，clone 新仓库的主题，</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp themes/next/_config.yml themes/_config.yml.bak</span><br><span class="line">rm -r themes/next</span><br><span class="line">git clone https://github.com/next-theme/hexo-theme-next.git themes/next</span><br></pre></td></tr></tbody></table></figure><p>然后用 vscode 对一下新 clone 下来的主题配置文件和备份的旧版主题配置文件的差别把改的地方怼过去。。。</p><p>慢！</p><p>根据 <a href="https://theme-next.js.org/docs/getting-started/configuration.html">Configuration</a>，咱们现在用的 hexo 5.0 已经支持这种新的配置方式了，说人话就是不用再进 <code>themes/next</code> 里面改配置了，只需要在全局主题里面加（并且在这些配置的开头顶上加 <code>theme_config</code> 并给这些配置一个两空格缩进），或者在 hexo 根目录新开一个 <code>_config.next.yml</code> 把要改的配置丢进去就完事了。有点像以前写过的 rime 输入法的 patch 文件。</p><p>按上一篇文章的功能来，大部分需要修改主题配置文件的地方我都抽取出来放在了<code>_config.next.yml</code> ，以下是代码参考：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"># Define custom file paths.</span><br><span class="line"># Create your custom files in site directory `source/_data` and uncomment needed files below.</span><br><span class="line">custom_file_path:</span><br><span class="line">  #head: source/_data/head.njk</span><br><span class="line">  #header: source/_data/header.njk</span><br><span class="line">  #sidebar: source/_data/sidebar.njk</span><br><span class="line">  #postMeta: source/_data/post-meta.njk</span><br><span class="line">  #postBodyEnd: source/_data/post-body-end.njk</span><br><span class="line">  footer: source/_data/footer.njk</span><br><span class="line">  bodyEnd: source/_data/body-end.njk</span><br><span class="line">  #variable: source/_data/variables.styl</span><br><span class="line">  #mixin: source/_data/mixins.styl</span><br><span class="line">  #style: source/_data/styles.styl</span><br><span class="line"></span><br><span class="line">creative_commons:</span><br><span class="line">  license: by-sa</span><br><span class="line">  sidebar: false</span><br><span class="line">  post: true</span><br><span class="line">  language:</span><br><span class="line"></span><br><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  tags: /tags/ || fa fa-tags</span><br><span class="line">  categories: /categories/ || fa fa-th</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line">  #schedule: /schedule/ || fa fa-calendar</span><br><span class="line">  #sitemap: /sitemap.xml || fa fa-sitemap</span><br><span class="line">  #commonweal: /404/ || fa fa-heartbeat</span><br><span class="line">  about: /about/ || fa fa-user</span><br><span class="line"></span><br><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/zbttl || fab fa-github</span><br><span class="line">  E-Mail: mailto:zbttls@gmail.com|| fa fa-envelope</span><br><span class="line">  #Weibo: https://weibo.com/yourname || fab fa-weibo</span><br><span class="line">  #Google: https://plus.google.com/yourname || fab fa-google</span><br><span class="line">  #Twitter: https://twitter.com/yourname || fab fa-twitter</span><br><span class="line">  #FB Page: https://www.facebook.com/yourname || fab fa-facebook</span><br><span class="line">  #StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span><br><span class="line">  #YouTube: https://youtube.com/yourname || fab fa-youtube</span><br><span class="line">  #Instagram: https://instagram.com/yourname || fab fa-instagram</span><br><span class="line">  #Skype: skype:yourname?call|chat || fab fa-skype</span><br><span class="line"></span><br><span class="line">footer:</span><br><span class="line">  # Specify the year when the site was setup. If not defined, current year will be used.</span><br><span class="line">  #since: 2020</span><br><span class="line"></span><br><span class="line">  # Icon between year and copyright info.</span><br><span class="line">  icon:</span><br><span class="line">    # Icon name in Font Awesome. See: https://fontawesome.com/icons</span><br><span class="line">    name: fa fa-heart</span><br><span class="line">    # If you want to animate the icon, set it to true.</span><br><span class="line">    animated: false</span><br><span class="line">    # Change the color of icon, using Hex Code.</span><br><span class="line">    color: "#ff0000"</span><br><span class="line"></span><br><span class="line">  # If not defined, `author` from Hexo `_config.yml` will be used.</span><br><span class="line">  copyright:</span><br><span class="line"></span><br><span class="line">  # Powered by Hexo &amp; NexT</span><br><span class="line">  powered: false</span><br><span class="line"></span><br><span class="line">  # Beian ICP and gongan information for Chinese users. See: https://beian.miit.gov.cn, http://www.beian.gov.cn</span><br><span class="line">  beian:</span><br><span class="line">    enable: false</span><br><span class="line">    icp:</span><br><span class="line">    # The digit in the num of gongan beian.</span><br><span class="line">    gongan_id:</span><br><span class="line">    # The full num of gongan beian.</span><br><span class="line">    gongan_num:</span><br><span class="line">    # The icon for gongan beian. See: http://www.beian.gov.cn/portal/download</span><br><span class="line">    gongan_icon_url:</span><br><span class="line"></span><br><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true</span><br><span class="line">  item_text_post: true</span><br><span class="line">  item_text_total: true</span><br><span class="line"></span><br><span class="line">codeblock:</span><br><span class="line">  # Code Highlight theme</span><br><span class="line">  # All available themes: https://theme-next.js.org/highlight/</span><br><span class="line">  theme:</span><br><span class="line">    light: default</span><br><span class="line">    dark: tomorrow-night</span><br><span class="line">  prism:</span><br><span class="line">    light: prism</span><br><span class="line">    dark: prism-dark</span><br><span class="line">  # Add copy button on codeblock</span><br><span class="line">  copy_button:</span><br><span class="line">    enable: true</span><br><span class="line">    # Available values: default | flat | mac</span><br><span class="line">    style:</span><br><span class="line"></span><br><span class="line">back2top:</span><br><span class="line">  enable: true</span><br><span class="line">  # Back to top in sidebar.</span><br><span class="line">  sidebar: false</span><br><span class="line">  # Scroll percent label in b2t button.</span><br><span class="line">  scrollpercent: true</span><br><span class="line"></span><br><span class="line">busuanzi_count:</span><br><span class="line">  enable: true</span><br><span class="line">  total_visitors: true</span><br><span class="line">  total_visitors_icon: fa fa-user</span><br><span class="line">  total_views: false</span><br><span class="line">  total_views_icon: fa fa-eye</span><br><span class="line">  post_views: true</span><br><span class="line">  post_views_icon: far fa-eye</span><br><span class="line"></span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # If auto, trigger search by changing input.</span><br><span class="line">  # If manual, trigger search by pressing enter key or search button.</span><br><span class="line">  trigger: auto</span><br><span class="line">  # Show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  # Unescape html strings to the readable one.</span><br><span class="line">  unescape: false</span><br><span class="line">  # Preload the search data when the page loads.</span><br><span class="line">  preload: false</span><br><span class="line"></span><br><span class="line"># cursor_effect:</span><br><span class="line">#   enabled: true</span><br><span class="line">#   type: fireworks  # fireworks：礼花 | explosion：爆炸 | love：浮出爱心 | text：浮出文字</span><br><span class="line">cursor_effect: text</span><br></pre></td></tr></tbody></table></figure><p>认真看是不是还少了什么？</p><p>对了，背景动态火柴棍没了。。。。</p><p>记得这个效果是怎么实现的吗？是通过 git clone 本插件到 <code>next/source/lib</code> 中。根据 <a href="https://theme-next.js.org/docs/getting-started/upgrade.html">Upgrade</a> 所说：</p><blockquote><p>Since v8.0.0, all libraries under the <code>next/source/lib</code> directory was moved out to <a href="https://github.com/next-theme/plugins">@next-theme/plugins</a>. Please see this article for the new 3rd-party libraries installation method: <a href="https://theme-next.js.org/docs/third-party-services/#Adding-Plugins">Adding Plugins</a>.</p></blockquote><p>但我查了一下这个库，发现也没有 <code>canvas_nest</code>，看来多半是被 delete 了。</p><p>没关系，我们还有大力出奇迹（</p><p>找到 <code>canvas_nest</code>的 github 库：<a href="https://github.com/theme-next">theme-next</a>/<strong><a href="https://github.com/theme-next/theme-next-canvas-nest">theme-next-canvas-nest</a></strong></p><p>按说明行事：</p><ol><li><p>在 <code>hexo/source/_data</code> 中新建 <code>footer.njk</code>（不是 <code>footer.swig</code> 哦）。</p><blockquote><p> 由于 NexT 以前使用的 swig 模版引擎停止维护，去年迁移到了 Nunjucks</p></blockquote></li><li><p>加入以下内容</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script color="120,120,120" opacity="0.5" zIndex="-1" count="150" src="https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js"&gt;&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p>（修改了一下，和原来我们在主题配置文件中实现的效果一致，就是不能单独设置移动端是否显示了）</p></li><li><p>在 <code>_config.next.yml</code> 解除 <code>footer: source/_data/footer.njk</code> 的注释（上面的参考代码中我已经开了）。</p></li></ol><p>即可。</p><p>话说回来记得我们另一个大力出奇迹的功能是啥么？回去复习~（还好我选择了放在 hexo 根目录的方法，否则这个功能也要再折腾一边）</p><p>关于其他的更新功能和差异，及迁移方法，可以查阅：</p><ul><li><a href="https://github.com/next-theme/hexo-theme-next/issues/4">【必读】更新说明及常见问题 #4</a></li><li><a href="https://theme-next.js.org/docs/getting-started/upgrade.html">Upgrade</a></li></ul><p>更新后 NexT 仍自带，可通过编辑配置启用的功能模块：</p><ul><li><a href="https://theme-next.js.org/docs/third-party-services/#Adding-Plugins">Third-party Services</a></li></ul><h2 id="评论（临时）"><a href="#评论（临时）" class="headerlink" title="评论（临时）"></a>评论（临时）</h2><p>上次我看了几个评论系统。一开始打算用简单而泛用的 Valine。结果刚开始我发现注册账号需要手机号码而且后续还要实名就感觉这玩意不对，后续在 NexT 更新公告里面看见这么一段：</p><blockquote><p>Valine 评论系统出现了一些令人担忧的问题：</p><ul><li>NexT 团队曾多次收到关于 Valine 评论系统存在隐私泄露问题的反馈；</li><li>Valine 自 1.4 版本起不再开源，因此 NexT 团队无法对 Valine 评论系统 Debug。并且发布的打包版本中存在未告知用户的百度统计代码；</li><li>11 月下旬出现了针对 Valine 评论系统的攻击。</li></ul><p>考虑到这些问题已经严重影响到 NexT 用户的数据安全，我们决定将其移除，需要继续使用的用户请安装插件： <a href="https://github.com/next-theme/hexo-next-valine">https://github.com/next-theme/hexo-next-valine</a><br>（插件的配置项使用驼峰命名，与 Valine 本身一致，需要注意将 <code>appid</code> 和 <code>appkey</code> 改为 <code>appId</code> 和 <code>appKey</code>）<br>鉴于以上原因，如果在使用 Valine 时出现<em>任何</em>问题，请在这里反馈： <a href="https://github.com/xCss/Valine/issues">https://github.com/xCss/Valine/issues</a><br>迁移到 Disqus： <a href="https://github.com/YunYouJun/valine-to-disqus">https://github.com/YunYouJun/valine-to-disqus</a></p></blockquote><p>怕了。另外的呢？接着就是上面我说的 gitment，我试了半天没用，开启后文章底下啥都出不来。后来发现这玩意是 2018 年更新的了。。。以及依赖 github Oauth Apps 的评论系统，调查了一下可能有安全问题（虽然参考文章都是两年前一年前的了，但配置文件中 secret 显然还是用的明码）：</p><ul><li><a href="https://henryhou.com/post/gitment_and_gittalk_secure/">评论插件 gitment 和 gittalk 存在安全性问题</a></li><li><a href="https://www.v2ex.com/t/535608">建议大家弃用 Gitalk 和 Gitment 等权限过高的 Github OAuth App</a></li></ul><p>我关注的大佬里面有用 Disqus 的，比如 <a href="https://blog.ichr.me/">ChrAlpha’s Blog</a>：<a href="https://blog.ichr.me/post/use-disqus-conveniently/">在特殊地区科学使用 Disqus 评论系统</a>。不过我瞄了一眼，似乎挺复杂的样子。。。。以后再说。</p><p>依赖 github issue 的评论系统虽然有安全问题，但我也有小号啊 ~ 在小号上开应该安全许多，这类型的还有另一个选择：gitalk，先用着吧。</p><p>参考文章：</p><ul><li><a href="https://segmentfault.com/a/1190000014085547">为Hexo添加Gitalk评论插件</a></li></ul><ol><li><p>先安装</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gitalk</span><br></pre></td></tr></tbody></table></figure></li><li><p>去小号那里创建一个 OAuth Apps</p><p>打开 <a href="https://github.com/settings/applications/new">New OAuth App</a>（从头像 -&gt;settings-&gt;Developer settings 这里也可以找到）。</p><p>新建一个。（不要慌填错后续还能改）</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201222005052.png"></p><p>在稍后的界面获取一个 client secret，和 client id 一起记着待会要用。</p></li><li><p>打开主题配置文件（现在是 <code>_config.next.yml</code> 啦），新增</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">gitalk:</span><br><span class="line">  enable: true #用来做启用判断可以不用</span><br><span class="line">  owner: #Github 用户名,填小号的不要填大号的</span><br><span class="line">  repo: #储存评论issue的github仓库名</span><br><span class="line">  admin: #Github 用户名,</span><br><span class="line">  clientID: #`Github Application clientID`</span><br><span class="line">  clientSecret: #`Github Application clientSecret`</span><br><span class="line"> gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  github_id:  # GitHub repo owner，即小号的用户名</span><br><span class="line">  repo:  # Repository name to store issues，储存评论issue的github仓库名</span><br><span class="line">  client_id:  # GitHub Application Client ID，刚获取的</span><br><span class="line">  client_secret:  # GitHub Application Client Secret，刚获取的</span><br><span class="line">  admin_user:  # GitHub repo owner and collaborators, only these guys can initialize gitHub issues，还是填小号的用户名</span><br><span class="line">  distraction_free_mode: true # Facebook-like distraction free mode</span><br><span class="line">  # Gitalk's display language depends on user's browser or system environment</span><br><span class="line">  # If you want everyone visiting your site to see a uniform language, you can set a force language value</span><br><span class="line">  # Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span><br><span class="line">  language:ok，</span><br></pre></td></tr></tbody></table></figure></li><li><p>ok，接下来部署到网站后看到文章下面就有评论区了，登录自己的小号就能开启评论区，注意每个文章都需要手动开启。另外连 about 和 tags 那几个界面都有评论区。。。。我们可以在那几个文章的文前代码块里面加上</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">comments: false</span><br></pre></td></tr></tbody></table></figure><p>即可屏蔽掉那些文章的评论区。</p></li></ol><h2 id="hexo-转移到-windows-上部署（临时，吐槽，没完全成功）"><a href="#hexo-转移到-windows-上部署（临时，吐槽，没完全成功）" class="headerlink" title="hexo 转移到 windows 上部署（临时，吐槽，没完全成功）"></a>hexo 转移到 windows 上部署（临时，吐槽，没完全成功）</h2><p>个人习惯，新玩意先在虚拟机上实验，因为之前 windows 上太多开发工具会把机子环境搞乱（比如 sql server 之类的），给后面其他软件的安装带来麻烦。不过观察到现在，hexo 除了安装拿一下影响全局环境，其他情况下都只在自己文件夹内做修改。一直用虚拟机编辑体验不太好（linux 下 vscode 还是挺卡的），索性搬到 windows 上。</p><p>然后发现：安装新组件，本地预览啥的没问题。但部署到 github 仓库的时候就出问题了。首先是告诉我，没权限，估计是没 key。</p><p>先把 key 导进去看看？</p><p>用 ssh-add 命令，报错。</p><p>参考 <a href="https://www.cnblogs.com/attackingmilo/p/Windows-ssh-add-error.html">Windows下使用ssh-add报错 Error connecting to agent: No such file or directory</a></p><p>把服务开起来</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Set-Service -Name ssh-agent -StartupType Manual</span><br><span class="line">Start-Service ssh-agent</span><br></pre></td></tr></tbody></table></figure><p>再添加</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ./id_rsa</span><br></pre></td></tr></tbody></table></figure><p>还报错。。。</p><p>把密钥放进系统用户目录中</p><p>再添加</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add C:\Users\zbttl\id_rsa</span><br></pre></td></tr></tbody></table></figure><p>总算是添加进去了，运行</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></tbody></table></figure><p>显示</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">warning: agent returned different signature type ssh-rsa (expected rsa-sha2-512)</span><br><span class="line">Hi zbttl! You've successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></tbody></table></figure><p>但我再次运行 <code>hexo g -d</code></p><p>还报错：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Error: git@github.com: Permission denied (publickey).</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br></pre></td></tr></tbody></table></figure><p>后面查阅到 <a href="https://github.com/hexojs/hexo/issues/3339">Win10使用ssh的hexo部署到github报错 ＃3339</a>，看起来应该是因为我的 rsa 密钥还带有密码，但 hexo-deployer-git 在 windows 下不会弹密码提示而是自作主张当做没密码的原因。但我既不想去掉密钥的密码，也不想用 git push 提交，所以直接用 windows 提交暂时是不成了。（不过我也没去查阅 hexo-deployer-git 那边有没有解决方案，起码我这边已经用的最新版了）</p><p>想到一个曲线救国的方法，开一个 vmware ubuntu 的共享文件夹，把 hexo 项目放在里面，就可以编辑的时候用 windows typora，部署的时候再用 ubuntu。我感觉用 wsl 也可以，但我没怎么用过那玩意，感兴趣的可以尝试。（wsl2 就算了，我对 hyper-v 印象超差的）</p><h2 id="链接中中文转拼音，以及修改-permalinks"><a href="#链接中中文转拼音，以及修改-permalinks" class="headerlink" title="链接中中文转拼音，以及修改 permalinks"></a>链接中中文转拼音，以及修改 permalinks</h2><p>参考文章：<a href="https://zhuanlan.zhihu.com/p/123286944">Github+Hexo+matery 博客搭建小白教程 - 知乎</a></p><blockquote><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。</p></blockquote><p>还有一点：Permalinks 我直接设置的日记文件标题（便于 seo），其实我的日记文件标题也就是当天的日期。不经任何修改可猜到可碰撞的网站一级目录文件，vps 文件漏洞 ptsd 警告（</p><p><del>其实我想找能够混淆 url 的 hexo 插件，没找到，先用这个凑合一下（</del></p><p>安装</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-permalink-pinyin</span><br></pre></td></tr></tbody></table></figure><p>在全局配置文件 <code>_config.yml</code> 新增：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">permalink_pinyin:</span><br><span class="line">  enable: true</span><br><span class="line">  separator: '-' # default: '-'</span><br></pre></td></tr></tbody></table></figure><p>后续，我研究了一下 permalinks，可以用文章标题代替文件标题的 url 部分。参考：<a href="https://hexo.io/zh-cn/docs/permalinks.html">永久链接（Permalinks） | Hexo</a></p><p>修改全局配置文件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">permalink: :post_title/</span><br></pre></td></tr></tbody></table></figure><p>甚至还可以加上 hash 值（但可能对 seo 产生副作用）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">permalink: :post_title-:hash/</span><br></pre></td></tr></tbody></table></figure><p>修改后需要刷新</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean&amp;&amp;hexo g</span><br></pre></td></tr></tbody></table></figure><h2 id="hexo-更改-categories-大小写后部署-404-的问题"><a href="#hexo-更改-categories-大小写后部署-404-的问题" class="headerlink" title="hexo 更改 categories 大小写后部署 404 的问题"></a>hexo 更改 categories 大小写后部署 404 的问题</h2><p>参考文章：<a href="https://blog.csdn.net/liuergo/article/details/102640098">Hexo部署到Github文件夹大小写问题_liuergo的博客-CSDN博客</a></p><p>前一篇说过尽量约定好 tags 和 categories 大小写的原因是，我发现我有的文章归进了首字母大写的类别（如 Linux）里，有些归进了首字母小写的类别（如 linux）里，但实际上应该归为一类。我手动替换修改后，刷新提交发现是归为一类了，点进去显示 404。后来发现是 github 大小写不敏感的锅。</p><p>索引到 <code>.deploy_git/.git</code> 文件夹，修改 <code>config</code> 文件中的 <code>ignorecase</code> 参数为 false 即可。</p><h2 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h2><p>参考文章：</p><ul><li><a href="https://steemit.com/cn/@greedyboy/hexo-next-rss">将hexo静态博客next主题安装rss插件功能 — Steemit</a></li><li><a href="https://www.zywvvd.com/2020/03/20/next/14_add_rss/next-add-rss/">Next -14- 为Hexo Next7.7.1 添加RSS （带按钮） | 又见苍岚</a></li><li><a href="https://suyin-blog.club/2020/2M3YWE7/">给 Hexo 中的 Next 主题添加 RSS 功能 | 苏寅 Blog</a></li></ul><p>安装 rss 插件：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-generator-feed</span><br></pre></td></tr></tbody></table></figure><p>在全局配置文件中新增：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">feed:</span><br><span class="line">    type: atom</span><br><span class="line">    path: atom.xml</span><br><span class="line">    limit: 20 #展示文章的数量，使用 0 或则 false 代表展示全所有的帖子</span><br><span class="line">    #content: #（可选）设置 true 可以在 RSS 文件中包含文章全部内容，默认：false</span><br><span class="line">    content_limit:300 #（可选）摘要中使用的帖子内容的默认长度。 仅在内容设置为 false 且未显示自定义帖子描述时才使用。</span><br><span class="line">    #content_limit_delim: #（可选）开启content_limit时，在显示的帖子内容中如果有分隔符，优先按分隔符进行分割。默认不使用。</span><br><span class="line">    #order_by: -date #rss 文章排序方法</span><br></pre></td></tr></tbody></table></figure><p>之后有三种显示方法（可以同时开启，但 2 和 3 没必要一起开）：</p><ol><li><p>显示在每篇文章末尾。这是 next 默认情况下推荐的方法，在 next 文件夹原来的配置文件中可以找到。</p><p>在主题配置文件 <code>_config.next.yml</code> 中新增</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">follow_me:</span><br><span class="line">  #Twitter: https://twitter.com/包包包zb || fab fa-twitter</span><br><span class="line">  #Telegram: https://t.me/channel_name || fab fa-telegram</span><br><span class="line">  #WeChat: /images/wechat_channel.jpg || fab fa-weixin</span><br><span class="line">  RSS: /atom.xml || fa fa-rss</span><br></pre></td></tr></tbody></table></figure><p>效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210104030713.png"></p></li><li><p>和侧边栏的联系方式显示在一起</p><p>修改主题配置文件中的 <code>social</code> 项：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">social:</span><br><span class="line">  ...</span><br><span class="line">  RSS: /atom.xml || fa fa-rss</span><br></pre></td></tr></tbody></table></figure><p>效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210104030940.png"></p></li><li><p>（不太推荐，因为和侧边栏动画无法统一）显示在侧边栏中部</p><p>修改 <code>\themes\next\layout\_partials\sidebar\site-overview.njk</code></p><p>在 <code>{%- if theme.site_state %}</code> 前新增</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">{% if theme.rss %}</span><br><span class="line">   &lt;div class="feed-link motion-element"&gt;</span><br><span class="line">     &lt;a href="{{ url_for(theme.rss) }}" rel="alternate"&gt;</span><br><span class="line">       &lt;i class="fa fa-rss"&gt;&lt;/i&gt;</span><br><span class="line">       RSS</span><br><span class="line">     &lt;/a&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">{% endif %}</span><br><span class="line"></span><br><span class="line">{%- if theme.site_state %}</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><p>然后在主题配置文件中添加</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rss: /atom.xml</span><br></pre></td></tr></tbody></table></figure><p>效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210104031356.png"></p></li></ol><p>修改完后需要刷新，此时查看 public 文件夹中应该正确生成 atom.xml。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean&amp;&amp;hexo g</span><br></pre></td></tr></tbody></table></figure><h2 id="显示运行时间"><a href="#显示运行时间" class="headerlink" title="显示运行时间"></a>显示运行时间</h2><p>参考文章：<a href="https://yansheng836.github.io/article/50902a4.html">hexo+yilia添加网站运行时间，ICP备案信息，设定站点建立时间 | 荷塘月色的博客</a></p><p>在 <code>source\_data\footer.njk</code> 中添加：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--《添加网站运行时间 --&gt;</span><br><span class="line">&lt;!--&lt;br/&gt;--&gt;</span><br><span class="line">&lt;span id="timeDate"&gt;载入天数...&lt;/span&gt;&lt;span id="times"&gt;载入时分秒...&lt;/span&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var now = new Date();</span><br><span class="line"></span><br><span class="line">    function createtime() {</span><br><span class="line">        var grt = new Date("07/25/2019 12:00:00"); //此处修改你的建站时间或者网站上线时间 </span><br><span class="line">        now.setTime(now.getTime() + 250);</span><br><span class="line">        days = (now - grt) / 1000 / 60 / 60 / 24;</span><br><span class="line">        dnum = Math.floor(days);</span><br><span class="line">        hours = (now - grt) / 1000 / 60 / 60 - (24 * dnum);</span><br><span class="line">        hnum = Math.floor(hours);</span><br><span class="line">        if (String(hnum).length == 1) {</span><br><span class="line">            hnum = "0" + hnum;</span><br><span class="line">        }</span><br><span class="line">        minutes = (now - grt) / 1000 / 60 - (24 * 60 * dnum) - (60 * hnum);</span><br><span class="line">        mnum = Math.floor(minutes);</span><br><span class="line">        if (String(mnum).length == 1) {</span><br><span class="line">            mnum = "0" + mnum;</span><br><span class="line">        }</span><br><span class="line">        seconds = (now - grt) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);</span><br><span class="line">        snum = Math.round(seconds);</span><br><span class="line">        if (String(snum).length == 1) {</span><br><span class="line">            snum = "0" + snum;</span><br><span class="line">        }</span><br><span class="line">        document.getElementById("timeDate").innerHTML = " 本站已安全运行 " + dnum + " 天 "; //去掉了一个分隔符竖杠，因为用了不算子，已经自动做了换行分割</span><br><span class="line">        document.getElementById("times").innerHTML = hnum + " 小时 " + mnum + " 分 " + snum + " 秒";</span><br><span class="line">    }</span><br><span class="line">    setInterval("createtime()", 250);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;!-- 添加网站运行时间》 --&gt;</span><br></pre></td></tr></tbody></table></figure><p>即参考文章中的「硬性配置」。</p><p>另外参考文章中有所谓「灵活配置」，将开关和建站时间设定提取成主题配置文件的配置项。但亲测使用灵活配置还得修改主题配置文件夹，修改放在全局配置文件夹的 <code>footer.njk</code> 不生效，不符合我们迁移时说的「不修改主题文件夹」的思想。</p><p>还有就是。我以为判断运行时间是会有更高级的方法，比如调用什么接口测试你的网站是啥时候开的，什么时候第一次部署的什么的，没想到是手工设置，和我的设想还是有点出入。。。</p><h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>参考文章：<a href="https://www.zhyong.cn/posts/fc22/">hexo-next 添加文章置顶功能和评分功能等 | YouForever</a></p><p>在主题配置文件中添加</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rating:</span><br><span class="line">  enable: true</span><br><span class="line">  id:</span><br><span class="line">  color:  "#fc6423"</span><br></pre></td></tr></tbody></table></figure><p>其中的 id，需要到 <a href="https://widgetpack.com/">widgetpack</a> 新建一个账号，新建完在左上角有显示。</p><p>建议配置评分方式，侧栏 &gt; Rating &gt; Setting，建议用 IP address 或 Device (cookie)，免登录。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210104032640.png"></p><h2 id="markdown-emoji"><a href="#markdown-emoji" class="headerlink" title="markdown emoji"></a>markdown emoji</h2><p>参考文章：</p><ul><li><a href="https://github.com/crimx/hexo-filter-github-emojis">crimx/hexo-filter-github-emojis: github emojis for hexo!</a></li><li><a href="https://spacefan.github.io/2018/06/30/hexo-emoji/">Hexo 博客使用 emoji 表情 | Home</a></li></ul><p>安装：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-filter-github-emojis</span><br></pre></td></tr></tbody></table></figure><p>在全局配置文件中新增：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">githubEmojis:</span><br><span class="line">  enable: true</span><br><span class="line">  className: github-emoji</span><br><span class="line">  inject: true</span><br><span class="line">  #unicode: true #这个参数我也不知道加不加，出问题再说</span><br><span class="line">  styles:</span><br><span class="line">  customEmojis:</span><br></pre></td></tr></tbody></table></figure><p>修改完之后需要刷新。</p><p>不过，对于目前我的浏览器这个插件有个小 bug：</p><p> 目前的效果：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210113073831.png"></p><p>看起来不错。其实还有一个狗头：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210113073930.png"></p><p>只要选中就出现了。不知道是插件的效果还是 github 表情本身就有这个效果（我没用过不知道），挺好玩。。。但这个效果是在干净的 edge 上才能显示出来，在我配置过字体 stylus 的 centbrowser 这里就出问题了：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210113074220.png"></p><p>我想暂时先关掉这个变来变去的彩蛋，只显示一种狗头就好了，然而找不到方法，就先不管了，反正停掉一个单一网页的字体优化就一个选框的事。</p><p>我也试了一下另一个插件<a href="https://github.com/theme-next/hexo-filter-emoji">theme-next/hexo-filter-emoji: 🎉 GitHub emojis for Hexo!</a>，也能生效，但会出问题，无论我换不换字体，不选择时的狗头都出不来，只有选中时候的狗头才出现，这就属于「不能用」的情况了。</p><h2 id="谷歌百度搜索收录"><a href="#谷歌百度搜索收录" class="headerlink" title="谷歌百度搜索收录"></a>谷歌百度搜索收录</h2><h3 id="谷歌索引"><a href="#谷歌索引" class="headerlink" title="谷歌索引"></a>谷歌索引</h3><p>谷歌最简单，而且也不需要实名。而且。。。听说只要时间一长，google 的爬虫会自动把你的页面爬进去，根本不用申请。不过我比较猴急，我现在！马上！就要在谷歌娘身体里面看到我的痕迹（滴嘟滴嘟</p><p>参考文章：</p><ul><li><a href="https://www.jianshu.com/p/f8ec422ebd52">Hexo博客提交百度和Google收录 - 简书</a></li><li><a href="http://www.yuan-ji.me/Hexo-%E4%BC%98%E5%8C%96%EF%BC%9A%E6%8F%90%E4%BA%A4sitemap%E5%8F%8A%E8%A7%A3%E5%86%B3%E7%99%BE%E5%BA%A6%E7%88%AC%E8%99%AB%E6%8A%93%E5%8F%96-GitHub-Pages-%E9%97%AE%E9%A2%98/">Hexo 优化：提交 sitemap 及解决百度爬虫无法抓取 GitHub Pages 链接问题 | JI’s Blog</a></li></ul><ol><li><p>安装谷歌站点地图生成工具</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-generator-sitemap</span><br></pre></td></tr></tbody></table></figure></li><li><p>在全局配置文件中添加</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#hexo sitemap</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br></pre></td></tr></tbody></table></figure></li><li><p>刷新，此时查看 public 文件夹中应该正确生成 sitemap.xml</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean&amp;&amp;hexo g</span><br></pre></td></tr></tbody></table></figure></li><li><p>访问<a href="https://search.google.com/search-console/">欢迎使用 Google Search Console</a>，除非绑定了自己的域名，否则在网址前缀中输入博客主页 url（带 https），即 <code>https://xxx.github.io</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210104051916.png"></p></li><li><p>然后谷歌会给你一个文件。用文本编辑器打开，在最开头加上</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">layout: false</span><br><span class="line">sitemap: false</span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure><p>然后把这个文件放到 hexo 的 <code>_posts</code> 文件夹中，部署 <code>hexo d -g</code>。</p></li><li><p>大概要过段时间（因为一个我们用的 github 静态博客同步没那么快，二个谷歌本身就没那么快，我大概等了一个小时左右），此时再进这里就会进入 Google Search Console 网站管理界面了。</p></li><li><p>（可选）趁等待谷歌反应过来的间隙，继续优化一下。使用 nofollow，大概意思是自动判断出索引黑名单，不爬取黑名单的页面。</p><p>安装</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-autonofollow</span><br></pre></td></tr></tbody></table></figure><p>在全局配置文件中添加</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nofollow:</span><br><span class="line">    enable: true</span><br><span class="line">    exclude: # 不添加 nofollow 标签的连接</span><br><span class="line">    - exclude1.com</span><br><span class="line">    - exclude2.com</span><br></pre></td></tr></tbody></table></figure></li><li><p>（可选）添加 rebot.txt。大概意思是使用规则判断索引黑白名单。在 <code>source/</code>文件夹下新建一个 rebots.txt 文件，放入以下内容：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># hexo robots.txt</span><br><span class="line">User-agent: *</span><br><span class="line">Allow: /</span><br><span class="line">Allow: /archives/</span><br><span class="line"></span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /js/</span><br><span class="line">Disallow: /css/</span><br><span class="line">Disallow: /fonts/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /fancybox/</span><br><span class="line"></span><br><span class="line">Sitemap: http://xxx.github.io/sitemap.xml</span><br><span class="line">Sitemap: http://xxx.github.io/baidusitemap.xml</span><br></pre></td></tr></tbody></table></figure><p>然后刷新，部署。</p></li><li><p>在索引-&gt;站点地图-&gt;输入站点地图地址，填入 <code>sitemap.xml</code>，有可能马上提示成功，也可能提示失败。失败的话估计要等个半天一天再过来看，如果还失败就重新提交，我是提交到第三次就显示成功了。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210104052701.png"></p></li><li><p>在 google 中输入 <code>site:xxxx.github.io</code>，如果显示搜不到，稍安勿躁，估计又是要等个一两天半周的。</p></li><li><p><strong>（21.1.21）</strong>后续我更新了一下网站结构，十多天过去了，google 没读取我新的站点地图，得手动刷新。方法是到覆盖率中，找到任意一个 404 的网页，点击已解决。</p></li></ol><h2 id="加载速度优化"><a href="#加载速度优化" class="headerlink" title="加载速度优化"></a>加载速度优化</h2><h3 id="快速连接技术"><a href="#快速连接技术" class="headerlink" title="快速连接技术"></a>快速连接技术</h3><p>照抄文章：<a href="https://lvxuefei.top/%E5%88%A9%E7%94%A8Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89-%E4%BC%98%E5%8C%96-%E5%90%84%E7%A7%8Dtips%E3%80%81%E9%BB%91%E7%A7%91%E6%8A%80%EF%BC%8C%E4%B8%8D%E6%96%AD%E6%9B%B4%E6%96%B0/">利用 Hexo+Next 搭建个人博客（三）—— 优化 (各种 tips、黑科技，不断更新) | 槐雪</a></p><blockquote><p>什么是快速连接技术，下面是其 <a href="https://github.com/GoogleChromeLabs/quicklink">GitHub 源地址</a>上给出的解释：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过在空闲时间预取视区内链接来加快后续页面加载速度</span><br></pre></td></tr></tbody></table></figure><p>按我的理解应该是在我们访问博文页面的时候，如果博文位于视区内的部分有网页链接，那么浏览器在空闲时会预加载该链接对应的页面以达到加快后续的访问速度的目的。</p></blockquote><p>安装</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i quicklink</span><br></pre></td></tr></tbody></table></figure><p>在主题配置文件中添加</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">quicklink:</span><br><span class="line">  enable: true</span><br></pre></td></tr></tbody></table></figure><h3 id="使用-Gulp-压缩静态资源"><a href="#使用-Gulp-压缩静态资源" class="headerlink" title="使用 Gulp 压缩静态资源"></a>使用 Gulp 压缩静态资源</h3><p>参考文章：<a href="http://yifanstar.top/2020/07/19/hexo-blog-creat/">Hexo + GitHub Pages 搭建个人博客及 NexT 主题配置 | Star’s Tech Blog</a></p><p>看起来有点复杂。。。我得想办法先确认这些加速手段有用再继续，先占坑。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;NexT-更新&quot;&gt;&lt;a href=&quot;#NexT-更新&quot; class=&quot;headerlink&quot; title=&quot;NexT 更新&quot;&gt;&lt;/a&gt;NexT 更新&lt;/h2&gt;&lt;p&gt;光 速 更 新（不是&lt;/p&gt;</summary>
    
    
    
    <category term="博客" scheme="https://zbttl.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="hexo" scheme="https://zbttl.github.io/tags/hexo/"/>
    
    <category term="NexT" scheme="https://zbttl.github.io/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>hexo 入门</title>
    <link href="https://zbttl.github.io/2020-12-18-00/"/>
    <id>https://zbttl.github.io/2020-12-18-00/</id>
    <published>2020-12-17T16:00:00.000Z</published>
    <updated>2021-01-21T23:02:43.045Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>罗马不是一日建成的。</p></blockquote><p>但我的博客可以！<span class="github-emoji"><span>🐶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f436.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>0202 年了，要写博客选择很多，远古时期发展来的 wordpress 配置相对复杂，但发展那么多年是这里面最成熟的选择了；年中我为了续费阿里云学生机曾经快速过过一遍主页那些小教程，玩了一下里面的 vuepress 感觉也不错；还有好像挺多大佬用 typecho 的？不过作为萌新，先从当前最成熟最简单的开始，就 hexo + Next 了。</p><p>hexo 网上教程烂大街了，所以步骤我介绍的很简单，详细步骤参见相应的参考文章，我只介绍大概步骤和一些坑。（说是最成熟最简单，我这个跳坑大王还是遇到不少坑。</p><p>使用的软件版本：</p><p>nodejs 和 hexo 运行平台：Ubuntu 19.10（话说我现在才发现这个系统过期导致 apt update 失灵，等我解决了还可以水一篇文章）</p><p>nodejs（linux）：v14.6.0 <code>nodejs -v</code></p><p>hexo（linux）：5.2.0 <code>cd hexo</code> <code>hexo -v</code></p><p>hexo-next（linux）：7.8.0（可以在 <code>themes/next/package.json</code>内查到）</p><p><a href="https://github.com/Molunerfinn/PicGo">pic-go</a>（windows）：2.3.0-beta.3</p><p>另外先附上我们两个主角的官方中文文档：</p><ul><li><a href="https://hexo.io/zh-cn/docs/">hexo 文档</a></li><li><a href="https://theme-next.iissnan.com/getting-started.html">NexT 开始使用</a></li></ul><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>参考文章：</p><ul><li><a href="https://blog.ichr.me/post/set-up-hexo-on-github-page/">Github Page + Hexo 免费搭建个人博客教程</a></li><li><a href="http://blog.fujian.show/2019/05/11/hexo-github-build-blog/">史上最完整教程！Hexo + GitHub page免费搭建个人博客</a></li></ul><ol><li><p>装 nodejs 和 git</p></li><li><p>全局安装 hexo，新建个目录作为 <strong>hexo 根目录</strong>，在里面初始化 hexo，安装组件，生成文件。未来所有以 hexo 和 npm 开头的命令都需要在 hexo 文件夹下执行。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br><span class="line">mkdir hexo &amp;&amp; cd hexo</span><br><span class="line">hexo init</span><br><span class="line">npm install</span><br><span class="line">hexo g</span><br></pre></td></tr></tbody></table></figure></li><li><p>装 NexT 主题（许多教程里面的 next 还用的是 iissnan/hexo-theme-next 的这个旧版，用旧版运行时会报错，且运行的时候有提示让你更新新版）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next.git themes/next</span><br></pre></td></tr></tbody></table></figure><p>修改 hexo 根目录中的 <code>_config.yml</code>，将其中的 theme 改为 next。（注意，如果此处修改后运行报错参考<a href="https://www.jianshu.com/p/861307262429">搭建博客遇到Plugin load failed: %s hexo-theme-landscape错误</a>删除 <code>package.json</code> 中原主题 landscape 的依赖即可）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></tbody></table></figure><p>此时就可以打开本地预览看看效果：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></tbody></table></figure></li><li><p>建文章。本地预览中显示的这篇文章 <code>source/_posts/hello_world.md</code> 中。第一篇文章可以修改这个文件，也可以删掉重新建一个。通过终端建立新文章的方法参考<a href="https://hexo.io/zh-cn/docs/writing.html">写作</a>：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post &lt;title&gt; title.md</span><br></pre></td></tr></tbody></table></figure><p>文件名称（也就是 title.md）不影响在博客中显示的效果。但 title 影响。</p><p>这么建文章有个问题。。。我之前写的日记，我想按我日记上的日期显示在博客里咋整？</p><p>那我们可以手动对 <code>source/_posts</code> 里的 md 文件进行一些修改。</p><p>原来写的日记，如果是普通的文本请改成 markdown 格式（这里不再展开），好在我原来写的日志就是 md 格式的，仿照 <code>hello-world.md</code> 在全文前面加上代表 title 和初始日期的代码块就行了。这个代码块里面还可以指定本文的分类、tag、是否置顶等属性，这个我们之后再说。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201220025108.png"></p><p>另外，之前文章的总标题我都用一级标题的形式书写的。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201220025319.png" alt="比如这样"></p><p>而刚刚代码块里面的 title 在文章中显示出来的大小和一级标题一模一样，看起来重复了。所以还要把一级标题删掉，直接放到 title 上。</p></li><li><p>修整一下 hexo 全局配置文件 <code>_config.yml</code> 和 next 主题的配置文件 <code>themes/next/_config.yml</code>中的相应项目。全局配置文件中，网站基本描述（修改这里的时候注意，这些参数原来冒号后面跟的是单引号，别当双引号看了，最好一开始就直接删掉那些引号，这里的参数值就算是汉字也不需要用引号括起来）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Bao's 备忘录</span><br><span class="line">subtitle: </span><br><span class="line">description: 玩点好玩的</span><br><span class="line"># keyword:</span><br><span class="line">author: zbttl</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: Asia/Shanghai</span><br></pre></td></tr></tbody></table></figure><p>可引用外部图片</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></tbody></table></figure><p>next 主题配置文件中，主页需要需要启用菜单功能（我这里多启用了关于、标签、种类三个功能）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  tags: /tags/ || fa fa-tags</span><br><span class="line">  categories: /categories/ || fa fa-th</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line">  #schedule: /schedule/ || fa fa-calendar</span><br><span class="line">  #sitemap: /sitemap.xml || fa fa-sitemap</span><br><span class="line">  #commonweal: /404/ || fa fa-heartbeat</span><br><span class="line">  about: /about/ || fa fa-user</span><br></pre></td></tr></tbody></table></figure><p>（多嘴一句，后面美化主题新加功能的时候少不了折腾这两个文件，特别是 next 主题的配置文件，英语过关的话认真看里面已经写了很多插件功能了，装好模块删掉注释就能开）</p></li><li><p>把自己之前的一些文章转换好在本地看完效果后，发布。本来是想发布到自己的服务器和域名上，想想算了。。。毕竟那个东西，是用来干一些（咳咳</p><p>那就托管到 github.io 好了。在 github 上建一个名为你的用户名 .github.io 的仓库。放（或者建）一个 ssh key 到 github 里面。（玩 vps 的 ssh key 这玩意应该人手一个吧）</p><p>搞定以后再次修改全局配置文件 <code>_config.yml</code>的相应内容：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 刚刚建的仓库的域名</span><br><span class="line">url: https://xxx.github.io/</span><br><span class="line">root: /</span><br><span class="line">#permalink: :year/:month/:day/:title/</span><br><span class="line">permalink: :title/ #使url简洁，方便搜索引擎收录</span><br><span class="line">...</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:xxx/xxx.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></tbody></table></figure><p>repository 这项不清楚的话，打开你的项目下面，点击那个绿色的下载按钮 code-&gt;ssh</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201220033031.png"></p><p>配置 git 用户和邮箱：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "Your Name"</span><br><span class="line">git config --global user.email "email@example.com" </span><br></pre></td></tr></tbody></table></figure><p>把自己 ssh key 中的私钥 <code>id_rsa</code> 放到自己 linux 用户目录的 <code>.ssh</code> 文件夹里面，改权限为 0600。</p><p>安装 hexo-github 插件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git </span><br></pre></td></tr></tbody></table></figure><p>提交！</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></tbody></table></figure><p>一会儿访问 xxx.github.io 就能看到自己的博客了。</p></li></ol><h2 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h2><p>参考文章：</p><ul><li><a href="https://blog.csdn.net/tangyb828/article/details/110389851">PicGo+GitHub 你的最佳免费图床选择！</a></li><li><a href="https://blog.csdn.net/weixin_43571641/article/details/106448498">[教程] PicGo+GitHub 免费图床搭建</a></li></ul><p>其实凑合一点存在项目内也不是不行。不过我的文章先在另一台设备的 typora 里面写完再上传到博客的，这样显然不太行。</p><p>如果不考虑国内访问，存在 imgur 就可以了，还有 shareX 这种工具能够方便的截图上传。</p><p>如果坚信自己的图片能够过审核！那可以存在 sm.ms。（我本来打算存那儿的，结果就那么几张为了实验找出来的图我还给敏感部位打了码最后还是被 delete 了两张）</p><p>最后决定先存 github 吧。虽然 github 的 raw.githubusercontent.com 今年由于某个原因变得不稳定了起来，但偶尔还能用，而且还有 cdn 加速勉强撑着。和上面两个图床相比还有一个优势就是上传上去的图片文件名不会变。未来无论是重新下回来还是上传到其他也不会改文件名的图床都会方便一些（批量改域名就可以）。</p><p>如果有 vps 而且流量多的话，可以考虑在 vps 中开一个图床，这里就不详细探究了。</p><ol><li><p>在 github 新建一个默认创建 README.md 的 public 仓库。（话说我有点害怕 github 来查我水表，于是我新开了了一个小号）</p></li><li><p>获取一个 github Personal access tokens，只需要 repo 权限。</p></li><li><p>在 picgo 中填写相应参数。坑来了：现在已经是 0202 年了，新项目没有 master 分支这个说法了。。。我踩进去半天才反应过来。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201218041918.png"></p><p>仓库名填 [ 账号名 ]/[ 仓库名 ]。</p><p>自定义域名，可以用 github 源 url。不排除未来 github 的源 url 再次更改，没关系，项目里面不是默认有个 README.md 吗？点开他，下面有个 raw，点开以后显示的域名去掉 README.md 就是我们要往自定义域名填的东西。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://raw.githubusercontent.com/[用户名]/[仓库名]/[分支名]</span><br></pre></td></tr></tbody></table></figure><p>或者用加速 cdn <a href="https://www.jsdelivr.com/?docs=gh">jsdelivr</a>。version 这里填分支名。后面带上 README.md 访问一下就知道自己有没有改对 url 了。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/user/repo@version</span><br></pre></td></tr></tbody></table></figure><p><strong>（20.12.23 更新）</strong> 今天传图片的时候遇到问题了。传了一张 50k 的图片，在 typora 中没显示出来。用浏览器打开一看：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Package size exceeded the configured limit of 50 MB. Try https://github.com/zbpicture/picture/tree/main/img/iiHvIIn.png instead.</span><br></pre></td></tr></tbody></table></figure><p>问题是这个图片那么小是怎么超过 50M 的？而且后面又传了两个图片，没问题。打开 github，上面三张图片都在。</p><p>原因未知但有解决方法：参考<a href="https://blog.shiyunhong.com/3353.html">记一下JsDelivr踩的坑</a>。</p><p>把链接中的 main 改成 master 就能显示出来了。</p><p>问题和解决方法都一样神秘的说。</p><p><strong>(21.1.1 更新)</strong> 发现一张图片码没打全，去 github 那边手动删掉重新上传，但发现 cdn 那边还是没有更新的样子？看来只能手动更新了。参考文章：<a href="https://www.cnblogs.com/UncleZhao/p/13753723.html">jsdelivr CDN 使用和缓存刷新 - 易波叶平 - 博客园</a></p><p>打开那张图片的 url，将其中的</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/</span><br></pre></td></tr></tbody></table></figure><p>切换为</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://purge.jsdelivr.net/</span><br></pre></td></tr></tbody></table></figure><p>即可。</p></li></ol><h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><h3 id="添加标签和分类"><a href="#添加标签和分类" class="headerlink" title="添加标签和分类"></a>添加标签和分类</h3><p>参考文章：</p><ul><li><a href="https://www.zhihu.com/question/29017171">hexo 下的分类和表签无法显示，怎么解决？</a></li><li><a href="https://aiellochan.com/2018/02/13/hexo/Hexo-%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%A4%9A%E4%B8%AA-categories/">Hexo 一篇文章多个 categories</a></li></ul><p>添加相应的文件夹：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new page "tags"</span><br><span class="line">hexo new page "categories"</span><br></pre></td></tr></tbody></table></figure><p>然后在 <code>source/</code> 相应文件夹下会看到一个 <code>index.md</code>，打开在代码块里面新增一个 type，type 的值就放相应的功能名。如果你不知道相应的功能名叫什么的话，去 next 配置文件里面 menu 那个地方看，或者直接往上翻，我曾经提到过。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201220065728.png"></p><p>之后就可以在对应博文的代码块中加入 categories 和 tags 属性了。要注意，如果要设置多个标签，格式是这样的：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tags：</span><br><span class="line">- tag1</span><br><span class="line">- tag2</span><br></pre></td></tr></tbody></table></figure><p><strong>（21.1.20 更新）</strong> 可以但不推荐的方法（虽然看起来显得简洁，但如果未来要使用 <a href="https://github.com/D0n9X1n/hexo-blog-encrypt">hexo-blog-encrypt</a> 来加密文章的话，这样写最后部署会报错，参见<a href="https://github.com/D0n9X1n/hexo-blog-encrypt/issues/163">安装后 hexo 部署报错 · Issue #163 · D0n9X1n/hexo-blog-encrypt</a>）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tags: [tag1,tag2]</span><br></pre></td></tr></tbody></table></figure><p>但如果要设置多个种类，格式是这样的：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line"> - [category1]</span><br><span class="line"> - [category2]</span><br></pre></td></tr></tbody></table></figure><p>还要注意，此时如果你边开着本地预览边改，需要重启一遍 <code>hexo s</code> 才会生效。如果你更换了文章的 tag，还需要刷新（完全重新部署，这个命令很常用，接下来还会频繁用到）：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean&amp;&amp;hexo g</span><br><span class="line">#新方法，嫌旧方法执行两个命令麻烦的时候使用，无法完全替代旧方法</span><br><span class="line">#hexo g -f</span><br></pre></td></tr></tbody></table></figure><p>注意 tags 和 categories 的大小写问题，建议做好约定以便区分，比如 categories 除了特定名词外固定首字母大写，其他小写；tags 除了固定名词外一律小写。如果不小心出现了大小写混淆导致刷新不完全的问题，参见 <a href="https://zbttl.github.io/hexo-jin-jie/">hexo 进阶</a>。</p><h3 id="添加火柴棒动态背景"><a href="#添加火柴棒动态背景" class="headerlink" title="添加火柴棒动态背景"></a>添加火柴棒动态背景</h3><p>参考文章：<a href="https://lvxuefei.top/%E5%88%A9%E7%94%A8Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89-%E4%BC%98%E5%8C%96-%E5%90%84%E7%A7%8Dtips%E3%80%81%E9%BB%91%E7%A7%91%E6%8A%80%EF%BC%8C%E4%B8%8D%E6%96%AD%E6%9B%B4%E6%96%B0/">利用 Hexo+Next 搭建个人博客（三）—— 优化 (各种 tips、黑科技，不断更新)</a>)</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd themes/next</span><br><span class="line">git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest</span><br></pre></td></tr></tbody></table></figure><p>在主题配置文件中新增：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">canvas_nest:</span><br><span class="line">  enable: true# 是否显示true|false</span><br><span class="line">  onmobile: true # 是否在移动端展示true|false</span><br><span class="line">  color: "120,120,120" # 线条的颜色（RGB表示）, 用 `,` 隔开</span><br><span class="line">  opacity: 0.5 # 线条头透明度: 0~1</span><br><span class="line">  zIndex: -1 # 用于控制线条所在层的位置, 默认:-1。值越大，显示的层面离用户越近。</span><br><span class="line">  count: 150# 线条的总条数</span><br></pre></td></tr></tbody></table></figure><h3 id="添加鼠标点击特效"><a href="#添加鼠标点击特效" class="headerlink" title="添加鼠标点击特效"></a>添加鼠标点击特效</h3><p>有两种实现方法，第一种参考<a href="https://blog.csdn.net/qq_42889280/article/details/103087564">Hexo博客+Next主题鼠标点击特效</a>，是老版本在 <code>/themes/next/layout/_custom/custom.swig</code> 调用第三方 js，虽然新版本已经不存在 <code>/themes/next/layout/_custom/</code>这个文件夹了，但仍可以通过手工创建并在  <code>/themes/next/layout/_layout.swig</code> body 中用 include 引入生效。</p><p>但我更推荐新方法：</p><p>参考文章：<a href="https://dongguagua.gitee.io/archives/6f944b02.html">NexT 主题自定义样式</a></p><p>相比上面的旧方法，新方法热切换鼠标点击效果的时候本地预览不会突然崩掉。</p><p>在主题配置文件中找到 <code>custom_file_path:</code>，取消下面</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bodyEnd: source/_data/body-end.swig</span><br></pre></td></tr></tbody></table></figure><p>这行的 # 号注释。</p><p>编辑（新建） <code>source/_data/body-end.swig</code>，加入下面的内容：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">{# 鼠标点击特效 #}</span><br><span class="line">{% if theme.cursor_effect == "fireworks" %}</span><br><span class="line">  &lt;script async src="/js/cursor/fireworks.js"&gt;&lt;/script&gt;</span><br><span class="line">{% elseif theme.cursor_effect == "explosion" %}</span><br><span class="line">  &lt;canvas class="fireworks" style="position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;" &gt;&lt;/canvas&gt;</span><br><span class="line">  &lt;script src="//cdn.bootcss.com/animejs/2.2.0/anime.js"&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script async src="/js/cursor/explosion.min.js"&gt;&lt;/script&gt;</span><br><span class="line">{% elseif theme.cursor_effect == "love" %}</span><br><span class="line">  &lt;script async src="/js/cursor/love.min.js"&gt;&lt;/script&gt;</span><br><span class="line">{% elseif theme.cursor_effect == "text" %}</span><br><span class="line">  &lt;script async src="/js/cursor/text.js"&gt;&lt;/script&gt;</span><br><span class="line">{% endif %}</span><br></pre></td></tr></tbody></table></figure><p>然后打开 <code>source/js</code>，新建 <code>cursor</code> 文件夹。进入其中用 wget 下载四个 js 文件，对应四种特效：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://cdn.jsdelivr.net/gh/zbpicture/picture@main/explosion.min.js</span><br><span class="line">wget https://cdn.jsdelivr.net/gh/zbpicture/picture@main/fireworks.js</span><br><span class="line">wget https://cdn.jsdelivr.net/gh/zbpicture/picture@main/love.min.js</span><br><span class="line">wget https://cdn.jsdelivr.net/gh/zbpicture/picture@main/text.js</span><br></pre></td></tr></tbody></table></figure><p>最后在主题配置文件中放入一行</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cursor_effect: text # fireworks：礼花 | explosion：爆炸 | love：浮出爱心 | text：浮出文字</span><br></pre></td></tr></tbody></table></figure><p>即可</p><p>才怪。你会发现除了 text 以为的特效都正常，但使用 text 时，什么都没发生？按下 f12，弹出这么个错误：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201219211715.png"></p><p>查了半天不知道什么问题，干脆大力出奇迹。在 <code>source/_data/body-end.swig</code> 最顶上加一行：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type="text/javascript" src=" https://cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js"&gt;&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p><del>搞定。</del></p><p><strong>(21.1.22 更新）</strong> 才怪。我们刚刚修改了 <code>source</code> 文件夹下的 <code>_data</code> 和 <code>js</code> 文件夹。但 hexo 的机制，会在部署时把 <code>source</code> 下开头不带下划线的文件夹文件都渲染了，<code>_data</code> 带下划线没事，<code>js</code> 文件夹的文件一渲染内容就全乱了，然后就会出错。解决方法是设置渲染 <code>skip_render</code>。参考文章：<a href="https://segmentfault.com/q/1010000003957602">Hexo编译文档时把JS给写乱了，请问怎么解决？ - SegmentFault 思否</a></p><p>修改全局配置文件，找到 <code>skip_render:</code>，设置值为：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render: js/**</span><br></pre></td></tr></tbody></table></figure><p>意思是渲染时跳过 <code>source/js</code> 下所有文件和文件夹。</p><h3 id="添加置顶"><a href="#添加置顶" class="headerlink" title="添加置顶"></a>添加置顶</h3><p>参考文章：<a href="https://www.cnblogs.com/lqerio/p/11117467.html">HEXO添加置顶功能</a></p><p>卸载旧模块安装新模块：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-generator-index</span><br><span class="line">npm install hexo-generator-index-pin-top</span><br></pre></td></tr></tbody></table></figure><p>在需要置顶的博文的开头代码块中加入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top: true</span><br></pre></td></tr></tbody></table></figure><p>即可。</p><h3 id="去除-hexo-支持信息与主题版本信息，侧边栏社交信息链接，向上滚动按钮整合文章进度显示，添加代码块复制按钮，权利声明"><a href="#去除-hexo-支持信息与主题版本信息，侧边栏社交信息链接，向上滚动按钮整合文章进度显示，添加代码块复制按钮，权利声明" class="headerlink" title="去除 hexo 支持信息与主题版本信息，侧边栏社交信息链接，向上滚动按钮整合文章进度显示，添加代码块复制按钮，权利声明"></a>去除 hexo 支持信息与主题版本信息，侧边栏社交信息链接，向上滚动按钮整合文章进度显示，添加代码块复制按钮，权利声明</h3><p>参考文章：<a href="https://lvxuefei.top/%E5%88%A9%E7%94%A8Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89-%E4%BC%98%E5%8C%96-%E5%90%84%E7%A7%8Dtips%E3%80%81%E9%BB%91%E7%A7%91%E6%8A%80%EF%BC%8C%E4%B8%8D%E6%96%AD%E6%9B%B4%E6%96%B0/">利用 Hexo+Next 搭建个人博客（三）—— 优化 (各种 tips、黑科技，不断更新)</a>)</p><p>都是内置功能。</p><p>可以在主题配置文件里面找到相应内容。</p><p>支持信息和主题版本搜索 <code>powered</code> 和 <code>theme</code> 字段。</p><p>社交信息链接搜索 <code>social</code> 字段。</p><p>代码块复制按钮搜索 <code>codeblock</code> 字段，修改其中的 <code>copy_button</code> 参数。</p><p>向上滚动按钮整合文章进度显示搜索 <code>back2top</code> 字段，修改其中的 <code>scrollpercent</code> 参数。</p><p>权利声明修改 <code>creative_commons</code> 字段，其中的 <code>license</code> 参数决定你使用那种权利声明，参考<a href="https://zhuanlan.zhihu.com/p/154075043">怎样为自己的文章添加合适的许可（共用许可证-Creative Commons licenses）</a>，我觉得既然咱们决定用这玩意那最少也用个 by-sa。</p><h3 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h3><p>参考文章：<a href="https://lvxuefei.top/%E5%88%A9%E7%94%A8Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89-%E4%BC%98%E5%8C%96-%E5%90%84%E7%A7%8Dtips%E3%80%81%E9%BB%91%E7%A7%91%E6%8A%80%EF%BC%8C%E4%B8%8D%E6%96%AD%E6%9B%B4%E6%96%B0/">利用 Hexo+Next 搭建个人博客（三）—— 优化 (各种 tips、黑科技，不断更新)</a>)</p><ol><li>安装 <a href="https://links.jianshu.com/go?to=https://github.com/flashlab/hexo-generator-search">hexo-generator-searchdb</a> 插件</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>打开全局配置文件，在下面添加</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 搜索</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>打开主题配置文件找到 <code>Local search</code>，将 <code>enable</code> 设置为 <code>true</code></li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  trigger: auto# trigger若为auto, 通过改变输入触发搜索</span><br><span class="line">  # trigger若为manual, 通过按下enter键或者点击搜索按钮触发搜索</span><br><span class="line">  top_n_per_article: 1 # 展示每篇文章的前n个结果，如果想要展示所有结果，设置为-1</span><br><span class="line">  unescape: false# 将html字符串转义为可读的字符串。</span><br><span class="line">  preload: false# 当加载页面时预加载搜索结果</span><br></pre></td></tr></tbody></table></figure><h3 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h3><p>安装 <code>hexo-symbols-count-time</code> 模块</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-symbols-count-time</span><br></pre></td></tr></tbody></table></figure><p>其实就能用了。但相应的参数还可以改一下。</p><p>打开主题配置文件找到 <code>symbols-count-time</code> 字段。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true</span><br><span class="line">  item_text_post: true</span><br><span class="line">  item_text_total: true</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br></pre></td></tr></tbody></table></figure><p>然后做一次刷新</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean&amp;&amp;hexo g</span><br></pre></td></tr></tbody></table></figure><p>避免出现不生效的 bug。（参考<a href="https://github.com/theme-next/hexo-symbols-count-time/issues/53">The symbols count is undefined and reading time is NaN:aN. #53</a>）</p><h3 id="统计访问量"><a href="#统计访问量" class="headerlink" title="统计访问量"></a>统计访问量</h3><p>参考文章：<a href="https://lvxuefei.top/%E5%88%A9%E7%94%A8Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89-%E4%BC%98%E5%8C%96-%E5%90%84%E7%A7%8Dtips%E3%80%81%E9%BB%91%E7%A7%91%E6%8A%80%EF%BC%8C%E4%B8%8D%E6%96%AD%E6%9B%B4%E6%96%B0/">利用 Hexo+Next 搭建个人博客（三）—— 优化 (各种 tips、黑科技，不断更新)</a>)</p><p>使用<a href="http://ibruce.info/2015/04/04/busuanzi/">不蒜子</a></p><p>打开主题配置文件找到 <code>busuanzi_count</code> 字段，将 <code>enbale</code> 设置为 <code>true</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  enable: true                #是否显示计数ture|false</span><br><span class="line">  total_visitors: true  #访客数，uv的方式，单个用户连续点击n篇文章，只记录1次访客数</span><br><span class="line">  total_visitors_icon: user</span><br><span class="line">  total_views: true           #访问量，pv的方式，单个用户连续点击n篇文章，记录n次访问量</span><br><span class="line">  total_views_icon: eye</span><br><span class="line">  post_views: true            #是否显示每篇文章的访问次数ture|false</span><br><span class="line">  post_views_icon: eye</span><br></pre></td></tr></tbody></table></figure><h3 id="文章自动折叠"><a href="#文章自动折叠" class="headerlink" title="文章自动折叠"></a>文章自动折叠</h3><ol><li><p>安装插件 <code>hexo-excerpt</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-excerpt</span><br></pre></td></tr></tbody></table></figure></li><li><p>修改全局配置文件，新增以下内容（话说好多参考文章甚至是官方文档用的 <code>auto_excerpt</code> 在我这不生效，不知道啥原因）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">excerpt:</span><br><span class="line">  depth: 2</span><br><span class="line">  excerpt_excludes: []</span><br><span class="line">  more_excludes: []</span><br><span class="line">  hideWholePostExcerpts: false</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><p>一顿操作，不免装了一些没用模块，用些命令清理一下。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm prune</span><br><span class="line">hexo clean</span><br></pre></td></tr></tbody></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>现在博客只搞了最基础的美化，以及我觉得有必要实现的功能。其他高级一点的功能再说吧，比如 rss 啊，评论啊，说回来我评论不怎么想开（玻璃心），但想着能发动人民群众给我挑错误也还不错。不过听说评论还有好多种不同的实现方式，研究研究再说。（实在是受不了我就开个类似的东西，比如点赞？hexo 支持这玩意么）</p><h2 id="其他优秀参考文章集合"><a href="#其他优秀参考文章集合" class="headerlink" title="其他优秀参考文章集合"></a>其他优秀参考文章集合</h2><ul><li><a href="https://www.jianshu.com/p/9f0e90cc32c2">Hexo-NexT配置超炫网页效果</a></li><li><a href="https://tding.top/archives/567debe0.html">本博客当前使用的插件总结</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;罗马不是一日建成的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但我的博客可以！&lt;span class=&quot;github-emoji&quot;&gt;&lt;span&gt;🐶&lt;/span&gt;&lt;img src=&quot;https://github.githubassets.com/images/icons/emoji/unicode/1f436.png?v8&quot; aria-hidden=&quot;true&quot; onerror=&quot;this.parent.classList.add(&#39;github-emoji-fallback&#39;)&quot;&gt;&lt;/span&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="博客" scheme="https://zbttl.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="hexo" scheme="https://zbttl.github.io/tags/hexo/"/>
    
    <category term="NexT" scheme="https://zbttl.github.io/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>解决 Windows 解码器导致的 DLNA 无法投屏问题</title>
    <link href="https://zbttl.github.io/2020-12-06-23/"/>
    <id>https://zbttl.github.io/2020-12-06-23/</id>
    <published>2020-12-06T15:58:32.000Z</published>
    <updated>2021-01-20T19:17:05.318Z</updated>
    
    <content type="html"><![CDATA[<p>参考文章：<a href="https://jingyan.baidu.com/article/148a19214c4f770d70c3b14b.html">win10 电脑开启 DLNA 投屏（支持 rmvb/flv 全格式）</a></p><p>之前以为 dlna 很难用。。。其实电脑和电视在同一个 wifi 下，通过某种手段把文件投过去就行了。</p><p>参考文章说的挺详细了，一般的 mp4 格式其实右键就可以投屏。但主要是 flv 和浏览器这种东西就没法投。除了装 kodi 之类的软件外，还有一种方法就是改造 windows media player。</p><p>在媒体流处把启用媒体流和允许本地网络打开，然后就装解码器即可。</p><p>文章里推荐的是 <a href="https://www.majorgeeks.com/files/details/win7codecs.html">Shark007 ADVANCED Codecs</a>，这玩意。。。实话说，内含的缩略图拓展 software 做的还不错，但一个是装完以后只是 windows media player 能放 flv 了，但大量 flv 在 media player 里面却还是扫不出来；还有就是难装难卸，难装并不是指我超链接过去下载的 exe 难装，而是它本身在我常用的包管理器 chocolatey 里面有源，但那个源我无论是用实机还是用虚拟机都装不上，换版本也不行，问题十分奇葩；卸载的时候我的 explore.exe 直接崩掉了，甚至没法用任务管理器新建任务拉起来，只能注销。</p><p>更推荐我之前在 18.6.22 那个无比详尽的视频日记里面提到过的 k-litecodec，可以直接用 chocolatey 装，也不用装 full 版，装个 basic 就可以了</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install -y k-litecodecpackbasic</span><br></pre></td></tr></tbody></table></figure><p>然后去 media player 里面，把原来的视频库的视频文件夹移除再加回来；或者新建一个文件夹把 flv 放进去再加进视频库里面，就可以了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;参考文章：&lt;a href=&quot;https://jingyan.baidu.com/article/148a19214c4f770d70c3b14b.html&quot;&gt;win10 电脑开启 DLNA 投屏（支持 rmvb/flv 全格式）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;之前以为 dlna 很难用。。。其实电脑和电视在同一个 wifi 下，通过某种手段把文件投过去就行了。&lt;/p&gt;</summary>
    
    
    
    <category term="影音" scheme="https://zbttl.github.io/categories/%E5%BD%B1%E9%9F%B3/"/>
    
    
    <category term="DLNA" scheme="https://zbttl.github.io/tags/DLNA/"/>
    
    <category term="windows" scheme="https://zbttl.github.io/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>玩一下 imagemagick</title>
    <link href="https://zbttl.github.io/2020-12-04-23/"/>
    <id>https://zbttl.github.io/2020-12-04-23/</id>
    <published>2020-12-04T15:58:32.000Z</published>
    <updated>2021-01-20T17:39:00.800Z</updated>
    
    <content type="html"><![CDATA[<p>imagemagick，在我这里大概有两大类用途：</p><ol><li>没有 ps，下个 ps 贼大，怎么办？命令行修图吧。。。</li><li>gif 加速（配合 ffmpeg）</li></ol><p>不过这玩意那是相当复杂。。。以下是一些入门教程：</p><ul><li><a href="https://www.jianshu.com/p/310d833d9a25">ImageMagick 入门教程</a></li><li><a href="http://www.charry.org/docs/linux/ImageMagick/ImageMagick.html">我的 ImageMagick 使用心得</a></li><li><a href="http://www.pooy.net/category/os/imagemagick-os">璞玉（POOY）Category: Imagemagick</a></li><li><a href="https://blog.csdn.net/ihtml5/article/details/88084364">ImageMagick 高级教程整理</a></li><li><a href="http://www.360doc.cn/userhome.aspx?userid=1947337">ImageMagick 使用经验</a></li></ul><p>文档：</p><ul><li><a href="https://imagemagick.org/script/command-line-processing.php">官方文档</a></li><li><a href="https://imagemagick.org/script/command-line-options.php">官方参数文档</a></li><li><a href="http://www.imagemagick.com.cn/command_line_options.html">中文（看起来有一定机翻）参数文档</a></li><li><a href="https://legacy.imagemagick.org/Usage/">Examples of ImageMagick Usage</a></li></ul><p>请注意，本文完成时所使用的 Imagemagick 版本为 7.0.10-48 Q16 x64 2020-12-10（windows），修复了 Imagemagick 无法直接将 mp4 转换为 gif 的问题，可通过 chocolatey 安装并通过 <code>magick -version</code> 查看版本；在 Linux 上还安装了老版本的 Imagemagick，版本为 6.9.10-23 Q16 x86_64 20190101，通过 ubuntu 19.10 的 apt 安装指令安装，可通过 <code>convert -version</code> 查询版本。</p><h2 id="图像配字"><a href="#图像配字" class="headerlink" title="图像配字"></a>图像配字</h2><p>适用场景：表情包制作（x</p><p><code>-gravity</code>：文字位置，可选东西南北中（</p><p><code>-fill</code> 和 <code> -stroke</code>：文字颜色和边框</p><p><code>-pointsize</code>：文字大小，必填</p><p><code>-kerning</code>：文字间隔</p><p><code>-font</code>：如果你要写中文的话。。。就得指定中文字体</p><p><code>-annotate</code>：偏移，一般表情包的字也不会放最边边，还是要往中间偏点点~</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">magick .\0.jpg -gravity south -fill white -pointsize 400 -kerning 600  -stroke black -font 'SimSun-&amp;-NSimSun' -annotate +0+150 '[内容]'   0_des.jpg</span><br></pre></td></tr></tbody></table></figure><h2 id="马赛克（伪）"><a href="#马赛克（伪）" class="headerlink" title="马赛克（伪）"></a>马赛克（伪）</h2><p>后面的举例图有 nsfw 内容！我暂时还不知道怎么给图片打多边形马赛克 / 模糊。。。只能简单用白色多边形遮一下。</p><p><code>draw</code>：后面跟的 polygon 是多边形的意思，要裁其他图形的话参考这里 <a href="https://imagemagick.org/script/command-line-options.php#draw">draw</a>。后面的参数是多边形的座标，具体座标挺多画图软件能查看的（比如 irfanview），甚至 magick 自带工具 display 命令都可以。后面座标就按单向连通图的顺序，顺时针逆时针都可以。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">magick .\0raw.jpg -fill white  -draw 'polygon 342,2031 125,2274 330,2809 677,2851 652,2470' .\0.jpg</span><br></pre></td></tr></tbody></table></figure><h2 id="纠偏-裁剪"><a href="#纠偏-裁剪" class="headerlink" title="纠偏 + 裁剪"></a>纠偏 + 裁剪</h2><p>经常收壁纸，有的画集是有外框的，我有强迫症要把外框剪掉（而且有外框做壁纸也不好看）。另外，有的画集是扫描的，但扫描的时候没有彻底放正，导致剪裁的时候会发现有一点点歪。通常我会使用 photoshop 的透视剪裁来处理这类图片，不过这次 magick 有比较自动化的命令，来试试效果怎么样。</p><p>样张（不要吐槽这是张色图，我暂时懒得找又歪又有边框的图了，扫了一眼手机的图册就只有这张，而且这张图片和外框相接触的部分还带有一些彩边，非常适合检测算法的能力）：</p><p><img src="https://raw.githubusercontent.com/zbpicture/picture/main/img/005.jpg"></p><p>另外，下面的样图因为图床大小限制原因被我转成 jpg，但我操作的时候用的是原图 png。</p><h3 id="方法-1：用-photoshop-裁剪工具（不纠偏）"><a href="#方法-1：用-photoshop-裁剪工具（不纠偏）" class="headerlink" title="方法 1：用 photoshop 裁剪工具（不纠偏）"></a>方法 1：用 photoshop 裁剪工具（不纠偏）</h3><p>手工裁剪，尽量保留最大方形可见面积，且几乎不容忍任何解析度较低的彩边。</p><p>最后得到 2427x3429 大小的图片。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/005_ps1.jpg"></p><h3 id="方法2：用-photoshop-透视裁剪工具（顺便纠偏）"><a href="#方法2：用-photoshop-透视裁剪工具（顺便纠偏）" class="headerlink" title="方法2：用 photoshop 透视裁剪工具（顺便纠偏）"></a>方法2：用 photoshop 透视裁剪工具（顺便纠偏）</h3><p>手工像素级裁剪，尽量保留最大方形可见面积，且几乎不容忍任何解析度较低的彩边。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/005_ps2.jpg"></p><p>最后得到 2441x3434 大小的图片。目前最标准和完美的结果，也是下面操作的基准目标。</p><h3 id="方法3-直接使用-magick-自动检测"><a href="#方法3-直接使用-magick-自动检测" class="headerlink" title="方法3: 直接使用 magick 自动检测"></a>方法3: 直接使用 magick 自动检测</h3><p><code>-fuzz</code> 模糊检测因子，越大容忍度越低，裁掉的内容也就越多</p><p><code>-border</code> 边框最小尺寸</p><p><code>+repage</code> 消除位移属性（可有可无）</p><p><code>-trim</code> 进行裁剪</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert 005.png  -fuzz 73% -border 1x1 +repage -trim 005_magick1.png</span><br></pre></td></tr></tbody></table></figure><p>显然裁少了一截。最后只得到 2410x3293 尺寸的图片。fuzz 参数也没有调整余地了，调小成 72 右上角的字就消不掉。右上角的字和头发颜色相仿似乎使 magick 识别出现了混乱。另外右下角还有显而易见没裁掉的白边。</p><p>加一个代表指定边框颜色的 <code>-bordercolor</code> 参数，fuzz 参数就要提高到 85。color 具体能填什么，参考这里：<a href="https://imagemagick.org/script/color.php#usage">Color Name</a></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert 005.png -bordercolor '#ffffff' -fuzz 85% -border 1x1 +repage -trim 005_magick1.png</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/005_magick1.jpg"></p><p>分辨率变成 2412x3294。问题依旧。</p><p>去掉 <code>-boader</code> 参数。fuzz 可以降低到 60 多，但此时裁掉的像素就太多。差出数量级，这里就不给数据了。</p><h3 id="方法-4：自动旋转后使用-magick-检测拼接"><a href="#方法-4：自动旋转后使用-magick-检测拼接" class="headerlink" title="方法 4：自动旋转后使用 magick 检测拼接"></a>方法 4：自动旋转后使用 magick 检测拼接</h3><p><code>-deskew</code> 是自动倾斜校正参数。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert 005.png -background white -deskew 40% 005_tem.png</span><br></pre></td></tr></tbody></table></figure><p>然后</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert 005_tem.png  -fuzz 73% -border 1x1 +repage -trim +repage 005_magick2.png</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/005_magick2.jpg"></p><p>分辨率变成 2412x3269。仍然不完美，但白边没那么明显了。另外我尝试过 <code>-deskew 100%</code> 这个参数，结果二次处理后白边更大，效果不好。</p><h3 id="方法-5：magick-检测拼接，然后再自动旋转"><a href="#方法-5：magick-检测拼接，然后再自动旋转" class="headerlink" title="方法 5：magick 检测拼接，然后再自动旋转"></a>方法 5：magick 检测拼接，然后再自动旋转</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">convert 005.png  -fuzz 50% -border 1x1 +repage -trim +repage 005_tem.png   </span><br><span class="line">convert 005_tem.png -background white -deskew 40% 005_tem2.png</span><br><span class="line">convert 005_tem2.png  -fuzz 73% -border 1x1 +repage -trim +repage 005_magick3.png </span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/005_magick3.jpg"></p><p>虽说分辨率甚至是图像和方法 4 出来的几乎都一模一样，不过 tem2 和 tem 两张图对比，后者有明显的纠偏痕迹了。但究竟是 magick3 trim 的时候又纠回来了还是之前的 trim 带了纠偏效果我就看不出来了。</p><h3 id="方法6（magick-7-专用）"><a href="#方法6（magick-7-专用）" class="headerlink" title="方法6（magick 7 专用）"></a>方法6（magick 7 专用）</h3><p>参考文章：<a href="https://imagemagick.org/discourse-server/viewtopic.php?f=4&amp;t=35579">Enhanced -trim operator</a></p><p>注意这里的 <code>-define trim:percent-background=15%</code>，含义和上面的 <code>-fuzz</code> 完全相反，越小裁掉的内容越多。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">magick 005.png  -define trim:percent-background=15% -define trim:background-color='#ffffff' -trim 005_tem.png</span><br></pre></td></tr></tbody></table></figure><p>分辨率 2440x3431。接近手工调整的结果了，但看起来还是有白边。特别是纠偏以后：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert 005_tem.png  -background white -deskew 40%  005_tem1.png</span><br></pre></td></tr></tbody></table></figure><p>尝试使用纯粹的 trim 方法（也就是方法 3），发现无论如何都剪不掉那些细小的白边。甚至把 <code>-fuzz</code> 参数调到 80 了，把图片上部剪掉一些了结果右侧的细小白边也还没被剪掉。</p><p>继续用本方法裁一遍</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">magick 005_tem1.png  -define trim:percent-background=15% -define trim:background-color='#ffffff' -trim 005_magick4.png</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/005_magick4.jpg"></p><p>极限了，还是有肉眼可见的白边，但再把 <code>-define trim</code> 参数调小就又影响画面了。白边的大小，相比只纠偏以后的效果，勉强是可以接受的。此时分辨率为 2437x3429。</p><h3 id="方法7：将白色边框中的多余的部分用-gui（画图-ps）剪掉，再处理"><a href="#方法7：将白色边框中的多余的部分用-gui（画图-ps）剪掉，再处理" class="headerlink" title="方法7：将白色边框中的多余的部分用 gui（画图 / ps）剪掉，再处理"></a>方法7：将白色边框中的多余的部分用 gui（画图 / ps）剪掉，再处理</h3><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/0054.jpg"></p><p>既然纠偏和裁剪顺序定下来了，那我们顺便把命令也集成在一起。</p><p>看起来虽然剪掉了多余的部分让 <code>-fuzz</code> 和 <code>-define trim:percent-background</code> 不需要那么高（低）就能识别出真正边框的大致轮廓；但要确定下具体轮廓，好像还是不行（意思是还是有白边），看起来应该是纠偏没有办法纠的太正？</p><p><code>-fuzz</code> 下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert 0052.png   -deskew 40% -fuzz 70% -bordercolor white -border 1x1 +repage -trim 005_magick5.png</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/005_magick5.jpg"></p><p>分辨率 2448x3434。这次本方法能剪出一个比较完整的图像而不会把头发的一部分都给当框削了。</p><p><code>-define trim:percent-background</code> 下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">magick 0052.png  -define trim:percent-background=15% -define trim:background-color='#ffffff' -trim -background white -deskew 40% -define trim:percent-background=15% -define trim:background-color='#ffffff' -trim 005_magick6.png</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/005_magick6.jpg"></p><p>分辨率 2439x3431。白边反而还比 <code>-fuzz</code> 那边要大了，效果还比没有用 gui 修改前的还差。。。（也许是我命令写的有问题，但我感觉就算命令写的没问题白框也削不掉）</p><h3 id="方法-8：去除噪点"><a href="#方法-8：去除噪点" class="headerlink" title="方法 8：去除噪点"></a>方法 8：去除噪点</h3><p>就这样放弃了吗？不！我又查到了一篇新的参考文章：<a href="https://superuser.com/questions/1219030/trimming-exterior-empty-space-with-imagemagick-does-not-work-on-scanned-document">Trimming exterior empty space with ImageMagick does not work on scanned documents</a>，说是扫描件的噪点会干扰软件的判断。</p><p>那就试试先去噪点：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert 0052.png -write MPR:source -morphology close rectangle:3x4 -morphology erode square    MPR:source -compose Lighten -composite -morphology erode square    MPR:source -composite -morphology erode square    MPR:source -composite -morphology erode square    MPR:source -composite -morphology erode square    MPR:source -composite -morphology erode square    MPR:source -composite -morphology erode square    MPR:source -composite -morphology erode square    MPR:source -composite -morphology erode square    MPR:source -composite 0053.png</span><br></pre></td></tr></tbody></table></figure><p>再用 <code>-fuzz</code>。合起来的命令效果不如分开的，那就保险起见用分开的命令。<code>-fuzz</code>需要进一步调低。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">convert 0053.png -background white -deskew 40% 005_tem.png</span><br><span class="line">convert 005_tem.png  -fuzz 50% -border 1x1 +repage -trim +repage 005_magick7.png</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/005_magick7.jpg"></p><p>分辨率 2445x3434。仍有白边。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">magick 0053.png  -define trim:percent-background=15% -define trim:background-color='#ffffff' -trim 005_tem.png</span><br><span class="line">magick 005_tem.png  -background white -deskew 40%  005_tem1.png</span><br><span class="line">magick 005_tem1.png  -define trim:percent-background=15% -define trim:background-color='#ffffff' -trim 005_magick8.png</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/005_magick8.jpg"></p><p>分辨率 2737x3429，有白边。</p><hr><p>结论：在这个时间点，不好用。</p><h2 id="图像拼接"><a href="#图像拼接" class="headerlink" title="图像拼接"></a>图像拼接</h2><p>多张表情包合成（x</p><p><code>-append</code>：竖着拼。如果是 <code>+append</code> 就是横着拼。</p><p><code>-resize</code>：几张图中如果不是尺寸一致一定就会有的图长有的图短。这就要看个人考量了，比如要竖着拼的话，是把窄的图等比缩放到和宽得一样宽，还是把宽的图缩放到和最窄的一样窄，那就在要缩放的图后面加 <code>-resize</code>。<code>resize</code> 的参数是 <code>长x宽</code>，如果有其中一个参数不用改动可以留空，但是要保留 x 号。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert a.jpg  b.jpg -resize 814x -append   0.jpg</span><br></pre></td></tr></tbody></table></figure><h2 id="tgs-转换与加速"><a href="#tgs-转换与加速" class="headerlink" title="tgs 转换与加速"></a>tgs 转换与加速</h2><p>tgs 是 telegram 内动态表情包的专用格式。telegram 内的表情包可以通过机器人 <a href="https://t.me/Stickerdownloadbot">@Stickerdownloadbot</a> 导出单张或批量导出一整个表情包系列的图片，对于静态图片 bot 会同时导出为包含三种不同格式内容的压缩包；但对于动态图片就只会导出为一个内含 tgs 格式文件的压缩包，后续就还需要通过以下方法进行转换才能在其他地方使用。</p><h3 id="tgs-转换"><a href="#tgs-转换" class="headerlink" title="tgs 转换"></a>tgs 转换</h3><h4 id="lottie"><a href="#lottie" class="headerlink" title="lottie"></a>lottie</h4><p>桌面平台，python 里面一个叫 <a href="https://pypi.org/project/lottie/">lottie</a> 的包，建议在 Linux 下使用，windows 下安装繁琐；</p><p>linux：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip3 install lottie</span><br><span class="line">sudo pip3 install --upgrade pip</span><br><span class="line">pip3 install cairosvg opencv-python</span><br><span class="line">pip3 install lottie</span><br><span class="line">lottie_convert.py 0.tgs 0.gif</span><br></pre></td></tr></tbody></table></figure><p>windows：</p><p>参考<a href="https://weasyprint.readthedocs.io/en/stable/install.html#windows">https://weasyprint.readthedocs.io/en/stable/install.html#windows</a>，先安装 <a href="https://github.com/tschoonj">tschoonj</a>/<strong><a href="https://github.com/tschoonj/GTK-for-Windows-Runtime-Environment-Installer">GTK-for-Windows-Runtime-Environment-Installer</a></strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pip install cairosvg pillow</span><br><span class="line">pip install opencv-python</span><br><span class="line">python -m pip install --upgrade pip setuptools</span><br><span class="line">python -m pip install WeasyPrint</span><br><span class="line">pip3 install lottie</span><br><span class="line">python lottie_convert.py 0.tgs 0.gif</span><br></pre></td></tr></tbody></table></figure><h4 id="shu"><a href="#shu" class="headerlink" title="shu"></a>shu</h4><p>ios 上的 shu，美区有售。可将 tgs 批量导出为各种格式，如 webp、gif、pngs 等。</p><h4 id="tgs-to-gif-12-14-更新"><a href="#tgs-to-gif-12-14-更新" class="headerlink" title="tgs-to-gif (12.14 更新)"></a>tgs-to-gif <strong>(12.14 更新)</strong></h4><p>上面两个软件，前者免费但容易出现各类错误，且安装繁琐；后者需要付费但效果尚可。</p><p>最近又出现一个新的 tgs 转换工具 <a href="https://github.com/ed-asriyan">ed-asriyan</a>/**<a href="https://github.com/ed-asriyan/tgs-to-gif">tgs-to-gif</a>**，前面两个工具转换一些 tgs 会出现重影（经过测试不是下面我 gif 速度优化的锅，而是转换出来的帧里面本身就有重影的帧出现），这个工具基本解决了重影的问题，且大部分 gif 也不存在速度过慢的问题。缺点是转换出来的 gif 质量低于前面两个软件，且在 windows 的 irfanview 下播放会出现花屏现象，原因不明。</p><p>在 pc 和虚拟机上上使用建议借助 nodejs 安装；在国外 vps 上使用建议借助 docker 安装。</p><p>原因嘛，docker 方便但因为网络原因安装速度可能会很慢，docker 内部比较难上代理，docker 加速器在这里无效因为跑 docker 的时候我发现这个东西不仅拉镜像还在跑 apt；但 vps 上用 nodejs 还需要非 root 账号，因为本项目用到了 puppeteer，还不一定成功，我在两台 debian 的机子上都掉坑一台找不到 browser 另一台装不上 gifski，找不到 browser 那一回 nodejs 我用了 15，后面发现 15 不行；装不上 gifski 是因为 cargo 都装不上，掉进新坑用命令 <code>rustup install stable</code> 运行到一般就被 kill 了估计是内存都不够了，也不想划虚拟内存了，懒得爬出来了。</p><p>另外 nodejs 运行时的运行目录必须在项目内（但 tgs 文件不需要放在项目内），docker 不需要但写 tgs 文件夹路径的时候得写绝对路径，各有各的麻烦。</p><p>nodejs：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl https://sh.rustup.rs -sSf | sh #并 ctrl+d</span><br><span class="line">curl -sL https://deb.nodesource.com/setup_14.x | bash - #目前不支持15</span><br><span class="line">apt-get install -y nodejs</span><br><span class="line">cargo install gifski</span><br><span class="line">git clone https://github.com/ed-asriyan/tgs-to-gif.git</span><br><span class="line">cd tgs-to-gif</span><br><span class="line">npm install</span><br></pre></td></tr></tbody></table></figure><p>即可使用</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#转换多个 tgs</span><br><span class="line">node cli.js 0.tgs 1.tgs...</span><br><span class="line">#转换整个文件夹</span><br><span class="line">node cli.js /home/zbttl/tgs</span><br></pre></td></tr></tbody></table></figure><p>docker：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/ed-asriyan/tgs-to-gif.git</span><br><span class="line">cd tgs-to-gif</span><br><span class="line">docker build -t tgs-to-gif .</span><br></pre></td></tr></tbody></table></figure><p>即可使用</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm -v &lt;文件夹绝对路径&gt;:/source tgs-to-gif</span><br></pre></td></tr></tbody></table></figure><p><strong>（12 月 23 日更新）</strong> docker 版和 nodejs 效果居然不一样。。。。docker 版出来的效果需要加速，所以只推荐 nodejs 版。至于为什么效果会不一样。。。我猜测是因为 gifski 版本的原因，docker 里面 gifski 版本还是 0.10.4，我在实机中安装的版本已经是 1.22 了。但话说回来，issue 里面刚好就有个人吐槽长度宽度参数不生效[The –height HEIGHT –width WIDTH don’t work #25](The –height HEIGHT –width WIDTH don’t work #25)，作者给的意见是更换喂 gifski 旧版。。。。另外一点，托之前忘记安装 gifski 的福，我看到了部分运行命令：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20201223071937.png"></p><p>合着这质量还只有百分之 80。。。但我在项目中完全查不到这些个帧数质量啥的在哪调，所以没辙。</p><p>先说一下踩进去的坑，不想看的可以跳过下面这一段：</p><h3 id="鉴坑扯淡"><a href="#鉴坑扯淡" class="headerlink" title="鉴坑扯淡"></a>鉴坑扯淡</h3><p>样张：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/1gGuvCbBVJqMRtj.gif"></p><p>用 shu 转完后，发现发出去的图片在 qq 中播放速度相当慢 。</p><p>肯定是啥参数不对。。。查参数的软件，我一开始只记得查视频用的 mediainfo，打开一看，这玩意就不是用来看 gif 参数的。。。只有一个图像格式 87a 和我手上其他 gif 不同，其他 gif 是 89a（后来的后来经过调查，87a 和 89a 的差别，是 87a 是旧标准，不支持半透明参数）。不过还是尝试转一下吧。</p><p>按<a href="https://blog.mutoo.im/2015/01/gif-87a-vs-89a/">检测 GIF 版本的方法</a>，图片确实变成 89a 了，但是出现了严重的重影。。。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Zv9YCok1ql784Hi.gif"></p><p>后续我用了各种类型的软件转换和测试，大概的测试结果如下图：</p><table><thead><tr><th>类型</th><th>张数</th><th>码率</th><th>fps</th><th>tbr</th><th>duration</th><th>delay</th><th>irfanview 5s（循环次）</th><th>windowsqq 10s</th><th>androidqq（10s）</th><th>张数/时间</th><th>张数/时间+delay</th></tr></thead><tbody><tr><td>ps转视频再改回gif</td><td>11</td><td>1646</td><td>33.33</td><td>33.33</td><td>0.33</td><td>0.03</td><td>16</td><td>16</td><td>20</td><td>0.03</td><td>0.06</td></tr><tr><td>ezgif（从webp转换）</td><td>13</td><td>1691</td><td>20</td><td>20</td><td>0.65</td><td>0.05</td><td>7</td><td>13</td><td>15</td><td>0.05</td><td>0.1</td></tr><tr><td>源</td><td>23</td><td>2395</td><td>33.33</td><td>33.33</td><td>0.69</td><td>0.03</td><td>8</td><td>8</td><td>12</td><td>0.03</td><td>0.06</td></tr><tr><td>ezgif（加速）</td><td>23</td><td>3481</td><td>50</td><td>50</td><td>0.46</td><td>0.02</td><td>8</td><td>8</td><td>12</td><td>0.02</td><td>0.04</td></tr><tr><td>ps改帧数</td><td>12</td><td>646</td><td>14</td><td>28</td><td>0.84</td><td>0.07</td><td>6</td><td>15</td><td>11</td><td>0.07</td><td>0.14</td></tr><tr><td>ps改帧数改延迟</td><td>12</td><td>452</td><td>10</td><td>10</td><td>1.2</td><td>0.01</td><td>25</td><td>15</td><td>9</td><td>0.1</td><td>0.11</td></tr><tr><td>imageonline</td><td>23</td><td>716</td><td>10</td><td>10</td><td>2.3</td><td>0</td><td>15</td><td>4</td><td>4</td><td>0.1</td><td>0.1</td></tr></tbody></table><ol><li><p>上面这些转换方法转出来的图片都是没有重影的；</p></li><li><p>前面的这些参数来自 ffprobe 和 imagemagick 的 identify 工具，ffmpeg 的 tbr/duration 参数含义参考这里：<a href="http://ffmpeg-users.933282.n4.nabble.com/What-does-the-output-of-ffmpeg-mean-tbr-tbn-tbc-etc-td941538.html">What does the output of ffmpeg mean? tbr tbn tbc etc?</a>；</p><blockquote><p>FFmpeg中的时间戳有三种不同的时基。实际打印的 值是这些值的倒数，即1 / tbr，1 / tbn和1 / tbc。<br>我认为tbn是AVStream中来自容器的时基 。它用于所有AVStream时间戳。<br>tbc是AVCodecContext中用于特定流的编解码器的时基 。它用于所有AVCodecContext和相关时间戳。<br>tbr是从视频流中推测出来的，它是用户在寻找视频帧速率时希望看到的值 ，只是有时由于场速率与帧速率的关系，它是预期值的两倍 。</p><p>时基：确定帧定时的依据；avstream：音频/视频顺序数据；容器：可以包含音频/视频数据通道的文件格式，例如avi，mp4或mkv；</p><p>我想他们选择报告TBR，是因为ffmpeg对帧率实际是最好的猜测。在许多容器上，fps字段（更具体地说AVStream.avg_frame_rate是）不可用，因此不能真正依靠它。</p></blockquote><p>以及：<a href="https://stackoverflow.com/questions/43333542/what-is-video-timescale-timebase-or-timestamp-in-ffmpeg">What is video timescale, timebase, or timestamp in ffmpeg?</a>]</p></li><li><p>有的情况下帧数越高播放速度反而越慢，不同平台下同样的两种图片有可能速度表现完全相反。这跟 gif 下的 fps 定义和各软件对 gif 定义的理解有关；</p></li><li><p>综合比较 ps 转视频加速改回 gif 效果是最好的。（又是 ps，ps 万能）</p></li></ol><p>另外，shu 也可以把 tgs 换成其他多种格式，但直接能动的就两种：gif 和 webp。上面我用 ezgif 讲 webp 转成 gif，发现速度大体正常，综合参数，我提出一个大胆的假设：应该蛮多软件不看 <code>delay</code> 而是直接以张数作为播放速度的依据。至于为什么不看延迟？可能跟所谓 <a href="https://legacy.imagemagick.org/Usage/anim_basics/#zero">gif 零延迟</a>有关：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">好吧，它们很重要，那又是什么呢？因为许多应用程序不喜欢它们，或者处理不当。他们认为“零延迟帧”是一件坏事，即使您出于某种原因故意将它们添加到动画中也是如此。</span><br><span class="line">这是我了解或被告知“做错事”的应用程序的摘要...</span><br><span class="line">金普不会保存“零延迟帧”，它们总是向具有零时延的任何帧添加最小的时延。:-(</span><br><span class="line"> </span><br><span class="line">火狐在这样的帧上会稍有非零的停顿。大概是这样，根本没有时间延迟的动画会耗尽所有计算机的CPU周期。但是firefox，如果动画的总显示时间为非零，则“ ”仍不能放松该限制。</span><br><span class="line"> </span><br><span class="line">IE浏览器最小时间延迟为6厘秒，并且忽略小于此时间的任何延迟。</span><br><span class="line">如果任何图像帧超出了第一帧设置的动画范围，Internet Explorer 8版本也会失败（立即重新启动循环）。我将其归类为主要错误。</span><br></pre></td></tr></tbody></table></figure><p>因为 0 延迟可能报错，所以干脆就不用延迟来计算了。。。。</p><p>如同这篇文章：<a href="https://www.easeus.com/amp/video-editing-tips/gif-speed-changer.html">Top 10 Best GIF Speed Changers: How to Speed up or Slow down GIF Easily</a> 给出的所有手段几乎都是在 gif 的 delay 参数上动手脚，而 delay 参数又似乎和 fps 挂钩（参考这里：<a href="https://superuser.com/questions/1449366/do-60-fps-gifs-actually-exist-or-is-the-maximum-50-fps">Do 60 FPS GIF’s actually exist? Or is the maximum 50 FPS?</a>)，但如果软件不认可你的 delay 参数，那自然就没有用。那么 gif 就会按照 timebase，也就是 0.04s 一张这个速度进行播放。另外为什么说 delay 似乎和 fps 挂钩呢？因为 delay 设置为 2 和 3 的时候，ffprobe 显示帧数分别为 50fps 和 33.33fps。但！delay 设置为 1 的时候，ffprobe 又显示帧数只有 10fps。。。可能是因为触发了 ffprobe 的最小延迟机制（要求最小延迟为 2，只能显示 50fps）。其实不止 ffprobe，还有许多看图软件的最小延迟也设定为 2。如果 delay 写 1 的话 gif 显示速度反而会变慢。</p><p>本次转换的主要目的是 tgs 转换的 gif 在 qq 上播放较慢。不过后续测试发现是部分 gif 调整 delay 后播放速度没有改观；而本身 delay 较大的 gif 修改 delay 后明显感觉播放速度加快。至于那部分能够修改 delay 加速的 gif 有没有 delay 阈值我倒是没有认真进行过测试。但减少帧数是一定能奏效的（</p><p>另外除了重影，某些软件转换到 gif 过程中会导致背景从透明变为白色，这也是要解决的问题。</p><p>减少 gif 张数，我目前得知两种方法：</p><ol><li><p>抽取关键帧（Image.n_frames），关键帧的概念参见：<a href="https://buildmedia.readthedocs.org/media/pdf/pillow/latest/pillow.pdf">Pillow (PIL Fork) Documentation</a></p><blockquote><p>Image.n_frames:  intThe number of frames in this image.This attribute is only defined by image plugins that support animated images.  Plugins may leave this attributeundefined if they don’t support loading animated images, even if the given format supports animated images.Given that this attribute is not present for all images usegetattr(image, “n_frames”, 1)to checkthe number of frames that Pillow is aware of in an image regardless of its format</p></blockquote><p>但只对那些优化过的 gif 有用（优化过的 gif 是啥意思？参考压缩 gif 一文中的参考文章 3 gif modification）</p></li><li><p>转换成其他格式（比如视频）然后加速后再转回去。上面用 ps 处理过一次，但 ps 是个 gui，批量转换肯定不能用 ps。</p></li></ol><p>另外，对于修改 delay，也建议使用 imagemagick 而不是那些原理不明的工具。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert -delay 2 0.gif 0_change.gif</span><br></pre></td></tr></tbody></table></figure><p>具体修改到什么程度可以参考以下两篇文章：</p><ol><li><p><a href="https://superuser.com/questions/1449366/do-60-fps-gifs-actually-exist-or-is-the-maximum-50-fps">Do 60 FPS GIF’s actually exist? Or is the maximum 50 FPS?</a> 上面引用过了，另外这篇文章里面还有个「暴论」</p><blockquote><p>这意味着，对于100 FPS的图像速率，最小值为1（在大多数显示器上很难呈现…），对于50 FPS的图像速率，其下一个最小值为2，而对于下一个值为3图像速率为33.3 FPS。因此，完全不可能达到60 FPS。</p><p>请注意，此扩展是针对少数几秒钟延迟的帧（最大延迟约为600秒），因此1/100秒的分辨率就足够了。这当然不是视频的意思，这就是为什么该字段编码延迟而不是帧速率的原因。</p><p>制作视频GIF确实是对规范的滥用（即使现在如此普遍，以至于大多数人可能没有意识到这一点，就像大多数人没有意识到GIF和JPEG使用不同类型的压缩一样，并且应该被使用）在不同种类的图像上）。</p></blockquote></li><li><p><a href="https://davidwalsh.name/how-to-change-animated-gif-speed">How to Change Animated GIF Speed</a></p></li></ol><p>转换后听说还可能遭遇再次转回 mp4 出错的问题，可以参考这篇文章：<a href="https://my.oschina.net/u/4404738/blog/3412123">（原）关于使用imagemagick将gif叠加到图片或者画布上的方法，以及疑难杂症</a>（我一开始解决重影问题也是看得这篇文章，后面发现下面正文的参考文章中有更详细的理解，就是比较长）</p><p>除此之外还有很多神秘问题，比如转换后最后一帧和第一帧之间有停顿，闪屏，花屏等，某些问题可以看压缩 gif 一文中的参考文章 3 gif modification。</p><hr><h3 id="转换为-tgs-后可能会出现的问题"><a href="#转换为-tgs-后可能会出现的问题" class="headerlink" title="转换为 tgs 后可能会出现的问题"></a>转换为 tgs 后可能会出现的问题</h3><p>回到正题。总结一下 tgs 转换到 gif 后，要让转换的 gif 达到能看的级别，需要解决：</p><ol><li>转换前动画速度过慢</li><li>转换后的重影</li><li>转换后透明度丢失</li></ol><p>操作后建议用一些工具检测一下参数（比如 delay、张数等）</p><ol><li><p>ffprobe（ffmpeg 随附，可显示码率、tbr/duration、fps）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffprobe 0.gif</span><br></pre></td></tr></tbody></table></figure></li><li><p>imagemagick 中的 identify 工具（magick7 以后的版本都要以 magick 命令打头）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(magick) identify 0.gif</span><br></pre></td></tr></tbody></table></figure><p>identify 主要用来看延迟的，那么可以修改一下命令：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">identify -verbose 0.gif  | grep Delay</span><br></pre></td></tr></tbody></table></figure><p>或者用 identify 自身的通配符（参考：<a href="https://imagemagick.org/script/escape.php">Percent Escape Handling</a> 和 <a href="https://m.656463.com/wenda/ImagemagickGraphicsMagicktxywzml_607">Imagemagick GraphicsMagick image mean command</a>）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">identify -format "%m:%f %wx%h %T\n" .\0.gif</span><br></pre></td></tr></tbody></table></figure></li><li><p><a href="https://legacy.imagemagick.org/Usage/scripts/gif_anim_montage">gif_anim_montage</a> 脚本。可将每帧的形状，处理方式和延迟以顺序的方式集合到一张图片中。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gif_anim_montage 0.gif 0.jpg</span><br></pre></td></tr></tbody></table></figure></li><li><p>查看视频 / gif 总帧数</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffprobe -v error -count_frames -select_streams v:0  -show_entries stream=nb_read_frames -of default=nokey=1:noprint_wrappers=1 0.gif </span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="转换为-tgs-后对于动画速度较慢的处理方法"><a href="#转换为-tgs-后对于动画速度较慢的处理方法" class="headerlink" title="转换为 tgs 后对于动画速度较慢的处理方法"></a>转换为 tgs 后对于动画速度较慢的处理方法</h3><h4 id="ps-转换加速法"><a href="#ps-转换加速法" class="headerlink" title="ps 转换加速法"></a>ps 转换加速法</h4><p>就是我一开始说的方法，因为效果不错先放上来。</p><ol><li><p>安装相同年度版本的 ps 和 media encoder，可能要装 pr（因为经过试验 2019 ps cc 无法唤起 2020 ps pr）</p></li><li><p>在 ps 中打开 gif，点击窗口 -&gt; 时间轴</p></li><li><p>点击时间轴右下角的“转换为视频时间轴”按钮</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/FEsgkbz2OBZC9xd.jpg"></p></li><li><p>点击“渲染视频”（转换为视频时间轴成功后这个按钮就在附近），渲染为有 alpha 通道的 quicktime 视频（否则透明背景就会强制被白的背景填充）。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Y8mt1nDfcKizoZC.png"></p></li><li><p>打开导出的视频，点击时间轴上面的小箭头，调整至相应速度（比如加速两倍，调整为 200%）</p><p><img src="https://i.loli.net/2020/12/10/7PpRFV624QdyA8Z.jpg" alt="小箭头.jpg"></p></li><li><p>文件-&gt;导出-&gt;存储为 web 可用格式，按自己的习惯调整参数即可。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/BxqDHbuKkhpwVnM.gif" alt="0.gif"></p><p>用命令 4 解析出来显示 23 张，和原视频相比没少？但用命令 3 解开就会发现实际上是实施了优化。虽然张数增多了，但实际大小应该是降低的。</p></li></ol><h4 id="ps-直接加速法"><a href="#ps-直接加速法" class="headerlink" title="ps 直接加速法"></a>ps 直接加速法</h4><ol><li>在 ps 中打开 gif，点击窗口 -&gt; 时间轴</li><li>点击时间轴右下角的“转换为视频时间轴”按钮</li><li>点击时间轴窗口右上角，选择设置时间轴帧速率功能</li><li>降低帧率。然后修改延迟</li><li>导出即可</li></ol><p>帧数减少的同时 delay 参数也会增加。另外这个方法其实没法准确控制最后获得的张数，要慢慢调，好处就是不用导出到视频。</p><h4 id="webp-转换法"><a href="#webp-转换法" class="headerlink" title="webp 转换法"></a>webp 转换法</h4><p>需要 imagemagick 7+</p><p><code>-coalesce</code>：把 gif 每帧拆分出来</p><p><code>-set dispose background</code>：让下一帧显示时先清空上一帧显示的所有内容（把上一帧被描绘的像素统统删成透明） 。不使用这个参数就会造成重影。也可以把这个参数写在输入文件的前面，并改成 <code>-dispose background</code>。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">magick  "(" 0.webp -coalesce ")"  -set dispose background -loop 0 ./0.gif</span><br></pre></td></tr></tbody></table></figure><p>但在 windows 下最新版本好像可以直接转了。。。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">magick 0.webp 0.gif</span><br></pre></td></tr></tbody></table></figure><p>最后成品帧数只有 13。</p><h4 id="借助-ffmpeg-转换加速"><a href="#借助-ffmpeg-转换加速" class="headerlink" title="借助 ffmpeg 转换加速"></a>借助 ffmpeg 转换加速</h4><p><code>setpts=0.5*PTS</code>：加速两倍</p><p><code>-vcodec qtrle</code>：一个支持 argb（带透明通道）的编码。也可以换为 <code>-vcodec png</code>（rgba 编码，没有本质上区别）和 <code>-vcodec rawvideo</code>（体积很大，可能还要配合 <code>-pix_fmt rgba</code>）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i 0.gif -movflags faststart -vcodec qtrle -vf "scale=trunc(iw/2)*2:trunc(ih/2)*2" -filter:v "setpts=0.5*PTS" 0.mov</span><br></pre></td></tr></tbody></table></figure><p>然后使用 magick，<code>-delay</code> 需要用 ffprobe 查一下原 gif 的还原进去。不过光是 qq 用不管也可以。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert -dispose background -quiet -delay 3 0.mov 0_change.gif</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/tiRkpv5cmNV2Cq4.gif" alt="01.gif"></p><p>如果遭遇最后一帧和第一帧直接有卡顿，需要加上 <code>-deconstruct</code> 参数。要注意使用此参数后动画速度可能进一步提高（原因不明），需要把 <code>-delay</code> 值拉大。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert -dispose background -deconstruct -quiet -delay 5 0.mov 0_change.gif</span><br></pre></td></tr></tbody></table></figure><p>此时输出的 gif 已经足够小，没有必要再使用优化参数进行优化（另一个原因是我使用 <code>-layers optimize</code> 参数后部分文件大小反而增加了）。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;imagemagick，在我这里大概有两大类用途：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;没有 ps，下个 ps 贼大，怎么办？命令行修图吧。。。&lt;/li&gt;
&lt;li&gt;gif 加速（配合 ffmpeg）&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="影音" scheme="https://zbttl.github.io/categories/%E5%BD%B1%E9%9F%B3/"/>
    
    
    <category term="ffmpeg" scheme="https://zbttl.github.io/tags/ffmpeg/"/>
    
    <category term="imagemagick" scheme="https://zbttl.github.io/tags/imagemagick/"/>
    
  </entry>
  
  <entry>
    <title>路由器跑分 &amp;&amp; 刷机</title>
    <link href="https://zbttl.github.io/2020-12-02-00/"/>
    <id>https://zbttl.github.io/2020-12-02-00/</id>
    <published>2020-12-01T16:00:00.000Z</published>
    <updated>2021-01-20T17:38:48.294Z</updated>
    
    <content type="html"><![CDATA[<p>本来是为了对比一下旧路由（小新 new wifi mini，padavan）和极路由 2 （官方系统）和华硕 ac86u （官方系统）的性能。顺便物尽其用，给 newifi mini 刷个 openwrt。</p><h2 id="跑分工具"><a href="#跑分工具" class="headerlink" title="跑分工具"></a>跑分工具</h2><h3 id="linux-内置浮点分数显示"><a href="#linux-内置浮点分数显示" class="headerlink" title="linux 内置浮点分数显示"></a>linux 内置浮点分数显示</h3><p>命令</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/cpuinfo</span><br></pre></td></tr></tbody></table></figure><p>其中的 bogomips 大概就是核心的浮点分数。</p><p><img src="https://i.imgur.com/oicnOOy.png"></p><p>极路由得分：385.84</p><p>ac86u 得分：100 （这个显然不正常）</p><p>由于不是实时跑分，所以准确性也最差。</p><h3 id="coremark"><a href="#coremark" class="headerlink" title="coremark"></a>coremark</h3><p>来自：<a href="https://github.com/eembc">eembc</a>/<strong><a href="https://github.com/eembc/coremark">coremark</a></strong></p><p>不过遗憾的是，我只成功在 ubuntu 下编译了 linux 版，在 windows 下使用 cygwin 和 在 linux 下尝试交叉编译 windows 版本均未成功。</p><p>不过 padavan 和许多 openwrt 固件下附带有本测试工具，也不用我编译了。</p><h3 id="dhrystone"><a href="#dhrystone" class="headerlink" title="dhrystone"></a>dhrystone</h3><p>来自：<a href="https://www.openwrtdl.com/wordpress/%E6%9D%A5%E6%B5%8B%E6%B5%8B%E8%B7%AF%E7%94%B1%E5%99%A8cpu%E6%80%A7%E8%83%BD%E8%B7%91%E5%88%86">[源码]来测测路由器cpu性能跑分</a></p><p>另一个二进制跑分工具。其中的二进制文件 <code>gcc_dry2-mt7621</code> 在 mt7620A 路由极路由 2 原版系统下可以直接运行。但在 newifi mini padavan 下运行结果报 0。而另一个含有 mt7620 的二进制文件 <code>dhrystone_2.1-1_ramips_1004kc_mt7621.ipk</code> 在两个设备上运行都报错（毕竟原本就应该是在 openwrt 下安装运行的） 。另外 x86 二进制在 linux 下不能运行，另外也没有 ac86u 用的版本（bcm4903）。但不知道其他固件是否附带有相应版本。</p><h2 id="刷机（mt7620-gt-openwrt）"><a href="#刷机（mt7620-gt-openwrt）" class="headerlink" title="刷机（mt7620->openwrt）"></a>刷机（mt7620-&gt;openwrt）</h2><p>直接编译上面那几个工具不管用。</p><p>看来只能刷点大众版本然后从库里面找看看。先刷 newifi mini / 极路由 2。这两款路由同样是 mt7620A 方案，128m ram，8m flash。区别只有 newifi mini 的无线方案是 <a href="https://www.mediatek.cn/products/broadbandWifi/mt7612e">MediaTek | MT7612E</a>（参数来源：<a href="https://www.igao7.com/news/201501/2krIHZXzLCFRAVLO.html">迷你也满血，联想新路由newifi mini评测 | 爱搞机</a>），极路由的无线方案是 <a href="https://www.mediatek.com/products/broadbandWifi/mt7610e">MediaTek | MT7610E</a>（参数来源：<a href="https://www.zhihu.com/question/21971379/answer/19977583">如何评价极路由公司 2013 年 11 月发布的「极贰」路由器？ - 张导的回答 - 知乎</a>)。前者是 2x2，后者弱一些 1x1（但 5g wifi 速度同样是 433mhz）。还有！极路由 2 刷机前请用 breed 事先备份好 key，就在固件备份里面有一个单独的选项（我直接掉坑里爬不出来了，但到后面人家直接把这条路都铲了。。。详情可以看月底的后日谈）。</p><p>注意：刷 breed 和 breed 怎么操作这个东西，本文不涉及，百度吧。</p><p>在 breed 下，这两台机子显示的参数都一模一样：</p><p>newifi mini：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/chrome_sdRzlaQ63w.png"></p><p>极路由 2:</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/chrome_Wek4pLE69b.png"></p><p>openwrt 的话，选择大佬的 <a href="https://github.com/coolsnowwolf/lede">coolsnowwolf/lede: Lean’s OpenWrt source</a>。我们面前有两条路线：</p><ol><li><p>直接上 linux 编译</p><p>参考文章：</p><ul><li><a href="https://sspai.com/post/61463">看完这篇，自定义 OpenWrt/LEDE 路由固件不求人 - 少数派</a></li><li><a href="https://p3terx.com/archives/openwrt-compilation-steps-and-commands.html">OpenWrt 编译步骤与命令详解 - P3TERX ZONE</a></li><li><a href="https://davidli.fun/useful_note/2485/">编译 Lean 的 Openwrt 固件全攻略 - 😊Welcome</a></li></ul></li><li><p>借助 github action。参考文章：<a href="https://p3terx.com/archives/build-openwrt-with-github-actions.html/comment-page-1">使用 GitHub Actions 云编译 OpenWrt - P3TERX ZONE</a></p></li></ol><p>前者步骤繁琐倒是其次，最大的障碍是网络和空间。必须要有可靠的科学工具，以及 10 多 G 的空余空间（最后我的项目文件夹大概有 12g，也就是最少需要 13g 才能编译成功，剩余空间少于 1g 就会强行停止编译）。后者只需要大概 1g 不到的空间，完成 menuconfig 文件的生成即可（不过还是会用到 linux），但，前者一旦编译成功，后续修改 menuconfig 内容再次编译耗费的时间就会大幅缩短（视修改内容的多少，一般 5-10 分钟即可），而后者每次都需要等待 1 个半小时左右的时间。因为后者步骤中的一部分包括在前者中，所以我两个都谈一下。</p><h3 id="Linux-编译"><a href="#Linux-编译" class="headerlink" title="Linux 编译"></a>Linux 编译</h3><p>Linux 编译需要较多空间，我本地的虚拟机 ubuntu 只分了 30g 根本不够我又不想扩容（因为扩容要删快照，扩容后想还原还挺麻烦）。所以我索性在 tx 的轻量云上操作了。不过按我的习惯（不知道是不是大家也有这样的习惯）远程的 vps 默认情况下都是以 root 用户登录，而不是像桌面端一样用非 root 用户（毕竟 ubuntu 桌面端默认不创建 root 用户）。所以我还得新建一个非 root 用户，添加 sudo 授权，<a href="https://zbttl.github.io/2020/2%E6%9C%8824%E6%97%A5%EF%BC%88%E5%AF%92%E5%81%87%E7%AC%AC%E5%9B%9B%E5%8D%81%E4%B8%89%E5%A4%A9%EF%BC%89/#zsh">换用 zsh</a>，加虚拟内存（尽管轻量云内存已达 2g 但编译过程中还是报内存不够，我又加了 2g 虚拟内存才行），这些我就不详细谈了。</p><ol><li><p>安装相关依赖（许多教程里面没有 rsync，但我这边编译的时候报错就因为没装这个东西所以我加上了）</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3.5 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget swig rsync</span><br></pre></td></tr></tbody></table></figure></li><li><p>克隆项目，下源码和软件包（这一步需要科学工具）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/coolsnowwolf/lede</span><br><span class="line">cd lede</span><br><span class="line">./scripts/feeds update -a</span><br><span class="line">./scripts/feeds install -a</span><br></pre></td></tr></tbody></table></figure></li><li><p>重点，调整 Open­Wrt 系统组件。毕竟自己编译就是为了只添加自己想要的功能。第一次编译建议只选择相应框架，因为第一次编译成功后后续增添删除组件再次编译所需时间会大幅缩短。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></tbody></table></figure><p>后续怎么调整组件？可以参考下面这两篇文章：</p><ul><li><a href="https://www.right.com.cn/forum/thread-1237348-1-1.html">【2020-01-14 更新】OpenWrt入门编译 make menuconfig配置参考说明与自动生成脚本 - OPENWRT专版 - 恩山无线论坛 - Powered by Discuz!</a></li><li><a href="https://www.right.com.cn/forum/thread-344825-1-1.html">OpenWrt 编译 LuCI-&gt; Applications 添加插件应用说明 - L 大【2020.11.1】 - OPENWRT 专版 - 恩山无线论坛 - Powered by Discuz!</a></li></ul><p>我这里也给一张表格，大致说明一下我在默认配置的基础上改了哪里。我认为是接近最简的配置。</p><p>注意，许多功能可以不直接集成到固件中而是单单编译为模块。因为使用主流的 <code>squashfs</code> 固件格式的话，集成到固件的功能是删不掉的，而模块（ipx）可以通过 opkg 随意安装和卸载（就是可能遇到依赖问题，装一个功能可能得同时装几个模块）。能这么做的功能，按空格第一次显示为 M，是编译为模块；再按一次显示为 * 则为集成到固件中。至于该选那个大家自己抉择。</p><p>下面表格参数尾部有 - 号标记代表我并未做改动但有些东西需要提醒；编译 x 说明这是原来开着我关掉的内容。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210102073119.png"></p><p>自定义的时候注意，除了 luci 以外的东西都是在 web gui 外生效的。啥意思？你精简了一个 luci 以外的功能，打开路由器 web 管理界面是看不到什么区别的；反之，你想在 luci 添加什么功能也不用考虑该功能是不是在其他地方有依赖。</p><p>编辑完后用下面的 save 保存为 <code>.config</code>，待会编译的时候就会读取这个文件的配置。</p></li><li><p>开始编译（如果上面这步添加了许多功能，则需要开科学工具）。轻量服务器只有一个核心，所以 <code>-j1</code>，如果用物理机则看自己的配置改了。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j1 V=s</span><br></pre></td></tr></tbody></table></figure></li><li><p>编译成功的固件和模块，在 <code>lede/bin/targets/ramips/mt7620</code> 里面，注意，如果按默认配置编译了 squashfs 版本的话，里面的 bin 应该有两个版本，一个叫 <code>xxxx.initramfs-kernel</code>，一个叫 <code>xxxxx.squashfs-sysupgrade</code>，记得刷后者！前者是只读的，我看后者有个 upgrade 还以为是更新专用第一次应该刷前一个，刷完以后我还纳闷软件包怎么可用空间为 0 重启后配置重置了，折腾了两天居然是这里出了问题-_-</p></li><li><p>刷完以后看看剩余空间，5g wifi，usb 驱动有没有问题（这几个地方容易出问题）。</p></li></ol><h3 id="github-action"><a href="#github-action" class="headerlink" title="github action"></a>github action</h3><p>参考文章：<a href="https://p3terx.com/archives/build-openwrt-with-github-actions.html/comment-page-2#comments">使用 GitHub Actions 云编译 OpenWrt - P3TERX ZONE</a></p><p>作者说的很清楚了。先做 linux 编译的前三步，获得 <code>.config</code> 文件。</p><p>然后照抄作者的步骤：</p><blockquote><ul><li>进入 <a href="https://p3terx.com/go/aHR0cHM6Ly9naXRodWIuY29tL1AzVEVSWC9BY3Rpb25zLU9wZW5XcnQ=">P3TERX/Actions-OpenWrt</a> 项目页面，点击页面中的 Use this template（使用这个模版）按钮。</li><li>填写仓库名称，然后点击 <code>Create repository from template</code>（从模版创建储存库）按钮。</li><li>经过几秒钟的等待，页面会跳转到新建的仓库，内容和我的项目是相同的。然后点击<code>Create new file</code>（创建新文件）按钮。</li><li>文件名填写为 <code>.config</code>，把生成的 <code>.config </code></li><li>文件的内容复制粘贴到下面的文本框中。</li><li>翻到页面最下方，点击 <code>Commit new file</code>（提交新文件）按钮。</li><li>在 Actions 页面选择<code>Build OpenWrt</code>，然后点击<code>Run Workflow</code>按钮，即可开始编译。</li></ul></blockquote><p>嗯。。。增加几个注意小事项（当然作者的文章里也提到过了，方便我自己查阅而已）：</p><ol><li><p>点 <code>Build OpenWrt</code> 弹出的框框里，<code>SSH connection to Actions</code> 如果你没有 ssh 连接需求的话不要开启，会编译失败。</p></li><li><p>默认只会生成 rom 压缩文件。如果你之前有功能做成了模组，那你还得修改项目的 <code>.github/workflows/build-openwrt.yml</code> 文件，把 <code>UPLOAD_BIN_DIR</code> 值改为 <code>true</code>。</p></li><li><p>可以修改默认网关地址。在 <code>diy-part1.sh</code> 中把</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Modify default IP</span><br><span class="line">#sed -i 's/192.168.1.1/192.168.2.1/g' package/base-files/files/bin/config_generate</span><br></pre></td></tr></tbody></table></figure><p>第二句前面的注释符号取消，<code>192.168.2.1</code> 改为其他网关即可。我一开始是改的，因为我家的拓扑结构是：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">光猫（192.168.1.1）-&gt;ac86u（192.168.x.1）-（无线）-&gt;笔记本</span><br></pre></td></tr></tbody></table></figure><p>刷路由时，路由跟笔记本用有线的方式连接，显然路由默认地址  <code>192.168.1.1</code> 和光猫网关地址冲突。不过，后面我发现路由的默认网关地址能稳定覆盖住光猫的网关地址，也就是说我不用断开无线就可以直接进要刷的路由的 breed，以及刷完后路由的配置界面；反而是如果我改了网关的话，就得断掉无线或者连上路由的无线才能配置了。可能是 dhcp 的锅？</p></li></ol><h2 id="刷机（asus-官方-gt-asus-梅林）"><a href="#刷机（asus-官方-gt-asus-梅林）" class="headerlink" title="刷机（asus 官方->asus 梅林）"></a>刷机（asus 官方-&gt;asus 梅林）</h2><p>ac86u 刷机就简单了，也不用刷什么 breed，起码对于我现在官方-&gt;梅林arm384 来说直接在固件升级里面把新版固件怼上去就行，最多最多刷前重置一下。</p><p>ac86u 目前有三个品种的第三方固件，分别是官改，arm380，arm384。我在官方下载站还看到有 arm386，但文件夹是空的。</p><p>官改可以理解为官方版 + 软件中心。而 arm380 和 arm384，官方是这么说的：</p><blockquote><p>从 arm380 升级到 arm384 固件会失去什么</p><ol><li>网件、linksys、华为这些机型，非常大概率不会有 arm384 固件，目前 arm384 仅有华硕机型；</li><li>arm384 固件没有 arm380 固件的 wifi 全信道 + 高功率了，以后要高功率就老实澳大利亚 + 固定信道吧；</li><li>arm384 固件没有 multiPPP support（单线多拨）功能；</li><li>arm384 固件的首页没有温度、网速等信息的状态显示；</li><li>arm384 固件的内存占用率将会比 arm380 系列高得多；</li></ol><p>从 arm380 升级到 arm384 固件能得到什么</p><ol><li>AiMesh ；</li><li>1.5 代的软件中心；</li><li>更多的安全更新和功能更新；</li></ol></blockquote><p>具体的固件下载，注意事项，刷机流程可以参考：</p><ul><li><a href="https://koolshare.cn/thread-164857-1-1.html#f-arm384ml%E6%94%B9%E7%89%88-%E5%88%B7-%E5%8E%9F%E5%8E%82%E5%9B%BA%E4%BB%B6">【新提醒】【20200703】华硕ARMv7系列 384.18_0 改版固件 - 华硕固件 - KoolShare - 源于玩家 服务玩家</a></li><li><a href="https://koolshare.cn/forum.php?mod=viewthread&amp;tid=127878">【新提醒】【20200821】RT-AC86U_384.19_0 改版固件 - 华硕固件 - KoolShare - 源于玩家 服务玩家</a></li></ul><p>刷完以后进系统管理，开启 <code>Format JFFS partition at next boot</code> 和 <code>Enable JFFS custom scripts and configs</code> 再重启一遍。</p><p>重启后软件中心上线，就能安装华硕这边的 dhrystone 了！</p><p>参考：<a href="http://firmware.koolshare.cn/binary/dhrystone/">Index of /binary/dhrystone/ - KoolShare 固件下载服务器</a></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /koolshare/bin</span><br><span class="line">wget http://firmware.koolshare.cn/binary/dhrystone/dhrystone_hnd </span><br><span class="line">chmod +x dhrystone_hnd</span><br><span class="line">dhrystone_hnd</span><br></pre></td></tr></tbody></table></figure><h2 id="跑分结果"><a href="#跑分结果" class="headerlink" title="跑分结果"></a>跑分结果</h2><h3 id="coremark-1"><a href="#coremark-1" class="headerlink" title="coremark"></a>coremark</h3><p>newifi padavan：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/newifi%20padavancoremark.png"></p><p>newifi openwrt：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/newifi%20openwrt%202020.png"></p><p>极路由 2 openwrt：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/hc5761%20coremark%20openwrt.png"></p><p>极路由 2 和 newifi 相同的配置，newifi 性能略占优势。但不同的系统差距有点大喔。</p><p>华硕的梅林既没有预装也没有软件包，没法测。</p><h3 id="dhrystone-1"><a href="#dhrystone-1" class="headerlink" title="dhrystone"></a>dhrystone</h3><p>极路由原厂系统：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E6%9E%81%E8%B7%AF%E7%94%B1.png"></p><p>newifi openwrt pandora：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/newifi%20pandorabox.png"></p><p>newifi openwrt 2016（这张图截歪了，但数字能看个大概）：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/newifi%20openwrt%202016.png"></p><p>有请终极 boss ac86u：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/bcm4906.png"></p><p>7620A 那几个菜鸡互啄，感觉不同系统差距不大？nono，其实我还测出过 280 多分忘记截图了，不记得是哪个拉跨系统了。。。但这几个比较正一点的系统看起来速度都还差不多。但到 ac86u 这里画风突变，10 倍杀。。。</p><h2 id="其他参考文章和小发现"><a href="#其他参考文章和小发现" class="headerlink" title="其他参考文章和小发现"></a>其他参考文章和小发现</h2><ol><li><p>openwrt 目前还有几个小问题处理不掉，比如 ssh 中会突然出现乱码，特别是想按 tab 自动不全的时候，前面的命令可能就会突然冒出几个符号导致最后整条命令都错了。极路由 2 装上 openwrt 已联网提示灯亮不起来了。</p></li><li><p>有没有发现 dhrystone 7620a 测试的系统画风有点不太对？因为我都用的留着的 16 年左右的旧系统测试的，极路由在 18 年也停更了，所以能跑的出分数。最新编译的 openwrt 已经无法运行当年编译好的 dhrystone 了，可能是库问题，运行二进制告诉我 no found；ipk 文件发现本身的框架是 <code>ramips_24kec</code>，而 opkg.conf 里面没有这个框架，按照<a href="https://github.com/dafeiyoung/sguclient/wiki/%E4%BF%AE%E6%94%B9opkg.conf%E8%A7%A3%E5%86%B3incompatible-with-the-architectures-configured%E9%97%AE%E9%A2%98">修改 opkg.conf 解决 incompatible with the architectures configured 问题・dafeiyoung/sguclient Wiki</a>记载的方法强行安装，仍然提示 no found；直接通过 ash（没错，openwrt 默认不带 bash，只有 ash）运行，则报那个非常常见的哪行哪行 <code>（</code> expected 的 error。我还想过编译（作者在 github 页面<a href="https://github.com/siasjack/dhrystone4OP">siasjack/dhrystone4OP: dhrystone for openwrt package</a>记载了编译方法），结果带上 sdk 编译出来的固件就 30m 了，路由器根本装不了（16m rom），更别谈装上后再编译了。</p></li><li><p>除了 lede 版本的 openwrt，还有一个 lieno 版本的 <a href="https://github.com/Lienol/openwrt">Lienol/openwrt: Lienol’s Modified OpenWrt source</a>，暂时没研究。</p><p>其他关于 openwrt 的参考文章：</p></li></ol><ul><li>官方文档：<a href="https://openwrt.org/zh-cn/doc/howto/build">[OpenWrt Wiki] OpenWrt编译 – 说明</a></li><li>常用配置路径<a href="https://www.529i.com/archives/344.html">LEDE编译教程 - 憶の年</a></li><li><a href="https://www.jinbo123.com/7672.html">编译 Lean 大神的 OpenWrt (x86_x64) 固件教程汇总 | 佐仔志添加Passwall插件|</a></li><li><a href="https://www.bilibili.com/read/cv1820955/">7620 k2 openwrt固件的编译(WSL,Ubuntu18.04) - 哔哩哔哩</a></li><li><a href="https://wp.gxnas.com/4439.html">如何从零开始编译 OpenWRT (LEDE) 固件【Lean 大源码】 - GXNAS 博客</a></li><li><a href="http://www.linvon.cn/posts/%E8%AE%A4%E8%AF%86%E4%B8%8E%E4%BA%86%E8%A7%A3openwrt/">认识与了解 OpenWrt（meneconfig 解析）</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;本来是为了对比一下旧路由（小新 new wifi mini，padavan）和极路由 2 （官方系统）和华硕 ac86u （官方系统）的性能。顺便物尽其用，给 newifi mini 刷个 openwrt。&lt;/p&gt;
&lt;h2 id=&quot;跑分工具&quot;&gt;&lt;a href=&quot;#跑分工具&quot; class=&quot;headerlink&quot; title=&quot;跑分工具&quot;&gt;&lt;/a&gt;跑分工具&lt;/h2&gt;</summary>
    
    
    
    <category term="路由器" scheme="https://zbttl.github.io/categories/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
    
    <category term="openwrt" scheme="https://zbttl.github.io/tags/openwrt/"/>
    
    <category term="padavan" scheme="https://zbttl.github.io/tags/padavan/"/>
    
    <category term="merlin" scheme="https://zbttl.github.io/tags/merlin/"/>
    
  </entry>
  
  <entry>
    <title>花式折腾小米推送框架</title>
    <link href="https://zbttl.github.io/2020-11-20-00/"/>
    <id>https://zbttl.github.io/2020-11-20-00/</id>
    <published>2020-11-19T16:00:00.000Z</published>
    <updated>2021-01-20T17:38:36.127Z</updated>
    
    <content type="html"><![CDATA[<p>「人生的坑爹遭遇有很大一部分来源于手贱」</p><p>自上个月写完了安卓短信/通讯录/流量信息备份相关的内容，然后我更新完了系统折腾掉所有坑以后，这台狗米 note7pro 可以稳定很久不用动了。然而话是这么说，人不作死就不会死。。。我手贱点开了 tg 的小米推送框架群，看到了新版本，push 和 framework 合在一起了，不过 comments 里面已经有老哥说更新以后会出现推送错误的问题。</p><p>管他呢！更新。结果更新完真的就提示注册异常，不过好消息是还能推送。另外新的二合一 app 和原来的 framework app 签名不一样，包名也不一样，原来的 framework app 打开即闪退。</p><p>好家伙，不能忍。删除装回原版，发现没有用了。。。注册还是失败。转了一圈尝试了各种方法，得出了一些结论：</p><ol><li><p>某米服务器那边应该是改了验证机制，导致现在得用一些比较奇葩的方法才能保证应用能够注册上。原来已经注册上的就不受影响，所以如果我用原版没有问题就应该毛事没有。</p></li><li><p>奇特的方法包括：安装成为系统应用；使用旧版；安装 xposed 欺骗框架；安装 magisk 欺骗框架。</p></li><li><p>经过我的实验，装 2018 年的版本，无论怎么样应用都没法注册上，连推送出错都没有发生，直接就「使用小米推送，但尚未注册」；而安装最新的二合一版本，就算上了 xposed 欺骗框架 + magisk 欺骗框架 + 安装成系统应用，仍然会弹出推送错误的提示。</p></li><li><p>在 framework app 中，打开「应用注册时显示通知」 的开关，正常情况下打开支持小米推送的应用，应该会弹出注册推送的 toast。另外第一次注册的应用会在记录中留下四条注册推送成功的讯息（比如下图中的 tx 加速器），少一条都有可能是出了问题的征兆。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/sTMlXGt.png"></p></li><li><p>无论用什么手段。。。设置里全局伪装为小米设备的开关在关闭 framework apk 重新打开后都会发现被自动关上了。另外 Q&amp;A 中提到的重装 framework app 和 push app 后需要重装注册过的应用才会摆脱「注册异常」的提示，我应用后并没有改善，后续解决该问题也不是靠的重装应用。可能是因为我这台设备本来就是小米，只不过刷了类原生而已。。。</p></li><li><p>伪装为小米设备有好多种方法。其中，旧版（2018 版）会自动在 xposed 里面装一个 push 模块；旧版的 magisk 里可以下到不需要 riru 的 xposed 欺骗模块；还可以用 magisk props config 手动修改 props 文件（具体修改步骤百度/在酷安搜索）；比较新的两个方法是使用 riru 模块 <a href="https://github.com/MiPushFramework/MiPushFakeForRiru">MiPushFakeForRiru</a>；或者是使用 edxposed 中可以在仓库中搜到的 <a href="https://repo.xposed.info/module/org.meowcat.xposed.mipush">MiPush Framework Enhancement</a>。总而言之让相关应用能够识别出你在用 miui 就成功了。所以强烈推荐其中的 <a href="https://repo.xposed.info/module/org.meowcat.xposed.mipush">MiPush Framework Enhancement</a>，就算没有生效它也能读出你被伪装成什么版本的 miui，伪装到了何种程度（另外这个软件要生效，不仅在 edxposed 中需要启动，打开软件后还要把工作模式设为黑名单，默认的已禁用模式软件也不生效）。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/hGq1EI3.png"></p></li><li><p>开启 selinux 的情况下也会出现注册异常的状况。但注册成功的应用即使在 selinux 开启的情况下仍然能够正常推送。</p></li></ol><p>回到正题，在我这台类原生 pe 的红米 note7 pro 上，我具体做了这么几部：</p><ol><li>关闭 selinux。可以用各种终端软件（比如 termux），获取 root 后输入 <code>setenforce 0</code> 即可。也可以用各种 kernel manager，开机自动运行该命令。</li><li>安装 200315 版本的 push 和 framework app。</li><li>使用 magisk 模块 App Systemizer 将两个应用全部移入 <code>/system/priv-app</code> 中。粗略步骤是安装模块后重启，在终端中获取 su 后输入 systemize，然后按提示操作。注意两个都要移进去，移一个的话我试过一次，照样出错。</li><li>安装上文提到的 MiPushFakeForRiru （如果没装过 riru 还得装 riru 模块，不过都装了 xposed，riru 我觉得大家都应该装了）和 MiPush Framework Enhancement，后者记得正确启用。（前者其实不一定有用，但后者一定要装）</li><li>打开软件，正确给予权限。</li><li>打开支持小米推送的应用，此时回到 framework app 会发现提示注册失败。稍安勿躁，等个几个钟头就会奇迹般的变成注册成功了（</li><li>相关的推送还要等半天到一天才会恢复正常。不要指望刚装上应用注册成功就会有推送来找你（</li></ol><p>大概就是这样。还可以通过 <a href="https://github.com/MiPushFramework/MiPushTester">MiPushTester</a> 来验证推送是不是真的正常了。不过话说回来，第一次我按上面的大概步骤做了以后，正常了几天，后面推送是出来了，点击推送相关应用弹不出来。。。看日志是 intent 卡住了，后来我又重装试了一通新旧版本，再后来我又大概按上面的步骤做了一次，又正常了。。。这次正常使用了十来天，我觉得应该是彻底正常了。所以上面的步骤 1-5，也不用太严格遵守啦，毕竟我没有严格测试过那步放在后面就会 crash，我大概回忆了一下差不多是这样，再严格测试出什么幺蛾子那又麻烦了（</p><p>总之不要手贱，能用的就不要东搞西搞（</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;「人生的坑爹遭遇有很大一部分来源于手贱」&lt;/p&gt;
&lt;p&gt;自上个月写完了安卓短信/通讯录/流量信息备份相关的内容，然后我更新完了系统折腾掉所有坑以后，这台狗米 note7pro 可以稳定很久不用动了。然而话是这么说，人不作死就不会死。。。我手贱点开了 tg 的小米推送框架群，看到了新版本，push 和 framework 合在一起了，不过 comments 里面已经有老哥说更新以后会出现推送错误的问题。&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="https://zbttl.github.io/categories/Android/"/>
    
    
    <category term="magisk" scheme="https://zbttl.github.io/tags/magisk/"/>
    
    <category term="xposed" scheme="https://zbttl.github.io/tags/xposed/"/>
    
    <category term="mipush" scheme="https://zbttl.github.io/tags/mipush/"/>
    
  </entry>
  
  <entry>
    <title>Android Virtual Devices（AVD） root/Magisk/xposed</title>
    <link href="https://zbttl.github.io/2020-10-22-00/"/>
    <id>https://zbttl.github.io/2020-10-22-00/</id>
    <published>2020-10-21T16:00:00.000Z</published>
    <updated>2021-01-20T17:38:21.881Z</updated>
    
    <content type="html"><![CDATA[<p>在 windows 下操作，终端使用 powershell。</p><h2 id="旧系统（如-4-4-kitkat）-supersu"><a href="#旧系统（如-4-4-kitkat）-supersu" class="headerlink" title="旧系统（如 4.4 kitkat）+ supersu"></a>旧系统（如 4.4 kitkat）+ supersu</h2><p>主要参考文章：<a href="https://juejin.im/post/6844903840026722311">搞机：AS自带模拟器AVD Root 和 Xposed安装</a></p><p>旧系统可以安装 supersu + 旧版本 xposed。</p><ol><li><p>在 as 中查询 sdk 目录位置（一般在 <code>%localappdata%\Android\Sdk</code>），将其中的 <code>platform-tools</code> 和 <code>tools</code> 加入系统变量 path 中（一般来说，前者包含有 adb.exe，大多数人都已经加了。后者包含有 emulator.exe，大多数人没加但待会要用，如果不想加进去的话用这个命令的时候带上路径也可以；另外 emulator.exe 在 <code>%localappdata%\Android\Sdk\emulator</code> 下也有一份，有时候高版本安卓要用 emulator 目录的打开才行。可以先用 emulator 命令带上路径启动虚拟机看看）</p></li><li><p>查询要 root 的虚拟机名字</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emulator -list-avds</span><br></pre></td></tr></tbody></table></figure><p>以可读状态启动虚拟机（启动后这个终端窗口就别关了，后面的操作新建一个新终端窗口）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emulator -avd [刚刚查到的虚拟机名字] -writable-system</span><br></pre></td></tr></tbody></table></figure></li><li><p>解除 selinux</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb remount</span><br><span class="line">adb shell</span><br><span class="line"># 这里进入到虚拟机那边的 shell 中</span><br><span class="line">&gt; setenforce 0</span><br><span class="line">&gt; exit</span><br></pre></td></tr></tbody></table></figure></li><li><p>替换 su。需要获取对应的 su.pie。获取方法有这么几个：</p><ul><li>文章里面有<a href="https://pan.baidu.com/s/1hRrPZhRxbHRtBkJxNxO1rQ">百度网盘</a>，提取码 cg08，网盘里面有个压缩包，解压待用。</li><li>github 的某个项目 <a href="https://github.com/meefik/avd-root">meefik/avd-root</a>。同样是里面的压缩包，版本还比较新。值得一提的是这个其实是个 avd 一键 root 工具，但脚本适用于 shell，但应该是 linux 下使用的或者在虚拟机 sdcard 内展开然后用 adb shell 进去，总之我不太明白怎么用。。。</li><li>编译。这个我有疑问，也挺麻烦，所以后面说。</li></ul><p>将其中的两个 su.pie 用 adb push 到相应位置。如果是通过前两个方法，解压后进入文件夹中运行终端，然后输入：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">adb push .\x86\su.pie /system/bin/su</span><br><span class="line">adb push .\x86\su.pie /system/xbin/su</span><br><span class="line">chmod 0755 /system/bin/su</span><br><span class="line">chmod 0755 /system/xbin/su</span><br><span class="line">su --install</span><br><span class="line">su --daemon&amp;</span><br></pre></td></tr></tbody></table></figure></li><li><p>再新建终端窗口。这次是装软件，要装 supersu 的管理器和 xposed 管理器。supersu 同样在上面前两个获取项目中有。如果你的模拟器用的是 5.0-8.0 版本，那上面的 xposed-framework 也能用。但这是旧系统，也就是 4.4，就需要用更低版本的，不好找，在这个帖子：<a href="https://forum.xda-developers.com/xposed/development/xposed-android-4-4-4-fixed-please-t3633573">Xposed for android 4.4.4 is NOT fixed, please compile 87v for sdk19</a> 里这里找到一个能用的：<a href="https://forum.xda-developers.com/attachment.php?attachmentid=4223376&amp;d=1501026273">Xposed 2.7.1 by Sola Warez.apk</a>。另外 4.4 版本 avd 没有文件管理器，也得装一个；装一个钛备份测试 root 结果，等等等等。可使用 adb install 命令安装，以 supersu 和 xposed 为例：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb install .\SuperSU-v2.82-SR5.apk</span><br><span class="line">adb install .\Xposed_2.7.1_by_Sola_Warez.apk</span><br></pre></td></tr></tbody></table></figure></li><li><p>此时打开钛备份就会弹出 root 提示了。注意打开 supersu 会提示你更新 su 文件，不要点击确认，不管它，点击 cancel 即可。</p></li><li><p>如果要重启就比较麻烦。文章建议用 <code>adb reboot</code> 但亲测无效。另外两个方法是使用 xposed 软重启和直接通过 gui 进行软重启。重启后可能还需要再运行一次 <code>su --daemon&amp;</code>。关闭的话，不要通过 gui 的电源关机，直接点右上角的 x 让 avd 保存快照就好了。但未来启动仍然需要通过 <code>emulator</code> 命令启动而不是通过 avd gui 直接启动。</p></li></ol><h3 id="其他参考资料"><a href="#其他参考资料" class="headerlink" title="其他参考资料"></a>其他参考资料</h3><ul><li><a href="https://stackoverflow.com/questions/5095234/how-to-get-root-access-on-android-emulator">How to get root access on Android emulator?</a> 这里似乎给出了固化 root 的方法。</li><li><a href="https://github.com/0xFireball/root_avd">Rooting the Android Studio AVDs</a> 这是另一个教程，补充了重启后失效的内容。</li><li>su.pie 编译方法获取：<a href="https://bbs.pediy.com/thread-226115.htm">[原创]学习Androidx86模拟器root安装xposed</a>。这同时也是另一个教程。不过看得我有些云里雾里：编译时应该用 supersu 项目的代码还是安卓源码？如果是安卓源码那就有点麻烦了。。。安卓源码非常大，需要谷歌的专门 cli 工具（基于 git 开发的）下载还要先下载一个 30g 的 base 包；然后再下载相应分支（系统版本）的代码。。。但看这篇教程，好像只编译了部分代码？但要获取部分代码也很麻烦：谷歌将不同组件分散在一大堆库中，你得找到相应的库才有对应的文件（当然，在网页端点开相应的库，没点错的话就会直接让你选择系统分支了）。而且貌似<a href="https://android.googlesource.com/platform/system/extras/+/refs/heads/kitkat-release/su/">对应源码目录的结构</a>还和教程中的结构不太一样（少一个 mk 文件），所以我倾向于编译 supersu 的源码。更多关于安卓源码下载的文章：<ul><li><a href="https://github.com/foxleezh/AOSP/issues/1">如何下载Android源码 #1</a> 谷歌那一大堆库中比较重要的几个仓库</li><li><a href="https://blog.csdn.net/xx326664162/article/details/86354616">Android 系统源码——下载到编译</a> 手把手源码下载教学</li></ul></li><li>第三方 su 生效原理<ul><li><a href="https://zhuanlan.zhihu.com/p/47661378">Android系统su命令源码分析</a></li><li><a href="https://blog.csdn.net/oLevin/article/details/18796435">Android 获取ROOT权限原理解析</a></li></ul></li><li>听说该方法不能用在 google play 版本系统中（待验证）</li></ul><h2 id="新系统（android-10）-magisk"><a href="#新系统（android-10）-magisk" class="headerlink" title="新系统（android 10）+ magisk"></a>新系统（android 10）+ magisk</h2><p>先给两篇参考文章，分别代表了两种思路：</p><ul><li><a href="https://github.com/shakalaca">shakalaca</a>/<strong><a href="https://github.com/shakalaca/MagiskOnEmulator">MagiskOnEmulator</a></strong></li><li><a href="https://anthony-f-tannous.medium.com/android-10-emulation-of-magisk-supersu-on-an-aosp-avd-de93ed080fad">Android 10: Emulation of Magisk/SuperSU on an AOSP AVD</a></li></ul><p>建议使用第一种。第二种需要手工编译并下载 sdk，操作繁琐的多。唯一的好处就是不用放修改后的 ramdisk.img 到 sdk 镜像里面。</p><h3 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h3><ol><li><p>到第一篇参考文章中，将整个项目拖下来（git clone / 直接下载源码压缩包）。</p></li><li><p>查询虚拟机名字后（见上文），启动虚拟机。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emulator -avd [刚刚查到的虚拟机名字]</span><br></pre></td></tr></tbody></table></figure></li><li><p>找到 sdk 目录下的 <code>system-images</code> 文件夹，在你所启动的对应版本系统文件夹里面找到 <code>ramdisk.img</code> ，先在原地复制并粘贴（为了保留一份副本），再将该文件拷到项目文件夹中。</p></li><li><p>确认虚拟机和 adb 正常启动并运行的情况下，运行项目文件夹中的 <code>patch.bat</code>。</p></li><li><p>运行完毕后将项目文件夹中的 <code>ramdisk.img</code> 拷回 <code>system-images</code> 对应版本系统文件夹中覆盖，关闭虚拟机并进行冷启动即可。</p></li></ol><h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><ul><li><p>本方法是关键文件是项目文件夹里面的 <code>magisk_emu.zip</code>。这个 zip 其实和官网 release 下载到的不同版本 magisk zip recovery 安装包是一个性质的东西。不同的地方在于，存在于项目文件夹的这个文件是 debug 版本的，文件大小要比 release 版大一倍。</p></li><li><p>也正因如此，如果要升级 magisk / 使用 release 版本，替换这个 magisk 文件然后走一下 3~5 步即可。</p></li><li><p>不直接运行 <code>patch.bat</code>，而是在 powershell 中运行，能查看到运行日志。release 版的压缩包，运行起来会会多显示一句</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run-as: package not debuggable: com.topjohnwu.magisk</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/IHo0bTR.png"></p><p>也明显能感觉到 <code>patch.bat</code> 使用 release 包时比 canary 包慢。</p></li><li><p>阅读文档，patch.bat 还能跑一个 canary 的参数。其实只是改为在线获取而已。</p></li><li><p>使用 release 版本，附带的 magisk manager 有可能因为某些原因（版本过旧[^1]/网络太差[^2]）无法正常识别所安装的 magisk。覆盖安装最新版的 magisk manager 可解（在目前这个时间点，release 版本低于 v20.3 用的都是旧版 ui 客户端，基本都会报错；v20.4 虽然已经用了新版 ui 客户端但还是报错，只有 v21.0 不需要覆盖装 manager 本身就正常）。</p></li><li><p><strong>（软件兼容性问题）</strong> 非 google play rom 版本下钛备份无法正常使用，获取不到 root。原因是钛备份读取的是 <code>/system/xbin/su</code>，而用上面方法整出来的 magisk，生效文件在 <code>/sbin/su</code>。用 Root Checker Pro 就能发现问题，supersu 能够读取处 su 版本。</p><p><img src="https://i.imgur.com/FS9wKgj.png"></p><p>magisk 这里就会显示有问题。</p><p><img src="https://i.imgur.com/hDnPPiO.png"></p><p>实机 magisk 因为 <code>/system/xbin/su</code> 处没有文件，所以钛备份就才会读取 <code>/sbin/su</code>。那虚拟机这里怎么会有文件呢？原来这里的 <code>/system/xbin/su</code> 是给 adb 用的。。。</p><p>解决方法，给一个硬连接。</p><ol><li><p>先用可读 system 和 selinux 宽松模式启动虚拟机</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emulator -avd [刚刚查到的虚拟机名字] -writable-system -selinux permissive</span><br></pre></td></tr></tbody></table></figure></li><li><p>remount adb 的 su</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb remount</span><br></pre></td></tr></tbody></table></figure></li><li><p>给上硬连接。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -sf /sbin/su /system/xbin/su</span><br></pre></td></tr></tbody></table></figure><p>即可。重启不影响效果。和修改前的区别就是以后使用 <code>adb root</code> 时需要在系统内的 magisk 弹窗确认。</p></li></ol></li><li><p>（系统兼容性）经测试不存在该问题。是否 google play 版本不影响 magisk 生效。另外 google play 版本不需要解决软件兼容性问题，因为本身就不运行在 adb 内运行 root，也就不会有 <code>/system/xbin/su</code> 的存在。</p></li></ul><h3 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h3><p>简单提一下，主要是编译坑多。编译步骤还可以看一下 <a href="https://github.com/topjohnwu/Magisk">magisk 项目</a> 底下说明，参考文章里面用的是最新版的编译方法，旧一点的版本（低于 v21.0） build.py 里面就没有 ndk 的编译选项。如果要编译旧版本，可以从 magisk 项目切换到旧版本的 tag 就能在底下看到旧版本的对应说明了。</p><ol><li><p>克隆项目。项目所在目录首选你系统的用户目录，其次是驱动器盘根目录（如果你的用户名是中文的话）。切记别放在路径有中文的目录中。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --recurse-submodules https://github.com/topjohnwu/Magisk.git</span><br></pre></td></tr></tbody></table></figure></li><li><p>安装 jdk8，python 3.6，设置好 path，另外旧版本 magisk 需要设置 <code>ANDROID_HOME</code> 这个用户变量；而新版本 magisk 需要设置 <code>ANDROID_SDK_ROOT</code> 这个用户变量。两个用户变量都是指向 sdk 目录的。</p></li><li><p>装个 colorma。或者删掉 colorma 在 build.py 中的依赖代码（显示个代码颜色，不用不会死）。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install colorama</span><br></pre></td></tr></tbody></table></figure></li><li><p>将文件 <code>config.prop.sample</code> 复制并改为 <code>config.prop</code>。修改内容，要修改的内容类似于下面这两串代码。（其实是成功安装后在 magisk manager 里面显示出来的版本号，都自己编译了，别按下面模板改，该非亿点就非一点）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># The version name and version code of Magisk</span><br><span class="line">version=20.4</span><br><span class="line">versionCode=20400</span><br><span class="line">​</span><br><span class="line"># The version name and version code of Magisk Manager</span><br><span class="line">appVersion=7.5.1</span><br><span class="line">appVersionCode=267</span><br></pre></td></tr></tbody></table></figure></li><li><p>开始编译</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python build.py ndk</span><br><span class="line">python build.py all</span><br></pre></td></tr></tbody></table></figure><p>可能会有很多报错坑，类似下 ndk 压缩包的时候网络慢报错（挂代理）；</p><p>类似编译 ndk 的时候出现</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'gbk' codec can't decode byte 0x8b in position 79: illegal multibyte...</span><br></pre></td></tr></tbody></table></figure><p>这个需要修改 build.py 的相关位置，类似于</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">125     with open(file, 'r') as f:</span><br></pre></td></tr></tbody></table></figure><p>改成</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">125     with open(file, 'r',encoding='utf-8') as f:</span><br></pre></td></tr></tbody></table></figure><p>（话说回来这个错误在我把项目放在 c 盘根就出现了，放在用户目录就不会出现）</p><p>还有编译 all 的时候出现</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">windows javax.net.ssl.SSLException</span><br></pre></td></tr></tbody></table></figure><p>这个得挂代理。</p><p>等等等。</p></li><li><p>一顿操作</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb push native\out\x86\busybox scripts\emulator.sh /data/local/tmp</span><br><span class="line">adb push native\out\x86\magiskinit64 /data/local/tmp/magiskinit</span><br><span class="line">adb shell "mkdir -p /data/adb/magisk"</span><br><span class="line">adb shell "cp /data/local/tmp/busybox /data/adb/magisk/"</span><br><span class="line">adb push scripts\util_functions.sh /data/adb/magisk/</span><br><span class="line"></span><br><span class="line">adb shell sh /data/local/tmp/emulator.sh</span><br></pre></td></tr></tbody></table></figure></li><li><p>验证一下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell "ps -ef | grep -i magisk"</span><br></pre></td></tr></tbody></table></figure><p>出现</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root  ..... 00:00:00 magiskd</span><br></pre></td></tr></tbody></table></figure></li><li><p>然后装 magisk manager 就行了。</p></li></ol><h4 id="拓展-1"><a href="#拓展-1" class="headerlink" title="拓展"></a>拓展</h4><ul><li>这个方法也会生成一个 zip 文件，也是个典型的 magisk.zip 文件。但这个 magisk-debug.zip 放到方法 1 里面用，用 Root Checker Pro 检查，su 参数正确但 root 确认框一闪而过，没法正常使用。。。</li><li>这个方法同样有钛备份的兼容问题，解决方法同上。</li></ul><hr><p>[^1]: 让模拟器 magisk 正常运行的 emulator.sh 放出时间不早于 v20.0。<br>[^2]:  让 magisk 网络功能在大陆能够比较畅快使用 cdn 功能的客户端大概版本也不低于 8.0。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 windows 下操作，终端使用 powershell。&lt;/p&gt;
&lt;h2 id=&quot;旧系统（如-4-4-kitkat）-supersu&quot;&gt;&lt;a href=&quot;#旧系统（如-4-4-kitkat）-supersu&quot; class=&quot;headerlink&quot; title=&quot;旧系统（如 4.4 kitkat）+ supersu&quot;&gt;&lt;/a&gt;旧系统（如 4.4 kitkat）+ supersu&lt;/h2&gt;</summary>
    
    
    
    <category term="Android" scheme="https://zbttl.github.io/categories/Android/"/>
    
    
    <category term="magisk" scheme="https://zbttl.github.io/tags/magisk/"/>
    
    <category term="xposed" scheme="https://zbttl.github.io/tags/xposed/"/>
    
    <category term="simulator" scheme="https://zbttl.github.io/tags/simulator/"/>
    
  </entry>
  
  <entry>
    <title>xbox 跨区羊毛（神界原罪 2）小记</title>
    <link href="https://zbttl.github.io/2020-06-15-00/"/>
    <id>https://zbttl.github.io/2020-06-15-00/</id>
    <published>2020-06-14T16:00:00.000Z</published>
    <updated>2021-01-20T17:38:10.764Z</updated>
    
    <content type="html"><![CDATA[<p>这都能被我薅到。。。</p><p>前情提要：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/j8Upwjz.jpg"></p><p>那时候已经 5.16 了，我的毕业论文 5.18 就要答辩了。。。。但神界原罪 2 我一直挺想玩的，主要是听说有同屏可以和朋友愉快玩耍，于是禁不住诱惑从 3 点到 7 点浪费了宝贵的 4 个小时，试图薅到一根羊毛（可都是 deadline 时光！deadline 时光人战斗力很旺盛的，一个小时顶平常一个月呢！）。</p><p>然而。。。很遗憾，想想，留一个码吧，起码留点我努力过的痕迹，于是又去另外一家问，10 元买了个码。</p><p>后面不甘心又试了试，谷歌搜索找到一堆哥伦比亚的梯子，找到个疑似能用的梯子时候的时候已经晚上 7 点了，听比价助手评论区说 7 点后临时工就被枪毙了，多买的码全废了。。。</p><p>但是，过了几个小时听说又能薅了？到了第二天开咸鱼，全部涨价到了 40 ？？？有猫腻。我又做了点尝试，还是提示地区不对，还是不能薅，要继续实验太浪费时间了，搁置，接着肝答辩 ppt。</p><p>时间过去一个月，回顾一下 xbox 比价助手的神界原罪评论区。根据比价助手评论区老哥的说法，有的到澳区成功？</p><p>澳大利亚的 vps 在 vultr 能开，开一个拿来做点小实验顺手再试试？转眼就开了四天，开一天花一天钱，想想无论如何也要再做尝试把羊毛薅到。</p><p>最后确定澳大利亚的 vps 确实没用。然后一个个试哥伦比亚的 ip，还是在老地方试，windows 桌面版商店 app，试到某一个，成功进到领游戏的地方，结果到最后一步点确定提示是在别的区购买的码，无法兑换。</p><p>再谷歌看看！看到湾湾 16 年说在网页端能换。反正已经下了个 firefox（方便用来验证 ip 是否可用的），顺手拿这个开微软商店也不费多少时间。众所周知电信晚上 2 点后过了晚高峰，也许好一点。</p><p>到了两点，先试了两个 ip，在微软商店处都报错，连领游戏的界面都进不去。网页版点击兑换，标题后面地区始终显示是在香港而不是哥伦比亚，我尝试调了我自己的 xbox 地区到哥伦比亚，又把账单全部调到哥伦比亚，结果进去还是显示香港。。。不管了，开开代理直接输入兑换码，结果。。。等了好一阵成功了，惊了！不过打开 xbox，游戏库里面没刷出来，进入商店找神界原罪 2，显示已购买，直接下载，成了！（激动.jpg）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这都能被我薅到。。。&lt;/p&gt;
&lt;p&gt;前情提要：&lt;/p&gt;</summary>
    
    
    
    <category term="Xbox" scheme="https://zbttl.github.io/categories/Xbox/"/>
    
    
    <category term="跨区" scheme="https://zbttl.github.io/tags/%E8%B7%A8%E5%8C%BA/"/>
    
    <category term="羊毛" scheme="https://zbttl.github.io/tags/%E7%BE%8A%E6%AF%9B/"/>
    
  </entry>
  
  <entry>
    <title>wireshark 抓代理工具包</title>
    <link href="https://zbttl.github.io/2020-06-13-00/"/>
    <id>https://zbttl.github.io/2020-06-13-00/</id>
    <published>2020-06-12T16:00:00.000Z</published>
    <updated>2021-01-20T19:18:01.484Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="你不对劲！" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="ba4cd431dd7b37825a0b49768745a2a1530656410bd778d7699d0f77e588ee99"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">天王盖地虎</span>      </label>    </div>  </div></div><script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">&lt;div class=&quot;hbe hbe-container&quot; id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;你不对劲！&quot; data-whm=&quot;抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.&quot;&gt;
  &lt;script id=&quot;hbeData&quot; type=&quot;hbeData&quot; data-hmacdigest=&quot;ba4cd431dd7b37825a0b49768745a2a1530656410bd778d7699d0f77e588ee99&quot;&gt;719cff5c9e1092cb6f842a7947d9e46f8e3829f9c2df05f7fa5e758589a0476a2551b3ce2a1be47d4d822a276d0cd14b2f929a545afadb14e98b4e504cfd0e9ba69b0ba0478e90ca6984c99d4bc7b14754ee5e7a6237847c4eaa7df9e6c27620d0a0cd409587315f2d71afbf8637dc313529e0810d5902d23c96a8942048048b1561860f6e047eae4a1fdb7ff3a1d222b564c4ad922e6e7fc49e4c68421190dd7bc8908a64fae31ee963aa6b07ab029bb4a3834a8a626fd5be73de23edd372637494e1bbd61cd57b0c42ec17a415f2113dacbc695ee800e055751b255a1b64deb6685ed61c66dca80d6e3e97d59151b39b1509f09836da95bbfa312d483364cebcdae6e0194d807ff38914d4da4b67dc2cee037db403bc6adb71f79304cdb538a54da47acb26e105d1195ea29e0093846ec09aca0fbb8ba6defceadcd7d0f100db512ee5e6a2b29fc42b7036c658812f862b0d2d4b52b2d7be333d3760b2b1b8ed756af83d5cb76a70d9414da455a76f32cdf9438f5da9fcf71fa9835f4082d734dd4df954168e653a945370a8fdd96c833394f3a18ac5d6d00a5fe7874b4a28306d5c34a91cb0898d63518a73195ae00f68a6d14cb54317e8991850e9185bc5802081d24578b765c93222f0df4f28c36be5b06095b053491336402062c2ebe58e07ef9d82c60ab2ddde20f7a3601cb1f4dd2d094d1caa01f6db39816944e215d603bf1b03df120403caf08b722132a924ec1d5c7cefebcffad32b0303167335e16fa9bef4b7cfe72b8d1dea0da01ba1b614d6b3c8bc06e2f784caf3f3b2939d935738ab6bb91a4e24fa56902addc54669e30750c5ea3cd5576221c36a0066ae0aa478dd6fc06c7cf08296ce2ca6967bccd2eac8785ae4f45a0a43007e0688d76b2b6bd9ef5eec7f02d9a4078a8b4b138dcab083b54cf29b92c01c79ff7d80cd4902a00bc5b029f6aa1a16534cdf22ae746bf3f0d163bdc613a98a7267cba0be1a7aa293d5daf640bfa4d78bef02fc9b25c24e3182a3ca5be6dd696aa98e037e874b62874f0177d8203e600ba0780cf7bd7cfa45b9103df1293ca5780aca6c1b4396b1a0ea4cdc3b8cac287758580a5320b585342cb20f545653cad6870932596537d260dca086229fe7c220d9dad871d44a762a13b7e838d28aae48383aee32e3a14861915aa1b1822d12f3dc3d8973acef83e7d253045f21197afdbbc853a70714d7061251f0a8379132f55bc3f4dbf384932bbc67810543d7f1a02ef6224d189d9f2e4265a642d8c9487b81cd71dd446ec5c91e67b0690229407f4d2b7b3f5adca17f08df849eec2711b2cce4c839a2f2de521b06f45e0c6bda0eb626c13c6284485f8f50d60f1dd84aa7e441b2acad88b5b6c58b9c17d150047d938744b5e22f25f7c0b3db74491831ac5155ae992ae7338ff65948eb97efb443fb4f30067bd15828f304b73129fc665343f352d947c0a7e76414fa2fae31ae43379c45308d80e0be00daedaa2ac1d141b6fe353b3979f00b4d26f9e7a736dd0e7362a2c5796596ae7aef3c861ce719128620ba3813be16d806712a5692cc4b318ead19be6080a44520675c3b184159ecb3a2f07b15b1770945925e6506d72b1815643795e50664d9614ab61d8476a55e27dd24d12c438901d0ea28c75ba89027c27a297f4105a7720a38aa715ca50947ea44878117fc583236229e3305e03908423583e99761407693311df75c48a23cfeee1962ea079bef1386e44754849ba891967c102916ae7e55c7760653a1f26a6e9a500888486730e752a5e7e788944ddb29160c1812707395cf897773210b031dd0a578f0079cce65dbf7580b3dd80b7eed4fd60a426ad0f378780c27041b5db80c065efae50633f6bec73b485b4079f7fd58aa1a20e34cb1b8f6c242440299117dfdb214fe75c0e8c499fda8b7034ddfad288d7a3e4ae6d2d47fa4ef9f733afd095663832288385351dd7f6d70602562d371827842a0955e4ad48d6a837ad2cc77369ec739cb6722ede2c288c3803c7801600f37af1f180f8333372cbdb6c05af3d251db6140ea06986055d3e04ab5a65f63ca047b680d284c5b77f248713126eb6b8570551116607f3cd088a9aae2c438c098f20857ec745c2384fc96c27e2459cb4d91bd74c3e929d233594b445e55548f38698e4d416ff5e135aaeab4e777de7765c72d94aa64ecafd41efe33afeb1a04d1b80f61063b1f43e901840d7248de38235159dc56d87dc518b17b449eee9cad24cf1d921dcb9bbfd6f06ad159f22c2c291b1a2ef7cc7288f9cf69d33b82f52827dc3a5ef7491645b1859fabca971f29c256f8b5e2086584d9b04c90f1e1d98f6a984872addafb7e2c10d35c886602dd4d9973d215a531e862fe38c7ee8b54d3a397c4da4a076f1f64787fc796d3517afda4f599c2dd0af0d67852a6c2f396e55fefc2996b0f50f645a61dfa72c79a42e333cea331fa0a67ca6598f30e65bb8d26b8ef942c349e65c39e8c8dc6227f5715803e591ce99345a64cbce199d91ae355b4cbb147796c248e3da8dedd78974d4355a503e7dc080b8ca68a8f28d4726e3511266728bd1b8e65ce19e797700c49bf8142da848d51c8798bad9b1be8848f3f2d9f16d70aa6a4a27ebff6c1731c2344104968a10c4ad11cddd64dfa317f7bd6db152405ca818823892bed89bda709e367c8b3aa2d70cd15f665ead876c8141a981c4f7673e98471a50f939cbda7a80ab4cba0b3b00cb0f344cb22c1a22c6ee15ba7c0b506c8d0f2eb789edccdda0537628e3348fc7ae37b835cf1e24ef0bc7a032f8a6f47efd7459ef3b3176b4373a243edfc55bb357642f74dbbcc9319c7798fb29abecf6074d5fa3e407c5550b724e62d4090bfb1948f64479201464f8a4f21cdb61247b31894020c5a9a2420449330b841818d9d1272fa40eb6f03b24a459c73abad56c7cf6a73916312e1fb35abee2642fc2fbd1bed26e2ed7dba11c174b09692646d0be4b0827d759b73fa9733858caf267502a2cff8475fd37c731d25c914b2a6e174aff2c4092914026caaacd81c04ea4949bcf3418779fac697e542896892300cab60790218dc6e14ad5572c86c2dab89baff707313162d5b2eec5e931f7656e27e35bd28392d58da4adf7670dd55af7af621b9d855f88a503b6e0264b80cb5b7d7cc018888bb700f42fad85d0ec91035da7b566d157f11725efafc4f4657c2d4cea1a41e6040cd5b679e935d13313d861455faf1f59a8907ed2cd89c5da3d4afa3df52c45f72095196ff3e96a7e5f1577616ffaa30fdac3e1a599e64f292f22258f699edcb582f6309a117ac6279ff751134e5f7e9d6f87b0f629539af5b72d15c31145e879a7ab2a0a0384950ce67bb960100133bd18da15a994378214f57eda6d7bfbadbdd55a44359d6e7f8040343ee989140342fd3ca224513c298ceb715103250024ec6f616426939e0edad957add1a23b9ac38e0eac97d030177cf3dd032e31f1df3aa6c93a930476a151872b71d8028286e60f3e9e8755cd0dd74593c0fdce35aab7b36f19cba0b5759aa30f887e07ebe936a6b9272b56011e3d0d6900d378b48fc69b081685e23a859fb7b28435a784518fba7a4a2c70d04d756f2502183cf9d457dabbb02e3555a6bb7fb513070007246d582c854a72cb4a2ad27ee642cbbbc8c2487d1ca09a1c199188afd4e791f7cf44eb0d51492b6bb841938903b00f6c4cb53861f4befff755c23ea48ce95795604e69956d5ef136155444340a4f2e12c0aa3cb2ac4e353ce244c2ad8628107af6dc49eba30904db5df57f5308389c407b8e80329a5e6979ac188c5956a87be22faee36fcdb8167fa41cab101f2c5115f3105b575bfce28ef7052cd660cf96986075ef400de8c6b31d4e59bf252b89ff47a6a8da38c038538fc9553213ea03d256fcd87ca24261f8c98bfe0b7434746930851482e6545942b9014140cfe3a8bd3a8c2d99644aabde2b3270347c47cbce8c382c4edb1c6a74db4aca6909130b74513b95ad09e9780183f9d235acf10678c40f070cf557a23bca40461f6b529c04aa7464420952cd2c52fee39f3094db7d6d390446833cf90db9bd4af06ccd3cd3d881126b1d801a1875f663390a68c75c6e505524325c93cc48515ef469945a3f5556c98bd57f9ff1b9671d0705ace2d2df347468e7b47ec0bf16564abae517c89691786d7188b22285d903e0d39d25e134eaa7449625af87b9a8146c91035a9371bf51bfa4a6f7957f08680d9394a561259aa43acfcaf099f9f82363a34af5cf1bf3282d0bd59048cd99714b05d3778a22a1cf4e6394168b53bed9895e04f3a24a6e733926a03a70a04c3904e10c66f4483835db145ca2e7fa64f94095a1f3fe9403758ca433d36f98af08b5b0a6bf3b95ab77eb9e4f4472815a904739a74a0d715f7ff6d0e37ca09e47b29b60d9f8a64ba7119639bfe0263a1e403b1ede647ea824500ffdd6053b7afea7a60c1acf6e8949d22f156a73e5b98c5954e23cb059093cf671a8e98279296c02bdcc1c90eb6ebecb9be54a5157a2ae582f408bda0f84a073df7707e0b764b790a9c3105a11ab3b6cf6527abd293959ab6e47d13d6f13ea9b298c193f9a6c1dc00d8a5253b4d18033b59ea366ac597bbccc6d93cd8499b96ec298afd4cbb7a9a6db09f2e54923343edfbc09f7b265b3e2fbdde4472b510707375908f877750e5147cfe4209211b349ab22e3d8460c35f86d3965ddf191e435bba7c7b097df49abd67afea9259f8757b6de6e2a0bfdf52c34457a72548807910c66dad8a422e029a386169d453ab80f79a3fad24833baf7fa0afdb37b2fb2f652fa9578cb4253e48aedb9a5d27e99432454beaa0528e56db9f2949a3bb29cc3e5501cf79f1cadca3f9b516885e09e234f0d25fe49002facb13379c15d7e46183d5c37ce871591e413c084c198f4628790f84a92480b0c352328782014e3295db60ed52ec289a208201116fb15a835becc1e79170ea75924da1adbff1637b568f3308274f24e13dbe6a33cb495f8ca411ce36fde7fd5064b64e8e27f55d3801719ca45a0323c9579350ec14bbd8bcac957358f7f96576bde89c59c687f212e0f4fd42d7d9c8a92467fccde4ff497b0d8733b9e3825a301600cbe9516e4f621283e34c17e3f27fc66be3a80ce6181bba736d9982b90e476314f669d6c5e569b379511380ad414c09db2e5551a5db24d0424f7354374b8a2229e9b3e5df2c3705797678a9250de990debf234393a5f3e8c9894a27ce95b5d8d33422bcc66306afc618c001a998ae77f393ca027d2e77601a3bc292b9574f9dea97694c5d5c909b811e9d7399f8b944f42a867d74f8f513d2c47429c9453d34868fad5f5fbe29ff446121430f50c03734aa6dcc2b0bb5bd4084a96d6d5d22f3891d84a23ae0fcc03e67e8dbc09c549eb872ec18bcd3b7f739ef02c8a00ead1f83c12d6d2cdde66929fa4d1c3278e6e7fb0e34b8b6bd426ddd805bce92b9c21b75aa822f7a60b69c756cd5c6d6f23d498be77664cdcaf0c83a82c4cfe3914842be7c5160ea74ee3bcd4c5cb2e52100c56d696a51a7d4a29ba7c230c74b95cf96409c88998da873c9269ae0b59f8c82d9c74f5c6225ec1aa69d6dee46e085ee3746be2467bb89d187d30c54637a79739e714ef42b30c7b988358124bdf8810c8a7346f66b48521b4ca91a16a05d8b046841ac6fc2d9427026af92a05e09af938dd2c84e080a83c338a1810c9462d75efc9686028001aff1584677729ca4fb98003846202b9908ac5a65468e11f0a7955bbe5e3ef1520f982bd6cb9148b39d0b3bfd35bab17d83f15760fb199fc9885c18df452a5a1f4cecbd334ee24028446a81d55b1b8339537d7b901ed7a5a3e30fab6aa3f44c96884b23448f021b3cba8e4415a1578b1cc2ced9273b6d11cf49918c6f99975fd318f20e6b6a41aba8cb013b3ada40fb947f9485b31c8bacbd575c016380e9cd2ef5fbe9007c63e69dfdceb912947ce27e9e544babb3295806c6b30b986700d58b9a082787c78e203047b61170de7d4e89f021bac27aae0238b1d4a912366cdb92759d5799ac821be84a51b30e69d9916bee3c5b948d637d76239410569f0a579a92462104cdb9fc19bd69f8091d30deffca609bc04df008b3f902b3adf81b2cdb0e08e991aa57bd9bc5bb12a783d7aa21a7fa750e2566e9230154653a23a1056bebfd2487ea77d7097b29fd7fa2ee68862b99285cd2a178c9375e3239e45c9a1cd37529d511b852a9636b5d82090734b0b4e46bd01e7fdb149b19ed208f90af9191c7ea057410edc4e735cc0fe24f17ccba59ab698b4ae93a10ad12e2eb9c1037870a02a39c300ae1d6f44ca3e432d53ee7d946d737a0630abd7c3c6e39eada3965c67f55c142c2153fafa6c2aabee8129d373e63d0b3aafa0af80c127df56f3d79e6e97bff944630a3b8b07702cda076c30c8b14616178555e1ab0ed900d3c89e81e08bbf955bce2e0726dcc87fd4d3b2a798a09ae1aa1c5f65a335b29c938f99fb1a8ae2fb10e8b8e9a06f26ff57d516084bea5256de344ba5794a033e602966bbb184eaa0e6df999636e352b6b19e66b79f5884854482016e5b0ff54ce8e6cd77d19543bdf606a74b1a6c9ac838f4084998d826608bebe9d91d2764e9314f5a6f57dfdf5c4b8ebbc1776745b9b41132b427d4e5d10fe5945e2ada6a88d2506a835b8e2c1d2380bd03250f7b27dcf9fc3748acf0b0c0e67d99125140479bb040e0bf0bf46b72302b9a39025da05458b629195c2706eda83f0a6187c50378220b23d00204656f87093ca94fc21d279b44c19f4b3bd25c220cddc44dcf0fb2912eb974087a3b4d7ac2dc0a03e9b62c773ac8a95ae05603b2f4de7ee5107c0f5101e1f8e2e65807527278adfe8a8c896b0b9f16a566caf62d92ab4b2e22232ff1c3bdcfe169087985af6349d8be815cef651753788a4fc1e36c1c114d982505535ac873cc5167aac9d02da399396bdf8cd24a8fc02d2dd31c77d4d6991127789cede36500fcf9498833f18de5f162a649f1f87f7e3bad0997798e13cff002a4c398410900d29345954d0f2405365d95d654de009cc02d0e07fa6c0723e678e25e0e80b8be816be92dad7ce289abca97d99d61cdf16098ebd28568d807b6c98b470109ed589a640a0d790d9ded87fc4963ab2b4cddc34bec46c0bbcb2ecf6eab24f58a754fd1d2465f35408741352dca4e133aafec241cf25c2023a34e9e080c1721ff0d388b064c6b4afcbd02d2903ba1c6867f846da2c0a8be5611b91fe2f8b1e63294faf021224d6bf602c72ee6becf990c96f6edf9ec27ccc9bf2a75fb087ac82da027b87d4319decb679256b2b36d9bb56c557ede26ec5b00b5cbff43c188eb5a56618543f080345b030482c7ff22634c38a2ec186833dd9bad8dda10d7f99e7de140d1c9137f45df2f41665319e8b8d41009893b2dbaae1df8fcfb4be2db834b86bacb744d9695fa9bdb562f7a592bfaa51d025246dd366193f3c20048f2a2743f12b197fb37f577462d7b1126d0e448af58ea2939c37ab7a54710a9c3a31576e572cdc13cc31f18ddb98aa1494b9425979145a445c5d94ec8fd595bb6ca5354975bb52a0c6fa8a9207978db6e5b90682b2c9cf91d2d1034efe226869d6b973f0f7545c1f9ae904f2e32e9b9afc50220e8703e07b45fd52fecd8031329d12fd9bbf21464cac926907022425b65e379d446c0b420cd3c4d22bb9e88ac80caec5e0a0393cf956282ae9df8480998c56e23aeef37e926ad525990ba85e1d25aa09b4106dee1d8baf379b3bf916cdce3026dfacbe5068278360e6154fcafcd14c4c93bebc9586310956e34ddfbce97852b8a14dce598d1a15f307a9b0c439fa5181a6287903cd8584e760834abbdb8ff8ae1c68b47806633611611c386b6b79fe63d4655aef4d37758f8d66d56e8e3d6aab1d9dcb9ce598bcc674cfcbdd42082db87cdcfb41ed92902c69362c2cddf914f5b36897d6280115df286d65a688125e793ca643b9c8e1a50faf0cb2f3675316f04ee3b6eec0df48a334c770b0be4d55f16107c4eac2b4381b97fe06d007acc3303c837181ab343a8fb3f37d73e37cbfdbafe6b293fea0e995da3a2db528ec80372e5c34283893390b1755a713e899e0ee95169561a01ef8738a8e72cd9744732c6fe933af10c8aea757c5ce30ab13528ae64a6e9454421616c7fd0f0190115bb638f66f7b4659c5681c30e38a5b941b5f64a74647fcde9ab3d9838f92e35830cf70ccedca9c60bc48211be37eba65a6e3b642857ca5d5a812faf10762e8be4cacc76dbc0b12469408667bbb150865b4d8dce81285966015a3b5fd992f32cddc3fb027f741203e0c1d6caf61e26ccedeeb179e78c40c570bc72426a6dbe74b1f3e9559d5fc3e10201d3fc4f08b8e5026161d8058f3aed63f3bcc93c489d631671ec608f9745d2adede494d29fab525f00cf3a76199893713dbe2db669d4ffdcc4cdf9437682f3368524f1255cf2a395c3021bdaa5099ec23c955b2a7ec4eef4d4031afccd2c3b5a6bc0a8c6960318ac552aadef26c9c8a6068db752f9d8faf152276c333e3ae3df23b4490ec6f39d3ba15d4db1700b9c151d047ca91faed23e84c319adc4e2f927c71483456c326d89f83f10e8a34581645673d960101aa29fadc1eedcd33a0d74a0971fa8e169ffac643e25fe2b091632a91c59e28d36be3ee3d3aea1477162b8b63e1c5ba39a5219a5fc20bbbea9ebb7ff93b106de86928221647e0be28d494c540b6ff3ab1e898775bde23eb92a62869c00d63bfde3df0de13cf00f2fde40fe6f1b777cd7382032f747c452826df8b2dbef6749ba095be5c405df2dc95b372247a79e07a56e2f569277ec7b1e21e2a34827936bfe300094c33152368f9a094fa582d6b41eec93c0e30344dbc1f3a9a9bf5baeba0ff81ec4fb3b2c1c4239b703190a22d58683ad1a0bf05455b5d6efbcd5789bd2842ec325b618e8fc67ece22c840d69288c89d4be12bb608062dadb221c9d22f13c50f756ac4b8f90cafbf87e93310fef062ff4fc0850e43446da788d11102519686960ef1b0710e3d23ce8ad333f57996662e73f041366a8f41fb1b4a&lt;/script&gt;
  &lt;div class=&quot;hbe hbe-content&quot;&gt;
    &lt;div class=&quot;hbe hbe-input hbe-input-default&quot;&gt;
      &lt;input class=&quot;hbe hbe-input-field hbe-input-field-default&quot; type=&quot;password&quot; id=&quot;hbePass&quot;&gt;
      &lt;label class=&quot;hbe hbe-input-label hbe-input-label-default&quot; for=&quot;hbePass&quot;&gt;
        &lt;span class=&quot;hbe hbe-input-label-content hbe-input-label-content-default&quot;&gt;天王盖地虎&lt;/span&gt;
      &lt;/label&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;script src=&quot;/lib/hbe.js&quot;&gt;&lt;/script&gt;&lt;link href=&quot;/css/hbe.style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</summary>
    
    
    
    <category term="Network" scheme="https://zbttl.github.io/categories/Network/"/>
    
    
    <category term="kcptun" scheme="https://zbttl.github.io/tags/kcptun/"/>
    
    <category term="finalspeed" scheme="https://zbttl.github.io/tags/finalspeed/"/>
    
    <category term="wireshark" scheme="https://zbttl.github.io/tags/wireshark/"/>
    
  </entry>
  
  <entry>
    <title>「麻雀虽小，五脏俱全」：Android 端 terminal termux 上手调校指南</title>
    <link href="https://zbttl.github.io/2020-04-14-00/"/>
    <id>https://zbttl.github.io/2020-04-14-00/</id>
    <published>2020-04-13T16:00:00.000Z</published>
    <updated>2021-01-20T19:56:40.354Z</updated>
    
    <content type="html"><![CDATA[<p>Android 端 terminal 选择挺多的，甚至除了本地 terminal 之外，专精于 ssh 连接的工具（例如 juicessh、termius），那些个能给 Android 装上 Linux 子系统的工具都能或多或少的执行 Terminal 的工作。本文的主角 termux 就是其中一个轻量级本地 terminal。论界面和易用性，termux 绝对是排倒数的，教程、界面选择、各种设置啥的一概没有；但 terminal 该做的东西，比如软件生态，自启，服务，它都有；比他更全能的 Linux 虚拟机又太过臃肿，和它一样轻量的本地 terminal 们除了运行点二进制外就啥也没有了。但要发挥出 termux 的功力，免不了得折腾一番。</p><p>参考文章：</p><ol><li><a href="https://p3terx.com/archives/termux-tutorial-1.html">Termux 使用教程 #1 - Android 手机安装 Linux</a>：快捷键，ssh</li><li><a href="https://p3terx.com/archives/termux-tutorial-2.html">Termux 使用教程（二）：打造手机上的最强终端</a>：自定义扩展输入栏，换源，oh-my-zsh 和插件</li><li>国光：<a href="https://www.sqlsec.com/2018/05/termux.html">Termux 高级终端安装使用配置教程</a> 信息安全类的包</li><li><a href="https://www.jianshu.com/p/b688c9df69c6">神器Termux的使用记录</a> php+nginx+wordpress</li><li><a href="http://www.huangpan.net/posts/ji-ke/2019-08-19-termux.html">Termux 学习笔记</a> hexo，和一些 cli 文件管理工具</li></ol><h2 id="修改源"><a href="#修改源" class="headerlink" title="修改源"></a>修改源</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi $PREFIX/etc/apt/sources.list</span><br></pre></td></tr></tbody></table></figure><p>将原来的源注释掉，加入清华源</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/termux stable main</span><br></pre></td></tr></tbody></table></figure><h2 id="安装必须软件"><a href="#安装必须软件" class="headerlink" title="安装必须软件"></a>安装必须软件</h2><p>其中，可选的：</p><ul><li>pynat 测梯子 udp 连通性和 nat 类型</li><li>tldr 命令例子，类似 man</li><li>tsu 没有 root 不用装，在 tsu 下既可以获得 su 的权限又不用忍受 su 的界面</li><li>supervisor，自启</li><li>openssh，后面某些步骤操作比较复杂（特别是自启那个地方），用电脑远程 ssh 连接效率较高（不过平时本来手机就到处带，如果不涉及路径的反复操作意义不大）</li><li>neofetch，打开终端时的欢迎界面</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pkg update</span><br><span class="line">pkg install vim tsu tmux python openssh neofetch</span><br><span class="line">pip install pynat tldr</span><br></pre></td></tr></tbody></table></figure><h2 id="自定义扩展功能按键"><a href="#自定义扩展功能按键" class="headerlink" title="自定义扩展功能按键"></a>自定义扩展功能按键</h2><p>打开相关文档</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.termux/termux.properties</span><br></pre></td></tr></tbody></table></figure><p>将原来的配置注释或删掉，新增一行</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extra-keys = [['ESC','/','-','HOME','UP','END'],['TAB','CTRL','ALT','LEFT','DOWN','RIGHT']]</span><br></pre></td></tr></tbody></table></figure><h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sshd</span><br></pre></td></tr></tbody></table></figure><p>需要密钥的话参考第二篇文章，在 github 中设置公钥，然后使用一键脚本设置：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -Ls git.io/ikey.sh) -g zbttl</span><br></pre></td></tr></tbody></table></figure><p>查看一下手机当前的 ip 地址</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></tbody></table></figure><p>之后使用 xshell 之类的 ssh 工具通过本手机的内网 ip 和密钥连接 8022 （不是 22）端口就行了。</p><p>ssh 下，尽管是局域网，输入命令运行时仍会感到明显的延迟。原因不明。</p><h2 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h2><h3 id="安装-zsh"><a href="#安装-zsh" class="headerlink" title="安装 zsh"></a>安装 zsh</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg i -y zsh</span><br></pre></td></tr></tbody></table></figure><h3 id="安装-Oh-My-Zsh"><a href="#安装-Oh-My-Zsh" class="headerlink" title="安装 Oh My Zsh"></a>安装 Oh My Zsh</h3><p>使用 curl 下载安装</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"</span><br></pre></td></tr></tbody></table></figure><p>Oh My Zsh 安装完成后会提示你设置 zsh 为默认 shell 。如果没有提示，输入下面的命令进行设置：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s zsh</span><br></pre></td></tr></tbody></table></figure><h3 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h3><p>直接在 <code>.zshrc</code> 中修改</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></tbody></table></figure><p>修改这一行</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME="[主题名]"</span><br></pre></td></tr></tbody></table></figure><p>或者使用命令</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i '/^ZSH_THEME=/c\ZSH_THEME="[主题名]"' ~/.zshrc</span><br></pre></td></tr></tbody></table></figure><p>这里推荐两个主题：</p><ol><li><p>自带的 agnoster</p></li><li><p><a href="https://github.com/romkatv/powerlevel10k">powerlevel10k</a>，符号全，但需要安装</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth=1 https://github.com/romkatv/powerlevel10k.git $ZSH_CUSTOM/themes/powerlevel10k</span><br></pre></td></tr></tbody></table></figure><p>修改 <code>~/.zshrc</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME="powerlevel10k/powerlevel10k"</span><br></pre></td></tr></tbody></table></figure><p>重启 termux 后，输入命令进入配置</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p10k configure</span><br></pre></td></tr></tbody></table></figure><p>根据自己喜好选择。可以通过输入该命令反复修改。</p></li></ol><h3 id="安装-Oh-My-Zsh-插件"><a href="#安装-Oh-My-Zsh-插件" class="headerlink" title="安装 Oh My Zsh 插件"></a>安装 Oh My Zsh 插件</h3><p>安装 <a href="https://p3terx.com/go/aHR0cHM6Ly9naXRodWIuY29tL3pzaC11c2Vycy96c2gtc3ludGF4LWhpZ2hsaWdodGluZw==">zsh-syntax-highlighting</a>（代码高亮）</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting $ZSH_CUSTOM/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></tbody></table></figure><p>安装 <a href="https://p3terx.com/go/aHR0cHM6Ly9naXRodWIuY29tL3pzaC11c2Vycy96c2gtYXV0b3N1Z2dlc3Rpb25z">zsh-autosuggestions</a>（自动建议）</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</span><br></pre></td></tr></tbody></table></figure><p>安装 <a href="https://p3terx.com/go/aHR0cHM6Ly9naXRodWIuY29tL3pzaC11c2Vycy96c2gtY29tcGxldGlvbnM=">zsh-completions</a>（自动补全）</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-completions $ZSH_CUSTOM/plugins/zsh-completions</span><br></pre></td></tr></tbody></table></figure><p>安装 autojump（快速跳转）（可选）（粗略使用方法为用 <code>j xxx</code> 进入安装 autojump 以后进入过的文件夹。用 <code>j --stat</code> 查看当前 autojump 记录你进过的文件夹）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone git://github.com/joelthelion/autojump.git</span><br><span class="line">cd autojump</span><br><span class="line">./install.py</span><br></pre></td></tr></tbody></table></figure><p>运行后会弹出提示，让你加内容到 <code>.zshrc</code> 中。</p><p><img src="https://i.imgur.com/XIwtL6V.png"></p><p><del>或是直接输入命令</del>（sed 命令一键操作已经执行该内容）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "[[ -s $HOME/.autojump/etc/profile.d/autojump.sh ]] &amp;&amp; source $HOME/.autojump/etc/profile.d/autojump.sh" &gt;&gt; ~/.zshrc</span><br></pre></td></tr></tbody></table></figure><p>zsh-com­ple­tions 插件还需把 <code>autoload -U compinit &amp;&amp; compinit</code> 添加到<code>.zshrc</code>。输入命令可一键添加：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ -z "`grep "autoload -U compinit &amp;&amp; compinit" ~/.zshrc`" ] &amp;&amp; echo "autoload -U compinit &amp;&amp; compinit" &gt;&gt; ~/.zshrc</span><br></pre></td></tr></tbody></table></figure><p>把需要启用的插件写入到配置文件中，使用 <code>sed</code> 命令一键操作。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed -i '/^plugins=/c\plugins=(git z zsh-syntax-highlighting zsh-autosuggestions zsh-completions)' ~/.zshrc</span><br><span class="line"><span class="meta">#</span><span class="bash">加入autojump</span></span><br><span class="line">sed -i '/^plugins=/c\plugins=(git z zsh-syntax-highlighting zsh-autosuggestions zsh-completions autojump)' ~/.zshrc</span><br></pre></td></tr></tbody></table></figure><blockquote><p>如果你有自己想添加的插件，写在括号内即可，插件名称用空格隔开。</p></blockquote><p>最后应用配置</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></tbody></table></figure><h2 id="应用自启"><a href="#应用自启" class="headerlink" title="应用自启"></a>应用自启</h2><p>辅以一个例子：kcptun 客户端打开 termux 时自启，kcptun 二进制文件放在用户根目录 <code>~/</code> 下</p><p>原命令：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/kcptun -l :2580 -r [IP:PORT] -key [PASSWORD] -crypt none -nocomp -datashard 0 -parityshard 0 -conn 4 -mtu 1200 -sndwnd 1024 -rcvwnd 3500 -mode normal</span><br></pre></td></tr></tbody></table></figure><h3 id="直接写入-bash-文件中"><a href="#直接写入-bash-文件中" class="headerlink" title="直接写入 bash 文件中"></a>直接写入 bash 文件中</h3><p>最便捷的方法。持续运行的命令需要配合重定向命令运行在后台。直接将命令放入 bash 文件中（默认为 <code>.bashsrc</code>，经过我们上面的修改后为 <code>.zshrc</code>)，还可通过重定向命令将输入放在文件中便于查错。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/kcptun -l :2580 -r [IP:PORT] -key [PASSWORD] -crypt none -nocomp -datashard 0 -parityshard 0 -conn 4 -mtu 1200 -sndwnd 1024 -rcvwnd 3500 -mode normal &gt;~/kcptun.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></tbody></table></figure><p>另外也可以通过 jobs 指令查看后台已经运行了几个这样的进程。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jobs -l</span><br></pre></td></tr></tbody></table></figure><p>但缺点时启动多个 termux 窗口或使用终端复用时，每新增一个窗口就会多运行一次这个指令，如果运行的命令没有自动限制自己只能运行一个实例的功能，那么可能会引起冲突和 bug。</p><p>实际上，这个功能比较适合需要更换终端窗口时重复运行的程序（比如终端欢迎界面 neofetch），和拥有独立控制，但需要随 termux 自启的 supervisor（这个我们之后讲），对于 kcptun 以及我手机上运行的另一个项目 UnblockNeteaseMusic 来说只是勉强合适，如果不开多终端没问题，开了多个终端以后就算后面又关到只剩一个终端甚至重启 termux 也会发现有项目正在运行或者运行不正常但在 jobs 命令中找不到，只能重启手机或者利用 <code>kill -9</code> 指令强行杀掉。</p><p><strong>（20.5.28 更新）</strong> 经过一番研究，可能写在 <code>./.zprofile</code> 中会比较好。因为 profile 文件中的命令只在第一次启动登录时会运行，而 bash 文件会在每一次打开命令行窗口时运行（适合放入系统变量一类的东西）。</p><h3 id="termux-services"><a href="#termux-services" class="headerlink" title="termux-services"></a>termux-services</h3><p>参考文章：</p><ul><li><a href="https://github.com/termux/termux-services/issues/4">how to add self service #4</a></li><li><a href="https://wiki.termux.com/wiki/Termux-services">Termux-services</a></li><li><a href="https://github.com/termux/termux-packages/blob/53de8cdd264228255c02388f30c38f90d3f9eab2/packages/openssh/build.sh#L87">termux-packages/packages/openssh/build.sh</a></li><li><a href="https://blog.csdn.net/diyiday/article/details/78709949">runit 快速入门</a></li></ul><p>官方推荐的方法。实际上改自 runit，不过日志部分直接通过链接方法获得了。其实前三篇参考文章写的大同小异，不过都有错漏，我就列一起了。</p><ol><li><p>安装 termux-services</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg i termux-services </span><br></pre></td></tr></tbody></table></figure></li><li><p>指定程序名，按自己的喜好起</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tpath='kcptun'</span><br></pre></td></tr></tbody></table></figure></li><li><p>建立 run 文件，down 文件和 log 目录</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $PREFIX/var/service</span><br><span class="line">cd $PREFIX/var/service</span><br><span class="line">mkdir -p ${tpath}/log</span><br><span class="line">vim ${tpath}/run</span><br></pre></td></tr></tbody></table></figure><p>run 文件的内容，仅供参考</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">exec ~/kcptun -l :2580 -r [IP:PORT] -key [PASSWORD] -crypt none -nocomp -datashard 0 -parityshard 0 -conn 4 -mtu 1200 -sndwnd 1024 -rcvwnd 3500 -mode normal 2&gt;&amp;1</span><br></pre></td></tr></tbody></table></figure><p>给权限，新建 down。down 文件实际上是近期开关，后面 enable 和 disable 的凭据实际上就是目录下存不存在 down 文件，我们建立 down 文件实际意思就是默认先关着。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ${tpath}/run</span><br><span class="line">touch ${tpath}/down</span><br></pre></td></tr></tbody></table></figure></li><li><p>链接 log 文件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -sf $PREFIX/share/termux-services/svlogger ${tpath}/log/run</span><br></pre></td></tr></tbody></table></figure></li><li><p>启动 <code>sv up ${tpath}</code></p><p>查看状态 <code>sv status ${tpath}</code></p><p>查看日志 <code>cat $PREFIX/var/log/sv/${tpath}/current</code></p><p>关闭 <code>sv down ${tpath}</code></p><p>一切没问题就可以开启自启 <code>sv-enable ${tpath}</code>，开启自启时程序会自动打开</p><p>不想用的时候可以关闭自启 <code>sv-enable ${tpath}</code></p></li></ol><h3 id="supervisor"><a href="#supervisor" class="headerlink" title="supervisor"></a>supervisor</h3><p>参考文章：<a href="https://blog.csdn.net/tyy649909457/article/details/99348032">termux 安装supervisor</a></p><p>和 runit 相比，supervisor 是 linux 下相对成熟的自启和后台管理方案，命令比 runit 丰富的多。而且相对于 runit 建文件夹控制的方法，supervisor 大部分控制依靠文件配置，需要配置多个自启的时候理论上要更方便。但，因为不是 termux 推荐的方案，导致配置文件里包含的各类文件需要自己创建，且其自启依赖普通 linux 发行版中的 systemd，termux 没有，导致自启还需要放到 bash 文件中，总体易用性其实差一点。</p><ol><li><p>安装 supervisor</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install supervisor -y</span><br></pre></td></tr></tbody></table></figure></li><li><p>新建一个 supervisord.conf 文件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $PREFIX/etc</span><br><span class="line">vim supervisord.conf</span><br></pre></td></tr></tbody></table></figure><p>内容如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">;[unix_http_server]</span><br><span class="line">;file=/data/data/com.termux/files/usr/var/run/supervisor.sock ; the path to the socket file</span><br><span class="line">;chmod=0700 ; socket file mode (default 0700)</span><br><span class="line">;chown=nobody:nogroup ; socket file uid:gid owner</span><br><span class="line">;username=user ; default is no username (open server)</span><br><span class="line">;password=123 ; default is no password (open server)</span><br><span class="line"></span><br><span class="line">[inet_http_server] ; inet (TCP) server disabled by default</span><br><span class="line">port=127.0.0.1:9001 ; ip_address:port specifier, *:port for all iface</span><br><span class="line">;username=user ; default is no username (open server)</span><br><span class="line">;password=123 ; default is no password (open server)</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line">logfile=/data/data/com.termux/files/usr/var/log/supervisord.log ; main log file; default $CWD/supervisord.log</span><br><span class="line">logfile_maxbytes=50MB ; max main logfile bytes b4 rotation; default 50MB</span><br><span class="line">logfile_backups=10 ; # of main logfile backups; 0 means none, default 10</span><br><span class="line">loglevel=info ; log level; default info; others: debug,warn,trace</span><br><span class="line">pidfile=/data/data/com.termux/files/usr/var/run/supervisord.pid ; supervisord pidfile; default supervisord.pid</span><br><span class="line">nodaemon=false ; start in foreground if true; default false</span><br><span class="line">minfds=1024 ; min. avail startup file descriptors; default 1024</span><br><span class="line">minprocs=200 ; min. avail process descriptors;default 200</span><br><span class="line">;umask=022 ; process file creation umask; default 022</span><br><span class="line">;user=supervisord ; setuid to this UNIX account at startup; recommended if root</span><br><span class="line">;identifier=supervisor ; supervisord identifier, default is ‘supervisor’</span><br><span class="line">;directory=/tmp ; default is not to cd during start</span><br><span class="line">;nocleanup=true ; don’t clean up tempfiles at start; default false</span><br><span class="line">;childlogdir=/tmp ; ‘AUTO’ child log dir, default $TEMP</span><br><span class="line">;environment=KEY=“value” ; key value pairs to add to environment</span><br><span class="line">;strip_ansi=false ; strip ansi escape codes in logs; def. false</span><br><span class="line"></span><br><span class="line">[rpcinterface:supervisor]</span><br><span class="line">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line">;serverurl=unix:///data/data/com.termux/files/usr/var/run/supervisor.sock ; use a unix:// URL for a unix socket</span><br><span class="line">serverurl=http://127.0.0.1:9001 ; use an http:// url to specify an inet socket</span><br><span class="line">;username=chris ; should be same as in [_http_server] if set</span><br><span class="line">;password=123 ; should be same as in [_http_server] if set</span><br><span class="line">;prompt=mysupervisor ; cmd line prompt (default “supervisor”)</span><br><span class="line">;history_file=~/.sc_history ; use readline history if available</span><br><span class="line"></span><br><span class="line">[include]</span><br><span class="line">files = /data/data/com.termux/files/usr/etc/supervisor.d/*.conf</span><br></pre></td></tr></tbody></table></figure></li></ol><p>注意，咱也不想用 <code>/data/data/com.termux/files/usr/</code> 这个这么长的路径的，但 supervisor 这边所有的配置文件都不认 <code>$PREFIX</code>，甚至连 <code>~</code> 都不认。</p><ol start="3"><li><p>新建具体到程序的配置文件</p><p>首先获取当前用户的用户名</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id</span><br></pre></td></tr></tbody></table></figure><p>假设是 u0_a999</p><p>然后新建文件 kcptun.conf</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tpath='kcptun'</span><br><span class="line">mkdir supervisor.d/</span><br><span class="line">vim supervisor.d/${tpath}.conf</span><br></pre></td></tr></tbody></table></figure><p>内容为</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[program:kcptun]</span><br><span class="line">user=u0_a999</span><br><span class="line">command=/data/data/com.termux/files/home/kcptun -l :2580 -r [IP:PORT] -key [PASSWORD] -crypt none -nocomp -datashard 0 -parityshard 0 -conn 4 -mtu 1200 -sndwnd 1024 -rcvwnd 3500 -mode normal</span><br><span class="line">autostart=true</span><br><span class="line">redirect_stderr = true</span><br><span class="line">stdout_logfile_maxbytes = 1MB</span><br><span class="line">stdout_logfile = ~/tmp/kcptun.log </span><br></pre></td></tr></tbody></table></figure><p>这里的 logfile，supervisor 自己就不会新建，我们得手动建：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/tmp</span><br><span class="line">touch ~/tmp/kcptun.log</span><br></pre></td></tr></tbody></table></figure><p>最后启动试试看：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">supervisord</span><br><span class="line">supervisorctl</span><br></pre></td></tr></tbody></table></figure><p>看到 kcptun 这个进程是 running 的就行。</p></li><li><p>将 supervisord 加入 bash 文件中。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "supervisord" &gt;&gt; ~/.zshrc</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="不推荐的配置"><a href="#不推荐的配置" class="headerlink" title="不推荐的配置"></a>不推荐的配置</h2><h3 id="termux-boot"><a href="#termux-boot" class="headerlink" title="termux-boot"></a>termux-boot</h3><p>号称可以开机自启 termux。但需要开启唤醒锁才行，开启后手机的休眠会受到影响，耗电大幅增加（起码在我的 pe 安卓 10 是这样）。</p><h3 id="访问外部存储功能"><a href="#访问外部存储功能" class="headerlink" title="访问外部存储功能"></a>访问外部存储功能</h3><p>开启后访问内部储存内容会方便不少，但如果使用钛备份会默认把开启内部储存的几个位置的内容也当成需要备份的资料，生成的资料大小极为感人。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Android 端 terminal 选择挺多的，甚至除了本地 terminal 之外，专精于 ssh 连接的工具（例如 juicessh、termius），那些个能给 Android 装上 Linux 子系统的工具都能或多或少的执行 Terminal 的工作。本文的主角 termux 就是其中一个轻量级本地 terminal。论界面和易用性，termux 绝对是排倒数的，教程、界面选择、各种设置啥的一概没有；但 terminal 该做的东西，比如软件生态，自启，服务，它都有；比他更全能的 Linux 虚拟机又太过臃肿，和它一样轻量的本地 terminal 们除了运行点二进制外就啥也没有了。但要发挥出 termux 的功力，免不了得折腾一番。&lt;/p&gt;
&lt;p&gt;参考文章：&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="https://zbttl.github.io/categories/Android/"/>
    
    
    <category term="termux" scheme="https://zbttl.github.io/tags/termux/"/>
    
    <category term="zsh" scheme="https://zbttl.github.io/tags/zsh/"/>
    
    <category term="terminal" scheme="https://zbttl.github.io/tags/terminal/"/>
    
  </entry>
  
  <entry>
    <title>暴力整合 windows terminal 到系统各处快捷菜单中</title>
    <link href="https://zbttl.github.io/2020-04-01-00/"/>
    <id>https://zbttl.github.io/2020-04-01-00/</id>
    <published>2020-03-31T16:00:00.000Z</published>
    <updated>2021-01-20T19:56:49.747Z</updated>
    
    <content type="html"><![CDATA[<p>参考文章：</p><ul><li><a href="https://poychang.github.io/run-windows-terminal-as-administrator-with-elevated-admin-permissions/">使用系统管理员身分开启Windows Terminal 分页</a></li><li><a href="https://printempw.github.io/windows-terminal-setup-guide/">Windows Terminal 安装与配置指南</a></li></ul><h2 id="添加管理员模式-powershell"><a href="#添加管理员模式-powershell" class="headerlink" title="添加管理员模式 powershell"></a>添加管理员模式 powershell</h2><ol><li><p>安装 gsudo</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install gsudo -y</span><br></pre></td></tr></tbody></table></figure></li><li><p>新增 json 配置块，点击加号-&gt;settings，在 profiles-&gt;list 中添加。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    "guid": "{0667cbea-6f8d-43d6-b50a-e4f795569d86}",</span><br><span class="line">    "name": "Elevated PowerShell",</span><br><span class="line">    "commandline": "gsudo.exe PowerShell",</span><br><span class="line">    "icon": "C:/Users/zbttl/Pictures/powershell_red_scale-200.ico",</span><br><span class="line">    "hidden": false,</span><br><span class="line">    "colorScheme": "AdventureTime"</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>其中，icon 里的图标可从参考文章 1 中下载，下载后需要处理，图片像素缩小为 32x32（否则会出现明显的锯齿）。并转为 .ico 格式，主要保留透明度（即保证背景不是黑色的而是透明的），因为后面一步注册表中的参数不认得 ico 格式以为的图片。这些修改都可以用 ifranview 搞掂。</p><p>而 colorScheme，可以从这里找：<a href="https://github.com/mbadolato/iTerm2-Color-Schemes/tree/master/windowsterminal">mbadolato/iTerm2-Color-Schemes</a>，选好想要的主题，找到对应的配置文件，将其中的代码加到 schemes 中。修改的目的是让管理员模式和普通用户模式有区分度。</p></li><li><p>保存后在加号处就能看到该配置了。</p></li></ol><h2 id="添加进右键菜单"><a href="#添加进右键菜单" class="headerlink" title="添加进右键菜单"></a>添加进右键菜单</h2><ol><li><p>输入代码</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$basePath = "Registry::HKEY_CLASSES_ROOT\Directory\Background\shell"</span><br><span class="line">New-Item -Path "$basePath\wt" -Force -Value "Windows Terminal"</span><br><span class="line">New-ItemProperty -Path "$basePath\wt" -Force -Name "Icon" -PropertyType ExpandString -Value "X:\path\to\terminal.ico"</span><br><span class="line">New-Item -Path "$basePath\wt\command" -Force -Type ExpandString -Value '"%LOCALAPPDATA%\Microsoft\WindowsApps\wt.exe" -p "Windows PowerShell" -d "%V"'</span><br></pre></td></tr></tbody></table></figure><p>其中，<code>"X:\path\to\terminal.ico"</code> 修改为上一步通过修改的 ico 文件路径。最后一句中 -p 后面的参数 <code>Windows PowerShell</code> 改成自己配置文件中 powershell 所在代码块的 name。当然如果输错也可以进入注册表中再做修改，键值在 <code>HKEY_CLASSES_ROOT\Directory\Background\shell\wt</code> 中。</p></li><li><p>上面添加的是在文件管理器中右键以普通用户打开 windows terminal。而以管理员模式打开，还需要再新建键值。在上面代码块的第二句 <code>$basePath\wt</code> 中的 wt 键值需要修改为其他名字，-p 后的代码块也要更换，图标最好也更换一下。打个比方：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">New-Item -Path "$basePath\wtAdmin" -Force -Value "Windows Terminal(Admin)"</span><br><span class="line">New-ItemProperty -Path "$basePath\wtAdmin" -Force -Name "Icon" -PropertyType ExpandString -Value "X:\path\to\terminal.ico"</span><br><span class="line">New-Item -Path "$basePath\wtAdmin\command" -Force -Type ExpandString -Value '"%LOCALAPPDATA%\Microsoft\WindowsApps\wt.exe" -p "Elevated PowerShell" -d "%V"'</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="添加进-win-x-快速链接菜单"><a href="#添加进-win-x-快速链接菜单" class="headerlink" title="添加进 win+x 快速链接菜单"></a>添加进 win+x 快速链接菜单</h2><p>参考文章：</p><ul><li>[How to Add or Remove Default Items on Win+X Quick Link Menu in Windows 10](How to Add or Remove Default Items on Win+X Quick Link Menu in Windows 10)</li><li><a href="https://github.com/riverar/hashlnk">riverar/hashlnk</a></li></ul><p>很多时候我们要右键打开 powershell 还要退到桌面或是资源管理器处，如果在快速链接菜单（右键 windows 徽标）就能打开 windows terminal 就会方便很多。</p><p>右键菜单的结构，取决于 <code>%LocalAppdata%\Microsoft\Windows\WinX</code> 这个目录的结构。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/yipzGkz.png"></p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/7aWLpPK.jpg"></p><p>总结一下，有这么几个规律：</p><ol><li><p>里面的项目都是快捷方式，这个应该一眼就能看出来。你看到的文件名并不是真实的文件名，用第三方资源管理器或者用 dir 命令查看就知道</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/2nY5sPB.png"></p></li><li><p>但修改某项文件名不会使该项消失，而是会改变某项的位置。具体位置取决于真实文件名按名称方式倒序排列后的位置。</p><ul><li>也就是说，如果你想让新加进来的项目排在 group 的最顶上，其实什么都不用动，因为一般来说程序都是以字母开头，字母开头一定会排在原来这些数字开头程序的上面（倒序）。</li><li>反过来，如果你要把新增的项目放在中间，那就要修改其中一个项目的真实文件名，比如你要将新建的项目放在计算机管理的后面，并把计算机管理调到最前，你可以将计算机管理的真实文件名前面的序号改成 11，在新增项目的真实文件名前面加上 <code>03 - </code>；</li><li>如果不想调整计算机管理的位置，那么将新增项目的真实文件名前面加上 <code>02b - </code> 应该也可以；如果想把新增项目放在最后，将新增项目的真实文件名前面加上 <code>00 - </code> 就行。</li></ul><p>另外，因为 group3 项目比较多，所以才用两位数字的前缀，group2 就用的是一个数字的前缀，但原理相同。</p></li><li><p>不过，新增的项目不会立刻生效，而其前缀也会在资源管理器中表现出来，而不是和原有的项目一样自动将前缀隐藏。原因是，原有的项目在注册表中绑定了，绑定的依据是快捷方式属性中的「目标」这一项。所以你想通过修改原来快捷方式的目标直接让其打开其他程序这个方法是不行的。直接将新增项目放进文件夹里面也不会识别，修改这些原有项目的文件名不会使快捷链接中项目的名字被变更。但反过来，直接删除这些快捷方式的话，是能够生效的。</p></li><li><p>所以，如果要新增项目的话，就需要用上面参考文章的 hashlnk 这款软件。使用方法也很简单，先把快捷方式放到相应位置，快捷方式的参数也可以进行适当修改。之后，就需要运行命令（powershell 不认 %LOCALAPPDATA%，只能用全名）。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashlnk.exe 'C:\Users\[用户名]\AppData\Local\Microsoft\Windows\WinX\Group3\[快捷方式名]'</span><br></pre></td></tr></tbody></table></figure></li><li><p>要修改快捷链接中的名字也可以，在相应项目属性中修改描述就行了。</p></li></ol><p>综上，我们要添加 windows terminal，按以下步骤：</p><ol><li><p>复制 <code>%LOCALAPPDATA%\Microsoft\WindowsApps\wt.exe</code>，在 <code>%LocalAppdata%\Microsoft\Windows\WinX\Group3</code> 中粘贴<strong>快捷方式</strong>。</p></li><li><p>修改快捷方式 <code>wt.exe</code> 的属性和文件名。文件名修改成你顺耳的，并且我想让其挨在 powershell 的项目旁边。所以我将名字修改为 <code>00 - windowsTerminal</code>。属性中，目标修改为 <code>"%LOCALAPPDATA%\Microsoft\WindowsApps\wt.exe" -p "Windows PowerShell"</code>，描述修改为 <code>Windows Terminal</code>。</p></li><li><p>在 hashInk.exe 所在目录运行</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\hashlnk.exe 'C:\Users\zbttl\AppData\Local\Microsoft\Windows\WinX\Group3\00 - windowsTerminal.lnk'</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Uz0jDk6.png"></p></li></ol><p>重启资源管理器即可。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;参考文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://poychang.github.io/run-windows-terminal-as-administrator-with-elevated-admin-permissions/&quot;&gt;使用系统管理员身分开启Windows Terminal 分页&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://printempw.github.io/windows-terminal-setup-guide/&quot;&gt;Windows Terminal 安装与配置指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Windows" scheme="https://zbttl.github.io/categories/Windows/"/>
    
    
    <category term="terminal" scheme="https://zbttl.github.io/tags/terminal/"/>
    
    <category term="powershell" scheme="https://zbttl.github.io/tags/powershell/"/>
    
  </entry>
  
  <entry>
    <title>双向加速软件</title>
    <link href="https://zbttl.github.io/2020-03-05-00/"/>
    <id>https://zbttl.github.io/2020-03-05-00/</id>
    <published>2020-03-04T16:00:00.000Z</published>
    <updated>2021-01-20T17:37:21.341Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="你不对劲！" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="fc946d50aed18d1cb019bf7a0174eef693d2345d6ca9d00e209ecec93a3e4f27"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">天王盖地虎</span>      </label>    </div>  </div></div><script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">&lt;div class=&quot;hbe hbe-container&quot; id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;你不对劲！&quot; data-whm=&quot;抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.&quot;&gt;
  &lt;script id=&quot;hbeData&quot; type=&quot;hbeData&quot; data-hmacdigest=&quot;fc946d50aed18d1cb019bf7a0174eef693d2345d6ca9d00e209ecec93a3e4f27&quot;&gt;&lt;/script&gt;
  &lt;div class=&quot;hbe hbe-content&quot;&gt;
    &lt;div class=&quot;hbe hbe-input hbe-input-default&quot;&gt;
      &lt;input class=&quot;hbe hbe-input-field hbe-input-field-default&quot; type=&quot;password&quot; id=&quot;hbePass&quot;&gt;
      &lt;label class=&quot;hbe hbe-input-label hbe-input-label-default&quot; for=&quot;hbePass&quot;&gt;
        &lt;span class=&quot;hbe hbe-input-label-content hbe-input-label-content-default&quot;&gt;天王盖地虎&lt;/span&gt;
      &lt;/label&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;script src=&quot;/lib/hbe.js&quot;&gt;&lt;/script&gt;&lt;link href=&quot;/css/hbe.style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</summary>
    
    
    
    <category term="Network" scheme="https://zbttl.github.io/categories/Network/"/>
    
    
    <category term="gost" scheme="https://zbttl.github.io/tags/gost/"/>
    
    <category term="kcptun" scheme="https://zbttl.github.io/tags/kcptun/"/>
    
    <category term="finalspeed" scheme="https://zbttl.github.io/tags/finalspeed/"/>
    
  </entry>
  
</feed>
