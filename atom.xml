<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bao&#39;s 备忘录</title>
  
  
  <link href="https://zbttl-github-io.vercel.app/atom.xml" rel="self"/>
  
  <link href="https://zbttl-github-io.vercel.app/"/>
  <updated>2021-08-11T16:11:42.729Z</updated>
  <id>https://zbttl-github-io.vercel.app/</id>
  
  <author>
    <name>zbttl</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>萌新的 linux qt 程序编译实战</title>
    <link href="https://zbttl-github-io.vercel.app/meng-xin-de-linux-qt-cheng-xu-bian-yi-shi-zhan/"/>
    <id>https://zbttl-github-io.vercel.app/meng-xin-de-linux-qt-cheng-xu-bian-yi-shi-zhan/</id>
    <published>2021-07-12T16:00:00.000Z</published>
    <updated>2021-08-11T16:11:42.729Z</updated>
    
    <content type="html"><![CDATA[<p>事情的来源，是两个月前和朋友讨论啥软件界面又好看「学术网站」又快界面又漂亮。clash 虽然漂亮，但支持的协议少了点。</p><p>这时候我就提了一嘴「qv2ray 新界面呀，不是挺漂亮的吗，只是要编译，又不麻烦」</p><p>前半句是对的，确实挺漂亮的：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/QQ%E5%9B%BE%E7%89%8720210517003751.jpg"></p><p>但为了圆后半句，我花了两个月时间。。。不要小看编译啊 kora！</p><p>环境：ubuntu 20.04 桌面端，否则没有 opengl 支持，没法试还报错</p><h2 id="标准编译步骤——借助-ubuntu-内置的-apt-安装以来并直接编译"><a href="#标准编译步骤——借助-ubuntu-内置的-apt-安装以来并直接编译" class="headerlink" title="标准编译步骤——借助 ubuntu 内置的 apt 安装以来并直接编译"></a>标准编译步骤——借助 ubuntu 内置的 apt 安装以来并直接编译</h2><h3 id="初步安装依赖"><a href="#初步安装依赖" class="headerlink" title="初步安装依赖"></a>初步安装依赖</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install git openssl -y</span><br><span class="line">#编译所需工具</span><br><span class="line">sudo apt install autoconf automake libtool build-essential -y</span><br><span class="line"># qv2ray 和 grpc 编译所需的 ssl 库</span><br><span class="line">sudo apt install libssl-dev -y</span><br></pre></td></tr></tbody></table></figure><h3 id="安装-qt5（通过官方在线安装包）"><a href="#安装-qt5（通过官方在线安装包）" class="headerlink" title="安装 qt5（通过官方在线安装包）"></a>安装 qt5（通过官方在线安装包）</h3><p>参考文章：<a href="https://forum.qt.io/topic/72009/how-do-i-move-qt-to-usr-local-share-qt">How do I move ~/Qt to /usr/local/share/Qt? | Qt Forum</a></p><p>需要保持网络通畅！</p><p>下载：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://qt.mirror.constant.com/archive/online_installers/4.1/qt-unified-linux-x86_64-4.1.0-online.run</span><br><span class="line">chmod +x ./qt-unified-linux-x86_64-4.1.0-online.run</span><br><span class="line">./qt-unified-linux-x86_64-4.1.0-online.run</span><br></pre></td></tr></tbody></table></figure><p>根据提示，注册并安装 qt 5.12.5 。我就直接装在默认路径，<code>/home/zbttl/xxx</code> 下了。另外程序默认会安装 Ninja 和 cmake，这两个后面都会用得上。</p><p>将 qt 和 cmake 路径加到 root 和在进行操作的用户的环境变量中（后续如果不装到系统目录中，也可以省去吧路径加到的 root 下的命令，即第一条命令）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo "export PATH=/home/zbttl/Qt/5.15.2/gcc_64/bin:/home/zbttl/Qt/Tools/CMake/bin/:/home/zbttl/Qt/Tools/Ninja/:$PATH"|sudo tee /etc/bash.bashrc</span><br><span class="line"></span><br><span class="line">echo "export PATH=\$HOME/Qt/5.15.2/gcc_64/bin:\$HOME/Qt/Tools/CMake/bin/:\$HOME/Qt/Tools/Ninja/:\$PATH" &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></tbody></table></figure><p>测试：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmake -version</span><br><span class="line">qmake -v</span><br></pre></td></tr></tbody></table></figure><p>都有输出的话则正常。</p><p>还需要添加 qt 的动态链接库：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/ld.so.conf.d</span><br><span class="line">echo -e "/home/zbttl/Qt/5.15.2/gcc_64/lib\n/home/zbttl/Qt/Tools/QtCreator/lib/qtcreator"|sudo tee qt-5.15.2-x86_64.conf</span><br><span class="line">sudo ldconfig</span><br><span class="line">cd</span><br></pre></td></tr></tbody></table></figure><h3 id="安装-grpc、protobuf-、opengl-库"><a href="#安装-grpc、protobuf-、opengl-库" class="headerlink" title="安装  grpc、protobuf 、opengl 库"></a>安装  grpc、protobuf 、opengl 库</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libprotobuf-dev protobuf-compiler libgrpc-dev libgrpc++-dev protobuf-compiler-grpc -y</span><br><span class="line">sudo apt install mesa-common-dev -y</span><br></pre></td></tr></tbody></table></figure><h3 id="编译-qv2ray-发行版"><a href="#编译-qv2ray-发行版" class="headerlink" title="编译 qv2ray 发行版"></a>编译 qv2ray 发行版</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Qv2ray/Qv2ray.git --recursive</span><br><span class="line">cd Qv2ray</span><br><span class="line">mkdir build; cd build;</span><br><span class="line">cmake -DCMAKE_INSTALL_PREFIX=/home/zbttl/q2 -DCMAKE_BUILD_TYPE=Release -GNinja ..</span><br><span class="line">#如果没装Ninja，也可以不用Ninja，Ninja编译时是显示编译到多少个包，普通编译则是显示百分比</span><br><span class="line">#cmake -DCMAKE_INSTALL_PREFIX=/home/zbttl/q2 -DCMAKE_BUILD_TYPE=Release ..</span><br><span class="line">cmake --build . --parallel $(nproc)</span><br><span class="line">#装到系统路径中的话，要配合 sudo</span><br><span class="line">#sudo -s</span><br><span class="line">cmake --install .</span><br></pre></td></tr></tbody></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home/zbttl/q2/bin/</span><br><span class="line">./qv2ray</span><br></pre></td></tr></tbody></table></figure><p>有可能会报错哦。需要安装 xcb 库。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libxcb-xinerama0 -y</span><br></pre></td></tr></tbody></table></figure><h2 id="未曾设想的道路（雾）"><a href="#未曾设想的道路（雾）" class="headerlink" title="未曾设想的道路（雾）"></a>未曾设想的道路（雾）</h2><h3 id="换用-qt6-编译-dev-版"><a href="#换用-qt6-编译-dev-版" class="headerlink" title="换用 qt6 编译 dev 版"></a>换用 qt6 编译 dev 版</h3><p>新界面只有 dev 版支持。编译 dev 版则需要安装 qt6。</p><p>需要多装一个库：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libcurl4-openssl-dev -y</span><br></pre></td></tr></tbody></table></figure><p>和装 qt5 的步骤接近，除了通过安装程序安装时选择 qt 6.1.2 外，还有编译的参数要做出修改：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone -b dev-v3 https://github.com/Qv2ray/Qv2ray.git --recursive</span><br><span class="line">cd Qv2ray</span><br><span class="line">mkdir build; cd build;</span><br><span class="line">#如果是编译dev版可省略-DQV2RAY_QT6=ON参数，编译发行版必须加入（不过也有可能加上都编译不了，所以编译发行版建议用qt5）</span><br><span class="line">cmake -DCMAKE_INSTALL_PREFIX=/home/zbttl/q2 -DCMAKE_BUILD_TYPE=Release -GNinja -DQV2RAY_QT6=ON ..</span><br><span class="line">cmake --build . --parallel $(nproc)</span><br></pre></td></tr></tbody></table></figure><hr><p>但到这里，我还有一个小目标：</p><p>编都编了，干脆能手动编译的都手动编译吧！apt 装的版本虽然能用，但确实有点旧了。</p><p>大概有四样东西可以手动编译，分别是 openssl，grpc+protobuf、cmake 和 qt，这几样东西更新快且编译新软件的时候经常对他们有版本号上的需求。严格意义说，opengl 和 ninja 也是能手工编译的，但这两样东西似乎比较稳定，没啥必要手工编译。</p><h3 id="手工编译-openssl"><a href="#手工编译-openssl" class="headerlink" title="手工编译 openssl"></a>手工编译 openssl</h3><p>可以替换上面用到的 <code>libcurl4-openssl-dev</code>、<code>libssl-dev</code> 两个库。（但不要去卸载 openssl，否则使用 wget 等命令时就会报警证书错误。不敲 <code>sudo rm -r /usr/local/ssl/certs&amp;&amp;sudo ln -s /etc/ssl/certs /usr/local/ssl</code> 这个命令也会造成证书报警，但如果卸了 openssl，敲了这个命令也没用。）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove libcurl4-openssl-dev libssl-dev -y</span><br></pre></td></tr></tbody></table></figure><p>下载的版本是 1.1.1f，现在应该还有更新的版本，但别用 3 开头的 alpha 版。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.openssl.org/source/openssl-1.1.1i.tar.gz --no-check-certificate</span><br><span class="line">tar xzvf openssl-1.1.1i.tar.gz </span><br><span class="line">cd openssl*/</span><br><span class="line">./config</span><br><span class="line">make</span><br><span class="line">make test</span><br><span class="line">sudo make install</span><br><span class="line">sudo ldconfig</span><br><span class="line">sudo rm -r /usr/local/ssl/certs&amp;&amp;sudo ln -s /etc/ssl/certs /usr/local/ssl</span><br><span class="line">cd</span><br></pre></td></tr></tbody></table></figure><p>安装完确认一下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openssl version</span><br><span class="line"></span><br><span class="line">pkg-config --libs openssl</span><br></pre></td></tr></tbody></table></figure><p>应有类似输出：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OpenSSL 1.1.1f  31 Mar 2020</span><br><span class="line"></span><br><span class="line">-L/usr/local/lib -lssl -lcrypto</span><br></pre></td></tr></tbody></table></figure><h3 id="手动安装-cmake"><a href="#手动安装-cmake" class="headerlink" title="手动安装 cmake"></a>手动安装 cmake</h3><p>qt6 必须要 cmake 3.16 以后版本才能编译，好死不死 apt 里带的版本是 3.15。之前用了 qt 官方的在线安装程序，安装的是 3.19，这才勉强能用。新版 grpc 也强制要求使用 cmake 而不是 make 了，本来想和 qt 编译写在一起，现在把这个步骤提前到这里。</p><p>cmake 官方直接给了最新的安装脚本，我们直接用就好了，懒得编译了。</p><p>可以到 <code>https://github.com/Kitware/CMake/releases</code> 获取最新 release 版本号：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#参考https://sobaigu.com/shell-get-lastest-version-from-github.html命令行直接获取版本号</span><br><span class="line">cmake_new_ver=$(wget -qO- -t1 -T2 "https://api.github.com/repos/Kitware/CMake/releases/latest" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g'|sed 's/[a-z]*//g')</span><br><span class="line">#或者是 cmake_new_ver=$(wget -qO- -t1 -T2 "https://api.github.com/repos/Kitware/CMake/releases/latest" | jq -r '.tag_name'|sed 's/[a-z]*//g')</span><br></pre></td></tr></tbody></table></figure><p>下载运行</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove cmake -y</span><br><span class="line">wget https://github.com/Kitware/CMake/releases/download/v${cmake_new_ver}/cmake-${cmake_new_ver}-linux-x86_64.sh</span><br><span class="line">chmod +x cmake-${cmake_new_ver}-linux-x86_64.sh</span><br><span class="line">sudo bash cmake-${cmake_new_ver}-linux-x86_64.sh --prefix=/usr/ --exclude-subdir</span><br></pre></td></tr></tbody></table></figure><p>如果在使用 ubuntu 且不在意空间的话，也可以通过 snap 安装：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo snap install cmake</span><br></pre></td></tr></tbody></table></figure><h3 id="手工编译-grpc-和-protobuf"><a href="#手工编译-grpc-和-protobuf" class="headerlink" title="手工编译 grpc 和 protobuf"></a>手工编译 grpc 和 protobuf</h3><p>参考文章</p><p>官方文档：</p><ul><li><a href="https://github.com/grpc/grpc/blob/master/BUILDING.md">grpc/BUILDING.md at master · grpc/grpc</a></li><li><a href="https://grpc.io/docs/languages/cpp/quickstart/">Quick start | C++ | gRPC</a></li></ul><p>其他使用者的使用心得：</p><ul><li><a href="https://github.com/grpc/grpc/blob/70ce9e21df4f6a18fbcfbb2103d1e89987125f4a/test/distrib/cpp/run_distrib_test_cmake.sh">grpc 正确安装 grpc/run_distrib_test_cmake.sh at 70ce9e21df4f6a18fbcfbb2103d1e89987125f4a · grpc/grpc</a></li><li><a href="https://blog.csdn.net/u012182853/article/details/106243399/">ubuntu16.04 grpc安装_u012182853的博客-CSDN博客_cares安装</a></li><li>多版本 grpc 安装、国内镜像、需要编译出的 c 版本组件列出 ：<a href="https://www.cnblogs.com/52fhy/p/11110704.html">gRPC入坑记 - 飞鸿影 - 博客园</a></li><li><a href="https://www.jianshu.com/p/3479272f90bb">gRPC 和 protobuf 的安装 - 简书</a></li></ul><p>代替了 <code>libprotobuf-dev</code>、<code>protobuf-compiler</code>、<code>libgrpc-dev</code>、<code>libgrpc++-dev</code> 四个包。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove libprotobuf-dev protobuf-compiler libgrpc-dev libgrpc++-dev -y</span><br><span class="line">sudo apt install zlib1g-dev -y</span><br></pre></td></tr></tbody></table></figure><p>protobuf 包含在 grpc 中，所以一起拿下来就好了。cmake 这里，如果全部都手动编译的话，先参考下面手工安装 cmake 章节（因为 grpc 并不要求 cmake 版本，所以用 apt 版本的 cmake 也可以）。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">git clone --recurse-submodules https://github.com/grpc/grpc</span><br><span class="line"></span><br><span class="line">cd grpc/third_party/protobuf/</span><br><span class="line">git submodule update --init --recursive</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure --prefix=/usr</span><br><span class="line">make -j $(nproc)</span><br><span class="line">sudo make install </span><br><span class="line">sudo ldconfig</span><br><span class="line">cd ../..</span><br><span class="line">cd third_party/abseil-cpp</span><br><span class="line">cmake -DCMAKE_INSTALL_PREFIX=/usr \</span><br><span class="line">      -DCMAKE_POSITION_INDEPENDENT_CODE=TRUE</span><br><span class="line">make -j $(nproc)</span><br><span class="line">sudo make install</span><br><span class="line">cd ../..</span><br><span class="line">cmake -DgRPC_INSTALL=ON \</span><br><span class="line">      -DgRPC_BUILD_TESTS=OFF \</span><br><span class="line">      -DCMAKE_INSTALL_PREFIX=/usr \</span><br><span class="line">      -DgRPC_SSL_PROVIDER=package</span><br><span class="line">make -j $(nproc)</span><br><span class="line">sudo make install</span><br><span class="line">cd ..</span><br></pre></td></tr></tbody></table></figure><p>安装完确认一下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc --version</span><br></pre></td></tr></tbody></table></figure><p>应有输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libprotoc 3.15.8</span><br></pre></td></tr></tbody></table></figure><p>另外还可以通过运行 example 测试，可参照参考文章 4。</p><h3 id="编译安装-qt6"><a href="#编译安装-qt6" class="headerlink" title="编译安装 qt6"></a>编译安装 qt6</h3><p>说实话，实操后感觉并不推荐大家去单独编译 qt，坑又多，空间占用又大（大概要 17g 左右），编译时间又久，纯属自己好奇，活该（</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210720004656.png"></p><p>先装依赖。由于没有 <code>cmake clean</code> 这种类似的命令，因为编译时间比较久，万一哪个依赖没装导致编译中出错，就得删掉整个文件夹重新编译，得不偿失，所以依赖尽量装全一点；除了上面文章提到的依赖（openssl、cmake，grpc 和 protobuf 可以不用），还装了以下这些：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install  libgl1-mesa-dev libxcb*-dev libfontconfig1-dev libxkbcommon-x11-dev python libgtk-3-dev mesa-common-dev libglu1-mesa-dev -y</span><br></pre></td></tr></tbody></table></figure><p>到 <a href="download.qt.io/archive/qt/">qt 官网</a>寻找对应版本的源码包，这里我下了 6.1.0 single 目录下的 zip 版本：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210719225612.png"></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.qt.io/archive/qt/6.1/6.1.0/single/qt-everywhere-src-6.1.0.zip</span><br><span class="line">sudo apt install unzip -y</span><br><span class="line">unzip qt-everywhere-src-6.1.0.zip </span><br><span class="line">cd qt-everywhere-src-6.1.0</span><br></pre></td></tr></tbody></table></figure><p>但这时如果直接 configure 会报错，因为下下来的 zip 文件里换行符似乎是 windows 格式的 CFLR。。。</p><p>应该下 tar.xz 包的，算了，下都下了，搞个工具转换一下吧：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install dos2unix -y</span><br><span class="line">find . -type f -print0 | xargs -0 dos2unix</span><br></pre></td></tr></tbody></table></figure><p>编译安装：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">./configure -openssl --prefix=/usr/local/qt6</span><br><span class="line">export PATH=/usr/local/qt6/bin:$PATH</span><br><span class="line">cmake --build . --parallel $(nproc)</span><br><span class="line">sudo cmake --install .</span><br><span class="line"></span><br><span class="line">echo "export PATH=/usr/local/qt6/bin:\$PATH" &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br><span class="line"></span><br><span class="line">cd /etc/ld.so.conf.d</span><br><span class="line">echo -e "/usr/local/qt6/lib"|sudo tee qt-6-x86_64.conf</span><br><span class="line">sudo ldconfig</span><br><span class="line">cd</span><br></pre></td></tr></tbody></table></figure><p>此时输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qmake -v</span><br></pre></td></tr></tbody></table></figure><p>应有输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QMake version 3.1</span><br><span class="line">Using Qt version 6.1.0 in /usr/local/qt6/lib</span><br></pre></td></tr></tbody></table></figure><h2 id="安全绳"><a href="#安全绳" class="headerlink" title="安全绳"></a>安全绳</h2><p>如果你看完了上面的内容才来到这里，有两种可能：</p><ol><li>你很幸运，一次过了；</li><li>你在云，根本没动手！</li></ol><p>保守估计有起码一半的人会在半路跳进坑里，那你就得在这里找绳子啦~</p><h3 id="关于-grpc-和-protobuf-的版本问题"><a href="#关于-grpc-和-protobuf-的版本问题" class="headerlink" title="关于 grpc 和 protobuf 的版本问题"></a>关于 grpc 和 protobuf 的版本问题</h3><p>估计有一部分人（包括我）之前接触过 go 版本的 grpc 和 protobuf，刚开始就会心生疑问：这俩玩意用 go 或者 pip 装不是更快吗？</p><p>很遗憾。。。并不行，必须用 c 版本的，还得编译出 lib 版本的库装到系统中才能正常使用。</p><h3 id="ssl-错误"><a href="#ssl-错误" class="headerlink" title="ssl 错误"></a>ssl 错误</h3><p>常见于 qv2ray 和 qt6 编译中出现。</p><p>qv2ray 编译中出现，一般是因为</p><ol><li>版本不匹配，比如自己编译了 openssl，又安装了 <code>libssl-dev</code></li><li>编译 grpc 的时候没有加参数 <code>-DgRPC_SSL_PROVIDER=package</code>，参见 <a href="https://github.com/Qv2ray/Qv2ray/discussions/1509">编译到最后一步报错 · Discussion #1509 · Qv2ray/Qv2ray</a></li></ol><p>在 qt 编译中出现，大概率是 <code>libssl-dev</code> 没装或者是 configure 后补装的。</p><p>另参考：</p><ul><li><a href="https://github.com/grpc/grpc/issues/15054">static link grpc lib not working · Issue #15054 · grpc/grpc</a></li></ul><h3 id="库错误"><a href="#库错误" class="headerlink" title="库错误"></a>库错误</h3><p>最大的坑。严格意义上上面的 ssl 错误也可以归类为库错误的范畴。</p><p>原因有：</p><ol><li>新编译软件的库没有放到 ldconfig 中；</li><li>没装库</li><li>库装晚了（常见于 qt 编译）</li><li>既用了 apt 装库也编译安装了一份，apt 装的优先被读取但编译其他东西的时候用的是编译安装的库因此运行时报错。 </li></ol><p>有那么几个检查方法：</p><ol><li><p>编译时报错。可用 <code>pkg-config</code> 命令，类似</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pkg-config --libs openssl</span><br><span class="line">pkg-config --libs xcb</span><br></pre></td></tr></tbody></table></figure><p>有输出证明库正常安装，没有就是缺了。</p></li><li><p>运行时报错。比如常见的运行 qv2ray 二进制时报 xcb 相关的错误，可使用 ldd 命令：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldd ./qv2ray</span><br></pre></td></tr></tbody></table></figure><p>如果有库没找到 / 没装，会有提示。 </p></li></ol><p>解决方法就是使用 <code>sudo find / -name </code> 命令搜查相关文件确定原因，然后根据原因对症下药：</p><ol><li>加入相关路径到 ldconfig（可参考上面 qt 安装和编译的文章）</li><li> apt 装库或者编译库</li><li> 装库后删除已编译部分重新编译，或者删除整个项目并重新拉取。</li><li>配置 LD_LIBRARY_PATH 变量。参考 qt 错误第一条。</li></ol><h3 id="多线程编译错误"><a href="#多线程编译错误" class="headerlink" title="多线程编译错误"></a>多线程编译错误</h3><p>在使用类似</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j $(nproc)</span><br></pre></td></tr></tbody></table></figure><p>这类命令时，有可能出现各种编译错误问题，例如这个报错：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lib error: relink 'libprotoc.la' with the above command before installing it</span><br></pre></td></tr></tbody></table></figure><p>解决方法有：</p><ol><li>如果可能，使用 <code>make clean</code> 命令后重新 make；没有 <code>make clean</code> 命令的话就只能重新拉取项目代码；</li><li>使用单线程或手动指定进程数而不是使用 <code>$(nproc)</code> 变量。注意，不要指定过大的线程数或者不指定线程数（比如直接使用 <code>make -j</code> 命令），错误的进程数可能消耗过大的内存导致系统卡死。</li></ol><h3 id="qt-错误"><a href="#qt-错误" class="headerlink" title="qt 错误"></a>qt 错误</h3><p>qt 有可能遭遇编译错误；也有可能编译安装成功后发现 qv2ray 运行不了，因为编译的 qt 组件不全。</p><h4 id="自编译-qt-后不慎在-apt-内安装了对应包导致报错"><a href="#自编译-qt-后不慎在-apt-内安装了对应包导致报错" class="headerlink" title="自编译 qt 后不慎在 apt 内安装了对应包导致报错"></a>自编译 qt 后不慎在 apt 内安装了对应包导致报错</h4><p>报错代码类似于 <code>version 'Qt_5.15' not found (required by xxxx)</code>。</p><p>解决方法是配置 <code>LD_LIBRARY_PATH</code>。让自编译的 qt 库优先被使用。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo "export LD_LIBRARY_PATH=/home/zbttl/Qt/5.15.2/gcc_64/lib"|sudo tee /etc/bash.bashrc</span><br><span class="line"></span><br><span class="line">echo "export LD_LIBRARY_PATH=\$HOME/Qt/5.15.2/gcc_64/lib" &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></tbody></table></figure><h4 id="防止-configure-时库不全"><a href="#防止-configure-时库不全" class="headerlink" title="防止 configure 时库不全"></a>防止 configure 时库不全</h4><p>运行 <code>./configure</code> 命令后，会在 qt 目录下生成一个 <code>CMakeCache.txt</code> 文件，里面就是本次 qt 编译所支持的功能。如果此时环境内依赖不全，就会导致组件缺失。这里放出我自己测试能够成功运行 qv2ray 的 <a href="https://1drv.ms/t/s!AoMoC9XTgpEsmc4Pi5-M08cQCoWicg?e=hpV7d9">qt6 编译组件清单文件</a>，出问题的话可以用 vscode 对一下。</p><p>另外使用 <code>./configure</code> 命令时，可以考虑带上 <code>-openssl</code> 和 <code>-opengl</code> 等参数（上面的教程例子中已经带上了 <code>-openssl</code>），如果找不到相应的库，就会直接报错告诉你差这些而不是各种一闪而过告诉你准备完成。</p><h4 id="已编译安装的-qt6-测试"><a href="#已编译安装的-qt6-测试" class="headerlink" title="已编译安装的 qt6 测试"></a>已编译安装的 qt6 测试</h4><p>可以写一个小测试项目，因为目前我遇到的安装后的 qt 方面的三个问题，分别对应 openssl、opengl、xcb 三个问题，而我编的这个小程序要是能够正常编译运行，就证明不存在那三个问题。</p><ol><li><p>新建一个文件夹，文件夹里面放上名为 <code>test.cpp</code> 的文件，写入以下内容：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;QApplication&gt;</span><br><span class="line">#include &lt;QLabel&gt;</span><br><span class="line">#include &lt;QDebug&gt;</span><br><span class="line">#include &lt;QSslSocket&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc,char *argv[])</span><br><span class="line">{</span><br><span class="line">QApplication app(argc,argv);</span><br><span class="line">//qDebug()&lt;&lt;QSslSocket::sslLibraryBuildVersionString();</span><br><span class="line">QLabel *Label = new QLabel(QSslSocket::sslLibraryBuildVersionString());</span><br><span class="line">Label-&gt;show();</span><br><span class="line">return app.exec();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>生成 pro 文件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qmake -project</span><br></pre></td></tr></tbody></table></figure></li><li><p>生成 stash 文件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qmake</span><br></pre></td></tr></tbody></table></figure></li><li><p>修改 pro 文件，加入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QT       += widgets \</span><br><span class="line">            network</span><br></pre></td></tr></tbody></table></figure></li><li><p>编译</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></tbody></table></figure></li><li><p>运行</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./test</span><br></pre></td></tr></tbody></table></figure><p>如果没问题就会弹出带有当前系统 openssl 版本号的弹窗。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210720010314.png"></p><p>后续如果想要显示其他内容，修改 <code>test.cpp</code> 内容并 <code>make</code> 就可以。不要执行 <code>qmake</code>，否则 pro 文件里这行就要重新写了。</p></li></ol><h4 id="运行后报错，查看具体信息"><a href="#运行后报错，查看具体信息" class="headerlink" title="运行后报错，查看具体信息"></a>运行后报错，查看具体信息</h4><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export QT_DEBUG_PLUGINS=1</span><br></pre></td></tr></tbody></table></figure><p>此时再运行 qt 程序就会弹出更详细的错误信息。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210720010945.png"></p><h3 id="qv2ray-官方部署参考文章和其他参考文章"><a href="#qv2ray-官方部署参考文章和其他参考文章" class="headerlink" title="qv2ray 官方部署参考文章和其他参考文章"></a>qv2ray 官方部署参考文章和其他参考文章</h3><ul><li>qv2ray 的 github actions 配置 <a href="https://github.com/Qv2ray/Qv2ray/blob/master/.github/workflows/build-qv2ray-cmake.yml">Qv2ray/build-qv2ray-cmake.yml at master · Qv2ray/Qv2ray</a></li><li>官方文档 <a href="https://qv2ray.net/lang/zh/hacking/manuallybuild.html">手动构建 Qv2ray 项目 | Qv2ray</a></li><li>超全的 qt 笔记：<a href="https://github.com/wangwenx190/notes/blob/master/qt.zh.cn.md">notes/qt.zh.cn.md at master · wangwenx190/notes</a></li></ul><hr><h2 id="二号坑"><a href="#二号坑" class="headerlink" title="二号坑"></a>二号坑</h2><p>总算是搞定了。。。可是等一下，新界面呢？</p><p>还有怎么没有中文，按下插件按钮时报错？（似乎只有 qt5 编译的发行版没有发生这种错误）</p><p>另外编译出来的东西怎么打包呢。。。</p><p>没有新界面是编译过程有问题吗？但后来我在 tg 群中发现，其实如果只是 ubuntu 下想要装新版本，qv2ray 官方搞了这个东西：<a href="https://qv2ray.net/debian-dev/">Qv2ray Debian Repository (Nightly) | debian-dev</a>，装这个就好了。。。。但这里面的新版本界面我也没调出来。</p><p>嘛，看来，还得折腾。</p><p><strong>（21.8.9 更新）</strong> 在项目的 <a href="https://github.com/Qv2ray/Qv2ray/actions">github action</a> 里面看到了各种不同版本的 qv2ray（所以是实际上，要下载最新版本的 qv2ray，应该去 action 里面找而不是到 release 里面）。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210811231413.png"></p><p>里面这些中，windows 专用的就 <code> Qv2ray Windows Installer</code>、<code>Qv2ray build matrix - cmake</code>、<code> Qv2ray build matrix - cmake</code>，只有最后一个是用 qt6 编译的新版；点开，果然有 qml 和 qwidget 两种，分布对应着新界面和旧界面；版本间还有 <code>RelWithDebInfo</code> 和 <code>release</code> 两种编译模式上的区别，把前者当做性能更好的 debug 版本就行了。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210811232614.png"></p><p>不过嘛。。。。一个是，这几个包解压后，打开里面的 qv2ray 可执行文件会报错 openssl 不存在，需要先用 chocolatey 装一个；其次就是，qml 版本双击后一点反应也没有。最后翻了一下群记录，发现</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@master/img/20210808153749.png"></p><p>意思是。。。白干了？</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;事情的来源，是两个月前和朋友讨论啥软件界面又好看「学术网站」又快界面又漂亮。clash 虽然漂亮，但支持的协议少了点。&lt;/p&gt;
&lt;p&gt;这时候我就提了一嘴「qv2ray 新界面呀，不是挺漂亮的吗，只是要编译，又不麻烦」&lt;/p&gt;</summary>
    
    
    
    <category term="Complier" scheme="https://zbttl-github-io.vercel.app/categories/Complier/"/>
    
    
    <category term="Linux" scheme="https://zbttl-github-io.vercel.app/tags/Linux/"/>
    
    <category term="Ubuntu" scheme="https://zbttl-github-io.vercel.app/tags/Ubuntu/"/>
    
    <category term="qt5" scheme="https://zbttl-github-io.vercel.app/tags/qt5/"/>
    
    <category term="qt6" scheme="https://zbttl-github-io.vercel.app/tags/qt6/"/>
    
    <category term="grpc" scheme="https://zbttl-github-io.vercel.app/tags/grpc/"/>
    
    <category term="openssl" scheme="https://zbttl-github-io.vercel.app/tags/openssl/"/>
    
    <category term="cmake" scheme="https://zbttl-github-io.vercel.app/tags/cmake/"/>
    
    <category term="Ninja" scheme="https://zbttl-github-io.vercel.app/tags/Ninja/"/>
    
  </entry>
  
  <entry>
    <title>凑合用呗，还能砸了咋滴？————老旧的 ipad AIR2 搭配键鼠使用体验</title>
    <link href="https://zbttl-github-io.vercel.app/cou-he-yong-bai-huan-neng-za-liao-zha-di-lao-jiu-de-ipad-air2-da-pei-jian-shu-shi-yong-ti-yan/"/>
    <id>https://zbttl-github-io.vercel.app/cou-he-yong-bai-huan-neng-za-liao-zha-di-lao-jiu-de-ipad-air2-da-pei-jian-shu-shi-yong-ti-yan/</id>
    <published>2021-07-04T16:00:00.000Z</published>
    <updated>2021-08-15T01:31:10.811Z</updated>
    
    <content type="html"><![CDATA[<p>之前说过，我的笔记本这周送修了。</p><p>于是我这周就没有外出的笔记本用了。。。难不成我摸鱼的时候就只能呆呆的看几本杂志？我拒绝！</p><p>家里还有一台非常非常旧的酷比魔方 windows 平板（本来想说买了小新以后就刷成 linux 继续用，结果发现这玩意是 64 位的 bios 刷 32 位的系统，而 64 位系统又刷不上去，所以就搁置了），以及一台 ipad air2。我的需求很简单，就是能远程回家操作家里的电脑 + 中午休息的时候看看番。看着 windows 平板那寒酸的 720p 屏幕，以及回想起当年果果吹得天花乱坠的口号「你的下一台电脑，何必是电脑」，决定了，就带 ipad 出门吧！</p><p>虽然说。。。那个口号并不是喊给 AIR2 这种老古董用的。。。而且为了努力达成口号里的目标（作作样子），苹果钦（ying）定（dian）了两个左膀右臂——妙控键盘和 apple pencil。嗯。。。我怎么可能有这俩玩意嘛（贫穷的眼神）</p><p>不过我倒是有个蓝牙键盘（5 年前买的 BOW 经典三折叠款，型号我忘了，就是给 windows 平板配的），和刚买不久的罗技 m336（就是给 ipad 买的，我家无线鼠标挺多但都是 2.4g，ipad 又没有 usb 口，只能买个蓝牙的凑合用），凑个乞丐版体验应该不成问题吧。。。</p><p>于是乎上周日晚我下好了 zerotier 和几个远程软件，用 document 通过 ftp 从家里的电脑拖几部番剧进来，第二天我就这样开开心心的出门了。不得不说，这几样东西加在一起无论从体积上还是重量上确实比小新这种笔记本还要轻的多，但。。。这也是这套组合唯一的优点了。</p><h2 id="键鼠使用体验和设置"><a href="#键鼠使用体验和设置" class="headerlink" title="键鼠使用体验和设置"></a>键鼠使用体验和设置</h2><p>一连上鼠标，我就感觉到了果果满满的恶意——且不说这神秘的吸附感，这鼠标加速也太诡异了，根本没有 windows 上那种指哪打哪的感觉。当然，微软那边也有类似的东西，叫做「提升鼠标准确度」</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210705023746.png"></p><p>打游戏的同学应该对这东西有印象，因为无数游戏操作入门教程都会在比较开头的位置告诉你：</p><p>关！掉！他！</p><p>这是让你肌肉记忆丧失的坏东西！</p><p>然而偏偏果果那边就关不掉。。。。</p><p>另一个坑爹的地方是名为自然滚动的东西，在通用-&gt;触控板与鼠标中，这玩意开启后，向上向下滚轮就完全反过来了。关键问题是，即使关掉它，有好多情景下滚动方向还是反的。。。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_1579.jpg">来到通用-&gt;键盘-&gt;实体键盘里面，关掉讨厌的首字母大写，以及使用大写键切换语言。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_1578.jpg"></p><p>然后来到辅助功能，指针控制这里，关掉自动隐藏指针和指针动画，这俩苹果觉得 cool 的东西，普通键盘和鼠标用起来简直就是灾难。。。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_1580.jpg">最后到辅助功能键盘这个位置，这里有个七伤拳——全键盘控制。开启以后可以用键盘上的组合键开启 dock，回到桌面，开启多任务界面等等。但是！开启以后，shift、tab、caplocks、方向键这些按键原来的功能全部失效，如果不用 rdp，我可能还会选择把这个功能打开，但在 rdp 下这个功能会导致体验极其糟糕。。。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_1581.jpg">关闭后，我的 bow 键盘还能支持通过 fn+ 快捷键完成回到桌面调节音量等功能，仅仅是进入多任务界面要在我屏幕上划一下手指而已。另外还要多记一下的就是 ctrl + 空格切换输入法的快捷键，在远程桌面这几个猪队友的衬托下，这个快捷键变得无比的重要。</p><h2 id="菜鸡互啄——ios-上体验糟糕的远程桌面们"><a href="#菜鸡互啄——ios-上体验糟糕的远程桌面们" class="headerlink" title="菜鸡互啄——ios 上体验糟糕的远程桌面们"></a>菜鸡互啄——ios 上体验糟糕的远程桌面们</h2><p>由于我的主机是 windows，加上我后台也只运行多一个 teamviewer，所以第三方的远程应用我就只多测试一个 teamviewer。</p><h3 id="微软官方-rdp"><a href="#微软官方-rdp" class="headerlink" title="微软官方 rdp"></a>微软官方 rdp</h3><p>首先就得吐槽两个大问题：</p><ol><li><p>没法指定分辨率和主机那边一致，虽然保证了画面的解析度，但无论是连过去还是晚上回到家，第一次点亮屏幕后看见那错乱的桌面布局都会让人血压升高——</p></li><li><p>远程回去然后套娃 vmware Ununtu，ubuntu 里的 terminal 对整个键盘的映射都会出问题，只有少数的几个键按下去会在 terminal 出出反应，而且显示出来的字符和在键盘上敲得还不是同一个。。。只能在 Ubuntu 里面通过复制粘贴输入命令，或者开启 openssh 后用 xshell 之类的连上去。谷歌了一下，居然已经是个陈年老 bug 了。。。现在还没修！</p><p><a href="https://remotedesktop.uservoice.com/forums/265183-remote-desktop-client-for-ios/suggestions/8780344-fix-keyboard-issue-when-using-virtualbox-pidgin">Fix keyboard issue when using VirtualBox, Pidgin, and other VM software – Feedback for Microsoft Remote Desktop Clients</a></p></li></ol><p>其他一些小问题，包括只能用平板自己的输入法，主机自己的输入法不能用。</p><p>官方 rdp，唯一的优点就是快和便于连接，不过这个优点就够了，因为另外两个工具因为这点，根本就没法好好用。。。</p><h3 id="teamviewer"><a href="#teamviewer" class="headerlink" title="teamviewer"></a>teamviewer</h3><p>首先，在 windows 那边就有的问题：如果之前在主机这边锁屏了（自己锁了，或者用过 rdp 连接），那么连接过去后还要用 win+L 快捷键锁一次屏幕输入一次密码才能进去，然而。。。ios 下 win 键是废的，所以，没用。另外，本地的 ip 也没法保存到连接历史里面，每次都要输一遍 ip；掉线重连也基本连不上。远程体验。。。好歹有自定义分辨率，vmware 也正常；和 rdp 相反，用平板自己的输入法时主机自己的输入法也会工作，所以最好的办法是将平板输入法切换到英文。teamviewer 的远程光标很碍事，也要关掉；鼠标滚轮在 teamviewer 中不生效。</p><p>其实能用是能用，但锁屏后连不上这点直接就 pass 了。</p><h3 id="remote-desktop-manager"><a href="#remote-desktop-manager" class="headerlink" title="remote desktop manager"></a>remote desktop manager</h3><p>支持多种协议，包括 ssh，rdp 等等。其实协议清单里面也有 teamviewer，但。。。也就能记个账号密码，没法连接。</p><p>跟官方的 rdp 应用比，这玩意能自定义分辨率；但实际用起来，最主要的问题就是：慢！画面好久才能刷新出来，按一下反应半天。同样是 rdp 协议，怎么你就这么拉跨呢？</p><hr><p>而其他的工具，我能想到的包括 moonlight、steam 等等，但都需要后台另外装/开东西，我就没试，以后有机会再说吧。</p><p>总结两个字：垃圾！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前说过，我的笔记本这周送修了。&lt;/p&gt;
&lt;p&gt;于是我这周就没有外出的笔记本用了。。。难不成我摸鱼的时候就只能呆呆的看几本杂志？我拒绝！&lt;/p&gt;</summary>
    
    
    
    <category term="IOS" scheme="https://zbttl-github-io.vercel.app/categories/IOS/"/>
    
    
    <category term="rdp" scheme="https://zbttl-github-io.vercel.app/tags/rdp/"/>
    
    <category term="teamviewer" scheme="https://zbttl-github-io.vercel.app/tags/teamviewer/"/>
    
    <category term="键鼠" scheme="https://zbttl-github-io.vercel.app/tags/%E9%94%AE%E9%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>笔记本送修记</title>
    <link href="https://zbttl-github-io.vercel.app/bi-ji-ben-song-xiu-ji/"/>
    <id>https://zbttl-github-io.vercel.app/bi-ji-ben-song-xiu-ji/</id>
    <published>2021-07-03T16:00:00.000Z</published>
    <updated>2021-07-05T17:26:50.663Z</updated>
    
    <content type="html"><![CDATA[<p>故事要从四个月前说起。</p><p>睡前惯例玩一下笔记本。二三月份的南宁阴气还很重，所以我蒙着被子趴着敲键盘，然后不知不觉就睡着了。</p><p>睡梦中迷迷糊糊听见「啪」一声，我一下就爬了起来，发现自己压在笔记本上面，这时候笔记本还开着盖，估计是自己翻了个身导致这玩意开合过度发生异响，感觉没啥大问题我就没在意。</p><p>彻底睡醒以后发现笔记本合不稳了，转轴那里缝隙变大了，盲猜可能是转轴裂了。这种人为的事故估计联想不保吧。。。那就先凑合着用。</p><p>结果随着时间推移，转轴的裂缝越来越大，到了上周屏幕右下角因为外壳开裂受到挤压都变黄了一块，再这么下去整块屏幕都要赔进去，没办法，想办法修一下吧。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210625_093019119.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210625_093012086-tuya2.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210625_064558539-tuya2.jpg"></p><p>先确认了一下，小新 pro13 是整机两年保修，不确定的话在联想微信小程序「联想会员中心」里面注册一下机器就能看到了。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Screenshot_20210706-001110.png"></p><p>虽说是半人为的损坏（还是要狡辩一下 2333，小新 pro13 的转轴强度确实不高而且开合角度小，要是换成我同学那个 16 年的联想 air，我在床上这一通操作估计没啥问题，那台开合角度比我这个大多了），我还是祈望在保修期内减免一定的维修费用，如果不是整机保修而是类似我 hp 暗影精灵那种主要部件保修两年，那我不如直接交给电科。虽然那台暗影精灵不是因为外壳而是因为烧了主板和硬盘，离保修期 2 年结束还有两个月享受到了免费售后，我的电子设备们真是命运多舛啊2333</p><p>另外我还搜到了这篇文章：<a href="https://post.smzdm.com/p/754042/">如何修复摔坏的笔记本，换壳、换屏、升内存、加固态——联想小新潮5000_笔记本内存_什么值得买</a></p><blockquote><p>检测完毕后，可以<strong>咨询</strong>下JD的小姐姐，京东买的笔记本有个特点，保修是<strong>按部件</strong>保的，打个比方即使我的屏幕是因为自己摔坏的，<strong>其他部件</strong>日后出现非人为故障，<strong>仍然可以进行保修</strong>。大致了解了一下，屏幕这么明显的人为损坏肯定是保不了，但是外壳的损伤，对方可以为我做个免费更换。某宝查了下价格，同类型的外壳大概<strong>50</strong>一个面，JD自己保修估计成本更低，看来京东方面应该是在计算成本后做了顺水人情，同时争取给客户留个好印象<img src="https://res.smzdm.com/images/emotions/189.gif" alt="如何修复摔坏的笔记本，换壳、换屏、升内存、加固态——联想小新潮5000"> 。</p><p><strong>PS.**外壳保修要注意千万</strong>不能脱落<strong>，只要外壳部分还是</strong>完整<strong>的一个整体，就可以按</strong>变形<strong>走</strong>免费保修<strong>，如果一不小心</strong>分离<strong>了，那么就只能走</strong>付费维修**，一个面大概150，有一定动手能力的建议某宝买自己来换，这个东西没什么技术含量。</p></blockquote><p>我这个从外观看也只是变形的说。</p><p>接着，先在京东 app 上填售后单。2 小时后就收到了东哥的客服电话，比较值得在意的地方就是客服小姐姐让我选是送回京东还是在当地的联想授权维修点维修。上一次 hp 的售后我就直接交给了南湖的 hp 授权维修部，但这次。。。我判断这种半人为的损伤现场送修的话联想可能就直接开价了，如果我拒绝了估计就让我直接扛回家；而走京东的话，毕竟我已经送过去了，来来回回的，可能他就懒得开价或者不会开价那么高？总之是我的臆测，正好第二天我有东哥的快递，客服答应让快递员顺手免费送这一程，等于我去的半程运费也免了，那就这样吧。</p><p>送过去是上周六，虽然只是机子有问题，但客服叫我把电源也送回去，正好我手里箱说全，干脆一起塞进去。送修前先拍张照，录个视频，说明这台电脑屏幕大概是好的，万一送过去屏幕炸了，那可不是我的锅（</p><p>然后开始了漫长的等待，到了前天（周五），终于给我来了电话，开口就说已经修好了，绝口没有提钱的事，nice！然后到了今天，这台电脑就送回来了。</p><p>检查了一下，确实修好了，不过只修了 a 面加转轴，我之前以为 c、d 面也会换的（有点点变形）。转轴那里的胶都没撕，屏幕部分变黄的那一块也恢复了，万幸并没有被压到漏液。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210705_170755605-tuya2.jpg"></p><p>来来回回，送过去 5 天，送回来 2 天，加起来七天。值得一提的是，我爸之前的某米老人机屏幕坏了送回京东修，也是七天送回来。所以，七天这个时间跨度，是不是可以命名为「京东速度」（</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;故事要从四个月前说起。&lt;/p&gt;
&lt;p&gt;睡前惯例玩一下笔记本。二三月份的南宁阴气还很重，所以我蒙着被子趴着敲键盘，然后不知不觉就睡着了。&lt;/p&gt;</summary>
    
    
    
    <category term="流水账" scheme="https://zbttl-github-io.vercel.app/categories/%E6%B5%81%E6%B0%B4%E8%B4%A6/"/>
    
    
    <category term="流水账" scheme="https://zbttl-github-io.vercel.app/tags/%E6%B5%81%E6%B0%B4%E8%B4%A6/"/>
    
    <category term="lenovo" scheme="https://zbttl-github-io.vercel.app/tags/lenovo/"/>
    
  </entry>
  
  <entry>
    <title>xbox series S 使用体验 </title>
    <link href="https://zbttl-github-io.vercel.app/xbox-series-s-shi-yong-ti-yan/"/>
    <id>https://zbttl-github-io.vercel.app/xbox-series-s-shi-yong-ti-yan/</id>
    <published>2021-06-17T16:00:00.000Z</published>
    <updated>2021-07-05T11:28:17.963Z</updated>
    
    <content type="html"><![CDATA[<p>半个月前买的小钢炮，新特性也摸得得差不多了，就写一下使用体验呗。</p><p>在本地的店铺以 2750 入手的，加上花呗的一个点提现费，差不多花了 2777（分期给马老板的钱就不算进去了）。虽然说差不多这个时候买的话国行也应该到手了，2300 还免息便宜不少呢，而且还提前把后门放回来了，但上次 xbox one s 当国行勇士的体验实在是太提心吊胆了，所以这次就算贵一点也认了（总不能还能当外服勇士吧）。</p><h2 id="初体验"><a href="#初体验" class="headerlink" title="初体验"></a>初体验</h2><p>拿到手。。。感觉盒子还是挺大的，比 xbox one S 的盒子小一点点而已。体积是小挺多，但也没有我想象中可以随便带出去这种程度，比我的联想小新 pro13 还略重一点。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210628_144035928-tuya2.jpg"></p><p>刚开机就感觉加载速度起飞，特别是开 apex，那个动画速度，一瞬就过去了。。。。apex 还是装在外置硬盘里的。</p><h2 id="游戏表现"><a href="#游戏表现" class="headerlink" title="游戏表现"></a>游戏表现</h2><p>到目前为止我的游戏体验：</p><ol><li><p>有飞跃性提升的：cod15（xo 版）、<del>cod17（xs 版）</del>极限竞速地平线 4</p><p>cod17 本世代的分屏是个灾难（武器贴图消失，甚至瞄准的时候枪模都没了；画面模糊简直重返上上世代），而购买了次时代版本以后，分屏变为可玩，且有了光追后画面体验感大幅上升；cod15 我曾经吐槽过三人无法分屏，但放到次时代主机上就可以了。但注意，cod17 只有 xs 强化版有这种飞跃，普通版表现和在 xbs 上半斤八两。另外似乎从普通版升级到次时代版要比直接买次时代版便宜（欧元区买升级包只需花费 40 元左右，而 10 美元的差价约合人民币 60 元）。**(7.4 更新）**将 fh4 得分上调！因为 fh4 加载上时间的缩短感知太明显了，xos 上冷加载差不多要五分钟，而 xbs 上差不多一分钟就好了，更别提还有快速恢复功能的加持，fh4 这种开放性赛车游戏我就喜欢趁思考的碎片时间玩一下，这种情况下加载时间缩短给体验上的提升是飞跃性的。</p></li><li><p>大幅提升，但有遗憾：apex（xo 版）、cod17</p><p>apex 到现在都没有出 xs 专版，但可以明显感受到加载速度的提升，贴图质量也有大幅改善，但是。。。apex 第九赛季开始的时候，曾经有帧数和延迟面板显示字体错位的问题，在我 xbox series S 到手之前，本世代那边就已经修复了；但我把硬盘插上次时代主机这边，这个 bug 就又出现了，直到现在都还没修。**(7.4 更新）** 我把 cod17 的 xs 评级下调了，因为分屏下天空闪屏和准心消失的问题还是时长发生，比 xbox one 版好得多，但相比前几个版本的 cod，毋庸置疑的有退步。另外 cod17 也是少见的几个不支持 xbox 快速恢复的游戏。 </p></li><li><p>有 xs 版，但感知没那么强：<del>极限竞速地平线 4、</del>命运 2</p><p>命运 2 我感受不到啥提升（可能帧数有提升，但非竞技类 fps，我感受不到）；地平线 4 的贴图感受其实是有大幅进步的（毕竟 xos 显存很少），但其实草地的模糊感还是可以感受得出来；另一点就是光追，实际上，上一代主机上 fh4 就实现了效果不错的软光追，因此本身感知很强的光追到 fh4 这里感受就没那么强了。</p></li><li><p>没有 xs 版，依靠机能和技术有提升，但感知没那么强：tf2</p><p>tf2 吃到了 fps boost 的红利。但重生对游戏的优化很到位，导致我并不太感受得出差距。</p></li><li><p>完全没有改善：cod16</p><p>现在的 cod16 bug 成堆，大战场要删一堆数据包才能玩；分屏武器枪模消失，换到 xss 上没有任何改观。</p></li></ol><h2 id="外置硬盘、智能分发"><a href="#外置硬盘、智能分发" class="headerlink" title="外置硬盘、智能分发"></a>外置硬盘、智能分发</h2><p>接下来是「一捧一踩」：</p><p>好的是，经过上时代 xbox 分区处理后的固态硬盘，可以直接插到新的次时代主机上使用，兼容性良好，里面原来有的游戏「一些」也可以直接打开玩。fps boost 和自动 hdr 功能也可以照常开启。</p><p>为啥说是「一些」呢？</p><p>这就要大批特批软软的「智能分发」了：</p><p>如果这个游戏你有买 xs 版，或者你是 xgp 会员且这个游戏有次时代版的话，就会提示你更新，不更新就进不去游戏。</p><p>但 xs 版只能在内置空间内装啊！或者买微软的死贵储存卡。300 多 g 的空间，已经很拮据了，就想着把一些 xs 版感知不强的游戏用本世代版替换，放在外接 ssd 里面，还可以 xos 和 xss 一起用，结果这下一搞，没辙了。</p><h2 id="快速恢复"><a href="#快速恢复" class="headerlink" title="快速恢复"></a>快速恢复</h2><p>又是一个值得表扬的功能。</p><p>令人惊叹的并不只是快速恢复带来的加载时间上的缩短，更重要的是快速恢复适用性极广，无论是放在内置硬盘还是外置普通 ssd，是 xo 版游戏还是 xs 版游戏，都可以吃到快速恢复带来的红利；甚至之前预测到「快速恢复可能是利用内存，所以彻底关机后快速恢复功能就会失效」，最后实验出来结果并不是这样，除非是加载出错，否则关不关机都不影响快速恢复功能的启动。</p><p>但，我这个月还是遇到过几次，快速恢复出来的游戏，几个按键失灵（比如快速恢复出来的 fh4，打不开地图）。但出现概率并不高，这得微软还得继续做适配。</p><p>而且在如此广泛的支持下，还是有几个游戏不支持快速恢复，比如说 cod，这就完全是厂商的锅了，动视出来挨打！</p><h2 id="配套设备"><a href="#配套设备" class="headerlink" title="配套设备"></a>配套设备</h2><p>我同学家的 x9100h 就基本能完美支持 xss 120fps、hdr 这些特性了。但要注意几点：</p><ol><li>要插到 hdmi 3 口上才能支持完整特性；</li><li>要开启一些选项才能选到 120fps；</li><li>xss 无法把 120fps 和 4k 选项一起开启，只能二选一；因此，其实一根 hdmi 2.0 线足矣，不需要最新标准 hdmi 2.1 的线。</li></ol><p>具体操作，可以参考<a href="https://www.bilibili.com/video/BV1qV41127QY">索尼X9000H更新HDMI2.1固件，4K120Hz/eARC等功能一览，含X9088H/X9100H_哔哩哔哩_bilibili</a>。</p><h2 id="其他优缺点"><a href="#其他优缺点" class="headerlink" title="其他优缺点"></a>其他优缺点</h2><ol><li>因为内存大了，某些游戏打不动字（打字很卡）的问题也解决了。</li><li>我购买的是日版，听说有手柄信号和 5g wifi 冲突的问题，但我并没有遇到（我家路由器是 ac86u）。不过有一次手柄确实无法响应主机，接着我把旧的 xos 手柄连接新主机，这个旧手柄倒是能正常操作；然后我重启了一下机子，用 type-c 线把新手柄接到 xss 上，过了一会，好了，很玄学。</li><li>但无线网卡相比 xos 那个弱鸡网卡好了不少，起码无线状态下开加速器我打 cod16 战区没遇到其妙的丢包问题了。</li></ol><hr><p>总体来说，大体满意，我的几个需求 xss 大体都能满足，就是体积再小一点就更好了。</p><p>另一个我好奇的地方是，xs 版和 xbox one X 强化是两个不同的概念，之前有几个游戏 bug 在 xss 这边测试出来就应该是 xos 配置不足的锅，换成 xox 应该也能解决，何况 xox 更便宜，自带的硬盘也更大。去掉光追这一点，如果不是追求便携性，以及这两年少的可怜的独占，xox 和 xss 谁会是更好的选择呢？</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;半个月前买的小钢炮，新特性也摸得得差不多了，就写一下使用体验呗。&lt;/p&gt;
&lt;p&gt;在本地的店铺以 2750 入手的，加上花呗的一个点提现费，差不多花了 2777（分期给马老板的钱就不算进去了）。虽然说差不多这个时候买的话国行也应该到手了，2300 还免息便宜不少呢，而且还提前把后门放回来了，但上次 xbox one s 当国行勇士的体验实在是太提心吊胆了，所以这次就算贵一点也认了（总不能还能当外服勇士吧）。&lt;/p&gt;</summary>
    
    
    
    <category term="Game" scheme="https://zbttl-github-io.vercel.app/categories/Game/"/>
    
    
    <category term="xbox" scheme="https://zbttl-github-io.vercel.app/tags/xbox/"/>
    
    <category term="xbox Series S" scheme="https://zbttl-github-io.vercel.app/tags/xbox-Series-S/"/>
    
    <category term="评测" scheme="https://zbttl-github-io.vercel.app/tags/%E8%AF%84%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>斐讯 n1 折腾记录</title>
    <link href="https://zbttl-github-io.vercel.app/fei-xun-n1-zhe-teng-ji-lu/"/>
    <id>https://zbttl-github-io.vercel.app/fei-xun-n1-zhe-teng-ji-lu/</id>
    <published>2021-04-01T16:00:00.000Z</published>
    <updated>2021-04-05T19:51:35.747Z</updated>
    
    <content type="html"><![CDATA[<p>本来想等自己有钱的时候再买一个性能强悍啥都能干的 x86 软路由的。。。</p><p>然而最近折腾加速器，实在受不了这帮硬路由的憨憨性能了：明明 ac86u 性能还凑合但内存只有 512m 结果刷了梅林各种问题各种崩，其他 mt7621 就更不用说了。我也考虑其他设备，比如 r2s，s905x 盒子之类的，但</p><ul><li>r2s 体积小但性能比 n1 还要差；</li><li>s905x 盒子就只能做软路由，做电视盒子差点。</li></ul><p>所以最后决定还是先买个 n1 顶着。以后换成高端一线的虚拟机软路由，再拿来当电视盒子。</p><h2 id="开箱"><a href="#开箱" class="headerlink" title="开箱"></a>开箱</h2><p>购入渠道有两个，拼夕夕和转转（淘宝系禁 fx），我同学 1 月初在转转买了个仅拆箱的 k2p a1 才用了 180 搞得我有点心动（现在这玩意最少要 220 起步，也是个理财产品），但我看了一眼转转的 n1 ，当时没有同城同省，而且成色不知道，带不带码可能也不知道，算了，省省直接拼夕夕了，带盒子不带遥控器准新机 155 到手。</p><p>买到手的时候才二月份，但那时一直没得空研究，所以一直拖到现在。现在到同一家店看，涨到 165 了。。。真-理财产品。</p><p>到手的 n1 成色尚可</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210402_143256218.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210402_143305864.jpg"></p><p>不过还是有两个令人遗憾的地方：</p><ol><li><p>盒子上没有 s/n 码，也就无法验证是否三码合一了：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210402_143321918.jpg"></p></li><li><p>带的电源是 12v 1.5a 的，肯定不是 n1 原装，多半是 k2p a2 原装。</p></li></ol><p>当时这俩不大不小的问题搞得我想退了。。。算了，先试试，跑个分备个份，就算后续要退也有办法还原。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>相比于刷路由器，刷 n1 要准备的东西多多了~</p><ol><li>hdmi 线</li><li>显示器</li><li>笔记本 / 台式机 / 平板</li><li>一个口为 USB-A 的线</li><li>网线一根</li><li>（可选）一个中继路由</li><li> 一到两个 U 盘 / tf + 读卡器，一个容量最好是 8g（可选），另一个要 16g 以上</li><li>（可选，要备份系统的话必选）usb hub</li><li>鼠标和键盘</li></ol><p>「一个口为 USB-A 的线」是因为 n1 上的 usb 接口是两个 USB-A 口。而这根线的另一头是啥就取决于你的笔记本 / 台式机 / 平板有什么口。大多数笔记本 / 台式机都只有 USB-A 口，这就是许多卖家捆绑销售双头 USB-A 的原因；但新一代的笔记本，特别是轻薄本都标配了两个 usb type-c 口；而旧一点的平板用的是 micro-usb 口，这两种线大家手上都不少，这种情况下就不用买卖家的双公口 USB 线了。不过平板有可能遭遇供电不足的情况，不太建议使用；有种说法是最好用 usb 2.0 线刷，但我用 type-c 3.1 口刷也没问题。</p><p>用中继路由的原因是我的笔记本都是靠无线连接路由器的，路由器本身离设备比较远无法通过有线连接；而进入 fastboot 的时候又需要 n1 和笔记本在同一个子网，所以就需要一个中继路由才能实现。</p><p>还有这个 hub，在一种情况下是必选的，待会我会提到。</p><h2 id="刷点啥呢"><a href="#刷点啥呢" class="headerlink" title="刷点啥呢"></a>刷点啥呢</h2><p>n1 可以刷那么几个 rom：</p><ul><li>openwrt</li><li>armbian</li><li>yyf</li><li>等等等</li></ul><p>主要是我只用得着我提到的这三个。</p><p>前两个可以通过 u 盘直接引导。yyf 只能直接刷入。</p><p>yyf 主要用来看电视，openwrt 是做软路由，armbian 则是做纯粹的 linux 开发系统。</p><p>openwrt 能拿来跑个分，armbian 能拿来备份 rom。</p><p>所以我们大致的刷机路线就是先刷 openwrt 做测试，如果盒子发热不严重并且跑分正常，那就暂时不退了，直接用 armbian 做个备份，之后刷入 yyf 玩一会电视功能，最后刷入 openwrt 做软路由。</p><h2 id="测试-备份"><a href="#测试-备份" class="headerlink" title="测试 + 备份"></a>测试 + 备份</h2><h3 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h3><p>要想从 u 盘启动，必须先把机器降级到 2.19 版本。我的 n1 拿到手就是 2.22 版本，铁定得降级。</p><p>推荐使用<a href="https://www.right.com.cn/forum/thread-340279-1-1.html">[2018-9-28]斐讯T1和N1降级恢复线刷功能 , adb脚本工具 - 斐讯无线路由器以及其它斐迅网络设备 - 恩山无线论坛 - Powered by Discuz!</a>，这玩意可以通过网络进行降级，不需要因为驱动问题大费周章。不过得安装 adb，请出老伙计 chocolatey：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install adb -y</span><br></pre></td></tr></tbody></table></figure><p>给 n1 插上鼠标，通过中继路由或者在 n1 界面中登录无线网络，点击四次版本号开启开发者模式，因为此时在官方系统中可以直接通过 wifi 连接自己的路由器，所以还暂时用不到中继路由。</p><p>n1 和电脑同时连上路由后，按提示降级即可。降级完毕后，官方系统中显示的估计版本还是 2.22，但实际上内部固件版本已降级。</p><p>之后，去 <a href="https://t.me/tony_cn">Tony 的交流群</a>中，找一个叫做「N1盒子激活U盘启动」的软件，解压密码就是 Tony。按照提示开启 u 盘启动即可。</p><h3 id="给-u-盘刷入-openwrt"><a href="#给-u-盘刷入-openwrt" class="headerlink" title="给 u 盘刷入 openwrt"></a>给 u 盘刷入 openwrt</h3><p>有三个工具可以用</p><ul><li>etcher</li><li>USB Image Tool（usbit）</li><li>Win32DiskImager</li></ul><p>这几个都能通过 chocolatey 安装。etcher 的界面不错，另外就算 img 打包在压缩文件中，它也能准确识别并刷入。但这玩意有个 bug，挺多时候进度条跑完会报错，但其实已经刷进去了。</p><p>usbit 需要手动用解压 img.xz 压缩包的内容（内容是一个 img 文件），而且需要先 reset 再刷入。但好处是不会报错，而且刷写速度还比 etcher 快。</p><p>Win32DiskImager 有中文。</p><p>自己选择吧。</p><p>openwrt 的镜像可以从这些地方获取：</p><ul><li><a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=981406&amp;extra=page=1&amp;filter=typeid&amp;typeid=21">[2020-10-18]★46+o版， S905x3、N1、贝壳云、我家云等op固件 - 斐讯无线路由器以及其它斐迅网络设备 - 恩山无线论坛 - Powered by Discuz!</a></li><li><a href="https://www.right.com.cn/forum/thread-4055451-1-1.html">[2021-01-31] 52+、52+O S905x3(含x2)、S922x、贝壳云、我家云、微加云等OP固件 - OPENWRT专版 - 恩山无线论坛 - Powered by Discuz!</a></li><li><a href="https://www.right.com.cn/forum/thread-4076037-1-1.html">[2021-03-28] 56+、56+O S905x3、S922x、贝壳云、我家云、微加云等OP固件 - OPENWRT专版 - 恩山无线论坛 - Powered by Discuz!</a></li></ul><p>固件有 +o 和 + 两种版本，不同地方在 +o 用的是旧版本 5.4.93 内核，新版本用的是 5.10 新版本内核（以前还有个区别，那就是 +o 用的 flow offloading 加速而 + 版本用 sfe 加速，但现在统一都用 flow offloading 加速了）。新版本内核有个弊端：</p><blockquote><ol><li>amlogic已支持 5.10内核，但是需要从 u盘或 tf卡启动，可以刷入emmc(仅数据分区），boot分区还是只能在 u盘或tf卡上面。</li><li>  5.10内核的副作用是 905x3、922x等机型 hdmi 绿屏、启动时间较长、mac地址会发生变化等</li></ol></blockquote><p>还有 + 版本似乎界面炫酷一点。。。不在意界面的话用 +o 版本就好了（虽然下面测试的截图我用的是 + 版本）。</p><h3 id="进入-openwrt-web-并跑分"><a href="#进入-openwrt-web-并跑分" class="headerlink" title="进入 openwrt web 并跑分"></a>进入 openwrt web 并跑分</h3><p>刷入后，开 n1 前插入 u 盘启动，顺利的话屏幕显示是这样子的</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210212_203219240.jpg"></p><p>此时敲一下回车就会进入熟悉 linux 命令提示界面。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210403_193142103.jpg"></p><p>同时能看到一个叫 openwrt 的 wifi 信号被发射出来，连接上去，并进入 192.168.1.1，就能看到 openwrt 的 web 界面。</p><p>but。。。这里有一个非常神秘的现象会出现：</p><p><strong>如果你刷入 openwrt 的 u 盘大小不是 8g 的话，就没法正常的启动</strong>，具体表现在：</p><ul><li>不断弹出 <code>reset high-speed xxx</code> 的错误提示；</li><li>linux 命令提示界面的提示符后面带一个 none 的标记</li><li>没有 wifi 信号被发射出来</li></ul><p>具体界面类似于这样：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210213_091609125.jpg"></p><p>我估计是因为 n1 的 rom 是 8g 的所以也要求启动 u 盘的容量也是 8g。。。</p><p>但，其实还有一个解决方案，那就是搭配 usb-hub 使用。hub 接上 n1，u 盘再接上 hub 就能正常识别了。话说回来，我想到 hub 的原因，源自于我一开始以为是供电问题，于是拿了一个带供电口的 hub 接上。果然 16g 和  32g 的 u 盘就都能正常启动 openwrt，后续拔掉供电后反复启动都能够正常工作，拔掉 hub 就立即歇菜。甚至就算是 8g 卡，第一次进入可能也要和 usb-hub 配合连接才能成功进入。具体原因我到现在都还没想清楚。。。</p><p>在 web 来到系统 -&gt; ttyd 终端，或者直接在 n1 的 linux cli 中输入测试指令都可以。</p><p>测试命令参照 <a href="https://www.youtube.com/watch?v=utWlY8_rpLg&amp;t=223s">(50) 2021今年买啥软路由？新年度软路由测试总结与推荐！！！ - YouTube</a>，一共有两个：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">coremark</span><br><span class="line">openssl speed -evp aes-256-gcm</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/chrome_j3W1VqCOim.png"></p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/chrome_QH3Ptg9jk9.png"></p><p>对下效果：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210404021521.png"></p><p>差不多哦。。。</p><p>而且持续运行时机子并没有严重发热。看起来没啥问题。</p><p>最后最好使用 <code>poweroff</code> 命令关机，再进行下一步。</p><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>备份就需要刷 armbian 了，因为 openwrt 里面没带有全盘备份工具。</p><p>因为是做全盘备份，所以 8g 的 u 盘那肯定是木大了，就必须得 16g u 盘 + usb-hub 一起上。</p><p>armbian 参考文章：</p><ul><li><a href="https://yuerblog.cc/2019/10/23/%E6%96%90%E8%AE%AFn1-%E5%AE%8C%E7%BE%8E%E5%88%B7%E6%9C%BAarmbian%E6%95%99%E7%A8%8B/">斐讯 N1 - 完美刷机 Armbian 教程 | 鱼儿的博客</a></li><li><a href="https://www.right.com.cn/forum/thread-510423-1-1.html">Armbian-5.77 on N1 , so far so good - 斐讯无线路由器以及其它斐迅网络设备 - 恩山无线论坛 - Powered by Discuz!</a></li></ul><p>备份 - ddbr 参考文章：</p><ul><li><a href="https://luotianyi.vc/1346.html">斐讯 N1 探索手记 #2 – 使用 ddbr 恢复官改系统 – Luminous’ Home</a></li></ul><p>同样，armbian 有这么几个版本可选：</p><ul><li>参考文章的 5.77 版</li><li>上面提到的 openwrt 网盘中的 5.4 和 5.10 内核两种（两种内核的区别我在 openwrt 那里提过了）</li></ul><p>另外还有 dtb 上的讲究。dtb 可以视为 armbian 驱动一类的东西，使用正确的 dtb 能让 armbian 系统获得更好的性能。不过既然我们只是用来备份系统的，其实没啥讲究，可以略过。dtb 有两种选择：参考文章 2 的 <code>meson-gxl-s905d-phicomm-n1-xiangsm.dtb</code> 和 openwrt 那边的 <code>N1_35+o_dtb_fixspeed</code>。使用方法参见参考文章 2，放入改名指向，一气呵成：</p><blockquote><ol start="4"><li>此时，armbian 用的是 kdahas-vim 开发板的 dtb，所以不完全适配 n1，一些设备不工作，这是正常的，我们只需修改 /boot/uEnv.ini 指向 n1 的 dtb 即可。<pre><code>\- 修改前的 uEnv.ini：    dtb_name=/dtb/meson-gxl-s905x-khadas-vim.dtb\- 修改后的 uEnv.ini：    dtb_name=/dtb/meson-gxl-s905d-phicomm-n1.dtb</code></pre></li></ol></blockquote><p>刷写好接上 hub 和 u 盘开机。如果一切顺利的话，需要先新建一个密码和用户名才能成功进入系统。然后输入 ddbr，按照提示备份：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/IMG_20210404_194952826.jpg"></p><p>备份完输入 <code>poweroff</code> 关机。把 u 盘插回电脑，下载并打开 diskgenius，在 rootfs 分区的 ddbr 文件夹里找到备份拖出，保存即可。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210405020131.png"></p><p>话说回来，如果第一次进入系统因为各种原因报错，可能需要重新制作 armbian u 盘，因为刚开始制作完后 rootfs 其实只分到 1g 多一点大小，只有成功第一次启动成功才会把分区扩大到整个 u 盘，没有成功执行这一步的话，后面再怎么启动可能都无法成功执行了（</p><h2 id="刷入-yyf-系统"><a href="#刷入-yyf-系统" class="headerlink" title="刷入 yyf 系统"></a>刷入 yyf 系统</h2><p>用 win7 成功几率会高的多，而且 vmware 可以指定使用 usb2.0 的驱动，usb2.0 口刷机成功概率更高。不过我最后还是在 win10 实机下用 usb3.0 的线刷成功了（</p><p>参考文章：</p><ul><li><a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=318044&amp;extra=page=1&amp;filter=typeid&amp;typeid=21">斐讯天天链 N1 刷机小白教程，大神请无视….. - 斐讯无线路由器以及其它斐迅网络设备 - 恩山无线论坛 - Powered by Discuz!</a></li><li><a href="https://www.jianshu.com/p/105f12a6cecb">斐讯N1盒子开箱、降级、刷YYF固件全记录 - 简书</a></li><li><a href="https://www.jianshu.com/p/87e9813f923f">N1盒子无法进入刷机模式解决办法 - 简书</a></li></ul><ol><li><p>下载 YYFROM-N1-无语音实用版 190420 刷机包。这东西在官网网盘已经失效了，所以我备份了一份到网盘，放到文末；</p></li><li><p>安装 Amlogic_USB_Burning_Tool，建议不要装太新的版本，装 2.16 就好了：<a href="https://androiddatahost.com/mte3d">Amlogic_USB_Burning_Tool_v2.1.6.zip - Android Data Host</a>。2.16 中的一个  libsub-win32 在安装时会附带安装，但需要手动添加到设备管理器：</p><blockquote><p>打开设备管理器，随便选择一个设备。</p><p>操作 - 添加过时硬件</p><p>安装我手动从列表选择的硬件</p><p>选择 libsub-win32 Usb Devices，一路下一步即可</p></blockquote></li><li><p>通过前面提到的降级软件，按照提示进入 bootloader （线刷）模式。在进入 fastboot 前如果接上屏幕的话，会看到画面定格在 n1 的开始画面中。将 usb 线接入靠近 hdmi 一端的 usb 口，连接电脑会发现一个新硬件名为 usb download gadget，但这东西驱动没法自己安装。下一个驱动精灵之类的软件，检查后根据提示安装相应的 Android adb Interface，安装完再接上 n1 的话，会发现在设备管理器中 n1 被命名为 Lemobile Android Device。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-04-06%20032913.png"></p></li><li><p>接下来严格按照步骤走！</p><ol><li>打开 Amlogic_USB_Burning_Tool，加载刷机包，擦除 FLASH 和擦除 Bootloader 前面的 √ 去掉，加载完成点击开始；</li><li>确保 n1 和电脑已通过 usb 线连接</li><li>通过降级软件，进入线刷模式。如果顺利的话，设备已经开始刷写了。稍微晚一点，或者线没接好，Amlogic_USB_Burning_Tool 都可能识别不到设备。</li></ol></li><li><p>刷写成功就可以直接关闭关键拔线重启了。后续可以通过鼠标跳过初始流程，登录家中 wifi 后用刷机包里带的斐讯 app 控制盒子。</p></li></ol><h2 id="盒子资源体验"><a href="#盒子资源体验" class="headerlink" title="盒子资源体验"></a>盒子资源体验</h2><p>再说</p><h2 id="openwrt-刷入-emmc-和体验"><a href="#openwrt-刷入-emmc-和体验" class="headerlink" title="openwrt  刷入 emmc 和体验"></a>openwrt  刷入 emmc 和体验</h2><p>再说</p><h2 id="其他参考文章"><a href="#其他参考文章" class="headerlink" title="其他参考文章"></a>其他参考文章</h2><ul><li><a href="https://pockies.github.io/2019/03/07/phicomm-n1/">我购买了斐讯 N1 做电视盒子，发现它远比想象的… - Pockies | 博客</a></li><li><a href="https://github.com/zisen123/N1-box-bypass-router-tutorial/blob/master/N1-box-bypass-router-tutorial.md">N1-box-bypass-router-tutorial/N1-box-bypass-router-tutorial.md at master · zisen123/N1-box-bypass-router-tutorial</a></li><li><a href="https://post.smzdm.com/p/akm7vk38/">贫民种草指北 篇二：N1 盒子：不谈刷机，只谈使用！_电视盒子_什么值得买</a></li><li><a href="https://www.leeyiding.com/archives/48/">斐讯 N1 烧录 yyf 和 OpenWrt 固件 - LeeYD・Blog</a></li><li><a href="https://ethanblog.com/tips/tv-box-firmware-for-n1.html">N1 刷电视盒子的固件选择 | Ethan’s Blog - 记录和思考</a></li><li><a href="https://www.321002.com/117.html">斐讯 N1 折腾记：降级及刷入官改</a></li><li><a href="https://www.kuqutan.com/1132.html">斐讯 N1 折腾记：运行 Linux 及优化 - 酷趣谈</a></li><li><a href="https://1drv.ms/u/s!AoMoC9XTgpEslq9HsaFw8qlnT0QQ9Q?e=Kg3a9Z">本文资源</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;本来想等自己有钱的时候再买一个性能强悍啥都能干的 x86 软路由的。。。&lt;/p&gt;
&lt;p&gt;然而最近折腾加速器，实在受不了这帮硬路由的憨憨性能了：明明 ac86u 性能还凑合但内存只有 512m 结果刷了梅林各种问题各种崩，其他 mt7621 就更不用说了。我也考虑其他设备，比如 r2s，s905x 盒子之类的，但&lt;/p&gt;</summary>
    
    
    
    <category term="路由器" scheme="https://zbttl-github-io.vercel.app/categories/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
    
    <category term="羊毛" scheme="https://zbttl-github-io.vercel.app/tags/%E7%BE%8A%E6%AF%9B/"/>
    
    <category term="openwrt" scheme="https://zbttl-github-io.vercel.app/tags/openwrt/"/>
    
    <category term="yyf" scheme="https://zbttl-github-io.vercel.app/tags/yyf/"/>
    
    <category term="n1" scheme="https://zbttl-github-io.vercel.app/tags/n1/"/>
    
  </entry>
  
  <entry>
    <title>windows 开启 openssh-server</title>
    <link href="https://zbttl-github-io.vercel.app/windows-kai-qi-openssh-server/"/>
    <id>https://zbttl-github-io.vercel.app/windows-kai-qi-openssh-server/</id>
    <published>2021-03-16T16:00:00.000Z</published>
    <updated>2021-04-01T14:17:25.840Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章是从<a href="https://zbttl.github.io/azure-yang-mao-er/">azure 羊毛（二） | Bao’s 备忘录</a>这里分离出来的。因为我发现给 windows server 2012 开 openssh 的坑远不及于此，这篇按官方教程来的小实践只能算个引子，于是干脆独立出来。</p><p>在 windows 10 专业版上部署通过。</p><p>参考文章：</p><ul><li><a href="https://docs.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse">Installation of OpenSSH For Windows Server | Microsoft Docs</a></li><li><a href="https://stackoverflow.com/questions/16212816/setting-up-openssh-for-windows-using-public-key-authentication/50502015#50502015">ssh - Setting up OpenSSH for Windows using public key authentication - Stack Overflow</a></li></ul><h2 id="安装，配置服务"><a href="#安装，配置服务" class="headerlink" title="安装，配置服务"></a>安装，配置服务</h2><p>安装</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Add-WindowsCapability -Online -Name OpenSSH.Server</span><br></pre></td></tr></tbody></table></figure><p>配置自启</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Service -Name sshd -StartupType 'Automatic'</span><br></pre></td></tr></tbody></table></figure><p>配置防火墙（其实我一开始是像 rdp 这边用图形界面配置的，结果软软的教程居然给了命令，学到了，主要是写教程方便不用截图 - -）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">New-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 999</span><br></pre></td></tr></tbody></table></figure><p>如果用的是默认 22 端口不改其实可以略过这步。咱不习惯用默认端口就是。</p><p>更改默认命令行程序为 powershell</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">New-ItemProperty -Path "HKLM:\SOFTWARE\OpenSSH" -Name DefaultShell -Value "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe" -PropertyType String -Force</span><br></pre></td></tr></tbody></table></figure><h2 id="修改-sshd-config"><a href="#修改-sshd-config" class="headerlink" title="修改 sshd_config"></a>修改 sshd_config</h2><p>sshd_config 位于 <code>C:\ProgramData\ssh\sshd_config</code></p><p>修改端口</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#Port 22</span><br><span class="line">Port 999</span><br></pre></td></tr></tbody></table></figure><p>注释掉旧版密钥路径</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#Match Group administrators</span><br><span class="line">#       AuthorizedKeysFile __PROGRAMDATA__/ssh/administrators_authorized_keys</span><br></pre></td></tr></tbody></table></figure><p>关闭密码登录</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PasswordAuthentication no</span><br></pre></td></tr></tbody></table></figure><h2 id="放入密钥"><a href="#放入密钥" class="headerlink" title="放入密钥"></a>放入密钥</h2><p>将公钥放到 <code>C:\Users\zbttl\.ssh</code>里面，改名为<code>authorized_keys</code>。别说你看到这里都还没公钥。。。</p><p>可能还要修复公钥的权限。微软官方文章使用的是 opensshutils 这个软件，但这个软件去年就被标记为 deprecated，实在要装只能手动安装，可以参考<a href="https://stackoverflow.com/questions/62873521/powershell-opensshutils">openssh - PowerShell OpenSSHUtils - Stack Overflow</a>，而且参考文章 2 中写明不建议装。</p><p>另外两种方法：</p><ol><li><p>直接用 gui 修改权限。右键<code>authorized_keys</code> -&gt; 属性 -&gt; 安全 -&gt; 高级 -&gt; 禁用继承，在弹出的对话框选择「将已继承权限转换」。然后删掉多余权限，留下 system 和自己目前所用账号的权限就行。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210318041441.png"></p></li><li><p>使用命令</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get-acl C:\Users\zbttl\.ssh\authorized_keys | fl</span><br></pre></td></tr></tbody></table></figure></li></ol><p>我也不知道哪个好用，因为我几年前从 linux 那边生成的公钥文件貌似没有权限问题。。。</p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>启动服务</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Start-Service sshd</span><br></pre></td></tr></tbody></table></figure><p>记得登录的是用户名不是 root 而是当前微软账号或者微软本地用户名。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这篇文章是从&lt;a href=&quot;https://zbttl.github.io/azure-yang-mao-er/&quot;&gt;azure 羊毛（二） | Bao’s 备忘录&lt;/a&gt;这里分离出来的。因为我发现给 windows server 2012 开 openssh 的坑远不及于此，这篇按官方教程来的小实践只能算个引子，于是干脆独立出来。&lt;/p&gt;
&lt;p&gt;在 windows 10 专业版上部署通过。&lt;/p&gt;</summary>
    
    
    
    <category term="Network" scheme="https://zbttl-github-io.vercel.app/categories/Network/"/>
    
    
    <category term="windows" scheme="https://zbttl-github-io.vercel.app/tags/windows/"/>
    
    <category term="openssh" scheme="https://zbttl-github-io.vercel.app/tags/openssh/"/>
    
  </entry>
  
  <entry>
    <title>通过 telegram bot 监控设备的远程登录情况</title>
    <link href="https://zbttl-github-io.vercel.app/tong-guo-telegram-bot-jian-kong-she-bei-de-yuan-cheng-deng-lu-qing-kuang/"/>
    <id>https://zbttl-github-io.vercel.app/tong-guo-telegram-bot-jian-kong-she-bei-de-yuan-cheng-deng-lu-qing-kuang/</id>
    <published>2021-03-16T16:00:00.000Z</published>
    <updated>2021-04-05T19:47:59.078Z</updated>
    
    <content type="html"><![CDATA[<p>之前我先后白嫖了 azure 的 windows server，以及做了 zerotier 用于远控，但前者我提过 3389 端口老是被撞，后者要通过密码和 zerotier 网域两重保险，应该够安全了，但毕竟是把我的主用设备暴露出去，还得更安全一点才行。<br>我听说有些脚本可以登录时从 telegram bot 通知所有者，找了一下，ssh 的和 rdp 的都有，那就一起上了。</p><p>工具：</p><ul><li><a href="https://gist.github.com/LM1LC3N7/b6f98611a1cd425cd5e328f90ed697f6">SSH PAM module - Telegram Alert on connect and disconnect, with IP exceptions.</a></li><li><a href="https://github.com/ihatemodels/rdp-telegram-messenger">ihatemodels/rdp-telegram-messenger: Get instant telegram message when a new rdp connection is established</a></li></ul><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>参考：<a href="https://p3terx.com/archives/aria2-telegram-bot-automatically-uploads-to-google-drive-onedrive.html">Telegram Bot 控制 Aria2 下载并自动上传到 Google Drive、OneDrive - P3TERX ZONE</a></p><h3 id="创建-bot，获取-bot-token"><a href="#创建-bot，获取-bot-token" class="headerlink" title="创建 bot，获取 bot token"></a>创建 bot，获取 bot token</h3><p>访问 telegram bot 管理 bot <a href="https://telegram.me/botfather">@botfather</a>，通过三个步骤就能获得一个 bot：</p><ol><li>输入 <code>/newbot</code>，会询问你 bot 起什么昵称（即 tg 窗口左上角的名字），按自己喜好起就行。</li><li>回车后，会询问你 bot 想起一个什么用户名。以后可以通过用户名来直接找到这个 bot。需要以 Bot 或者 _bot 结尾，同时不可以和已有的 bot 名字冲突，所以这里要起复杂一点。</li><li>然后就能从机器人的回答中获得一串字体颜色为黄色的长长一串 token 了。 顺便回答里面 <code>You will find it at</code> 后面的蓝色链接可以直接通向创建的机器人，先过去 <code>/start</code> 一下，以免待会还要回来找。监测几个 ssh/rdp 就要建立几个 bot，可以建一个，做完建立提醒步骤后再建，也可以先一次建一堆（因为我看 botfather 这边有批量建立的功能，不过我没用过）。</li></ol><h3 id="获取-userid"><a href="#获取-userid" class="headerlink" title="获取 userid"></a>获取 userid</h3><p>进入刚刚获取的其中一个 bot，随便输点东西。</p><p>然后在浏览器中访问 <code>https://api.telegram.org/bot&lt;bot_token&gt;/getUpdates</code>，不同的 bot，bot token 不一样，别填错了。</p><p>不出意料的话，result 中 id 后面跟的数字就是账号的 userid。userid 每个 telegram 账号唯一，获取过一次就不用再获取了。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210317195053.png"></p><p>如果 result 为空，证明离上次和 bot 互动时间相隔太久，重新去 bot 里再输点东西就好。</p><h3 id="获取-chatid"><a href="#获取-chatid" class="headerlink" title="获取 chatid"></a>获取 chatid</h3><p>参考：<a href="https://stackoverflow.com/questions/32423837/telegram-bot-how-to-get-a-group-chat-id">Telegram Bot - how to get a group chat id? - Stack Overflow</a></p><p>仅 rdp 登录提醒需要（因为我找到的 rdp 提醒脚本只能在群内提醒，没法在 bot 里面直接提醒）。</p><ol><li><p>把相应 bot 拉入群中。</p></li><li><p>在群中发一句</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/my_id @my_bot</span><br></pre></td></tr></tbody></table></figure></li><li><p>访问 <code>https://api.telegram.org/bot&lt;bot_token&gt;/getUpdates</code>，在 chat 这个代码块的 id，就是 chatid（带个负号的很显眼）</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210317214415.png"></p></li></ol><p>chatid 每个群唯一，所以也获取一次，然后把所有 rdp 监测 bot 拉到同一个群中就好了。就是建群还需要好友配合这点比较烦（实在不行办个小号呗）。</p><h2 id="linux-ssh-登录提醒"><a href="#linux-ssh-登录提醒" class="headerlink" title="linux ssh 登录提醒"></a>linux ssh 登录提醒</h2><ol><li><p>从参考文章 1 中下载或者复制粘贴源码得到 <a href="https://gist.githubusercontent.com/LM1LC3N7/b6f98611a1cd425cd5e328f90ed697f6/raw/d8149521d0287dd854c9917458899229284e567c/telegram-alert.sh"><code>telegram-alert.sh</code></a></p></li><li><p>修改其中的</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Your USERID or Channel ID to display alert and key, create a new bot with @BotFather on Telegram</span><br><span class="line"># Ask to @IDBot for your id (/getid)</span><br><span class="line">USERID="********"</span><br><span class="line"># Create a new bot with @BotFather and start a new discussion with it</span><br><span class="line">KEY="*********:***********************************"</span><br><span class="line">URL="https://api.telegram.org/bot${KEY}/sendMessage"</span><br></pre></td></tr></tbody></table></figure><p>key 就是 bot token，把我们前期准备获取的两个值填进去。</p></li><li><p>把 <code>telegram-alert.sh</code> 放到被检测机 <code>usr/local/bin</code> 里，加权限</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /usr/local/bin/telegram-alert.sh</span><br></pre></td></tr></tbody></table></figure></li><li><p>在 <code>/etc/pam.d/sshd</code> 新增 <code>session optional pam_exec.so type=open_session seteuid /usr/local/bin/telegram-alert.sh</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "session optional pam_exec.so type=open_session seteuid /usr/local/bin/telegram-alert.sh" &gt;&gt; /etc/pam.d/sshd</span><br></pre></td></tr></tbody></table></figure></li><li><p>（可选）重启 sshd</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></tbody></table></figure></li></ol><p>如果是开启 SELinux 的系统（如 centos），参考文章后面还有两部，我用的是 debian 就不写上来了。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210318004255.png"></p><h2 id="rdp-登录提醒"><a href="#rdp-登录提醒" class="headerlink" title="rdp 登录提醒"></a>rdp 登录提醒</h2><ol><li><p>从参考文章 1 中下载或者复制粘贴源码得到 <a href="https://raw.githubusercontent.com/ihatemodels/rdp-telegram-messenger/master/rdp-telegram.ps1"><code>rdp-telegram.ps1</code></a></p></li><li><p>修改其中的</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$botToken = 'ADD UR TOKEN HERE'</span><br><span class="line">$chatID = 'ADD UR CHAT ID HERE'</span><br></pre></td></tr></tbody></table></figure><p>把我们前期准备获取的两个值填进去。</p></li><li><p>把 <code>rdp-telegram.ps1</code> 放到被检测机里一个好找的地方，我就直接放到我的 user 目录下了 <code>C:\Users\zbttl</code>。</p></li><li><p>按下 win 键，敲入「事件查看器」并打开</p></li><li><p>找到应用程序和服务日志 -&gt; Microsoft -&gt; Windows -&gt; TerminalServices-RemoteConnectionManager。</p></li><li><p>新一点的系统，比如 win10，登录过 rdp 的话在 Admin 这项里面会有 20521 这项代表已登录成功的日志</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210318002631.png"></p><p>旧一些的，比如 windows server 2012 可能就没有。不过旧系统在 operational 这里会有类似 1149 的记录，同样是代表登录成功。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210318002752.png"></p><p>哪个都可以，参考文章中提到的是前一个，然后我发现前一个如果用微软商店的第三方 rdp（名字就叫远程桌面，系统自带的远程桌面遇到屏幕分辨率不一样的情况会拉跨），日志中没提示，所以自行选择。</p><p>右键其中一个包含上面提到的这两种其中一种的记录选择「将任务附加到此事件」。在打开的窗口中，创建基本任务的名字随便取，然后一路下一步来到「启动程序」这一项。程序或脚本，填入 POWERSHELL；添加参数（可选）填入 <code>rdp-telegram.ps1</code> 所在路径（记得打引号），对我来说那就是 <code>"C:\Users\zbttl\rdp-telegram.ps1"</code></p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210318003547.png"></p></li><li><p>完成后，再次按下 win 键，搜索任务计划程序，打开，在任务计划程序库 -&gt; 事件查看器任务处，就能看到我们刚刚创建的任务。选择那个任务，点右侧的属性，在弹出的窗口中看到常规 -&gt; 安全选项，勾选「使用最高权限运行」。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210318004126.png"></p><p>不进行这一步的话，待会在 telegram 群虽然会弹通知，但通知中各项属性的值都是空：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210318004423.png"></p><p>如果显示操作参数错误的话，把上面「只在用户登录时运行」改为「不管用户是否登录都要运行」，然后输入本机账号密码即可。</p><p>另外还建议在设置 -&gt; 如果此任务已运行，改为「停止现有实例」或者「并行运行新实例」，以免网络原因导致前面的任务运行不成功一直卡着。</p></li><li><p>因为被监控机在国内，要给 telegram 发东西的话，你懂得，记得还得是全局代理才行。</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210318011921.png"></p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>两个问题：</p><ol><li>开 rdp 的时候能看见一个 cmd 框框弹出。万一攻击者看到这个框框眼疾手快关掉了，程序没跑完那通知不就过不来了。</li><li>我不赞成时时刻刻开着全局代理。</li></ol><p>解决方法：</p><p>参考</p><ul><li><a href="http://cn.voidcc.com/question/p-vhmweifz-ve.html">如何在静默/隐藏模式下使用任务计划程序运行powershell脚本？ - VoidCC</a></li><li><a href="https://bohemiangrove.co.uk/run-powershell-through-a-proxy/">Run PowerShell through a Proxy | Tech Blog</a></li></ul><p>在 <code>rdp-telegram.ps1</code> 同目录下新建一个 <code>rdp.js</code> 文件。文件内容类似于：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var wshShell = new ActiveXObject("WScript.Shell"); </span><br><span class="line">wshShell.Run('%SystemRoot%\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -ExecutionPolicy Bypass -File "C:\\\Users\\zbttl\\rdp-telegram.ps1"', 0, false); </span><br></pre></td></tr></tbody></table></figure><p>用火绒的，把这个文件加到火绒的信任区里（这都能被当成病毒文件可还行）。</p><p>修改计划任务。回到上面第七步，找到操作，双击启动程序项，程序与脚本修改为 <code>wscript</code>，添加参数修改为 <code>rdp.js</code> 地址，如 <code>"C:\Users\zbttl\rdp.js"</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210318012544.png"></p><p>修改 <code>rdp-telegram.ps1</code>，加入两行</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[system.net.webrequest]::defaultwebproxy = new-object system.net.webproxy('[代理地址]')</span><br><span class="line">[system.net.webrequest]::defaultwebproxy.BypassProxyOnLocal = $true</span><br></pre></td></tr></tbody></table></figure><p>代理地址这里，格式为 <code>http://127.0.0.1:7890</code> 这样。</p><p>即可。</p><p>（这样设置和全局代理也不冲突，不用担心 loopback）</p><p><strong>（21.4.2 更新）</strong> vps 上的 windows server 中无需关心代理问题，也不需要进计划任务中开启管理员模式运行。不过又出现了限制网址访问的问题。具体来说是这样，开 ie 浏览网页的时候经常就会弹这个网页不在信任列表中，是否加入信任列表并访问。对于我们的 ps1 脚本来说，就需要把其中的 <code>*.telegram.org</code> 加入信任列表中，否则就连不上 api 发不出讯息。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前我先后白嫖了 azure 的 windows server，以及做了 zerotier 用于远控，但前者我提过 3389 端口老是被撞，后者要通过密码和 zerotier 网域两重保险，应该够安全了，但毕竟是把我的主用设备暴露出去，还得更安全一点才行。&lt;br&gt;我听说有些脚本可以登录时从 telegram bot 通知所有者，找了一下，ssh 的和 rdp 的都有，那就一起上了。&lt;/p&gt;
&lt;p&gt;工具：&lt;/p&gt;</summary>
    
    
    
    <category term="Network" scheme="https://zbttl-github-io.vercel.app/categories/Network/"/>
    
    
    <category term="telegram bot" scheme="https://zbttl-github-io.vercel.app/tags/telegram-bot/"/>
    
    <category term="windows server" scheme="https://zbttl-github-io.vercel.app/tags/windows-server/"/>
    
    <category term="计划任务" scheme="https://zbttl-github-io.vercel.app/tags/%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/"/>
    
    <category term="ssh" scheme="https://zbttl-github-io.vercel.app/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>玩一下 zerotier</title>
    <link href="https://zbttl-github-io.vercel.app/wan-yi-xia-zerotier/"/>
    <id>https://zbttl-github-io.vercel.app/wan-yi-xia-zerotier/</id>
    <published>2021-03-14T16:00:00.000Z</published>
    <updated>2021-05-22T06:58:29.501Z</updated>
    
    <content type="html"><![CDATA[<p>之前咱玩过 frp，主要用于远程操作家里的电脑。这东西方便是方便，但用了一段时间看了看日志，好家伙被扫了几百遍。。。。毕竟对外就一个端口一个密码，实话说，不太安全（前几个月还看见 v2ex 因为 frp 导致公司电脑被勒索，后面不知道咋样了）。</p><p>类似的工具，纯粹的 ddns 类工具效果和 frp 一样；wireguard 之类的工具，倒是需要先通过工具连进对等网络才能去链接 rdp 等服务，安全了不少，但缺点是要配置分流；最后我看中了 zerotier，也是需要先通过工具连进对等网络，不过不用配置分流，也有网页端 ui 方便配置，还可以软件本身提供的中心节点，速度慢可以靠自建的 moon 中继节点加速，不太好的地方就是开源不完全，以及另外俩待会我会提到的缺点。都还可以接受，暂时用着呗。</p><p>步骤就偷懒记简略点。</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>参考文章：<a href="https://www.cnblogs.com/Yogile/p/12502311.html">ZeroTier 内网穿透 - Yogile - 博客园</a></p><p>大部分应用场景都是我用手机（安卓）/ 轻薄本连回家中的游戏本，所以先尝试把他们连起来。</p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>安卓端直接通过 <a href="https://play.google.com/store/apps/details?id=com.zerotier.one">google play</a> 下载同名应用。</p><p>windows 可以通过<a href="https://www.zerotier.com/download/">官网下载</a>安装，不过这玩意 chocolatey 里面也有，直接省事一个命令下去：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install zerotier-one -y</span><br></pre></td></tr></tbody></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在 <a href="https://my.zerotier.com/">zerotier 首页</a>注册登录，创建网络（Create a Network）。</p><p>在 Managed Routes 中，按自己的喜好设置一个网段（CIDR 格式，也就是 x.x.x.x/24 这样），待会自己设备可以分配到位于这个网段内的地址。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210315233647.png"></p><p>剩下的就可以不管了，好奇的话可以看参考文章。</p><h3 id="加入"><a href="#加入" class="headerlink" title="加入"></a>加入</h3><p>有两种方法。</p><ol><li>将客户端中的 nodeid 填入 web 端的 Manually Add Member 中；</li><li>使用客户端的 Join Network 功能，将 web 端的 Network ID 填入。</li></ol><p>把手机和游戏本都 join 进来以后，在 web 端里面就能看到它们了。把最左边的勾打上，修改一下 ip 方便记忆。</p><p><strong>（21.5.22 更新）</strong> 把 ipad 也加进来了，但和 android/pc 秒开秒认证不同，ios 我足足开着十来分钟下面的 web 才有认证设备出现（此时屏幕右上角 vpn 图标不出现），认证完再开等了半分钟 vpn 图标才出来，emmm。。。看商店里面，自 4 月份开始的四五条评论都给了 ios 版一星，原因都是获取不到 ip，这应该是个 bug。</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210316011848.png"></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>此时 pc 和安卓同时启用客户端，web 这边的 last seen 就会显示 online（像上图一样）。打开安卓的 rdp 客户端，通过刚刚我们修改的 pc 端的 ip（以上图为例，假设下面那一个是 pc 的客户端，没修改 ip 的话，pc 在 zerotier 内网中 ip 就为 <code>10.10.10.181</code>，把这个 ip 输入到 rdp 的地址栏中）。</p><p>如果我没猜错的话。。。应该连不上~</p><p>这就是 zerotier 的<strong>缺点</strong>之一，连上 vpn 后，要过一会才能成功建立链接，这个时间或长或短，应该得要几分钟。几分钟后，再次链接，应该就能上了。如果还不能上，关闭 windows 的防火墙，尝试用 termux ping 一下 <code>10.10.10.181</code>，排查一下是 zerotier 的问题还是自己配置的问题。</p><h2 id="通过路由（ac86u）转发"><a href="#通过路由（ac86u）转发" class="headerlink" title="通过路由（ac86u）转发"></a>通过路由（ac86u）转发</h2><p>相比于让 pc 把所有端口全都交出去，我更希望通过路由器只把我想要放到外网的端口透出去。本节只适用于 merlin 和 merlin 改，官改未知，原厂肯定 8 行。</p><p>参考文章：</p><ul><li><a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=310110">梅林安装zerotier实现内网穿透 - 梅林固件 - 恩山无线论坛 - Powered by Discuz!</a></li><li><a href="https://www.snbforums.com/threads/a-guide-about-installing-zerotier-on-asus-ac68u-router.42648/">A Guide About Installing ZeroTier on ASUS AC68U Router | SmallNetBuilder Forums</a></li></ul><h3 id="安装-zerotier"><a href="#安装-zerotier" class="headerlink" title="安装 zerotier"></a>安装 zerotier</h3><h4 id="安装-opkg"><a href="#安装-opkg" class="headerlink" title="安装 opkg"></a>安装 opkg</h4><p>拿个 u 盘 / tf 卡插路由器上，进入 ssh，输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">entware-setup.sh</span><br></pre></td></tr></tbody></table></figure><p>根据提示，安装  opkg。</p><p>然后安装 zerotier</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install zerotier</span><br></pre></td></tr></tbody></table></figure><h3 id="加入-1"><a href="#加入-1" class="headerlink" title="加入"></a>加入</h3><p>启用 tun</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modprobe tun</span><br></pre></td></tr></tbody></table></figure><p>启动 zerotier</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zerotier-one -d</span><br></pre></td></tr></tbody></table></figure><p>仍旧是两种加入方法，一种是获取 nodeid，填到 web 中</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zerotier-cli info</span><br></pre></td></tr></tbody></table></figure><p>另一种是直接在客户端通过 Network ID 加入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zerotier-cli join &lt;your network id&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h3><p>看一眼自己路由器 INPUT 里有几条规则</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -v -L INPUT -n --line-numbers</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210316023446.png"></p><p>16 条，很好。于是我们下面命令 INPUT 后面这个数字就设为 17。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT 17 -i zt+ -j ACCEPT</span><br></pre></td></tr></tbody></table></figure><p>配置完记得用前一条命令确认一下。</p><p>新建 <code>S90zerotier-one.sh</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /opt/etc/init.d/S90zerotier-one.sh</span><br></pre></td></tr></tbody></table></figure><p>内容为</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#! /bin/sh</span><br><span class="line"></span><br><span class="line">case "$1" in</span><br><span class="line">start)</span><br><span class="line">if lsmod | grep -q tun ;</span><br><span class="line">then echo "mod tun ready" ;</span><br><span class="line">else</span><br><span class="line">modprobe tun;</span><br><span class="line">logger -t "zerotier" -c "modprobe tun started, zerotier-one should start in one minute" -p user.notice ;</span><br><span class="line">exit 0;</span><br><span class="line">fi</span><br><span class="line">if ( pidof zerotier-one )</span><br><span class="line">then echo "ZeroTier-One is already running."</span><br><span class="line">else</span><br><span class="line">echo "Starting ZeroTier-One" ;</span><br><span class="line">/opt/bin/zerotier-one -d ;</span><br><span class="line">echo "$(date) ZeroTier-One Started" | logger -t "zerotier" -c "Started" -p user.notice ; #&gt;&gt; /opt/var/log/zerotier-one.log ;</span><br><span class="line">fi</span><br><span class="line">;;</span><br><span class="line">stop)</span><br><span class="line">if ( pidof zerotier-one )</span><br><span class="line">then</span><br><span class="line">echo "Stopping ZeroTier-One";</span><br><span class="line">killall zerotier-one</span><br><span class="line">echo "$(date) ZeroTier-One Stopped" | logger -t "zerotier" -c "Stopped" -p user.notice ; #&gt;&gt; /opt/var/log/zerotier-one.log</span><br><span class="line">else</span><br><span class="line">echo "ZeroTier-One was not running" ;</span><br><span class="line">fi</span><br><span class="line">;;</span><br><span class="line">status)</span><br><span class="line">if ( pidof zerotier-one )</span><br><span class="line">then echo "ZeroTier-One is running."</span><br><span class="line">else echo "ZeroTier-One is NOT running"</span><br><span class="line">fi</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo "Usage: /etc/init.d/zerotier-one {start|stop|status}"</span><br><span class="line">exit 1</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">exit 0</span><br></pre></td></tr></tbody></table></figure><p>给上权限</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /opt/etc/init.d/S90zerotier-one.sh</span><br></pre></td></tr></tbody></table></figure><p>然后用这个刚写的脚本重启 zerotier</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/opt/etc/init.d/S90zerotier-one.sh stop</span><br><span class="line">zerotier-one -d</span><br></pre></td></tr></tbody></table></figure><p>配置端口透穿</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -d [路由器在zerotierweb中的ip] -p tcp --dport [透穿的端口] -j DNAT --to-destination [透穿服务所在设备的内网ip]:[透穿的服务的内网端口]</span><br></pre></td></tr></tbody></table></figure><p>打个比方：在 web 端中我们设置路由的 zerotier 局域网 ip 为 <code>10.10.10.150</code>；pc 通过 <code>ipconfig</code> 命令获取到自己的内网 ip 为 <code>192.168.1.2</code>，要透穿出去的服务是 rdp，所以内网端口为 3389；为了安全，透到外网的端口不用 3389 而是 4389，则：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -d 10.10.10.150 -p tcp --dport 4389 -j DNAT --to-destination 192.168.1.2:3389</span><br></pre></td></tr></tbody></table></figure><p>如果要透穿出去的内网端口无需和外网端口不一致，那么可以同时透穿多个端口。举个例子，如果你用 teamviewer 提供的默认隧道来远程操纵，这玩意平日里就会整天弹仅用于非商业用途的提示，有时候还会提醒你只能用 x 分钟就强制下线。改为仅在内网提供远程服务器的 lan 模式，隧道通过 zerotier 进行转发连接，就一切正常。teamviewer 只支持使用 5938 端口，不像 rdp 地址栏里面跟个新端口号就算改端口了；同时 teamviewer 在某些情况下还会走 443 和 80 端口，所以这两个端口最好也开放出来。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -d 10.10.10.150 -p tcp --m multiport --dport 5938,443,80 -j DNAT --to-destination 192.168.1.2</span><br></pre></td></tr></tbody></table></figure><hr><p>什么你说有了 rdp 为什么还要用 teamviewer？那我就偏个题：</p><ul><li>teamviewer 除非安装它提供的驱动或者你关闭物理显示器，否则远控的时候屏幕是亮着的；rdp 需要通过微软账户访问，除非你电脑里还有其他账号（而且你远控过来多半还是要操作你原来账号的内容），否则电脑屏幕是黑着的。</li><li>因此，远控的时候如果放个视频什么的，被远控的 teamviewer 设备也会发出声音，rdp 设备就不会。</li><li>rdp 远控不支持使用独显，teamviewer 支持。</li></ul><p>另外，如果先使用 rdp 远控，后续没有回到实机解锁就用 teamviewer 远控，那么 teamviewer 远控时会看到密码输入界面，输入密码后会黑屏。此时按一下 WIN+L 就会恢复正常，不想单独开篇文章记了，就放在这里吧。</p><hr><p>配置完确认一下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -n -t nat -L PREROUTING --line-numbers</span><br></pre></td></tr></tbody></table></figure><p>此时用手机 rdp 通过 <code>10.10.10.150:4389</code> 应该就能访问过来了。（同样开开 zerotier 后要等几分钟）</p><h3 id="配置自启"><a href="#配置自启" class="headerlink" title="配置自启"></a>配置自启</h3><p>编辑文件 <code>/jffs/scripts/nat-start</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /jffs/scripts/nat-start</span><br></pre></td></tr></tbody></table></figure><p>加入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modprobe tun</span><br></pre></td></tr></tbody></table></figure><p>编辑文件 <code>/jffs/scripts/wan-start</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /jffs/scripts/wan-start</span><br></pre></td></tr></tbody></table></figure><p>加入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cru a ZeroTierDaemon "* * * * * /opt/etc/init.d/S90zerotier-one.sh start"</span><br></pre></td></tr></tbody></table></figure><p>新建文件 <code>/jffs/scripts/firewall-start</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /jffs/scripts/firewall-start</span><br></pre></td></tr></tbody></table></figure><p>内容为：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">logger -t "custom iptables" "Enter" -p user.notice</span><br><span class="line">iptables -C INPUT -i zt+ -j ACCEPT</span><br><span class="line">if [ $? != 0 ]; then</span><br><span class="line">iptables -I INPUT -i zt+ -j ACCEPT</span><br><span class="line">#需修改</span><br><span class="line">iptables -t nat -A PREROUTING -d 10.10.10.150 -p tcp --dport 4389 -j DNAT --to-destination 192.168.1.2:3389</span><br><span class="line">iptables -t nat -A PREROUTING -d 10.10.10.150 -p tcp --m multiport --dport 5938,443,80 -j DNAT --to-destination 192.168.1.2</span><br><span class="line">#修改到此</span><br><span class="line">logger -t "custom iptables" "rules added" -p user.notice</span><br><span class="line">else</span><br><span class="line">logger -t "custom iptables" "rules existed skip" -p user.notice</span><br><span class="line">fi</span><br></pre></td></tr></tbody></table></figure><p>标注为需修改到修改到此的中间两句，按使用者个人需求进行替换，在上面配置防火墙 -&gt; 配置端口透穿中，写了多少句，就加多少句进来。</p><h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><p>配置完直接重启检查。通过</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -v -L INPUT -n --line-numbers</span><br><span class="line">iptables -n -t nat -L PREROUTING --line-numbers</span><br></pre></td></tr></tbody></table></figure><p>若是出现了 zt+ 接口和端口透穿相关语句，且</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zerotier-cli info</span><br></pre></td></tr></tbody></table></figure><p>显示正常启用，则配置成功。</p><h2 id="配置-moon-节点"><a href="#配置-moon-节点" class="headerlink" title="配置 moon 节点"></a>配置 moon 节点</h2><p>参考文章：</p><ul><li><a href="https://www.cnblogs.com/Yogile/p/12642423.html">ZeroTier 搭建 moon 服务器 - Yogile - 博客园</a></li><li><a href="https://blog.csdn.net/coldboy258/article/details/93133860">ZeroTier-One配置moon心得_coldboy258的专栏-CSDN博客</a></li></ul><h3 id="安装-zerotier-并加入节点"><a href="#安装-zerotier-并加入节点" class="headerlink" title="安装 zerotier 并加入节点"></a>安装 zerotier 并加入节点</h3><p>我这边装 moon 节点的 vps 系统是 debian，apt 仓库里没有 zerotier。得用 zerotier 官网的官方脚本：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s https://install.zerotier.com | sudo bash</span><br></pre></td></tr></tbody></table></figure><p>默认安装后即启动 zerotier，下面这句命令会报错。不过为了防止万一 zerotier 没启动，还是运行一遍为好</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zerotier-one -d</span><br></pre></td></tr></tbody></table></figure><p>加入方法不再赘述。</p><h3 id="配置-moon-节点-1"><a href="#配置-moon-节点-1" class="headerlink" title="配置 moon 节点"></a>配置 moon 节点</h3><p>进入 zerotier 配置文件目录。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /var/lib/zerotier-one</span><br></pre></td></tr></tbody></table></figure><p>生成 moon.json 签名文件。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zerotier-idtool initmoon identity.public &gt;&gt;moon.json</span><br></pre></td></tr></tbody></table></figure><p>编辑</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano moon.json</span><br></pre></td></tr></tbody></table></figure><p> 修改 <code>stableEndpoints</code>，在里面填上一个 CIDR 地址，比如（如果有 ipv6 需求可看参考文章进行修改）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"stableEndpoints": ["1.2.3.4/9993"]</span><br></pre></td></tr></tbody></table></figure><p>另外，记下此处 id 的值。</p><p>生成 moon 签名文件</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zerotier-idtool genmoon moon.json</span><br></pre></td></tr></tbody></table></figure><p>如无意外会显示：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wrote xxx.moon (signed world with timestamp xxx)</span><br></pre></td></tr></tbody></table></figure><p>将文件考入 moon 节点文件夹中</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/lib/zerotier-one/moons.d</span><br><span class="line">cp *.moon moons.d/</span><br><span class="line">rm *.moon</span><br></pre></td></tr></tbody></table></figure><p>重启服务</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service zerotier-one restart </span><br></pre></td></tr></tbody></table></figure><p>即可。</p><h3 id="连结-moon-节点"><a href="#连结-moon-节点" class="headerlink" title="连结 moon 节点"></a>连结 moon 节点</h3><p>在其他节点（非 moon 节点）使用命令</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zerotier-cli orbit [moonID] [moonID]</span><br></pre></td></tr></tbody></table></figure><p>moonID 是上面让记过的那个。另外，这里的确是输入两遍 moonID，你没有看错。。。</p><p>再输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zerotier-cli listpeers</span><br></pre></td></tr></tbody></table></figure><p>发现多了一个行末为 moon 结尾的行即成功。</p><p>另一个方法是把刚刚获得的 moon 文件考下来放入指定目录，且据说这个方法相对输入命令的方法有一个好处，若是 planet 节点崩掉（虽然可能性很小），通过 moon 节点仍能维持正常工作，输入命令那个方法就不行。但 ac86u 里没有放这个文件的地方，所以我没做尝试。</p><h3 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h3><ol><li><p>如果 moon 节点更换了 zerotier ip，在通过 <code>zerotier-cli listpeers</code> 会发现 moon 节点 ip 缺失。有可能要重新生成 moon 文件，或者停止 zerotier 服务后过若干分钟再启动即可解决。</p></li><li><p>另一个，也是 zerotier 目前<strong>最大的缺点</strong>：安卓不支持使用 moon 节点。apk 没有这个功能，也没有目录放置 moon 节点文件的地方。改用二进制文件呢？发现 termux 没有渠道来安装 zerotier（各个库中没有，官网的安装脚本不支持），手工编译报错：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/Screenshot_20210315-194925.png"></p><p>且 issue 中有同样的问题：<a href="https://github.com/zerotier/ZeroTierOne/issues/1218">ZeroTierOne/node at master · zerotier/ZeroTierOne</a></p><p>维护者表示我们不支持除了 apk 以外的安卓使用方法。</p><p>没辙，差评.jpg</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前咱玩过 frp，主要用于远程操作家里的电脑。这东西方便是方便，但用了一段时间看了看日志，好家伙被扫了几百遍。。。。毕竟对外就一个端口一个密码，实话说，不太安全（前几个月还看见 v2ex 因为 frp 导致公司电脑被勒索，后面不知道咋样了）。&lt;/p&gt;
&lt;p&gt;类似的工具，纯粹的 ddns 类工具效果和 frp 一样；wireguard 之类的工具，倒是需要先通过工具连进对等网络才能去链接 rdp 等服务，安全了不少，但缺点是要配置分流；最后我看中了 zerotier，也是需要先通过工具连进对等网络，不过不用配置分流，也有网页端 ui 方便配置，还可以软件本身提供的中心节点，速度慢可以靠自建的 moon 中继节点加速，不太好的地方就是开源不完全，以及另外俩待会我会提到的缺点。都还可以接受，暂时用着呗。&lt;/p&gt;</summary>
    
    
    
    <category term="Network" scheme="https://zbttl-github-io.vercel.app/categories/Network/"/>
    
    
    <category term="zerotier" scheme="https://zbttl-github-io.vercel.app/tags/zerotier/"/>
    
    <category term="rdp" scheme="https://zbttl-github-io.vercel.app/tags/rdp/"/>
    
    <category term="teamviewer" scheme="https://zbttl-github-io.vercel.app/tags/teamviewer/"/>
    
    <category term="端口透穿" scheme="https://zbttl-github-io.vercel.app/tags/%E7%AB%AF%E5%8F%A3%E9%80%8F%E7%A9%BF/"/>
    
  </entry>
  
  <entry>
    <title>服务器探针与流量重置</title>
    <link href="https://zbttl-github-io.vercel.app/fu-wu-qi-tan-zhen-yu-liu-liang-chong-zhi/"/>
    <id>https://zbttl-github-io.vercel.app/fu-wu-qi-tan-zhen-yu-liu-liang-chong-zhi/</id>
    <published>2021-03-10T16:00:00.000Z</published>
    <updated>2021-06-06T10:05:02.543Z</updated>
    
    <content type="html"><![CDATA[<p>之前薅了 azure 的羊毛，想想每个月 15g 流量，还是挂个探针吧。我之前一直在用 <a href="https://github.com/cppla/ServerStatus">cppla/ServerStatus: 云探针、多服务器探针、云监控、多服务器云监控，演示： https://tz.cloudcpp.com/</a>，因为它可以通过定时连接三网官网去探测服务器的延迟，好多画风更棒的探针都没这个功能（但准不准就不知道了，起码每天测出来的数据都是电信爆炸，这个我觉得是准的）。</p><h2 id="ServerStatus-安装"><a href="#ServerStatus-安装" class="headerlink" title="ServerStatus 安装"></a>ServerStatus 安装</h2><p>需要一台安装了 docker ，拥有公网 ip 的探针面板机，我选择装在境内的 tx 云学生机上，等过期了可能就装到家里的 n1 上然后靠 frp 端口透穿（</p><h3 id="面板机配置"><a href="#面板机配置" class="headerlink" title="面板机配置"></a>面板机配置</h3><p>下载配置文件，我习惯在 root 下单开文件夹：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /root/docker-compose/serverstatus</span><br><span class="line">cd /root/docker-compose/serverstatus</span><br><span class="line">wget https://raw.githubusercontent.com/cppla/ServerStatus/master/autodeploy/config.json</span><br></pre></td></tr></tbody></table></figure><p>并修改。默认配置文件中有四个文件块，对应着四个服务器，如果你手上没那么多 vps，可以酌情增减。抽出其中一个文件块来看。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">"username": "s01", #待会在客户端服务器中设置的用户名</span><br><span class="line">"name": "node1", #在 web 面板中显示的节点名</span><br><span class="line">"type": "xen", #在 web 面板中显示的服务器系统类型</span><br><span class="line">"host": "host1", #没啥用，作者在issue中说单纯为了区分用</span><br><span class="line">"location": "cn", #在 web 面板中显示的服务器地区</span><br><span class="line">"password": "USER_DEFAULT_PASSWORD" #待会在客户端服务器中设置的密码</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>设置好后，运行（80 port 太多东西占了，先调到 100 去）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always --name=serverstatus -v /root/docker-compose/serverstatus/config.json:/ServerStatus/server/config.json -p 100:80 -p 35601:35601 cppla/serverstatus</span><br></pre></td></tr></tbody></table></figure><h3 id="客户机配置"><a href="#客户机配置" class="headerlink" title="客户机配置"></a>客户机配置</h3><p>debian 默认带 python2，不用装了。直接下载（假设直接下到 <code>/root </code> 下）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -qO client-linux.py 'https://raw.githubusercontent.com/cppla/ServerStatus/master/clients/client-linux.py'</span><br></pre></td></tr></tbody></table></figure><p>运行：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python client-linux.py SERVER=[宿主服务器ip] USER=[宿主机配置中对应代码块的用户名] PASSWORD=[宿主机配置中对应代码块的密码]</span><br></pre></td></tr></tbody></table></figure><p>如果显示 <code>ipv4 granted</code> 之类的消息，那就证明连接正常。然后做后台运行和自启，请出老朋友 supervisor。</p><p>安装</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install supervisor -y</span><br></pre></td></tr></tbody></table></figure><p>新建文件 <code>tanzhen.conf</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[program:tanzhen]</span><br><span class="line">user=root</span><br><span class="line">command=python client-linux.py SERVER=[宿主服务器ip] USER=[宿主机配置中对应代码块的用户名] PASSWORD=[宿主机配置中对应代码块的密码]</span><br><span class="line">autostart=true</span><br><span class="line">redirect_stderr = true</span><br><span class="line">stdout_logfile_maxbytes = 1MB </span><br><span class="line">stdout_logfile = /tmp/tanzhen.log</span><br></pre></td></tr></tbody></table></figure><p>放入 <code>/etc/supervisor/conf.d</code> 中。重载配置：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl reload</span><br></pre></td></tr></tbody></table></figure><p>访问 <code>[面板机ip]:100</code>，正常的话就能看到客户端已连接。</p><hr><p>这么配置，总流量是找 <code>/proc/net/dev</code> 要的，于是出现两个问题：</p><ol><li>重启后流量显示重置</li><li>每月重置流量没法实现</li></ol><p>项目 issue <a href="https://github.com/cppla/ServerStatus/issues/54">服务器流量统计怎么清零 · Issue #54 · cppla/ServerStatus</a> 里面，作者建议用 vnstat 来探测流量。</p><h2 id="vnstat-探测流量与流量重置"><a href="#vnstat-探测流量与流量重置" class="headerlink" title="vnstat 探测流量与流量重置"></a>vnstat 探测流量与流量重置</h2><h3 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h3><p>安装 vnstat</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install vnstat</span><br></pre></td></tr></tbody></table></figure><p>安装后重启一遍服务，以网络获取接口情况；或者直接新建接口。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service vnstat restart</span><br><span class="line">#上面这个命令或者下面这个命令，二选一，假设网卡名为 eth0</span><br><span class="line">#vnstat --create -i eth0</span><br></pre></td></tr></tbody></table></figure><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vnstat -q</span><br></pre></td></tr></tbody></table></figure><p>出现类似</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210311143837.png"></p><p>就算成功。因为 5 分钟才刷新一次流量显示，所以 5 分钟后再次输入 <code>vnstat -q</code> 才会有正确的流量数据出现。类似于：</p><p><img src="https://cdn.jsdelivr.net/gh/zbpicture/picture@main/img/20210311144006.png"></p><p>当然，如果等的不耐烦，也可以直接输入 <code>vnstat -u</code> 手动刷新流量显示值，然后输入 <code>vnstat -q</code> 查看。</p><h3 id="整合进探针中"><a href="#整合进探针中" class="headerlink" title="整合进探针中"></a>整合进探针中</h3><p>编辑探针客户端的 <code>client.py</code> 文件。</p><p>将</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">def liuliang():</span><br><span class="line">    NET_IN = 0</span><br><span class="line">    NET_OUT = 0</span><br><span class="line">    with open('/proc/net/dev') as f:</span><br><span class="line">        for line in f.readlines():</span><br><span class="line">            netinfo = re.findall('([^\s]+):[\s]{0,}(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)', line)</span><br><span class="line">            if netinfo:</span><br><span class="line">                if netinfo[0][0] == 'lo' or 'tun' in netinfo[0][0] \</span><br><span class="line">                        or 'docker' in netinfo[0][0] or 'veth' in netinfo[0][0] \</span><br><span class="line">                        or 'br-' in netinfo[0][0] or 'vmbr' in netinfo[0][0] \</span><br><span class="line">                        or 'vnet' in netinfo[0][0] or 'kube' in netinfo[0][0] \</span><br><span class="line">                        or netinfo[0][1]=='0' or netinfo[0][9]=='0':</span><br><span class="line">                    continue</span><br><span class="line">                else:</span><br><span class="line">                    NET_IN += int(netinfo[0][1])</span><br><span class="line">                    NET_OUT += int(netinfo[0][9])</span><br><span class="line">    return NET_IN, NET_OUT</span><br></pre></td></tr></tbody></table></figure><p>替换为</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def liuliang():</span><br><span class="line">NET_IN = 0</span><br><span class="line">NET_OUT = 0</span><br><span class="line">vnstat=os.popen('vnstat --dumpdb').readlines()</span><br><span class="line">for line in vnstat:</span><br><span class="line">if line[0:4] == "m;0;":</span><br><span class="line">mdata=line.split(";")</span><br><span class="line">NET_IN=int(mdata[3])*1024*1024</span><br><span class="line">NET_OUT=int(mdata[4])*1024*1024</span><br><span class="line">break</span><br><span class="line">return NET_IN, NET_OUT</span><br></pre></td></tr></tbody></table></figure><p>重载 supervisor 即可生效。</p><p><strong>（21.3.31 更新）</strong> 在某些系统（比如 ubuntu 中），安装的 vnstat 版本不是 v1.x 而是新的 v2.x，剔除了 <code>vnstat --dumpdb</code> 这个命令导致上面这行代码无法工作。需要更换为：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><b